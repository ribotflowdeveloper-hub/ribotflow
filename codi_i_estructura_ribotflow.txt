ESTRUCTURA DEL PROJECTE (./src)

├── app
│   ├── actions
│   │   ├── chatbotActions.ts
│   │   ├── invitationActions.ts
│   │   ├── localeActions.ts
│   │   └── tasks
│   │       └── actions.ts
│   ├── api
│   │   ├── chatbot
│   │   │   └── route.ts
│   │   ├── oauth
│   │   │   └── callback
│   │   │       └── [provider]
│   │   │           └── route.ts
│   │   └── sync-imap
│   │       └── route.ts
│   ├── globals.css
│   ├── layout.tsx
│   ├── page.tsx
│   └── [locale]
│       ├── (app)
│       │   ├── comunicacio
│       │   │   ├── inbox
│       │   │   │   ├── actions.ts
│       │   │   │   ├── page.tsx
│       │   │   │   ├── _components
│       │   │   │   │   ├── ComposeDialog.tsx
│       │   │   │   │   ├── ContactPanel.tsx
│       │   │   │   │   ├── EmailEditorToolbar.tsx
│       │   │   │   │   ├── InboxClient.tsx
│       │   │   │   │   ├── InboxData.tsx
│       │   │   │   │   ├── InboxSkeleton.tsx
│       │   │   │   │   ├── MobileDetailView.tsx
│       │   │   │   │   ├── SafeEmailRenderer.tsx
│       │   │   │   │   ├── TicketDetail.tsx
│       │   │   │   │   └── ticketList
│       │   │   │   │       ├── index.tsx
│       │   │   │   │       ├── TicketListFilters.tsx
│       │   │   │   │       ├── TicketListHeader.tsx
│       │   │   │   │       └── TicketListItem.tsx
│       │   │   │   └── _hooks
│       │   │   │       ├── useCompose.ts
│       │   │   │       ├── useInbox.ts
│       │   │   │       ├── useInboxComputed.ts
│       │   │   │       ├── useInboxStateAndFilter.ts
│       │   │   │       ├── useTicketData.ts
│       │   │   │       └── useURLSync.ts
│       │   │   ├── marketing
│       │   │   │   ├── actions.ts
│       │   │   │   ├── page.tsx
│       │   │   │   ├── _components
│       │   │   │   │   ├── AICampaignWizard.tsx
│       │   │   │   │   ├── CampaignCalendar.tsx
│       │   │   │   │   ├── CampaignDetailDialog.tsx
│       │   │   │   │   ├── CampaignList.tsx
│       │   │   │   │   ├── marketing-client.tsx
│       │   │   │   │   ├── MarketingData.tsx
│       │   │   │   │   ├── MarketingSkeleton.tsx
│       │   │   │   │   ├── MetricCard.tsx
│       │   │   │   │   └── wizard
│       │   │   │   │       ├── WizardStep1_Goal.tsx
│       │   │   │   │       ├── WizardStep2_SelectStrategy.tsx
│       │   │   │   │       └── WizardStep3_Finalize.tsx
│       │   │   │   └── _hooks
│       │   │   │       ├── useAICampaignWizard.ts
│       │   │   │       └── useMarketing.ts
│       │   │   ├── planificador
│       │   │   │   ├── actions.ts
│       │   │   │   ├── page.tsx
│       │   │   │   ├── types.ts
│       │   │   │   ├── _components
│       │   │   │   │   ├── CreatePostDialog.tsx
│       │   │   │   │   ├── PostCard.tsx
│       │   │   │   │   ├── PostPreview.tsx
│       │   │   │   │   ├── SchedulePostDialog.tsx
│       │   │   │   │   ├── SocialPlannerClient.tsx
│       │   │   │   │   └── ViewPostDialog.tsx
│       │   │   │   └── _hooks
│       │   │   │       ├── useCreatePost.ts
│       │   │   │       └── useSocialPlanner.ts
│       │   │   └── templates
│       │   │       ├── actions.ts
│       │   │       ├── page.tsx
│       │   │       ├── _components
│       │   │       │   ├── TemplateEditor.tsx
│       │   │       │   ├── TemplateList.tsx
│       │   │       │   ├── templates-client.tsx
│       │   │       │   ├── TemplatesData.tsx
│       │   │       │   ├── TemplatesSkeleton.tsx
│       │   │       │   └── TemplateVariables.tsx
│       │   │       └── _hooks
│       │   │           └── useTemplates.ts
│       │   ├── crm
│       │   │   ├── activitats
│       │   │   │   ├── page.tsx
│       │   │   │   └── _components
│       │   │   │       ├── activitats-client.tsx
│       │   │   │       ├── ActivitiesData.tsx
│       │   │   │       └── ActivitiesSkeleton.tsx
│       │   │   ├── calendari
│       │   │   │   ├── actions.ts
│       │   │   │   ├── page.tsx
│       │   │   │   ├── _components
│       │   │   │   │   ├── calendar-custom.css
│       │   │   │   │   ├── CalendarClient.tsx
│       │   │   │   │   ├── CalendarData.tsx
│       │   │   │   │   ├── CalendarSkeleton.tsx
│       │   │   │   │   ├── CalendarSkeletonEvent.tsx
│       │   │   │   │   ├── CalendarToolbar.tsx
│       │   │   │   │   ├── EmailDetailDialog.tsx
│       │   │   │   │   └── QuoteDetailDialog.tsx
│       │   │   │   └── _hooks
│       │   │   │       ├── calendarFetch.ts
│       │   │   │       ├── calendarHelpers.ts
│       │   │   │       ├── calendarMapEvents.ts
│       │   │   │       ├── useCalendar.tsx
│       │   │   │       ├── useCalendarController.ts
│       │   │   │       └── useCalendarDialog.ts
│       │   │   ├── contactes
│       │   │   │   ├── actions.ts
│       │   │   │   ├── page.tsx
│       │   │   │   ├── [contactId]
│       │   │   │   │   ├── actions.ts
│       │   │   │   │   ├── page.tsx
│       │   │   │   │   ├── _components
│       │   │   │   │   │   ├── contact-detail-client.tsx
│       │   │   │   │   │   ├── ContactDetailData.tsx
│       │   │   │   │   │   ├── ContactDetailHeader.tsx
│       │   │   │   │   │   ├── ContactDetailSkeleton.tsx
│       │   │   │   │   │   ├── ContactDetailTabs.tsx
│       │   │   │   │   │   ├── DeleteConfirmationDialog.tsx
│       │   │   │   │   │   ├── EditableField.tsx
│       │   │   │   │   │   ├── shared
│       │   │   │   │   │   │   └── TabTriggerWithCount.tsx
│       │   │   │   │   │   └── tabs
│       │   │   │   │   │       ├── ActivitiesTab.tsx
│       │   │   │   │   │       ├── DetailsTab.tsx
│       │   │   │   │   │       ├── GeneralInfoSection.tsx
│       │   │   │   │   │       ├── NotesSection.tsx
│       │   │   │   │   │       ├── PersonalInfoSection.tsx
│       │   │   │   │   │       └── RelatedDataTable.tsx
│       │   │   │   │   └── _hooks
│       │   │   │   │       └── useContactDetail.ts
│       │   │   │   ├── _components
│       │   │   │   │   ├── ContactCard.tsx
│       │   │   │   │   ├── ContactDialog.tsx
│       │   │   │   │   ├── contacts-client.tsx
│       │   │   │   │   ├── ContactsData.tsx
│       │   │   │   │   ├── ContactsSkeleton.tsx
│       │   │   │   │   └── ContactTable.tsx
│       │   │   │   └── _hooks
│       │   │   │       └── useContactFilters.ts
│       │   │   ├── general
│       │   │   │   ├── page.tsx
│       │   │   │   └── _components
│       │   │   │       ├── ActivityItem.tsx
│       │   │   │       ├── ComposeEmailDialog.tsx
│       │   │   │       ├── crm-client.tsx
│       │   │   │       ├── CrmData.tsx
│       │   │   │       ├── CrmSkeleton.tsx
│       │   │   │       ├── FunnelBar.tsx
│       │   │   │       ├── ListItem.tsx
│       │   │   │       ├── send-email-action.ts
│       │   │   │       └── StatCard.tsx
│       │   │   ├── pipeline
│       │   │   │   ├── actions.ts
│       │   │   │   ├── loading.tsx
│       │   │   │   ├── page.tsx
│       │   │   │   ├── pipeline-client.tsx
│       │   │   │   ├── _components
│       │   │   │   │   ├── ColumnsView.tsx
│       │   │   │   │   ├── OportunityCard.tsx
│       │   │   │   │   ├── OportunityRowCard.tsx
│       │   │   │   │   ├── OpportunityDialog.tsx
│       │   │   │   │   ├── PipelineData.tsx
│       │   │   │   │   ├── PipelineSkeleton.tsx
│       │   │   │   │   ├── RowsView.tsx
│       │   │   │   │   └── StageColumn.tsx
│       │   │   │   └── _hooks
│       │   │   │       ├── useOpportunityForm.ts
│       │   │   │       └── usePipeline.ts
│       │   │   ├── products
│       │   │   │   ├── actions.ts
│       │   │   │   ├── page.tsx
│       │   │   │   ├── _components
│       │   │   │   │   ├── ProductForm.tsx
│       │   │   │   │   ├── ProductsCardView.tsx
│       │   │   │   │   ├── ProductsClient.tsx
│       │   │   │   │   ├── ProductsData.tsx
│       │   │   │   │   ├── ProductsSkeleton.tsx
│       │   │   │   │   └── ProductsTableView.tsx
│       │   │   │   └── _hooks
│       │   │   │       └── useProducts.ts
│       │   │   └── quotes
│       │   │       ├── actions.ts
│       │   │       ├── page.tsx
│       │   │       ├── [id]
│       │   │       │   ├── actions.ts
│       │   │       │   ├── page.tsx
│       │   │       │   ├── _components
│       │   │       │   │   ├── CompanyProfileDialog.tsx
│       │   │       │   │   ├── QuoteEditorClient.tsx
│       │   │       │   │   ├── QuoteEditorData.tsx
│       │   │       │   │   ├── QuoteEditorSkeleton.tsx
│       │   │       │   │   ├── QuoteItems.tsx
│       │   │       │   │   ├── QuoteMeta.tsx
│       │   │       │   │   ├── QuotePreview.tsx
│       │   │       │   │   ├── QuoteTotals.tsx
│       │   │       │   │   └── StatCardsGrid.tsx
│       │   │       │   └── _hooks
│       │   │       │       ├── useQuoteEditor.ts
│       │   │       │       └── useQuoteItems.ts
│       │   │       ├── _components
│       │   │       │   ├── QuotesClient.tsx
│       │   │       │   ├── QuotesData.tsx
│       │   │       │   └── QuotesSkeleton.tsx
│       │   │       └── _hooks
│       │   │           └── useQuotes.ts
│       │   ├── dashboard
│       │   │   ├── actions.ts
│       │   │   ├── dashboard-client.tsx
│       │   │   ├── page.tsx
│       │   │   └── _components
│       │   │       ├── agenda
│       │   │       │   ├── Agenda.tsx
│       │   │       │   └── TaskCard.tsx
│       │   │       ├── AIOracle.tsx
│       │   │       ├── AIOracleSkeleton.tsx
│       │   │       ├── DashboardBottomGrid.tsx
│       │   │       ├── DashboardCard.tsx
│       │   │       ├── DashboardData.tsx
│       │   │       ├── DashboardMainGrid.tsx
│       │   │       ├── DashboardSkeleton.tsx
│       │   │       ├── QuickAccess.tsx
│       │   │       ├── Radar.tsx
│       │   │       ├── RecentActivities.tsx
│       │   │       ├── SalesPerformance.tsx
│       │   │       └── StatCardsGrid.tsx
│       │   ├── excel
│       │   │   ├── actions.ts
│       │   │   └── ExcelDropdownButton.tsx
│       │   ├── finances
│       │   │   ├── expenses
│       │   │   │   ├── actions.ts
│       │   │   │   ├── page.tsx
│       │   │   │   ├── [expenseId]
│       │   │   │   │   ├── actions.ts
│       │   │   │   │   ├── page.tsx
│       │   │   │   │   ├── _components
│       │   │   │   │   │   ├── AttachmentUploader.tsx
│       │   │   │   │   │   ├── ExpenseAttachmentCard.tsx
│       │   │   │   │   │   ├── ExpenseAttachmentUploader.tsx
│       │   │   │   │   │   ├── ExpenseDetailClient.tsx
│       │   │   │   │   │   ├── ExpenseDetailData.tsx
│       │   │   │   │   │   ├── ExpenseDetailSkeleton.tsx
│       │   │   │   │   │   ├── ExpenseItemsEditor.tsx
│       │   │   │   │   │   └── SupplierCombobox.tsx
│       │   │   │   │   └── _hooks
│       │   │   │   │       └── useExpenseDetail.ts
│       │   │   │   ├── _components
│       │   │   │   │   ├── ExpenseFilters.tsx
│       │   │   │   │   ├── ExpensesClient.tsx
│       │   │   │   │   ├── ExpensesData.tsx
│       │   │   │   │   ├── ExpensesSkeleton.tsx
│       │   │   │   │   └── StatCard.tsx
│       │   │   │   └── _hooks
│       │   │   │       └── useExpenses.ts
│       │   │   ├── invoices
│       │   │   │   ├── actions.ts
│       │   │   │   ├── page.tsx
│       │   │   │   ├── [invoiceId]
│       │   │   │   │   ├── actions.ts
│       │   │   │   │   ├── page.tsx
│       │   │   │   │   ├── _components
│       │   │   │   │   │   ├── InvoiceDetailClient.tsx
│       │   │   │   │   │   ├── InvoiceDetailData.tsx
│       │   │   │   │   │   ├── InvoiceDetailSkeleton.tsx
│       │   │   │   │   │   ├── InvoiceItemsEditor.tsx
│       │   │   │   │   │   └── InvoicePreview.tsx
│       │   │   │   │   └── _hooks
│       │   │   │   │       └── useInvoiceDetail.ts
│       │   │   │   ├── _components
│       │   │   │   │   ├── InvoiceClient.tsx
│       │   │   │   │   ├── InvoicesData.tsx
│       │   │   │   │   ├── InvoicesFilters.tsx
│       │   │   │   │   └── InvoicesSkeleton.tsx
│       │   │   │   └── _hooks
│       │   │   │       └── useInvoices.ts
│       │   │   └── suppliers
│       │   │       ├── actions.ts
│       │   │       ├── page.tsx
│       │   │       ├── schemas.ts
│       │   │       ├── [supplierId]
│       │   │       │   ├── page.tsx
│       │   │       │   ├── _components
│       │   │       │   │   ├── LinkContactDialog.tsx
│       │   │       │   │   ├── LinkExpenseDialog.tsx
│       │   │       │   │   ├── SupplierDetailClient.tsx
│       │   │       │   │   ├── SupplierDetailData.tsx
│       │   │       │   │   ├── SupplierForm.tsx
│       │   │       │   │   └── tabs
│       │   │       │   │       ├── ContactsTabContent.tsx
│       │   │       │   │       ├── ExpensesTabContent.tsx
│       │   │       │   │       ├── RelateDataTabs.tsx
│       │   │       │   │       └── TicketsTabContent.tsx
│       │   │       │   └── _hooks
│       │   │       │       └── useSupplierForm.ts
│       │   │       ├── _components
│       │   │       │   ├── SuppliersClient.tsx
│       │   │       │   └── SuppliersData.tsx
│       │   │       └── _hooks
│       │   │           └── useSuppliers.ts
│       │   ├── layout.tsx
│       │   ├── loading.tsx
│       │   ├── network
│       │   │   ├── actions.ts
│       │   │   ├── loading.tsx
│       │   │   ├── page.tsx
│       │   │   ├── types.ts
│       │   │   └── _components
│       │   │       ├── AddressAutocomplete.tsx
│       │   │       ├── MapContainer.tsx
│       │   │       ├── NetworkClient.tsx
│       │   │       ├── NetworkData.tsx
│       │   │       ├── NetworkSkeleton.tsx
│       │   │       ├── ProfileCard.tsx
│       │   │       └── ProfileList.tsx
│       │   ├── projectStrocture
│       │   │   ├── actions.ts
│       │   │   ├── page.tsx
│       │   │   └── _components
│       │   │       └── ArchitectureVisualizer.tsx
│       │   ├── redirecting
│       │   │   └── page.tsx
│       │   ├── settings
│       │   │   ├── billing
│       │   │   │   ├── actions.ts
│       │   │   │   ├── page.tsx
│       │   │   │   └── _components
│       │   │   │       ├── BillingClient.tsx
│       │   │   │       ├── BillingData.tsx
│       │   │   │       ├── BillingSkeleton.tsx
│       │   │   │       └── UpgradePlanNotice.tsx
│       │   │   ├── blacklist
│       │   │   │   ├── action.ts
│       │   │   │   ├── page.tsx
│       │   │   │   └── _components
│       │   │   │       ├── BlacklistClient.tsx
│       │   │   │       ├── BlacklistData.tsx
│       │   │   │       └── BlacklistSkeleton.tsx
│       │   │   ├── customization
│       │   │   │   ├── page.tsx
│       │   │   │   └── _components
│       │   │   │       ├── CustomizationClient.tsx
│       │   │   │       ├── CustomizationData.tsx
│       │   │   │       └── CustomizationSkeleton.tsx
│       │   │   ├── install
│       │   │   │   ├── page.tsx
│       │   │   │   └── _components
│       │   │   │       ├── DeviceIcons.tsx
│       │   │   │       └── InstallationManager.tsx
│       │   │   ├── integrations
│       │   │   │   ├── actions.ts
│       │   │   │   ├── page.tsx
│       │   │   │   ├── schemas.ts
│       │   │   │   └── _components
│       │   │   │       ├── ImapSmtpDialog.tsx
│       │   │   │       ├── IntegrationsClient.tsx
│       │   │   │       ├── IntegrationsData.tsx
│       │   │   │       └── IntegrationsSkeleton.tsx
│       │   │   ├── layout.tsx
│       │   │   ├── page.tsx
│       │   │   ├── permissions
│       │   │   │   ├── actions.ts
│       │   │   │   ├── page.tsx
│       │   │   │   └── _components
│       │   │   │       └── PermissionsClient.tsx
│       │   │   ├── profile
│       │   │   │   ├── actions.ts
│       │   │   │   ├── page.tsx
│       │   │   │   └── _components
│       │   │   │       ├── ProfileData.tsx
│       │   │   │       ├── ProfileForm.tsx
│       │   │   │       └── ProfileSkeleton.tsx
│       │   │   ├── team
│       │   │   │   ├── actions.ts
│       │   │   │   ├── page.tsx
│       │   │   │   ├── _components
│       │   │   │   │   ├── ActiveTeamManagerData.tsx
│       │   │   │   │   ├── TeamClient.tsx
│       │   │   │   │   ├── TeamDashboard.tsx
│       │   │   │   │   ├── TeamData.tsx
│       │   │   │   │   ├── TeamHub.tsx
│       │   │   │   │   ├── TeamSelectorData.tsx
│       │   │   │   │   ├── TeamSkeleton.tsx
│       │   │   │   │   └── TeamStateCorrector.tsx
│       │   │   │   └── _hooks
│       │   │   │       ├── useTeamHub.ts
│       │   │   │       └── useTeamManagement.ts
│       │   │   └── _components
│       │   │       ├── settings-nav.tsx
│       │   │       └── SettingsSkeleton.tsx
│       │   └── _components
│       │       ├── AppClientLayout.tsx
│       │       ├── main-sidebar.tsx
│       │       ├── MobileMenu.tsx
│       │       ├── module-sidebar.tsx
│       │       ├── NavItem.tsx
│       │       └── ui
│       │           └── redirect-animation.tsx
│       ├── (auth)
│       │   ├── auth
│       │   │   ├── actions.ts
│       │   │   ├── callback
│       │   │   │   └── route.ts
│       │   │   ├── check-email
│       │   │   │   └── page.tsx
│       │   │   └── reset-password
│       │   │       └── page.tsx
│       │   ├── login
│       │   │   ├── page.tsx
│       │   │   ├── _components
│       │   │   │   ├── ForgotPasswordDialog.tsx
│       │   │   │   └── LoginClient.tsx
│       │   │   └── _hooks
│       │   │       └── useLoginForm.ts
│       │   └── signup
│       │       ├── page.tsx
│       │       ├── _components
│       │       │   └── SignupClient.tsx
│       │       └── _hooks
│       │           └── useSignupForm.ts
│       ├── (legal)
│       │   ├── avis-legal
│       │   │   └── page.tsx
│       │   ├── politica-cookies
│       │   │   └── page.tsx
│       │   ├── politica-privacitat
│       │   │   └── page.tsx
│       │   └── termes-condicions
│       │       └── page.tsx
│       ├── accept-invite
│       │   └── route.ts
│       ├── global-error.tsx
│       ├── invitation
│       │   └── accept
│       │       ├── page.tsx
│       │       └── _components
│       │           └── InvitedSignupForm.tsx
│       ├── layout.tsx
│       ├── onboarding
│       │   ├── actions.ts
│       │   ├── page.tsx
│       │   ├── _components
│       │   │   ├── OnboardingClient.tsx
│       │   │   ├── OnboardingContext.tsx
│       │   │   ├── OnboardingData.tsx
│       │   │   ├── OnboardingLayout.tsx
│       │   │   ├── OnboardingSkeleton.tsx
│       │   │   ├── ServiceSelectionModal.tsx
│       │   │   └── steps
│       │   │       ├── index.ts
│       │   │       ├── Step1.tsx
│       │   │       ├── Step2.tsx
│       │   │       └── Step3.tsx
│       │   └── _hooks
│       │       └── useOnboardingForm.ts
│       ├── page.tsx
│       ├── quote
│       │   └── [secureId]
│       │       ├── actions.ts
│       │       ├── page.tsx
│       │       ├── _components
│       │       │   ├── PublicQuoteClient.tsx
│       │       │   ├── PublicQuoteData.tsx
│       │       │   ├── PublicQuoteView.tsx
│       │       │   ├── QuoteStatusScreeen.tsx
│       │       │   └── RejectionDialog.tsx
│       │       └── _hooks
│       │           └── usePublicQuote.ts
│       └── _components
│           ├── AddressSearch.tsx
│           ├── CountdownView.tsx
│           ├── FeaturesPanel.tsx
│           ├── LandingClient.tsx
│           ├── LandingNav.tsx
│           ├── MainLandingView.tsx
│           └── ParticleBackground.tsx
├── components
│   ├── chatbot
│   │   └── Chatbot.tsx
│   ├── features
│   │   ├── contactes
│   │   │   └── ContactSelector.tsx
│   │   └── tasks
│   │       ├── TaskDetailView.tsx
│   │       ├── TaskDialogManager.tsx
│   │       └── TaskFormView.tsx
│   ├── LanguageSwitcher.tsx
│   ├── PWARegistration.tsx
│   ├── shared
│   │   ├── AccessDenied.tsx
│   │   ├── ActivityItem.tsx
│   │   ├── ColumnToggleButton.tsx
│   │   ├── EmptyState.tsx
│   │   ├── GenericDataTable.tsx
│   │   ├── PageHeader.tsx
│   │   ├── PaginationBar.tsx
│   │   ├── StatCard.tsx
│   │   ├── StatusBadge.tsx
│   │   └── SupplierCombobox.tsx
│   ├── theme-provider.tsx
│   ├── ThemeSwitcher.tsx
│   └── ui
│       ├── accordion.tsx
│       ├── alert-dialog.tsx
│       ├── avatar.tsx
│       ├── badge.jsx
│       ├── button.tsx
│       ├── calendar.tsx
│       ├── card.tsx
│       ├── checkbox.tsx
│       ├── collapsible.tsx
│       ├── command.tsx
│       ├── dialog.tsx
│       ├── drawer.tsx
│       ├── dropdown-menu.tsx
│       ├── EditorWysiwyg.tsx
│       ├── input.tsx
│       ├── label.tsx
│       ├── pagination.tsx
│       ├── popover.tsx
│       ├── progress.tsx
│       ├── scroll-area.tsx
│       ├── select.tsx
│       ├── separator.tsx
│       ├── sheet.tsx
│       ├── skeleton.tsx
│       ├── sonner.tsx
│       ├── switch.tsx
│       ├── table.tsx
│       ├── tabs.tsx
│       ├── textarea.tsx
│       ├── toast.tsx
│       ├── toaster.tsx
│       ├── toggle-group.tsx
│       ├── toggle.tsx
│       └── tooltip.tsx
├── config
│   ├── billing.ts
│   ├── contacts.ts
│   ├── inbox.ts
│   ├── navigation.ts
│   ├── pipeline.ts
│   └── styles
│       ├── quotes.ts
│       └── task.ts
├── hooks
│   ├── useAppNavigation.ts
│   ├── useMediaQuery.ts
│   └── useUser.ts
├── i18n.ts
├── lib
│   ├── actions.ts
│   ├── data
│   │   └── dashboard.ts
│   ├── permissions.config.ts
│   ├── permissions.ts
│   ├── supabase
│   │   ├── admin.ts
│   │   ├── client.ts
│   │   ├── server.ts
│   │   ├── session.ts
│   │   └── teams.ts
│   └── utils
│       ├── formatters.ts
│       ├── media.ts
│       ├── templates.ts
│       └── utils.ts
├── middleware.ts
├── stores
│   └── navigationStore.ts
└── types
    ├── app
    │   └── navigation.ts
    ├── comunicacio
    │   ├── inbox.ts
    │   └── SocialPost.ts
    ├── crm
    │   ├── calendar.ts
    │   ├── contacts.ts
    │   ├── deals.ts
    │   ├── general.ts
    │   ├── index.ts
    │   ├── opportunitys.ts
    │   ├── pipelines.ts
    │   ├── products.ts
    │   └── quotes.ts
    ├── dashboard
    │   └── types.ts
    ├── db.ts
    ├── declarations
    │   ├── mapbox.d.ts
    │   └── prism.d.ts
    ├── declarations.d.ts
    ├── finances
    │   ├── expenses.ts
    │   ├── index.ts
    │   ├── invoices.ts
    │   ├── scheams.ts
    │   └── suppliers.ts
    ├── network
    │   └── network.ts
    ├── settings
    │   ├── blackListRule.ts
    │   ├── index.ts
    │   ├── profiles.ts
    │   ├── subscription.ts
    │   └── team.ts
    ├── shared
    │   ├── actionResult.ts
    │   ├── address.ts
    │   ├── index.ts
    │   └── notification.ts
    ├── socialPost
    └── supabase.ts


CONTINGUT DELS FITXERS


// =================== FILE: src/app/actions/chatbotActions.ts ===================

"use server";

import { createClient } from "@/lib/supabase/server";

interface SupabaseDocumentMatch {
  id: number;
  metadata: Record<string, unknown> | null;
  content: string;
  similarity: number;
}

export async function chatbotAction(question: string): Promise<{ data: string | null, error: string | null }> {
  if (!process.env.GEMINI_API_KEY) {
    return { data: null, error: "La clau de l'API de Gemini no està configurada." };
  }

  try {
    // 🔹 1. Recuperem documents similars de Supabase
    const supabase = createClient();

    const { data: matches, error: dbError } = await supabase.rpc("match_documents", {
      query_embedding: JSON.stringify(await embedQuestion(question)),
      match_threshold: 0.7,
      match_count: 3,
    });

    if (dbError) throw dbError;

    console.log("[Chatbot] Documents trobats:", matches?.length);

    console.log("[Chatbot] Context generat:");

    // 🔹 2. Preparem el prompt per a Gemini
    const prompt = `
      Ets un assistent útil.
      Pregunta de l'usuari: "${question}"
      Context de la base de dades:
      
      Respon en català, de manera clara i concisa.
    `;

    const payload = { contents: [{ role: "user", parts: [{ text: prompt }] }] };

    // 🔹 3. Cridem Gemini directament via fetch
    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-09-2025:generateContent?key=${process.env.GEMINI_API_KEY}`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      }
    );

    if (!response.ok) throw new Error("Error de l'API de Gemini");

    const result = await response.json();
    const answer: string = result.candidates[0].content.parts[0].text;

    return { data: answer, error: null };
  } catch (error: unknown) {
    const message = error instanceof Error ? error.message : "Error desconegut";
    console.error("Error al chatbot:", message);
    return { data: null, error: message };
  }
}

async function embedQuestion(question: string): Promise<number[]> {
  const response = await fetch("https://api.openai.com/v1/embeddings", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
    },
    body: JSON.stringify({
      model: "text-embedding-3-small",
      input: question,
    }),
  });

  if (!response.ok) throw new Error("Error generant embedding amb OpenAI");
  const data = await response.json();
  return data.data[0].embedding;
}


// =================== FILE: src/app/actions/invitationActions.ts ===================

"use server";

import { redirect } from "next/navigation";
import { createClient, createAdminClient } from "@/lib/supabase/server";

export async function resolveInvitationAction(token: string) {
  if (!token) {
    return redirect('/login?message=Token d\'invitació invàlid.');
  }

  const supabaseAdmin = createAdminClient();
  const { data: invitation } = await supabaseAdmin.from('invitations').select('email').eq('token', token).single();
  if (!invitation) {
    return redirect('/login?message=La teva invitació és invàlida o ha caducat.');
  }

  // ✅ CORRECCIÓ: Obtenim la llista completa i la filtrem a la memòria.
  const { data: { users }, error: listError } = await supabaseAdmin.auth.admin.listUsers();
  if (listError) {
    console.error("Error en obtenir la llista d'usuaris:", listError);
    return redirect('/login?message=Hi ha hagut un error al servidor.');
  }

  const existingUser = users.find(u => u.email === invitation.email);

  if (existingUser) {
    redirect(`/login?invite_token=${token}&email=${encodeURIComponent(invitation.email)}`);
  } else {
    redirect(`/invitation/accept?invite_token=${token}&email=${encodeURIComponent(invitation.email)}`);
  }
}

export async function acceptInviteAction(token: string) {
  const supabase = createClient();
  const supabaseAdmin = createAdminClient();
  const { data: { user } } = await supabase.auth.getUser();

  if (!user) {
    return redirect(`/login?invite_token=${token}&message=Has d'iniciar sessió per acceptar.`);
  }

  try {
    const { data: invitation } = await supabase.from('invitations').select('*').eq('token', token).single().throwOnError();
    if (invitation.email !== user.email) {
      throw new Error("Aquesta invitació està destinada a un altre usuari.");
    }

    await supabase.from('team_members').insert({ 
      team_id: invitation.team_id ?? '', 
      user_id: user.id, 
      role: invitation.role 
    }).throwOnError();
    
    const { data: subscription } = await supabase.from('subscriptions').select('plan_id, status').eq('team_id', invitation.team_id ?? '').single();
    const teamPlan = (subscription?.status === 'active') ? subscription.plan_id : 'free';

    await supabaseAdmin.auth.admin.updateUserById(
        user.id,
        {
            app_metadata: {
                ...user.app_metadata,
                active_team_id: invitation.team_id,
                active_team_plan: teamPlan
            }
        }
    );
    await supabase.auth.refreshSession();
    await supabase.from('invitations').delete().eq('id', invitation.id);
  } catch (error) {
    if (error instanceof Error && error.message.includes('duplicate key value')) {
        console.log("L'usuari ja era membre, procedint a actualitzar el seu token...");
    } else {
        const message = error instanceof Error ? error.message : "Error en processar la invitació.";
        return redirect(`/dashboard?message=${encodeURIComponent(message)}`);
    }
  }

  redirect('/settings/team');
}



// =================== FILE: src/app/actions/localeActions.ts ===================

// src/app/actions/localeActions.ts
// Aquest fitxer s'executarà exclusivament al servidor
'use server';

import { cookies } from 'next/headers';
// ❌ Eliminem la importació innecessària de NextResponse.
// ❌ Eliminem la importació incorrecta de Locale de '@/types/shared/index'.

// ✅ Importem directament les llistes i el defaultLocale des de la font canònica.
import { locales, defaultLocale } from '@/i18n'; 

// 🚀 Constant per al nom de la Cookie de persistència (Ha de coincidir amb el middleware)
const LOCALE_COOKIE_NAME = 'NEXT_LOCALE';

// 🔑 CLAU: Determinar si estem en un entorn segur (HTTPS)
const isProduction = process.env.NODE_ENV === 'production';

// Definim un tipus d'unió per als nostres idiomes basat en l'array de i18n
type AppLocale = typeof locales[number];

/**
 * Estableix la cookie de preferència d'idioma de forma explícita amb màxim temps de vida.
 * Aquesta acció garanteix el maxAge i la configuració secure/httpOnly correcte.
 * @param locale - L'idioma a establir (ha de ser un string, ja que ve del client).
 */
export async function setLocalePersistence(locale: string) {
  
  // 1. Validació segura sense 'any'
  const finalLocale: AppLocale = locales.includes(locale as AppLocale) 
    ? (locale as AppLocale) 
    : defaultLocale;
  
  // 2. Fixar la cookie
  // Utilitzem next/headers/cookies().set per fixar la cookie des del servidor.
  (await
        // 2. Fixar la cookie
        // Utilitzem next/headers/cookies().set per fixar la cookie des del servidor.
        cookies()).set(LOCALE_COOKIE_NAME, finalLocale, {
    maxAge: 60 * 60 * 24 * 365, // 1 any
    httpOnly: false, // Permetem que el client (o el middleware) la llegeixi si cal.
    secure: isProduction, // Condicional per a Localhost vs Producció
    path: '/', // Disponible a tota l'aplicació
    sameSite: 'lax',
  });
  
  return { success: true, locale: finalLocale };
}

// =================== FILE: src/app/actions/tasks/actions.ts ===================

'use server';

import { revalidatePath } from 'next/cache';
import { z } from 'zod';
import { validateUserSession } from '@/lib/supabase/session';
import { Tables } from '@/types/supabase'; // Assegura't que aquest import hi és

// Aquest fitxer conté tota la lògica de negoci per a les TASQUES.
// És la ÚNICA FONT DE VERITAT per a crear, modificar o eliminar tasques.

type FormState = {
  error?: {
    form?: string;
    db?: string;
    title?: string[];
    description?: string[];
    due_date?: string[];
    priority?: string[];
    user_asign_id?: string[];
    contact_id?: string[];
    department_id?: string[];
    duration?: string[];
  };
  success?: boolean;
};

const taskSchema = z.object({
  title: z.string().min(1, 'El títol és obligatori.'),
  description: z.string().nullable().optional(),
  due_date: z.string().datetime('La data de venciment ha de ser una data vàlida.'),
  priority: z.enum(['Baixa', 'Mitjana', 'Alta']),
  user_asign_id: z.string().uuid().nullable().optional(), // Es manté com a string (UUID)
  contact_id: z.coerce.number().nullable().optional(), // ✅ CORRECCIÓ: Convertim a número
  department_id: z.coerce.number().nullable().optional(), // ✅ CORRECCIÓ: Convertim a número
  duration: z.coerce.number().positive('La duració ha de ser un número positiu.').optional().nullable(),
});

const processFormData = (formData: FormData) => {
  let userId = formData.get('user_asign_id');
  if (userId === 'none') userId = null;

  let contactId = formData.get('contact_id');
  if (contactId === 'none') contactId = null;

  let departmentId = formData.get('department_id');
  if (departmentId === 'none') departmentId = null;

  const duration = formData.get('duration');

  return {
    title: formData.get('title'),
    description: formData.get('description') || null,
    due_date: new Date(formData.get('due_date') as string).toISOString(),
    priority: formData.get('priority'),
    user_asign_id: userId,
    contact_id: contactId ? parseInt(contactId as string, 10) : null,
    department_id: departmentId ? parseInt(departmentId as string, 10) : null,
    duration: duration ? parseFloat(duration as string) : null,
  };
};

export async function createTask(prevState: FormState, formData: FormData): Promise<FormState> {
  console.log("--- [Server Action] La funció 'createTask' s'ha executat! ---");

  const session = await validateUserSession();
  if ('error' in session) return { error: { form: session.error.message } };
  const { supabase, activeTeamId, user } = session;

  const parsedData = processFormData(formData);
  const validatedFields = taskSchema.safeParse(parsedData);

  if (!validatedFields.success) {
    return { error: validatedFields.error.flatten().fieldErrors };
  }

  const dataToInsert: Partial<Tables<'tasks'>> = {
    ...validatedFields.data,
    team_id: activeTeamId,
    user_id: user.id,
  };

  if (validatedFields.data.user_asign_id) {
    dataToInsert.asigned_date = new Date().toISOString(); 
  }

  const { error } = await supabase.from('tasks').insert({
    ...dataToInsert
  });

  if (error) return { error: { db: error.message } };

  // Revalidem totes les rutes on es mostren tasques
  revalidatePath('/[locale]/(app)/crm/calendari', 'layout');
  revalidatePath('/[locale]/(app)/dashboard', 'layout');
  return { success: true };
}

export async function updateTask(prevState: FormState, formData: FormData): Promise<FormState> {
  const session = await validateUserSession();
  if ('error' in session) return { error: { form: session.error.message } };
  const { supabase } = session;

  const taskId = Number(formData.get('taskId'));
  if (!taskId) return { error: { form: 'ID de la tasca no trobat.' } };

  // Obtenim la tasca actual per comparar l'usuari assignat
  const { data: currentTask, error: fetchError } = await supabase.from('tasks').select('user_asign_id').eq('id', taskId).single();
  if (fetchError) return { error: { db: `No s'ha pogut obtenir la tasca actual: ${fetchError.message}` } };

  const parsedData = processFormData(formData);
  const validatedFields = taskSchema.safeParse(parsedData);

  if (!validatedFields.success) {
    return { error: validatedFields.error.flatten().fieldErrors };
  }
  
  const dataToUpdate: Partial<Tables<'tasks'>> = { ...validatedFields.data };

  const newAssignedId = validatedFields.data.user_asign_id;
  const oldAssignedId = currentTask.user_asign_id;

  // S'actualitza la data d'assignació si:
  // 1. S'assigna un usuari nou (abans no n'hi havia).
  // 2. Es canvia l'usuari assignat per un altre.
  if (newAssignedId && newAssignedId !== oldAssignedId) {
    dataToUpdate.asigned_date = new Date().toISOString();
  } else if (!newAssignedId && oldAssignedId) {
    // Si es desassigna un usuari, netegem la data.
    dataToUpdate.asigned_date = null;
  }

  const { error } = await supabase
    .from('tasks')
    .update(dataToUpdate)
    .eq('id', taskId);

  if (error) return { error: { db: error.message } };

  // Revalidem totes les rutes on es mostren tasques
  revalidatePath('/[locale]/(app)/crm/calendari', 'layout');
  revalidatePath('/[locale]/(app)/dashboard', 'layout');
  return { success: true };
}

export async function deleteTask(taskId: number) {
  const session = await validateUserSession();
  if ('error' in session) return { error: { db: session.error.message } };
  const { supabase } = session;

  const { error } = await supabase.from('tasks').delete().eq('id', taskId);

  if (error) return { error: { db: error.message } };

  revalidatePath('/[locale]/(app)/crm/calendari', 'layout');
  revalidatePath('/[locale]/(app)/dashboard', 'layout');
  return { success: true };
}

// ✅ NOVA ACCIÓ PER A ACTUALITZACIONS SIMPLES
export async function updateSimpleTask(taskId: number, updatedData: Partial<Tables<'tasks'>>) {
  const session = await validateUserSession();
  if ('error' in session) return { error: session.error };
  const { supabase } = session;

  const { error } = await supabase
    .from('tasks')
    .update(updatedData)
    .eq('id', taskId);

  if (error) {
    console.error("Error updating simple task:", error);
    return { error };
  }

  revalidatePath('/[locale]/(app)/crm/calendari', 'layout');
  revalidatePath('/[locale]/(app)/dashboard', 'layout');
  return { error: null };
}

// =================== FILE: src/app/api/chatbot/route.ts ===================

import { chatbotAction } from '../../actions/chatbotActions';

export async function POST(req: Request) {
  try {
    const { question } = await req.json();
    if (!question) {
      return new Response(JSON.stringify({ error: "La pregunta és obligatòria." }), { status: 400 });
    }

    const { data, error } = await chatbotAction(question);

    if (error) {
      return new Response(JSON.stringify({ error }), { status: 500 });
    }

    return new Response(JSON.stringify({ data }), { status: 200 });
  } catch (err) {
    const message = err instanceof Error ? err.message : "Error desconegut";
    return new Response(JSON.stringify({ error: message }), { status: 500 });
  }
}


// =================== FILE: src/app/api/oauth/callback/[provider]/route.ts ===================

import { createClient, createAdminClient } from "@/lib/supabase/server";
import { cookies } from "next/headers";
import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";

export const dynamic = "force-dynamic";

// Interfície per a les dades que desarem a la base de dades
interface CredentialData {
    user_id: string;
    provider: string;
    access_token: string;
    refresh_token?: string | null;
    expires_at: string | null;
    provider_user_id: string | null;
    // Propietats opcionals per a les pàgines de Meta
    provider_page_id?: string | null;
    provider_page_name?: string | null;
}

// Funció auxiliar per a decodificar el payload d'un JWT (id_token)
function decodeJwtPayload(token: string) {
    try {
        const payloadBase64 = token.split('.')[1];
        const base64 = payloadBase64.replace(/-/g, '+').replace(/_/g, '/');
        const decodedPayload = atob(base64);
        return JSON.parse(decodedPayload);
    } catch (e) {
        console.error("Error decodificant el JWT (id_token):", e);
        return null;
    }
}

export async function GET(
    request: NextRequest,
    { params }: { params: Promise<{ provider: string }> }
) {
    const { provider } = await params;
    const url = new URL(request.url);
    const code = url.searchParams.get("code");
    const state = url.searchParams.get("state");

    const cookieStore = cookies();
    const savedState = (await cookieStore).get("oauth_state")?.value;
    (await cookieStore).delete("oauth_state");

    if (!code || !state || state !== savedState) {
        return NextResponse.redirect(new URL("/settings/integrations?error=auth_failed", request.url));
    }

    const supabase = createClient();
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) return NextResponse.redirect(new URL('/login', request.url));

    try {
        let tokenUrl = '';
        const body = new URLSearchParams();
        const redirectUri = `${process.env.NEXT_PUBLIC_SITE_URL}/api/oauth/callback/${provider}`;

        // La teva lògica 'switch' per a construir el body és correcta
        switch (provider) {
            case 'google':
                tokenUrl = 'https://oauth2.googleapis.com/token';
                body.append('client_id', process.env.GOOGLE_CLIENT_ID!);
                body.append('client_secret', process.env.GOOGLE_CLIENT_SECRET!);
                body.append('code', code);
                body.append('grant_type', 'authorization_code');
                body.append('redirect_uri', redirectUri);
                break;

            case 'linkedin':
                tokenUrl = 'https://www.linkedin.com/oauth/v2/accessToken';
                body.append('grant_type', 'authorization_code');
                body.append('code', code);
                body.append('redirect_uri', redirectUri);
                body.append('client_id', process.env.LINKEDIN_CLIENT_ID!);
                body.append('client_secret', process.env.LINKEDIN_CLIENT_SECRET!);
                break;

            case 'microsoft':
                tokenUrl = 'https://login.microsoftonline.com/common/oauth2/v2.0/token';
                body.append('client_id', process.env.AZURE_CLIENT_ID!);
                body.append('client_secret', process.env.AZURE_CLIENT_SECRET!);
                body.append('scope', 'openid email offline_access User.Read Mail.Read Mail.Send');
                body.append('code', code);
                body.append('redirect_uri', redirectUri);
                body.append('grant_type', 'authorization_code');
                break;
            // ✅ NOU: AFEGIM EL CAS PER A FACEBOOK
            case 'facebook':
                tokenUrl = 'https://graph.facebook.com/v19.0/oauth/access_token';
                body.append('client_id', process.env.FACEBOOK_CLIENT_ID!);
                body.append('client_secret', process.env.FACEBOOK_CLIENT_SECRET!);
                body.append('redirect_uri', redirectUri);
                body.append('code', code);
                break;
        }

        const tokenResponse = await fetch(tokenUrl, { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, body });
        if (!tokenResponse.ok) throw new Error(`Error en obtenir el token de ${provider}: ${await tokenResponse.text()}`);
        const tokens = await tokenResponse.json();

        // --- ARQUITECTURA HÍBRIDA FINAL ---
        const isTeamIntegration = ['linkedin', 'facebook', 'instagram'].includes(provider);
        const isPersonalIntegration = ['google', 'microsoft'].includes(provider);
        const supabaseAdmin = createAdminClient();
        const activeTeamId = user.app_metadata?.active_team_id;

        if (!activeTeamId) {
            throw new Error("S'ha de seleccionar un equip actiu abans de connectar una integració.");
        }

        const baseDataToUpsert: CredentialData = {
            user_id: user.id,
            provider: provider,
            access_token: tokens.access_token,
            refresh_token: tokens.refresh_token || null,
            expires_at: tokens.expires_in ? new Date(Date.now() + (tokens.expires_in * 1000)).toISOString() : null,
            provider_user_id: tokens.id_token ? decodeJwtPayload(tokens.id_token)?.sub : null,
        };

        if (isTeamIntegration) {
            // ✅ LÒGICA MILLORADA PER A META (FACEBOOK + INSTAGRAM)
            if (provider === 'facebook') {
                // 1. Busquem la primera pàgina de Facebook que gestiona l'usuari
                const pagesRes = await fetch(`https://graph.facebook.com/v19.0/me/accounts?access_token=${tokens.access_token}`);
                const pagesData = await pagesRes.json();
                const page = pagesData.data?.[0];
                if (!page) throw new Error("No s'ha trobat cap pàgina de Facebook per a gestionar.");

                // Preparem les dades específiques de la pàgina de Facebook
                const facebookData = { ...baseDataToUpsert, provider_page_id: page.id, provider_page_name: page.name, access_token: page.access_token };
                await supabaseAdmin.from('team_credentials').upsert({ ...facebookData, team_id: activeTeamId }, { onConflict: 'team_id, provider' });
                console.log(`Credencial de FACEBOOK desada per a la pàgina ${page.name}`);

                // 2. Busquem si aquesta pàgina té un compte d'Instagram de negoci associat
                const igRes = await fetch(`https://graph.facebook.com/v19.0/${page.id}?fields=instagram_business_account{name}&access_token=${page.access_token}`);
                const igData = await igRes.json();
                const instagramAccount = igData.instagram_business_account;

                // ✅ VERIFICACIÓ EXPLÍCITA
                // Creem les dues credencials i les desem en paral·lel
                const facebookCredential = { ...baseDataToUpsert, provider: 'facebook', team_id: activeTeamId, provider_page_id: page.id, provider_page_name: page.name, access_token: page.access_token };

                const queries = [
                    supabaseAdmin.from('team_credentials').upsert(facebookCredential, { onConflict: 'team_id, provider' })
                ];

                if (instagramAccount) {
                    const instagramCredential = { ...baseDataToUpsert, provider: 'instagram', team_id: activeTeamId, provider_page_id: instagramAccount.id, provider_page_name: instagramAccount.name, access_token: page.access_token };
                    queries.push(supabaseAdmin.from('team_credentials').upsert(instagramCredential, { onConflict: 'team_id, provider' }));
                }
                
                const results = await Promise.all(queries);
                // Comprovem si alguna de les operacions ha donat error
                const dbError = results.find(res => res.error);
                if (dbError) throw dbError.error;
            
            } else { // Per a LinkedIn
                await supabaseAdmin.from('team_credentials').upsert({ ...baseDataToUpsert, team_id: activeTeamId }, { onConflict: 'team_id, provider' });
            }
        } else if (isPersonalIntegration) {
            // Per a Google/Outlook, guardem a 'user_credentials' amb el team_id associat
            await supabaseAdmin.from('user_credentials').upsert({ ...baseDataToUpsert, team_id: activeTeamId }, { onConflict: 'user_id, provider, team_id' });
            console.log(`Credencials PERSONALS (${provider}) desades per a l'usuari ${user.id} a l'equip ${activeTeamId}`);
        }

    } catch (error) {
        console.error(`Error en el callback de ${provider}:`, error);
        const errorMessage = error instanceof Error ? error.message : 'Unknown error';
        return NextResponse.redirect(new URL(`/settings/integrations?error=callback_failed&message=${encodeURIComponent(errorMessage)}`, request.url));
    }

    return NextResponse.redirect(new URL('/settings/integrations?success=true', request.url));
}

// =================== FILE: src/app/api/sync-imap/route.ts ===================

import { NextResponse } from 'next/server';
import imaps from 'imap-simple';
import { simpleParser } from 'mailparser';
import AES from 'crypto-js/aes';
import Utf8 from 'crypto-js/enc-utf8';

interface NormalizedEmail {
  provider_message_id: string;
  subject: string;
  body: string;
  preview: string;
  sent_at: string;
  sender_name: string;
  sender_email: string;
  status: 'NoLlegit' | 'Llegit';
  type: 'rebut' | 'enviat';
}

interface ImapPart {
  which: string;
  body?: string;
}

export async function POST(request: Request) {
  // ✅ LOG A: Punt d'entrada de l'API Route
  console.log('[API-IMAP-INICI] Petició rebuda.');
  try {
    const functionsSecret = process.env.FUNCTIONS_SECRET;
    const authHeader = request.headers.get('Authorization');
    if (!functionsSecret || authHeader !== `Bearer ${functionsSecret}`) {
      console.error('[API-IMAP-ERROR] Autorització fallida.');
      return NextResponse.json({ error: "No autoritzat." }, { status: 401 });
    }

    const body = await request.json();
    const { config, encryptedPassword, lastSyncDate } = body;
    if (!config || !encryptedPassword) {
      return NextResponse.json({ error: "Falten credencials." }, { status: 400 });
    }
    const secretKey = process.env.ENCRYPTION_SECRET_KEY;
    if (!secretKey) {
      console.error("[API-IMAP-ERROR] ENCRYPTION_SECRET_KEY no configurada.");
      return NextResponse.json({ error: "Error de configuració." }, { status: 500 });
    }
    const decryptedPassword = AES.decrypt(encryptedPassword, secretKey).toString(Utf8);
    if (!decryptedPassword) {
      return NextResponse.json({ error: "No s'ha pogut desencriptar." }, { status: 500 });
    }
    const imapConfig = {
      imap: {
        user: config.imap.user,
        password: decryptedPassword,
        host: config.imap.host,
        port: config.imap.port,
        tls: true,
        authTimeout: 5000,
        tlsOptions: { rejectUnauthorized: false }
      }
    };

    // ✅ LOG B: Abans de connectar
    console.log(`[API-IMAP-CONN] Intentant connectar a ${config.imap.host} per a l'usuari ${config.imap.user}`);
    const connection = await imaps.connect(imapConfig);
    // ✅ LOG C: Després de connectar
    console.log(`[API-IMAP-CONN] Connexió amb ${config.imap.host} establerta.`);
    
    const fetchEmailsFromMailbox = async (boxName: string, type: 'rebut' | 'enviat'): Promise<NormalizedEmail[]> => {
      try {
        await connection.openBox(boxName);
        const searchCriteria: (string | [string, Date])[] = ['ALL'];
        if (lastSyncDate) {
          searchCriteria.push(['SINCE', new Date(lastSyncDate)]);
        }

        const messages = await connection.search(searchCriteria, { bodies: [''] });
        const emails: NormalizedEmail[] = [];

        for (const item of messages) {
          const bodyPart = item.parts.find((part: ImapPart) => part.which === '');
          const id = item.attributes.uid;

          if (bodyPart?.body) {
            const parsed = await simpleParser(bodyPart.body);
            emails.push({
              provider_message_id: id.toString(),
              subject: parsed.subject || '(Sense assumpte)',
              body: parsed.html || parsed.textAsHtml || '',
              preview: (parsed.text || '').substring(0, 150),
              sent_at: parsed.date?.toISOString() || new Date().toISOString(),
              sender_name: parsed.from?.value[0]?.name || 'Desconegut',
              sender_email: (parsed.from?.value[0]?.address || '').toLowerCase(),
              status: 'NoLlegit',
              type: type,
            });
          }
        }
        return emails;
      } catch (err: unknown) {
        const message = typeof err === 'object' && err !== null && 'message' in err ? (err as { message: string }).message : String(err);
        console.warn(`[API SYNC-IMAP] No s'ha pogut obrir la carpeta '${boxName}'. Missatge:`, message);
        return [];
      }
    }

    const inboxEmails = await fetchEmailsFromMailbox('INBOX', 'rebut');
    const sentEmails = await fetchEmailsFromMailbox('Sent', 'enviat');
    console.log(`[API-IMAP-FETCH] S'han trobat ${inboxEmails.length} a INBOX i ${sentEmails.length} a Sent.`);

    await connection.end();

    return NextResponse.json([...inboxEmails, ...sentEmails]);

  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : "Error desconegut a l'API de sync-imap";
    console.error("[API SYNC-IMAP ERROR]:", errorMessage);
    return NextResponse.json({ error: errorMessage }, { status: 500 });
  }
}

// =================== FILE: src/app/globals.css ===================

@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');

/* Aquestes són les directives de Tailwind CSS. Injecten els estils base,
   els components i les utilitats de Tailwind al teu projecte. */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* === COLORS I VARIABLES === */
@layer base {
  :root {
    --background: 220 20% 97%;
    --foreground: 220 15% 15%;
    --card: 0 0% 100%;
    --card-foreground: 220 15% 15%;
    --popover: 220 20% 95%;
    --popover-foreground: 220 15% 15%;
    --primary: 262 83% 58%;
    --primary-foreground: 0 0% 100%;
    --secondary: 220 15% 90%;
    --secondary-foreground: 220 15% 20%;
    --muted: 220 15% 92%;
    --muted-foreground: 220 10% 45%;
    --accent: 262 80% 95%;
    --accent-foreground: 262 83% 50%;
    --destructive: 0 84.2% 50%;
    --destructive-foreground: 0 0% 100%;
    --border: 220 15% 88%;
    --input: 220 15% 88%;
    --ring: 262 83% 58%;
    --radius: 0.75rem;
  }

  .dark {
    --background: 230 15% 8%;
    --foreground: 230 15% 92%;
    --card: 230 15% 10%;
    --card-foreground: 230 15% 95%;
    --popover: 230 15% 12%;
    --popover-foreground: 230 15% 90%;
    --primary: 262 83% 58%;
    --primary-foreground: 0 0% 100%;
    --secondary: 230 15% 18%;
    --secondary-foreground: 230 15% 80%;
    --muted: 230 15% 14%;
    --muted-foreground: 230 15% 60%;
    --accent: 262 70% 30%;
    --accent-foreground: 262 70% 95%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 100%;
    --border: 230 15% 22%;
    --input: 230 15% 22%;
    --ring: 262 83% 58%;
  }

  html,
  body,
  #root {
    height: 100%;
    width: 100%;
    overflow-x: hidden;
  }
  
  * {
    @apply border-border scroll-smooth;
  }
  
  body {
    @apply bg-background text-foreground antialiased;
    font-family: 'Inter', sans-serif;
  }
}

/* === EFECTES I ESTILS PERSONALITZATS === */
@layer components {
  .glass-effect {
    @apply backdrop-blur-xl border border-black/10 rounded-xl bg-white/50;
  }
  .dark .glass-effect {
    @apply bg-white/5 border-white/10;
  }
}

.glass-effect {
  @apply backdrop-blur-xl border border-black/10 rounded-xl bg-white/5;
}
.dark .glass-effect {
  @apply bg-white/5 border-white/10;
}

.gradient-text {
  @apply bg-gradient-to-r from-purple-500 via-pink-500 to-blue-500 bg-clip-text text-transparent;
}

.futuristic-shadow {
  @apply shadow-[0_4px_30px_rgba(0,0,0,0.1)];
}

.card-hover {
  @apply transition-all duration-300 hover:scale-105 hover:shadow-[0_15px_30px_rgba(102,126,234,0.3)];
}

.sidebar-item {
  @apply flex items-center gap-3 px-4 py-3 rounded-xl transition-all duration-200 bg-white/5 hover:bg-white/10 cursor-pointer;
}
.sidebar-item.active {
  @apply bg-gradient-to-r from-purple-500 to-blue-500 text-white;
}

.metric-card {
  @apply glass-effect p-6 card-hover;
}

.contact-card {
  @apply glass-effect p-4 card-hover cursor-pointer;
}

.search-input {
  @apply glass-effect px-4 py-3 w-full text-white placeholder-gray-300 border-0 focus:ring-2 focus:ring-purple-500 focus:outline-none;
}

.empty-state {
  @apply flex flex-col items-center justify-center py-16 text-center text-muted-foreground;
}

.status-badge {
  @apply px-3 py-1 rounded-full text-xs font-semibold uppercase tracking-wide;
}
.status-c {
  @apply bg-green-500/10 text-green-400 border border-green-400/30;
}
.status-l {
  @apply bg-blue-500/10 text-blue-400 border border-blue-400/30;
}
.status-p {
  @apply bg-purple-500/10 text-purple-400 border border-purple-400/30;
}
.status-pending {
  @apply bg-yellow-500/10 text-yellow-400 border border-yellow-400/30;
}

@keyframes gradient-shift {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

.animate-gradient-shift {
  background-size: 200% auto;
  animation: gradient-shift 6s ease infinite;
}
.animate-gradient-slow {
  background-size: 400% 400%;
  animation: gradient-shift 8s ease infinite;
}

.feature-block.opacity-100 {
  opacity: 1;
}

.mapboxgl-popup-content {
  background-color: #2d3748;
  color: #edf2f7;
  border-radius: 8px;
  padding: 10px 15px;
}
.mapboxgl-popup-close-button {
  color: #edf2f7;
}

.floating-animation {
  animation: floating 6s ease-in-out infinite;
}

@keyframes floating {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-12px); }
}

.pulse-glow {
  animation: pulse-glow 2s ease-in-out infinite alternate;
}
@keyframes pulse-glow {
  from { box-shadow: 0 0 10px rgba(102, 126, 234, 0.4); }
  to { box-shadow: 0 0 25px rgba(102, 126, 234, 0.8); }
}

.filter-button {
  @apply px-4 py-2 rounded-lg transition-all duration-200 text-sm font-medium;
}
.filter-button.active {
  @apply bg-gradient-to-r from-purple-600 to-blue-500 text-white shadow-md;
}
.filter-button:not(.active) {
  @apply bg-white/10 text-gray-300 hover:bg-white/20;
}

/* === ESTILS PER A LLIBRERIES EXTERNES === */
.mapboxgl-popup-content {
  background-color: #1f2937;
  color: #ffffff;
  border-radius: 8px;
  padding: 8px 12px;
}

.mapboxgl-popup-tip {
  border-top-color: #1f2937 !important;
}

.mapboxgl-popup-close-button {
  color: #ffffff !important;
}

.popup-dark .mapboxgl-popup-content {
  background-color: #1f2937;
  color: #d1d5db;
  border-radius: 8px;
  padding: 12px;
  box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
  font-family: inherit;
}
.popup-dark .mapboxgl-popup-tip {
  border-top-color: #1f2937 !important;
}
.popup-dark .mapboxgl-popup-close-button {
  color: #9ca3af;
}
.popup-dark .mapboxgl-popup-close-button:hover {
  background-color: #374151;
}

.custom-scrollbar::-webkit-scrollbar {
  width: 8px;
}
.custom-scrollbar::-webkit-scrollbar-track {
  background: transparent;
}
.custom-scrollbar::-webkit-scrollbar-thumb {
  background: #4b5563;
  border-radius: 4px;
}
.custom-scrollbar::-webkit-scrollbar-thumb:hover {
  background: #6b7280;
}

input[type="range"].slider {
  -webkit-appearance: none;
  appearance: none;
  background: transparent;
  cursor: ew-resize;
}
input[type="range"].slider::-webkit-slider-runnable-track {
  background: hsl(var(--muted));
  height: 0.5rem;
  border-radius: 9999px;
}
input[type="range"].slider::-moz-range-track {
  background: hsl(var(--muted));
  height: 0.5rem;
  border-radius: 9999px;
}
input[type="range"].slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  background: hsl(var(--primary));
  height: 1rem;
  width: 1rem;
  border-radius: 50%;
  border: 2px solid hsl(var(--primary-foreground));
  margin-top: -0.25rem;
  transition: all 0.2s ease;
}
input[type="range"].slider::-moz-range-thumb {
  background: hsl(var(--primary));
  height: 1rem;
  width: 1rem;
  border-radius: 50%;
  border: 2px solid hsl(var(--primary-foreground));
  transition: all 0.2s ease;
}

.text-muted-strong {
  color: hsl(220, 10%, 35%);
}

@layer components {
  .prose-email {
    @apply break-words;
  }
  .prose-email a {
    @apply text-blue-500 hover:underline;
  }
  .prose-email p {
    @apply mb-4 leading-relaxed;
  }
  .prose-email blockquote {
    @apply border-l-4 border-border pl-4 italic text-muted-foreground;
  }
  .prose-email ul, .prose-email ol {
    @apply list-inside list-disc pl-4;
  }

  .prose-email img,
  .prose-email video,
  .prose-email iframe {
    @apply max-w-full h-auto rounded-md;
  }

  .prose-email table {
    @apply w-full table-fixed;
  }

  .prose-email pre {
    @apply whitespace-pre-wrap break-words;
  }
  /* ========================================================================= */
/* FORÇAR EL TEMA CLAR DE REACT-BIG-CALENDAR (Requisit 1) */
/* Aplicar aquesta classe a l'embolcall del component Calendar */
/* ========================================================================= */
.rbc-calendar-force-light-theme {
  /* Forçar fons blanc i colors clars per defecte */
  background-color: white !important;
  color: #000 !important; /* Text fosc */
  border-radius: 8px; /* Opcional: per millorar la visualització */
  padding: 1rem;
}

.rbc-calendar-force-light-theme .rbc-header {
  color: #333 !important; /* Caps de setmana */
  border-bottom-color: #eee !important;
  background-color: #f8f8f8 !important; /* Fons del capçalera */
}

.rbc-calendar-force-light-theme .rbc-day-bg {
  background-color: white !important;
}

.rbc-calendar-force-light-theme .rbc-today {
  background-color: #e6f7ff !important; /* Color per al dia d'avui */
}

.rbc-calendar-force-light-theme .rbc-toolbar button {
  color: #333 !important;
  border-color: #ccc !important;
}

/* Fons de les cel·les per a vistes de mes/setmana */
.rbc-calendar-force-light-theme .rbc-row-segment, 
.rbc-calendar-force-light-theme .rbc-time-slot, 
.rbc-calendar-force-light-theme .rbc-time-view,
.rbc-calendar-force-light-theme .rbc-month-view,
.rbc-calendar-force-light-theme .rbc-agenda-view {
  background-color: white !important;
}

/* Sobreescriure qualsevol ombra o text fosc residual */
.rbc-calendar-force-light-theme .rbc-off-range-bg {
  background-color: #fafafa !important;
}

.rbc-calendar-force-light-theme .rbc-date-cell {
  color: #333 !important;
}

/* El text dels dies que no són del mes */
.rbc-calendar-force-light-theme .rbc-off-range .rbc-date-cell {
  color: #999 !important;
}

.rbc-calendar-force-light-theme .rbc-rtl .rbc-btn-group,
.rbc-calendar-force-light-theme .rbc-btn-group {
    background-color: transparent !important;
}

/* Assegurem que el cos de la vista de temps estigui clar */
.rbc-calendar-force-light-theme .rbc-time-view-resources .rbc-time-view-content {
    background-color: white !important;
}
.rbc-time-view .rbc-day-slot .rbc-events-container {
  display: flex;
  flex-direction: column;
  gap: 3px; /* Afegeix un petit espai vertical entre esdeveniments */
}
.rbc-time-view .rbc-event {
  position: relative !important;
  left: 0 !important;
  top: 0 !important;
  width: 100%;
}
.rbc-event {
  height: auto;
  min-height: 25px; /* Una alçada mínima per a esdeveniments curts */
}
/* Permetem que la cel·la de la franja horària creixi si el contingut la supera */
.rbc-day-slot .rbc-time-slot {
  flex-grow: 1;
}

}

/* === ESTILS PER A L'EDITOR TIPTAP === */
ul[data-type="taskList"] {
  list-style: none;
  padding: 0;
  padding-left: 1rem; 
}

ul[data-type="taskList"] li {
  display: flex;
  align-items: center; 
  margin-top: 0.5rem;
}

ul[data-type="taskList"] li > label {
  flex-shrink: 0;
  margin-right: 0.75rem;
  cursor: pointer;
  position: relative;
  width: 1rem;
  height: 1rem;
}

ul[data-type="taskList"] li > div {
  flex-grow: 1;
}

ul[data-type="taskList"] li::before {
  content: none;
}

/* ✅ NOU: Amaguem el checkbox original del navegador */
ul[data-type="taskList"] li input[type="checkbox"] {
  -webkit-appearance: none;
  appearance: none;
  background-color: transparent;
  margin: 0;
  font: inherit;
  width: 1rem;
  height: 1rem;
  border: 2px solid hsl(var(--border));
  border-radius: 0.25rem;
  transform: translateY(-0.075em);
  display: grid;
  place-content: center;
  transition: all 0.2s;
}

/* ✅ NOU: Creem el "check" de dins amb un pseudo-element */
ul[data-type="taskList"] li input[type="checkbox"]::before {
  content: "";
  width: 0.65em;
  height: 0.65em;
  transform: scale(0);
  transition: 120ms transform ease-in-out;
  box-shadow: inset 1em 1em hsl(var(--primary-foreground));
  background-color: CanvasText; /* Per a compatibilitat */
  -webkit-clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);
  clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);
}

/* ✅ NOU: Estil quan el checkbox està marcat */
ul[data-type="taskList"] li input[type="checkbox"]:checked {
  background-color: hsl(var(--primary));
  border-color: hsl(var(--primary));
}

ul[data-type="taskList"] li input[type="checkbox"]:checked::before {
  transform: scale(1);
}

ul[data-type="taskList"] li[data-checked="true"] > div > p {
  text-decoration: line-through;
  color: hsl(var(--muted-foreground));
}

// =================== FILE: src/app/layout.tsx ===================

/**
 * @file src/app/layout.tsx
 * @summary Layout raíz que solo actúa como un contenedor vacío.
 * No debe renderizar etiquetas <html> o <body>.
 */
import './globals.css';
import { ReactNode } from 'react';

export default function RootLayout({ children }: { children: ReactNode }) {
  // Simplemente devuelve los hijos sin añadir ninguna etiqueta.
  // El layout de [locale] se encargará del <html> y <body>.
  return children;
}

// =================== FILE: src/app/page.tsx ===================

/**
 * @file src/app/page.tsx (Root Page)
 * @summary Aquesta pàgina no renderitza res. El middleware s'activa abans.
 */
export default function RootPage() {
  return null;
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/actions.ts ===================

// src/app/[locale]/(app)/comunicacio/inbox/actions.ts
"use server";

import { revalidatePath } from "next/cache";
import { validateUserSession } from "@/lib/supabase/session";
import type { Database } from "@/types/supabase";
// ✨ CANVI: Importem tots els tipus necessaris des de la nostra font de la veritat.
import type { DbTableInsert, EnrichedTicket, TicketFilter } from '@/types/db';

interface ActionResult {
  success: boolean;
  message?: string;
}


// ✅ 1. Canviem la definició de 'type' a 'interface'.
//    Això fa que l'extensió del tipus base sigui més clara per a TypeScript.
export type TicketForSupplier = Database['public']['Tables']['tickets']['Row'] & {
  contacts: {
    id: number;
    nom: string | null;
    email: string | null;
  } | null;
};
/**
 * Retorna el cos d'un tiquet.
 */
export async function getTicketBodyAction(ticketId: number): Promise<{ body: string }> {
  const session = await validateUserSession();
  if ('error' in session) return { body: `<p>Error: ${session.error.message}</p>` };
  const { supabase } = session;

  const { data, error } = await supabase
    .from("tickets")
    .select("body")
    .eq("id", ticketId)
    .single();

  if (error) {
    console.error("Error fetching ticket body:", error);
    return { body: "<p>Error carregant el cos del tiquet.</p>" };
  }
  return { body: data.body ?? "<p>(Sense contingut)</p>" };
}

/**
 * Elimina un tiquet.
 */
export async function deleteTicketAction(ticketId: number): Promise<ActionResult> {
  const session = await validateUserSession();
  if ('error' in session) return { success: false, message: session.error.message };
  const { supabase } = session;

  const { error } = await supabase.from("tickets").delete().eq("id", ticketId);
  if (error) {
    return { success: false, message: "No s'ha pogut eliminar el tiquet." };
  }
  revalidatePath("/comunicacio/inbox");
  return { success: true, message: "Tiquet eliminat." };
}

/**
 * Marca un tiquet com a llegit.
 */
export async function markTicketAsReadAction(ticketId: number): Promise<ActionResult> {
  const session = await validateUserSession();
  if ('error' in session) return { success: false, message: session.error.message };
  const { supabase } = session;

  const { error } = await supabase.from("tickets").update({ status: "Llegit" }).eq("id", ticketId);
  if (error) {
    return { success: false, message: "No s'ha pogut marcar com a llegit." };
  }
  revalidatePath("/comunicacio/inbox", 'page');
  return { success: true };
}

/**
 * sendEmailAction
 */
interface SendEmailParams {
  contactId: number; // ✨ CANVI: L'ID del contacte és un número.
  subject: string;
  htmlBody: string;
  isReply: boolean;
}

export async function sendEmailAction({
  contactId,
  subject,
  htmlBody,
  isReply,
}: SendEmailParams): Promise<ActionResult> {
  const session = await validateUserSession();
  if ('error' in session) return { success: false, message: session.error.message };
  const { supabase, user, activeTeamId } = session; // Necessitem l'usuari aquí.

  try {
    const { data: contact } = await supabase.from('contacts').select('id').eq('id', contactId).maybeSingle();
    if (!contact) return { success: false, message: "El contacte no pertany al teu equip actiu." };

    await supabase.functions.invoke("send-email", { body: { contactId, subject, htmlBody } });

    if (isReply) {
      const { data: existingOpportunities } = await supabase
        .from("opportunities")
        .select("id")
        .eq("contact_id", contactId)
        .limit(1);
      
      // ✨ CANVI: Utilitzem el tipus `DbTableInsert` per a una inserció segura.
      if (!existingOpportunities || existingOpportunities.length === 0) {
        const newOpportunity: DbTableInsert<'opportunities'> = {
          team_id: activeTeamId,
          user_id: user.id, // Afegim el user_id que és obligatori.
          contact_id: contactId,
          name: `Oportunitat: ${subject}`,
          stage_name: "Contactat",
          source: "Resposta Email",
          value: 0,
        };
        await supabase.from("opportunities").insert(newOpportunity);
      }
    }

    revalidatePath("/comunicacio/inbox");
    return { success: true, message: "Correu enviat correctament." };
  } catch (error: unknown) {
    const message = error instanceof Error ? error.message : "Error desconegut";
    console.error("Error en enviar l'email:", message);
    return { success: false, message: `Error en la Server Action: ${message}` };
  }
}

/**
 * Assigna un tiquet a un tracte (opportunity).
 */
export async function assignTicketAction(ticketId: number, dealId: number): Promise<ActionResult> {
  const session = await validateUserSession();
  if ('error' in session) return { success: false, message: session.error.message };
  const { supabase, activeTeamId } = session;

  // ✨ CANVI: Tipus segur per a la inserció.
  const newAssignment: DbTableInsert<'ticket_assignments'> = {
    ticket_id: ticketId,
    team_id: activeTeamId,
    deal_id: dealId
  };
  
  const { error } = await supabase.from('ticket_assignments').insert(newAssignment);

  if (error) {
    console.error("Error en assignar el tiquet:", error);
    return { success: false, message: "No s'ha pogut assignar el tiquet." };
  }

  revalidatePath("/comunicacio/inbox");
  return { success: true, message: "Tiquet assignat." };
}

/**
 * Carrega més tiquets de forma paginada.
 */
export async function loadMoreTicketsAction(page: number, filter: TicketFilter, inboxOwnerId: string): Promise<EnrichedTicket[]> {
    const session = await validateUserSession();
    if ('error' in session) return [];
    const { supabase, user, activeTeamId } = session;

    const { data: permissions } = await supabase.from('inbox_permissions').select('target_user_id').eq('team_id', activeTeamId).eq('grantee_user_id', user.id);
    const allVisibleUserIds = [user.id, ...(permissions?.map(p => p.target_user_id) || [])];
    const visibleUserIds = inboxOwnerId === 'all' ? allVisibleUserIds : [inboxOwnerId];
    const ITEMS_PER_PAGE = 50;
    const offset = (page - 1) * ITEMS_PER_PAGE;
    
    let query = supabase
        .from("enriched_tickets")
        .select('*')
        .in('user_id', visibleUserIds)
        .order("sent_at", { ascending: false })
        .range(offset, offset + ITEMS_PER_PAGE - 1);
    
    if (filter === "rebuts") {
        query = query.or("type.eq.rebut,type.is.null");
    } else if (filter === "enviats") {
        query = query.eq("type", "enviat");
    }

    const { data, error } = await query;

    if (error) {
        console.error("Error loading more tickets:", error);
        return [];
    }
    
    // El 'data' ja ve tipat correctament com a EnrichedTicket[] gràcies a la generació de tipus.
    return data || [];
}
/**
 * Afegeix un email a la llista negra.
 */
export async function addToBlacklistAction(emailToBlock: string): Promise<ActionResult> {
  const session = await validateUserSession();
  if ('error' in session) return { success: false, message: session.error.message };
  const { supabase, user, activeTeamId } = session;

  const cleanedEmail = emailToBlock.trim().toLowerCase();
  if (!cleanedEmail) return { success: false, message: "L'email no pot estar buit." };

  try {
    // ✨ CANVI: Tipus segur per a la inserció.
    const newRule: DbTableInsert<'blacklist_rules'> = {
      team_id: activeTeamId,
      user_id: user.id,
      value: cleanedEmail,
      rule_type: 'email',
    };
    await supabase.from('blacklist_rules').insert(newRule).throwOnError();

    revalidatePath("/comunicacio/inbox");
    return { success: true, message: `${cleanedEmail} ha estat afegit a la llista negra.` };

  } catch (error) {
    if (error instanceof Error && error.message.includes('duplicate key value')) {
      return { success: false, message: "Aquest correu ja és a la llista negra." };
    }
    console.error("Error afegint a la blacklist:", error);
    const message = error instanceof Error ? error.message : "Error desconegut.";
    return { success: false, message };
  }
}
/**
 * Vincula tots els tiquets d'un remitent a un contacte existent.
 */
export async function linkTicketsToContactAction(contactId: number, senderEmail: string): Promise<ActionResult> {
  const session = await validateUserSession();
  if ('error' in session) return { success: false, message: session.error.message };
  const { supabase, user } = session;

  try {
    await supabase
      .from("tickets")
      .update({ contact_id: contactId })
      .eq("user_id", user.id)
      .eq("sender_email", senderEmail.toLowerCase());

    revalidatePath("/comunicacio/inbox");
    return { success: true, message: "Contacte vinculat correctament." };
  } catch (error: unknown) {
    const message = error instanceof Error ? error.message : "Error desconegut al vincular tiquets.";
    return { success: false, message };
  }
}
/**
 * Carrega tiquets de forma paginada o per cerca.
 */

export async function getTicketsAction(
  page: number, 
  filter: TicketFilter, 
  inboxOwnerId: string,
  searchTerm: string = ''
): Promise<EnrichedTicket[]> {
  const session = await validateUserSession();
  if ('error' in session) return [];
  const { supabase, user, activeTeamId } = session;

  const { data: permissions } = await supabase.from('inbox_permissions').select('target_user_id').eq('team_id', activeTeamId).eq('grantee_user_id', user.id);
  const allVisibleUserIds = [user.id, ...(permissions?.map(p => p.target_user_id) || [])];
  const visibleUserIds = inboxOwnerId === 'all' ? allVisibleUserIds : [inboxOwnerId];
  const ITEMS_PER_PAGE = 50;
  const offset = (page - 1) * ITEMS_PER_PAGE;
  
  // ✨ CORRECCIÓ: Passem el 'filter' a la funció RPC com a 'p_active_filter'
  const { data, error } = await supabase.rpc('get_inbox_tickets', {
    p_user_id: user.id,
    p_team_id: activeTeamId,
    p_visible_user_ids: visibleUserIds,
    p_limit: ITEMS_PER_PAGE,
    p_offset: offset,
    p_search_term: searchTerm,
    p_active_filter: filter // Passem el filtre actiu
  });
  
  if (error) {
    console.error("Error a getTicketsAction:", error);
    return [];
  }

  return (data ?? []) as EnrichedTicket[];
}
/**
 * Carrega un tiquet específic pel seu ID.
 */
export async function getTicketByIdAction(ticketId: number): Promise<{ data: EnrichedTicket | null, error: string | null }> {
  try {
    const session = await validateUserSession();
    if ('error' in session) {
      throw new Error(session.error.message);
    }
    const { supabase, user, activeTeamId } = session;
    if (!user) throw new Error('User not authenticated');

    // 1. Calculem TOTS els IDs visibles (llista de permisos)
    const { data: permissions } = await supabase.from('inbox_permissions').select('target_user_id').eq('team_id', activeTeamId).eq('grantee_user_id', user.id);
    const visibleUserIds = [user.id, ...(permissions?.map(p => p.target_user_id) || [])];
    
    // 🔑 FIX CLAU: Fem una consulta directa a la taula/vista 'enriched_tickets'
    //             en lloc de cridar l'RPC amb paràmetres incorrectes.
    const { data: ticket, error } = await supabase
        .from('enriched_tickets')
        .select('*')
        .eq('id', ticketId) // Filtrem pel ticketId
        .in('user_id', visibleUserIds) // 🔒 Restricció de seguretat (visibilitat)
        .limit(1)
        .single(); // Utilitzem .single() perquè busquem per ID (hauria de ser únic)

    if (error) {
        console.error('Error in getTicketByIdAction (database):', error);
        throw error;
    }
    
    if (!ticket) {
        // Això es dispara si es troba l'ID però l'usuari no té permís (o no existeix)
        return { data: null, error: "No s'ha pogut trobar el correu especificat (ID vàlid però accés denegat o no existeix)." };
    }

    // Si tot va bé, retornem el tiquet
    return { data: ticket as EnrichedTicket, error: null };

  } catch (err: unknown) {
    console.error('Error in getTicketByIdAction (debug):', err);
    const errorMessage = err instanceof Error ? err.message : String(err);
    return { data: null, error: `Error intern en carregar el tiquet: ${errorMessage}` };
  }
}
/**
 * Obté els tickets dels contactes associats a un proveïdor.
 */
export async function fetchTicketsForSupplierContacts(supplierId: string): Promise<TicketForSupplier[]> {
  const session = await validateUserSession();
  if ("error" in session) return [];
  const { supabase, activeTeamId } = session;

  const { data: contacts, error: contactsError } = await supabase
    .from('contacts')
    .select('id')
    .eq('supplier_id', supplierId)
    .eq('team_id', activeTeamId);

  if (contactsError || !contacts || contacts.length === 0) {
    return [];
  }

  const contactIds = contacts.map(c => c.id);

  const { data: tickets, error: ticketsError } = await supabase
    .from('tickets')
    .select('*, contacts(id, nom, email)')
    .in('contact_id', contactIds)
    .eq('team_id', activeTeamId)
    .order('last_message_at', { ascending: false });

  if (ticketsError) {
    console.error("Error fetching tickets for supplier contacts:", ticketsError);
    return [];
  }

  // Fem un 'cast' per assegurar que les dades retornades compleixen amb la nostra interface.
  return (tickets as TicketForSupplier[]) || [];
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/page.tsx ===================

/**
 * @file src/app/[locale]/(app)/comunicacio/inbox/page.tsx (VERSIÓ FINAL)
 */
import { Suspense } from 'react';
import type { Metadata } from 'next';
import { InboxData } from './_components/InboxData';
import { InboxSkeleton } from './_components/InboxSkeleton';

export const metadata: Metadata = {
  title: 'Bandeja de Entrada | Ribot',
};

// Aquesta pàgina ja no necessita cap prop. És un component estàtic.
export default function InboxPage() {
  return (
    // Sense 'key' dinàmica. El client gestionarà els canvis.
    <Suspense fallback={<InboxSkeleton />}>
      <InboxData />
    </Suspense>
  );
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_components/ComposeDialog.tsx ===================

// src/app/[locale]/(app)/comunicacio/inbox/_components/ComposeDialog.tsx
"use client";

import React from 'react';
import { useTranslations } from 'next-intl';
import { EditorContent } from '@tiptap/react';
import { Loader2, Send, FileText, Variable, User, Mail, Search } from 'lucide-react';

// Components de UI
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { EmailEditorToolbar } from './EmailEditorToolbar';

// Hook i Tipus
import { useCompose } from '../_hooks/useCompose';
// ✨ CANVI: Importem els tipus de la nostra única font de la veritat.
import type { Contact, Template } from '@/types/db';

export type InitialData = {
  contactId?: string | null;
  to?: string | null;
  subject?: string | null;
  body?: string | null;
};

interface ComposeDialogProps {
  open: boolean;
  onOpenChange: (isOpen: boolean) => void;
  onEmailSent: () => void;
  initialData: InitialData | null;
  templates: Template[];
  contacts: Contact[];
}

export const ComposeDialog = (props: ComposeDialogProps) => {
  const { open, onOpenChange, onEmailSent, initialData, templates, contacts } = props;
  const t = useTranslations('InboxPage');

  const {
    editor, subject, setSubject,
    selectedContactId, setSelectedContactId,
    contactSearch, setContactSearch,
    selectedTemplate, handleTemplateSelect,
    variableValues, setVariableValues,
    finalHtmlBody, filteredContacts, isSending, handleSend,
  } = useCompose({
    templates,
    contacts,
    initialData,
    onClose: () => onOpenChange(false),
    onEmailSent,
  });

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-6xl h-[90vh] flex flex-col">
        <DialogHeader>
          <DialogTitle>{t('composeDialogTitle')}</DialogTitle>
          <DialogDescription>{t('composeDialogDescription')}</DialogDescription>
        </DialogHeader>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 flex-1 min-h-0">
          <div className="lg:col-span-2 flex flex-col gap-4 min-h-0">
            <div className="relative">
              <Mail className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground" />
              <Input placeholder={t('subjectPlaceholder')} value={subject} onChange={e => setSubject(e.target.value)} className="pl-9" />
            </div>
            <div className="flex-1 flex flex-col gap-2 min-h-0">
              {!selectedTemplate && <EmailEditorToolbar editor={editor} />}
              {selectedTemplate ? (
                <div className="border rounded-md flex-1 bg-white">
                  <iframe srcDoc={finalHtmlBody} title={t('previewTitle')} className="w-full h-full border-0" />
                </div>
              ) : (
                <EditorContent editor={editor} className="flex-1 overflow-y-auto" />
              )}
            </div>
          </div>

          <div className="lg:col-span-1 flex flex-col gap-6 bg-muted/30 p-4 rounded-lg overflow-y-auto">
            <div className="space-y-2">
              <Label htmlFor="contact-select" className="flex items-center gap-2 font-semibold"><User className="w-4 h-4" />{t('recipientLabel')}</Label>
              <div className="relative">
                <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground" />
                <Input id="contact-search" placeholder={t('searchContactPlaceholder')} value={contactSearch} onChange={(e) => setContactSearch(e.target.value)} className="pl-9 mb-2" />
              </div>
              <Select onValueChange={(value) => setSelectedContactId(Number(value))} value={String(selectedContactId)}>
                <SelectTrigger id="contact-select"><SelectValue placeholder={t('selectContactPlaceholder')} /></SelectTrigger>
                <SelectContent>
                  {filteredContacts.length > 0 ? filteredContacts.map(contact => <SelectItem key={contact.id} value={String(contact.id)}>{contact.nom} ({contact.email})</SelectItem>) : <p className="p-4 text-sm text-muted-foreground">{t('noContactsFound')}</p>}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
                <Label htmlFor="template-select" className="flex items-center gap-2 font-semibold"><FileText className="w-4 h-4" />{t('templateLabel')}</Label>
                <Select onValueChange={handleTemplateSelect} defaultValue="none" disabled={templates.length === 0}>
                    <SelectTrigger id="template-select"><SelectValue placeholder={t('selectTemplatePlaceholder')} /></SelectTrigger>
                    <SelectContent>
                        <SelectItem value="none">{t('noTemplateOption')}</SelectItem>
                        {templates.map(template => <SelectItem key={template.id} value={template.id.toString()}>{template.name}</SelectItem>)}
                    </SelectContent>
                </Select>
            </div>

            {selectedTemplate?.variables && Array.isArray(selectedTemplate.variables) && selectedTemplate.variables.length > 0 && (
                <div className="space-y-4">
                    <Label className="flex items-center gap-2 font-semibold"><Variable className="w-4 h-4 text-primary" />{t('variablesLabel')}</Label>
                    <div className="space-y-3">
                        {(selectedTemplate.variables as string[]).map(varName => (
                            <div key={varName} className="space-y-1.5">
                                <label htmlFor={`var-${varName}`} className="text-xs font-medium text-muted-foreground">{`{{${varName}}}`}</label>
                                <Input
                                    id={`var-${varName}`}
                                    value={variableValues[varName] || ''}
                                    onChange={e => setVariableValues(prev => ({ ...prev, [varName]: e.target.value }))}
                                    placeholder={t('variablePlaceholder', { varName })}
                                />
                            </div>
                        ))}
                    </div>
                </div>
            )}
          </div>
        </div>
        <DialogFooter className="pt-4 border-t">
          <Button variant="ghost" onClick={() => onOpenChange(false)}>{t('cancelButton')}</Button>
          <Button onClick={handleSend} disabled={isSending}>
            {isSending ? <Loader2 className="w-4 h-4 mr-2 animate-spin" /> : <Send className="w-4 h-4 mr-2" />}
            {t('sendButton')}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_components/ContactPanel.tsx ===================

// src/app/[locale]/(app)/comunicacio/inbox/_components/ContactPanel.tsx
"use client";

import React, { useMemo, useTransition } from 'react';
import { Button } from '@/components/ui/button';
import { User, Building, UserPlus, Mail, Phone, MapPin, ExternalLink, Euro, Ban, Loader2 } from 'lucide-react';
import Link from 'next/link';
import { toast } from 'sonner';

import { ContactDialog } from '@/app/[locale]/(app)/crm/contactes/_components/ContactDialog';
import { addToBlacklistAction } from '../actions';

// ✨ CANVI: Importem els tipus directament des de la nostra única font de la veritat.
import type { Contact, EnrichedTicket } from '@/types/db';

interface ContactPanelProps {
    ticket: EnrichedTicket | null;
    isPendingSave: boolean;
    onSaveContact: (newlyCreatedContact: Contact, originalTicket: EnrichedTicket) => void;
    allTeamContacts: Contact[];
}

export const ContactPanel: React.FC<ContactPanelProps> = ({ ticket, isPendingSave, onSaveContact, allTeamContacts }) => {
    const [isPending, startTransition] = useTransition();

    // Simplifiquem la lògica per trobar el contacte a mostrar.
    const contactToShow: Contact | null = useMemo(() => {
        if (!ticket) return null;

        // Cas 1: El tiquet ja té un contact_id vinculat.
        // Construïm un objecte 'Contact' a partir de les dades planes de 'EnrichedTicket'.
        if (ticket.contact_id && ticket.contact_nom) {
            return {
                id: ticket.contact_id,
                nom: ticket.contact_nom,
                email: ticket.contact_email || '',
                // Afegim la resta de camps com a null o valors per defecte, ja que no els tenim a la vista.
                // Això és suficient per a la visualització.
                empresa: null,
                telefon: null,
                ubicacio: null,
                valor: null,
                estat: null,
                created_at: null,
                address: null,
                birthday: null,
                children_count: null,
                hobbies: null,
                industry: null,
                job_title: null,
                last_interaction_at: null,
                lead_source: null,
                marital_status: null,
                notes: null,
                partner_name: null,
                social_media: null,
                team_id: null,
                ultim_contacte: null,
                user_id: null,
                supplier_id: null, // <-- Afegit per complir amb el tipus Contact
            };
        }

        // Cas 2: El tiquet no té contacte vinculat, busquem si existeix un contacte amb el mateix email.
        if (!ticket.sender_email) return null;
        const ticketEmail = ticket.sender_email.trim().toLowerCase();
        return allTeamContacts.find(c => c.email?.trim().toLowerCase() === ticketEmail) || null;

    }, [ticket, allTeamContacts]);

    const handleBlacklist = () => {
        if (!ticket || !ticket.sender_email) return;
        if (confirm(`Estàs segur que vols bloquejar ${ticket.sender_email}? Tots els seus correus no es descarregaran de nous.`)) {
            startTransition(async () => {
                const result = await addToBlacklistAction(ticket.sender_email!);
                toast[result.success ? 'success' : 'error'](result.message);
            });
        }
    };
    return (
        <div className="flex flex-col h-full border-l border-border bg-background/95">
            {!ticket ? (
                <div className="flex-1 flex flex-col items-center justify-center text-center p-4">
                    <User className="w-16 h-16 text-muted-foreground mb-4" />
                    <p className="text-muted-foreground">Selecciona un tiquet per veure'n els detalls.</p>
                </div>
            ) : contactToShow ? (
                <>
                    <div className="p-4 border-b flex justify-between items-center flex-shrink-0">
                        <h2 className="text-xl font-bold">Detalls del Contacte</h2>
                        <Button asChild variant="secondary" size="sm">
                            <Link href={`/crm/contactes/${contactToShow.id}`}>
                                Veure fitxa completa <ExternalLink className="w-4 h-4 ml-2" />
                            </Link>
                        </Button>
                    </div>
                    <div className="flex-1 overflow-y-auto p-6 space-y-4">
                        <div className="flex items-center gap-4">
                            <div className="w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center">
                                <User className="w-8 h-8 text-primary" />
                            </div>
                            <div>
                                <h3 className="text-lg font-semibold">{contactToShow.nom}</h3>
                                {contactToShow.empresa && (
                                    <p className="text-sm text-muted-foreground flex items-center gap-1.5">
                                        <Building className="w-4 h-4" />{contactToShow.empresa}
                                    </p>
                                )}
                            </div>
                        </div>
                        <div className="space-y-3 text-sm pt-4">
                            <div className="flex items-center gap-3">
                                <Mail className="w-4 h-4 text-muted-foreground flex-shrink-0" />
                                <a href={`mailto:${contactToShow.email}`} className="hover:underline truncate">{contactToShow.email}</a>
                            </div>
                            <div className="flex items-center gap-3">
                                <Phone className="w-4 h-4 text-muted-foreground flex-shrink-0" />
                                <span>{contactToShow.telefon || "No especificat"}</span>
                            </div>
                            <div className="flex items-center gap-3">
                                <MapPin className="w-4 h-4 text-muted-foreground flex-shrink-0" />
                                <span>{contactToShow.ubicacio || "No especificada"}</span>
                            </div>
                            <div className="flex items-center gap-3">
                                <Euro className="w-4 h-4 text-muted-foreground flex-shrink-0" />
                                <span>Valor: {contactToShow.valor ?? 0} €</span>
                            </div>
                            <div className="flex items-center gap-3">
                                <UserPlus className="w-4 h-4 text-muted-foreground flex-shrink-0" />
                                <span>Estat: <span className="font-medium">{contactToShow.estat}</span></span>
                            </div>
                        </div>
                    </div>
                </>
            ) : (
                // --- VISTA QUAN EL CONTACTE NO EXISTEIX ---
                <div className="flex-1 flex flex-col items-center justify-center text-center p-4">
                    <User className="w-16 h-16 text-muted-foreground mb-4" />
                    <p className="font-semibold">{ticket.sender_name}</p>
                    <p className="text-sm text-muted-foreground mb-4">{ticket.sender_email}</p>
                    <ContactDialog
                        trigger={
                            <Button disabled={isPendingSave}>
                                <UserPlus className="w-4 h-4 mr-2" />
                                Desa com a contacte
                            </Button>
                        }
                        initialData={{
                            nom: ticket.sender_name,
                            email: ticket.sender_email
                        }}
                        // ✅ CORRECCIÓ 2: La lògica aquí ara és correcta, ja que 'onSaveContact' espera dos paràmetres.
                        onContactSaved={(newContact) => onSaveContact(newContact as Contact, ticket)}
                    />
                </div>

            )}
            {ticket && (
                <div className="p-4 border-t mt-auto flex-shrink-0">
                    <Button
                        variant="destructive"
                        size="sm"
                        className="w-full"
                        onClick={handleBlacklist}
                        // ✅ CORRECCIÓ 2: Utilitzem 'isPending' per a desactivar el botó
                        disabled={isPendingSave || isPending}
                    >
                        {isPending ? (
                            <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                        ) : (
                            <Ban className="w-4 h-4 mr-2" />
                        )}
                        {isPending ? 'Bloquejant...' : 'Afegeix remitent a la llista negra'}
                    </Button>
                </div>
            )}
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_components/EmailEditorToolbar.tsx ===================

// Ubicació: /app/(app)/comunicacio/inbox/_components/EmailEditorToolbar.tsx

"use client";

import { type Editor } from '@tiptap/react';
import { Toggle } from '@/components/ui/toggle';
import { Bold, Italic, Strikethrough, List, ListOrdered, Heading2 } from 'lucide-react';

interface EmailEditorToolbarProps {
    editor: Editor | null;
}

export const EmailEditorToolbar = ({ editor }: EmailEditorToolbarProps) => {
    if (!editor) return null;

    return (
        <div className="border border-input bg-transparent rounded-md p-1 flex gap-1 flex-wrap">
            <Toggle size="sm" pressed={editor.isActive('bold')} onPressedChange={() => editor.chain().focus().toggleBold().run()}>
                <Bold className="h-4 w-4" />
            </Toggle>
            <Toggle size="sm" pressed={editor.isActive('italic')} onPressedChange={() => editor.chain().focus().toggleItalic().run()}>
                <Italic className="h-4 w-4" />
            </Toggle>
            <Toggle size="sm" pressed={editor.isActive('strike')} onPressedChange={() => editor.chain().focus().toggleStrike().run()}>
                <Strikethrough className="h-4 w-4" />
            </Toggle>
            <Toggle size="sm" pressed={editor.isActive('heading', { level: 2 })} onPressedChange={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}>
                <Heading2 className="h-4 w-4" />
            </Toggle>
            <Toggle size="sm" pressed={editor.isActive('bulletList')} onPressedChange={() => editor.chain().focus().toggleBulletList().run()}>
                <List className="h-4 w-4" />
            </Toggle>
            <Toggle size="sm" pressed={editor.isActive('orderedList')} onPressedChange={() => editor.chain().focus().toggleOrderedList().run()}>
                <ListOrdered className="h-4 w-4" />
            </Toggle>
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_components/InboxClient.tsx ===================

// src/app/[locale]/(app)/comunicacio/inbox/_components/InboxClient.tsx
"use client";

import React from 'react';
import { AnimatePresence } from 'framer-motion';
import { useMediaQuery } from '@/hooks/useMediaQuery';
import { useTranslations } from 'next-intl';
import { useInbox } from '../_hooks/useInbox';
import type { User } from '@supabase/supabase-js';
import type { Contact, EnrichedTicket, InboxPermission, TeamMemberWithProfile, Template } from '@/types/db';

// Components
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { TicketList } from './ticketList/index';
import { TicketDetail } from './TicketDetail';
import { ContactPanel } from './ContactPanel';
import { ComposeDialog } from './ComposeDialog';
import { MobileDetailView } from './MobileDetailView';

// ✅ Props simplificades. Ja no necessitem `initialSelectedTicket` ni `initialSelectedTicketBody`.
interface InboxClientProps {
  user: User;
  initialTickets: EnrichedTicket[];
  initialTemplates: Template[];
  initialReceivedCount: number;
  initialSentCount: number;
  teamMembers: TeamMemberWithProfile[];
  permissions: InboxPermission[];
  allTeamContacts: Contact[];
}

export function InboxClient(props: InboxClientProps) {
  const t = useTranslations('InboxPage');
  const isDesktop = useMediaQuery('(min-width: 1024px)');

  const {
    selectedTicket, ticketToDelete, activeFilter, composeState, selectedTicketBody,
    isBodyLoading, hasMore, searchTerm, isPending, isContactPanelOpen, inboxFilter,
    counts, enrichedTickets,
    setTicketToDelete, setActiveFilter, setComposeState, setSearchTerm,
    setIsContactPanelOpen, setInboxFilter, handleSelectTicket, handleDeleteTicket,
    handleLoadMore, handleSaveContact, handleComposeNew, handleReply, handleRefresh,
  } = useInbox({ 
      ...props, 
      initialUnreadCount: props.initialReceivedCount, 
      t 
  });

  return (
    <>
      <ComposeDialog
        open={composeState.open}
        onOpenChange={(isOpen) => setComposeState({ ...composeState, open: isOpen })}
        onEmailSent={handleRefresh}
        initialData={composeState.initialData}
        templates={props.initialTemplates}
        contacts={props.allTeamContacts}
      />
      <AlertDialog open={!!ticketToDelete} onOpenChange={() => setTicketToDelete(null)}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>{t("deleteConfirmTitle")}</AlertDialogTitle>
            <AlertDialogDescription>{t("deleteConfirmDescription")}</AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel disabled={isPending}>{t("cancelButton")}</AlertDialogCancel>
            <AlertDialogAction onClick={handleDeleteTicket} disabled={isPending}>{t("confirmDeleteButton")}</AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      <div
        className="h-[calc(100vh-var(--header-height,64px))] w-full grid transition-all duration-300 ease-in-out"
        style={{ gridTemplateColumns: isDesktop ? `384px 1fr minmax(0, ${isContactPanelOpen ? '320px' : '0px'})` : '1fr' }}
      >
        {(!isDesktop && selectedTicket) ? null : (
          <div className="min-h-0">
            <TicketList
              user={props.user}
              teamMembers={props.teamMembers}
              permissions={props.permissions}
              tickets={enrichedTickets}
              selectedTicketId={selectedTicket?.id ?? null}
              activeFilter={activeFilter}
              inboxFilter={inboxFilter}
              onSetInboxFilter={setInboxFilter}
              unreadCount={counts.unread}
              sentCount={counts.sent}
              totalCount={counts.received}
              onSetFilter={setActiveFilter}
              onDeleteTicket={setTicketToDelete}
              onSelectTicket={handleSelectTicket}
              onComposeNew={handleComposeNew}
              onRefresh={handleRefresh}
              hasMore={hasMore}
              onLoadMore={handleLoadMore}
              isPendingRefresh={isPending}
              searchTerm={searchTerm}
              onSearchChange={setSearchTerm}
            />
          </div>
        )}

        {isDesktop && (
          <div className="min-h-0">
            <TicketDetail
              ticket={selectedTicket}
              body={selectedTicketBody}
              isLoading={isBodyLoading}
              onReply={handleReply}
              isContactPanelOpen={isContactPanelOpen}
              onToggleContactPanel={() => setIsContactPanelOpen(prev => !prev)}
            />
          </div>
        )}
        
        {isDesktop && isContactPanelOpen && (
          <div className="overflow-hidden min-h-0">
            <ContactPanel
              ticket={selectedTicket}
              onSaveContact={handleSaveContact}
              isPendingSave={isPending}
              allTeamContacts={props.allTeamContacts}
            />
          </div>
        )}

        <AnimatePresence>
          {!isDesktop && selectedTicket && (
            <MobileDetailView
              ticket={selectedTicket}
              body={selectedTicketBody}
              isLoading={isBodyLoading}
              isPending={isPending}
              onClose={() => handleSelectTicket(null)}
              onReply={handleReply}
              onSaveContact={handleSaveContact}
            />
          )}
        </AnimatePresence>
      </div>
    </>
  );
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_components/InboxData.tsx ===================

// src/app/[locale]/(app)/comunicacio/inbox/_components/InboxData.tsx (VERSIÓ FINAL)
import { redirect } from 'next/navigation';
import { headers } from "next/headers";
import { InboxClient } from "./InboxClient";
import { getTeamMembersWithProfiles } from "@/lib/supabase/teams";
import { validateUserSession } from "@/lib/supabase/session";
import type { Contact, EnrichedTicket, TeamMemberWithProfile, Template, InboxPermission } from '@/types/db';

// Aquest component ja no rep 'searchParams'.
export async function InboxData() {
    // El servidor SEMPRE carrega la vista per defecte (sense cerca).
    const searchTerm = '';

    const session = await validateUserSession();
    const locale = (await (headers())).get('x-next-intl-locale') || 'ca';
    if ('error' in session) {
        redirect(`/${locale}/login`);
    }
    const { supabase, user, activeTeamId } = session;

    const { data: permissions, error: permissionsError } = await supabase
        .from('inbox_permissions').select('*').eq('team_id', activeTeamId).eq('grantee_user_id', user.id);
    
    if (permissionsError) console.error("Error en carregar els permisos de l'inbox:", permissionsError);
    
    const visibleUserIds = [user.id, ...(permissions?.map(p => p.target_user_id).filter(Boolean) || [])];
    
    const [teamMembersRes, allTeamContactsRes, templatesRes, receivedCountRes, sentCountRes, ticketsRes] = await Promise.all([
        getTeamMembersWithProfiles(supabase, activeTeamId),
        supabase.from('contacts').select('*').eq('team_id', activeTeamId),
        supabase.from("email_templates").select("*").eq('team_id', activeTeamId),
        supabase.rpc('get_inbox_received_count', { p_visible_user_ids: visibleUserIds }),
        supabase.rpc('get_inbox_sent_count', { p_visible_user_ids: visibleUserIds }),
        supabase.rpc('get_inbox_tickets', {
            p_user_id: user.id, p_team_id: activeTeamId, p_visible_user_ids: visibleUserIds,
            p_limit: 50, p_offset: 0, p_search_term: searchTerm
        })
    ]);

    if (ticketsRes.error) console.error("Error RPC (get_inbox_tickets):", ticketsRes.error);

    const teamMembers: TeamMemberWithProfile[] = teamMembersRes.data || [];
    const allTeamContacts: Contact[] = allTeamContactsRes.data || [];
    const templates: Template[] = templatesRes.data || [];
    const receivedCount = receivedCountRes.data || 0;
    const sentCount = sentCountRes.data || 0;
    const tickets: EnrichedTicket[] = (ticketsRes.data as EnrichedTicket[] || []);
    const safePermissions: InboxPermission[] = permissions || [];
    
    return (
        <InboxClient
            user={user} initialTickets={tickets} initialTemplates={templates}
            initialReceivedCount={receivedCount} initialSentCount={sentCount}
            teamMembers={teamMembers} permissions={safePermissions} allTeamContacts={allTeamContacts}
        />
    );
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_components/InboxSkeleton.tsx ===================

"use client";

/**
 * @summary Mostra un esquelet de càrrega per a la pàgina de l'Inbox.
 */
export function InboxSkeleton() {
  return (
    <div className="flex flex-row h-full w-full animate-pulse">
      {/* Esquelet de la llista de tiquets */}
      <div className="w-80 lg:w-96 flex-shrink-0 border-r border-border glass-card p-4 space-y-4">
        <div className="h-8 w-1/2 bg-gray-700/50 rounded-md"></div>
        <div className="flex gap-2">
          <div className="h-8 w-24 bg-gray-700/50 rounded-md"></div>
          <div className="h-8 w-24 bg-gray-700/50 rounded-md"></div>
        </div>
        <div className="space-y-4 pt-2">
          {[...Array(8)].map((_, i) => (
            <div key={i} className="h-16 bg-gray-800/50 rounded-md"></div>
          ))}
        </div>
      </div>
      
      {/* Esquelet del detall del tiquet */}
      <div className="flex-1 p-6 space-y-4">
        <div className="h-8 w-3/4 bg-gray-700/50 rounded-md"></div>
        <div className="h-4 w-full bg-gray-700/50 rounded-md"></div>
        <div className="h-4 w-full bg-gray-700/50 rounded-md"></div>
        <div className="h-4 w-5/6 bg-gray-700/50 rounded-md"></div>
      </div>

      {/* Esquelet del panell de contacte */}
      <div className="w-80 lg:w-96 flex-shrink-0 border-l border-border glass-card p-4 space-y-4 hidden lg:block">
        <div className="h-8 w-1/2 bg-gray-700/50 rounded-md"></div>
        <div className="flex items-center gap-4">
          <div className="w-16 h-16 bg-gray-700/50 rounded-full"></div>
          <div className="flex-1 space-y-2">
            <div className="h-5 w-full bg-gray-700/50 rounded-md"></div>
            <div className="h-4 w-3/4 bg-gray-700/50 rounded-md"></div>
          </div>
        </div>
        <div className="h-4 w-full bg-gray-700/50 rounded-md"></div>
        <div className="h-4 w-full bg-gray-700/50 rounded-md"></div>
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_components/MobileDetailView.tsx ===================

// src/app/[locale]/(app)/comunicacio/inbox/_components/MobileDetailView.tsx
"use client";

import { motion } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { X, Reply, Info, UserPlus, Loader2 } from 'lucide-react'; 
import React from 'react';
import { ContactDialog } from '../../../crm/contactes/_components/ContactDialog';
import { SafeEmailRenderer } from './SafeEmailRenderer';

// ✨ CANVI: Importem els tipus de la nostra única font de la veritat.
import type { Contact, EnrichedTicket } from '@/types/db';

interface MobileDetailViewProps {
  ticket: EnrichedTicket;
  body: string | null;
  isLoading: boolean;
  isPending: boolean;
  onClose: () => void;
  onReply: (ticket: EnrichedTicket) => void;
  onSaveContact: (newlyCreatedContact: Contact, originalTicket: EnrichedTicket) => void;
}

export function MobileDetailView({ ticket, body, isLoading, isPending, onClose, onReply, onSaveContact }: MobileDetailViewProps) {
    const t = (key: string) => ({
        'closeButton': "Tanca", 'fromLabel': "De", 'replyButton': "Respon",
        'senderDetailsLabel': "Detalls del remitent", 'nameLabel': "Nom", 'emailLabel': "Correu",
        'saveContactButton': "Desa com a contacte"
    }[key] || key);
  
  return (
    <motion.div 
      key={ticket.id} 
      initial={{ x: '100%' }} 
      animate={{ x: 0 }} 
      exit={{ x: '100%' }} 
      transition={{ type: 'tween', ease: 'easeInOut', duration: 0.3 }} 
      className="absolute inset-0 flex flex-col bg-background z-20"
    >
      <div className="p-2 border-b border-border flex justify-between items-center flex-shrink-0">
        <div className="flex items-center min-w-0">
          <Button variant="ghost" size="icon" onClick={onClose} className="flex-shrink-0" aria-label={t('closeButton')}>
            <X className="w-5 h-5" />
          </Button>
          <div className="ml-2 truncate">
            <p className="font-semibold truncate" title={ticket.subject ?? undefined}>{ticket.subject}</p>
            <p className="text-sm text-muted-foreground truncate" title={(ticket.contact_nom || ticket.sender_name) ?? undefined}>
              {t('fromLabel')}: {ticket.contact_nom || ticket.sender_name}
            </p>
          </div>
        </div>
        <Button size="sm" variant="outline" className="mr-2 flex-shrink-0" onClick={() => onReply(ticket)}>
          <Reply className="mr-2 h-4 w-4" />
          {t('replyButton')}
        </Button>
      </div>
      
      <div className="flex-1 min-h-0 flex flex-col">
        <div className="p-4 md:p-6 flex-shrink-0">
          <details className="border rounded-lg p-3 bg-muted/50">
            <summary className="cursor-pointer font-semibold flex items-center gap-2 text-sm">
              <Info className="w-4 h-4 text-primary" /> {t('senderDetailsLabel')}
            </summary>
            <div className="mt-3 pt-3 border-t space-y-2 text-sm">
              {/* ✨ CORRECCIÓ: Utilitzem les propietats planes de EnrichedTicket */}
              <p><strong>{t('nameLabel')}:</strong> {ticket.contact_nom || ticket.sender_name}</p>
              <p><strong>{t('emailLabel')}:</strong> {ticket.contact_email || ticket.sender_email}</p>
              {!ticket.contact_id && (
                <ContactDialog
                  trigger={
                    <Button size="sm" className="w-full mt-2" disabled={isPending}>
                      <UserPlus className="w-4 h-4 mr-2"/>
                      {t('saveContactButton')}
                    </Button>
                  }
                  initialData={{
                    nom: ticket.sender_name || '',
                    email: ticket.sender_email || ''
                  }}
                  onContactSaved={(newContact) => onSaveContact(newContact as Contact, ticket)}
                />
              )}
            </div>
          </details>
        </div>
        <div className="flex-1 relative">
          {isLoading ? (
            <div className="absolute inset-0 flex items-center justify-center">
              <Loader2 className="w-8 h-8 animate-spin text-primary" />
            </div>
          ) : (
            <div className="absolute inset-0">
                 <SafeEmailRenderer htmlBody={body || ''} />
            </div>
          )}
        </div>
      </div>
    </motion.div>
  );
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_components/SafeEmailRenderer.tsx ===================

// src/app/[locale]/(app)/comunicacio/inbox/_components/SafeEmailRenderer.tsx
"use client";

import React, { useMemo, useRef, useState, useEffect } from 'react';

interface SafeEmailRendererProps {
    htmlBody: string;
}

// ====================================================================================
// CSS v4.0: MÀXIMA COMPATIBILITAT I FIDELITAT
// ====================================================================================
const compatibilityStyles = `
    /* --- 1. PREPARACIÓ DE L'ENTORN --- */
    :root {
        color-scheme: dark light;
    }
    body {
        background-color: transparent;
        color: hsl(var(--foreground));
        margin: 0;
        /* ✅ NOU: El padding es posa aquí, dins de l'iframe, no fora. */
        padding: 0; /* ✅ CANVI: El padding ara anirà al wrapper */
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
        /* ✅ NOU: Assegurem que paraules llargues (URLs, etc.) no trenquin el layout */
        word-wrap: break-word;
        overflow-wrap: break-word;
    }
    * {
        box-sizing: border-box;
    }

    /* --- 2. REGLES DE SEGURETAT ESTRUCTURAL (NO NEGOCIABLE) --- */
    img, video, iframe, embed, object {
        max-width: 100% !important;
        height: auto !important;
        width: auto; /* Permet que s'encongeixi si cal */
    }

    table {
        /* ✅ MILLORAT: Forcem un layout que respecti l'amplada màxima */
        table-layout: fixed;
        width: 100% !important; /* Molts correus antics no ho fan bé */
        max-width: 100% !important;
    }
    
    td, th {
       /* ✅ NOU: Permet que el text dins les cel·les es trenqui correctament */
       word-break: break-word;
    }

    /* --- 3. SOLUCIÓ AL PROBLEMA DEL TEXT FOSC SOBRE FONS FOSC (MANTINGUT) --- */
    [style*="color:#000"]:not([style*="background"]),
    [style*="color:black"]:not([style*="background"]),
    [style*="color:#000000"]:not([style*="background"]) {
        color: hsl(var(--foreground)) !important;
    }

    /* --- 4. MILLORES DE VISUALITZACIÓ --- */
    a {
        /* ✅ NOU: Donem un color als enllaços per defecte, si el correu no ho fa */
        color: hsl(var(--primary));
    }
           /* ✅ NOU: El wrapper que actua com a llenç per al correu */
    #email-wrapper {
        background-color: #ffffff; /* Fons blanc garantit */
        color: #000000; /* Color de text per defecte negre */
        padding: 1.5rem; /* El padding que abans teníem al body */
    }
`;

export const SafeEmailRenderer: React.FC<SafeEmailRendererProps> = ({ htmlBody }) => {
    const iframeRef = useRef<HTMLIFrameElement>(null);
    // ✅ MILLORAT: Comencem amb '100%' per evitar salts visuals mentre es calcula l'alçada real
    const [iframeHeight, setIframeHeight] = useState<string | number>('100%');

    const documentSource = useMemo(() => {
        return `
            <!DOCTYPE html>
            <html>
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <style>${compatibilityStyles}</style>
                </head>
                <body>
                    <div id="email-wrapper">
                        ${htmlBody}
                    </div>
                    <script>
                        document.addEventListener('DOMContentLoaded', () => {
                            const body = document.body;
                            const html = document.documentElement;
                            const sendHeight = () => {
                                // Utilitzem el màxim de diverses propietats per ser més robustos
                                const height = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);
                                window.parent.postMessage({ type: 'iframeResize', height: height }, '*');
                            };
                            
                         // ✅ LÒGICA DEBOUNCE:
                            // Aquesta funció embolcalla 'sendHeight' i s'assegura que no es cridi
                            // massa ràpidament, esperant 150ms d'inactivitat.
                            const debouncedSendHeight = () => {
                                clearTimeout(debounceTimeout);
                                debounceTimeout = setTimeout(sendHeight, 150);
                            };


                            // Observem canvis en el cos (imatges que es carreguen, contingut dinàmic)
                            const resizeObserver = new ResizeObserver(sendHeight);
                            resizeObserver.observe(body);

                            // Un últim intent quan tots els recursos (imatges) s'han carregat
                            window.addEventListener('load', sendHeight);
                        });
                    </script>
                </body>
            </html>
        `;
    }, [htmlBody]);

    useEffect(() => {
        const handleMessage = (event: MessageEvent) => {
            if (
                iframeRef.current &&
                event.source === iframeRef.current.contentWindow &&
                event.data.type === 'iframeResize' &&
                event.data.height > 0
            ) {
                // Li donem un píxel extra per evitar problemes d'arrodoniment
                setIframeHeight(event.data.height + 1);
            }
        };

        window.addEventListener('message', handleMessage);
        return () => window.removeEventListener('message', handleMessage);
    }, []);

    // ✅ SOLUCIÓ: Retornem directament l'iframe, sense la 'div' que el limitava.
    return (
        <iframe
            ref={iframeRef}
            srcDoc={documentSource}
            title="Contingut del correu"
            sandbox="allow-scripts"
            width="100%"
            height={iframeHeight}
            style={{
                border: 'none',
                display: 'block',
                background: 'transparent',
                // ✅ Afegim un alçada mínima per evitar que es col·lapsi a 0px mentre carrega
                minHeight: '200px'
            }}
            scrolling="no"
        />
    );
};

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_components/TicketDetail.tsx ===================

// src/app/[locale]/(app)/comunicacio/inbox/_components/TicketDetail.tsx
"use client";

import React from 'react';
import { Button } from '@/components/ui/button';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Reply, MoreVertical, Loader2, Info } from 'lucide-react';
import { SafeEmailRenderer } from './SafeEmailRenderer';

// ✨ CANVI: Importem el tipus correcte des de la nostra font de veritat.
import type { EnrichedTicket } from '@/types/db';

interface TicketDetailProps {
  ticket: EnrichedTicket | null; // ✨ CANVI: Ara espera el tipus correcte.
  body: string | null;
  isLoading: boolean;
  onReply: (ticket: EnrichedTicket) => void;
  isContactPanelOpen: boolean;
  onToggleContactPanel: () => void;
}

export const TicketDetail: React.FC<TicketDetailProps> = ({
  ticket,
  body,
  isLoading,
  onReply,
  isContactPanelOpen,
  onToggleContactPanel,
}) => {
  const t = (key: string) => ({
    noTicketSelected: "Selecciona un correu per llegir-lo",
    from: "De",
    to: "Per a",
    reply: "Respon",
  }[key] || key);

  if (!ticket) {
    return (
      <div className="h-full flex items-center justify-center">
        <p className="text-muted-foreground">{t('noTicketSelected')}</p>
      </div>
    );
  }

  // ✨ CORRECCIÓ: Accedim a les dades de contacte planes directament des del tiquet.
  const senderName = ticket.contact_nom || ticket.sender_name || 'Desconegut';
  const senderEmail = ticket.contact_email || ticket.sender_email;
  const avatarUrl = ticket.profile_avatar_url;

  const getInitials = (name: string) => name.split(' ').map(n => n[0]).slice(0, 2).join('').toUpperCase();

  return (
    <div className="h-full flex flex-col">
      <div className="p-4 border-b flex justify-between items-center flex-shrink-0">
        <div className="flex items-center gap-3 min-w-0">
          <Avatar>
            <AvatarImage src={avatarUrl ?? undefined} />
            <AvatarFallback>{getInitials(senderName)}</AvatarFallback>
          </Avatar>
          <div className="truncate">
            <p className="font-semibold truncate">{senderName}</p>
            <p className="text-sm text-muted-foreground truncate" title={senderEmail ?? undefined}>{senderEmail}</p>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <Button variant="ghost" size="icon" onClick={onToggleContactPanel}>
            <Info className={`w-5 h-5 ${isContactPanelOpen ? 'text-primary' : ''}`} />
          </Button>
          <Button onClick={() => onReply(ticket)}>
            <Reply className="mr-2 h-4 w-4" />
            {t('reply')}
          </Button>
          <Button variant="ghost" size="icon">
            <MoreVertical className="w-5 h-5" />
          </Button>
        </div>
      </div>

      <div className="p-4 border-b flex-shrink-0">
        <h2 className="text-xl font-bold">{ticket.subject}</h2>
      </div>

      <div className="flex-1 relative min-h-0">
        {isLoading ? (
          <div className="absolute inset-0 flex items-center justify-center">
            <Loader2 className="w-8 h-8 animate-spin text-primary" />
          </div>
        ) : (
          <div className="absolute inset-0">
            <SafeEmailRenderer htmlBody={body || ''} />
          </div>
        )}
      </div>
    </div>
  );
};

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_components/ticketList/index.tsx ===================

// src/app/[locale]/(app)/comunicacio/inbox/_components/ticketList/index.tsx
"use client";

import React from 'react';
import { Button } from '@/components/ui/button';
import { Inbox } from 'lucide-react';
import type { User } from '@supabase/supabase-js';

// ✨ CANVI: Importem els tipus des de la nostra font de veritat.
import type { EnrichedTicket, TeamMemberWithProfile, InboxPermission, TicketFilter } from '@/types/db';

import { TicketListHeader } from './TicketListHeader';
import { TicketListFilters } from './TicketListFilters';
import { TicketListItem } from './TicketListItem';

// Aquest tipus és per a la UI, enriqueix el tipus de la DB amb dades de client.
export type UITicket = EnrichedTicket & { ownerColorClass?: string };

interface TicketListProps {
  user: User;
  teamMembers: TeamMemberWithProfile[];
  permissions: InboxPermission[];
  tickets: UITicket[]; 
  selectedTicketId: number | null;
  activeFilter: string;
  inboxFilter: string;
  onSetInboxFilter: (userId: string) => void;
  unreadCount: number;
  sentCount: number;
  isPendingRefresh: boolean;
  totalCount: number;
  // ✨ CORRECCIÓ: Les funcions callback ara esperen el tipus correcte EnrichedTicket.
  onSelectTicket: (ticket: EnrichedTicket) => void;
  onDeleteTicket: (ticket: EnrichedTicket) => void;
  onSetFilter: (filter: TicketFilter) => void;
  onComposeNew: () => void;
  onRefresh: () => void;
  hasMore: boolean;
  onLoadMore: () => void;
  searchTerm: string;
  onSearchChange: (value: string) => void;
}

export const TicketList: React.FC<TicketListProps> = (props) => {
  const { tickets, selectedTicketId, onSelectTicket, onDeleteTicket, hasMore, onLoadMore, isPendingRefresh } = props;

  return (
    <div className="w-full h-full flex flex-col flex-shrink-0 border-r border-border glass-card">
      <TicketListHeader {...props} />
      <TicketListFilters {...props} />
      
      <div className="flex-1 h-0 overflow-y-auto">
        {tickets.length > 0 ? (
          tickets.map(ticket => (
            <TicketListItem
              key={ticket.id}
              ticket={ticket}
              isSelected={selectedTicketId === ticket.id}
              onSelectTicket={onSelectTicket}
              onDeleteTicket={onDeleteTicket}
            />
          ))
        ) : (
          <div className="flex flex-col items-center justify-center h-full p-4 text-center">
            <Inbox className="w-12 h-12 text-muted-foreground mb-2" />
            <p className="text-muted-foreground">Safata d'entrada buida.</p>
          </div>
        )}
      </div>
      
      {hasMore && (
        <div className="p-4 border-t border-border flex-shrink-0">
          <Button variant="outline" className="w-full" onClick={onLoadMore} disabled={isPendingRefresh}>
            {isPendingRefresh ? "Carregant..." : "Carregar més"}
          </Button>
        </div>
      )}
    </div>
  );
};

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_components/ticketList/TicketListFilters.tsx ===================

// src/app/[locale]/(app)/comunicacio/inbox/_components/ticketList/TicketListFilters.tsx
"use client";

import React from 'react';
import { Button } from '@/components/ui/button';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { LayoutGrid, Inbox, Mail, Send } from "lucide-react";
// ✨ CANVI: Importem el tipus directament de db.ts
import type { TicketFilter } from '@/types/db';

interface TicketListFiltersProps {
  activeFilter: string;
  onSetFilter: (filter: TicketFilter) => void;
  totalCount: number;
  sentCount: number;
  unreadCount: number;
}

export const TicketListFilters: React.FC<TicketListFiltersProps> = ({ activeFilter, onSetFilter, totalCount, sentCount, unreadCount }) => {
  const filters: { id: TicketFilter, label: string, icon: React.ElementType, count?: number | string }[] = [
    { id: 'tots', label: 'Tots', icon: LayoutGrid, count: totalCount },
    { id: 'rebuts', label: 'Rebuts', icon: Inbox, count: totalCount - sentCount },
    { id: 'noLlegits', label: 'No llegits', icon: Mail, count: unreadCount },
    { id: 'enviats', label: 'Enviats', icon: Send, count: sentCount },
  ];

  return (
    <TooltipProvider delayDuration={0}>
      <div className="p-2 grid grid-cols-4 gap-2 border-b border-border flex-shrink-0">
        {filters.map(filter => (
          <Tooltip key={filter.id}>
            <TooltipTrigger asChild>
              <Button variant={
                activeFilter === filter.id ? 'secondary' : 'ghost'} 
                size="sm" 
                onClick={() => onSetFilter(filter.id)} 
                className="w-full flex items-center justify-center gap-2">
                <filter.icon className="h-4 w-4" />
                {filter.id === 'noLlegits' ? (
                  <span className={`text-xs px-2 py-0.5 rounded-full ${unreadCount > 0 ? 'bg-primary text-primary-foreground' : 'text-muted-foreground bg-muted'}`}>{filter.count}</span>
                ) : (
                  <span className="text-xs text-muted-foreground">{filter.count}</span>
                )}
              </Button>
            </TooltipTrigger>
            <TooltipContent><p>{filter.label}</p></TooltipContent>
          </Tooltip>
        ))}
      </div>
    </TooltipProvider>
  );
};

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_components/ticketList/TicketListHeader.tsx ===================

// src/app/[locale]/(app)/comunicacio/inbox/_components/ticketList/TicketListHeader.tsx
"use client";

import React, { useMemo } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { PenSquare, RefreshCw, ChevronDown, Search } from 'lucide-react';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import type { User } from '@supabase/supabase-js';
// ✨ CANVI: Importem els tipus directament de db.ts
import type { TeamMemberWithProfile, InboxPermission } from '@/types/db';

interface TicketListHeaderProps {
  user: User;
  teamMembers: TeamMemberWithProfile[];
  permissions: InboxPermission[];
  inboxFilter: string;
  onSetInboxFilter: (userId: string) => void;
  onComposeNew: () => void;
  onRefresh: () => void;
  isPendingRefresh: boolean;
  searchTerm: string;
  onSearchChange: (value: string) => void;
}

export const TicketListHeader: React.FC<TicketListHeaderProps> = ({
  user,
  teamMembers,
  permissions,
  inboxFilter,
  onSetInboxFilter,
  onComposeNew,
  onRefresh,
  isPendingRefresh,
  searchTerm,
  onSearchChange
}) => {
  const permittedMembers = useMemo(() => {
    const permittedIds = new Set(permissions.map(p => p.target_user_id));
    // ✨ CORRECCIÓ: Ara el tipus 'TeamMemberWithProfile' és pla. Accedim a 'user_id'.
    return teamMembers.filter(m => m.user_id && m.user_id !== user.id && permittedIds.has(m.user_id));
  }, [permissions, teamMembers, user.id]);

  const selectedInboxName = useMemo(() => {
    if (inboxFilter === 'all') return "Totes les bústies";
    if (inboxFilter === user.id) return "Els meus correus";
    // ✨ CORRECCIÓ: Accedim a les propietats del tipus pla 'TeamMemberWithProfile'.
    const member = teamMembers.find(m => m.user_id === inboxFilter);
    return member?.full_name || "Bústia desconeguda";
  }, [inboxFilter, teamMembers, user.id]);

  return (
    <>
      <div className="p-4 border-b border-border flex justify-between items-center flex-shrink-0">
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" className="text-lg font-bold p-2 -ml-2">
              {selectedInboxName}
              <ChevronDown className="w-5 h-5 ml-2 text-muted-foreground" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="start">
            <DropdownMenuItem onClick={() => onSetInboxFilter('all')}>Totes les bústies</DropdownMenuItem>
            <DropdownMenuItem onClick={() => onSetInboxFilter(user.id)}>Els meus correus</DropdownMenuItem>
            {permittedMembers.length > 0 && <DropdownMenuSeparator />}
            {permittedMembers.map(member => (
              // ✨ CORRECCIÓ: Afegim comprovació i accés correcte a les propietats.
              member.user_id && (
                <DropdownMenuItem key={member.user_id} onClick={() => onSetInboxFilter(member.user_id!)}>
                  {member.full_name || 'Usuari sense nom'}
                </DropdownMenuItem>
              )
            ))}
          </DropdownMenuContent>
        </DropdownMenu>
        <div className="flex items-center gap-1">
          <Button variant="ghost" size="icon" onClick={onComposeNew} title="Redacta"><PenSquare className="w-4 h-4" /></Button>
          <Button variant="ghost" size="icon" onClick={onRefresh} disabled={isPendingRefresh} title="Actualitza"><RefreshCw className={`w-4 h-4 ${isPendingRefresh ? 'animate-spin' : ''}`} /></Button>
        </div>
      </div>
      
      <div className="p-2 border-b border-border">
        <div className="relative">
          <Search className="absolute left-2 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Cerca a la bústia..."
            className="pl-8"
            value={searchTerm}
            onChange={(e) => onSearchChange(e.target.value)}
          />
        </div>
      </div>
    </>
  );
};

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_components/ticketList/TicketListItem.tsx ===================

// src/app/[locale]/(app)/comunicacio/inbox/_components/ticketList/TicketListItem.tsx
"use client";

import React from 'react';
import { Button } from '@/components/ui/button';
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Trash2 } from 'lucide-react';
import type { UITicket } from './index'; 
import type { EnrichedTicket } from '@/types/db';

const formatTicketDate = (dateString: string | null) => {
  if (!dateString) return '';
  const date = new Date(dateString);
  const now = new Date();
  const startOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  if (date >= startOfToday) {
    return date.toLocaleTimeString('ca-ES', { hour: '2-digit', minute: '2-digit' });
  } else {
    return date.toLocaleDateString('ca-ES', { day: 'numeric', month: 'short' });
  }
};

const getInitials = (name: string | null | undefined) => {
  if (!name) return '??';
  return name.split(' ').map(n => n[0]).slice(0, 2).join('').toUpperCase();
};

interface TicketListItemProps {
  ticket: UITicket;
  isSelected: boolean;
  onSelectTicket: (ticket: EnrichedTicket) => void;
  onDeleteTicket: (ticket: EnrichedTicket) => void;
}

export const TicketListItem: React.FC<TicketListItemProps> = ({ ticket, isSelected, onSelectTicket, onDeleteTicket }) => {
  
  const handleSelect = () => {
    if (ticket.id !== null) {
      onSelectTicket(ticket as EnrichedTicket);
    }
  };

  const handleDelete = (e: React.MouseEvent) => {
    e.stopPropagation();
    if (ticket.id !== null) {
      onDeleteTicket(ticket as EnrichedTicket);
    }
  };

  return (
    <div
      onClick={handleSelect}
      className={`group cursor-pointer border-l-4 relative 
        ${isSelected
          ? 'border-primary bg-muted'
          : `${ticket.ownerColorClass || 'border-transparent'} hover:bg-muted/50`
        }`
      }
    >
      <div className="p-4 flex items-start gap-4">
        <Avatar className="h-8 w-8 mt-1 flex-shrink-0">
          {/* ✨ CORRECCIÓ 1: L'AvatarImage només utilitza l'URL del perfil de l'usuari assignat. */}
          <AvatarImage src={ticket.profile_avatar_url ?? undefined} />
          {/* ✨ CORRECCIÓ 2: Les inicials són EXCLUSIVAMENT del propietari del tiquet. Si no hi ha, mostra '??'. */}
          <AvatarFallback>{getInitials(ticket.profile_full_name)}</AvatarFallback>
        </Avatar>
        <div className="flex-1 min-w-0">
          <div className="flex justify-between items-center mb-1">
            <p className={`truncate font-semibold ${ticket.status === 'Llegit' ? 'font-normal text-muted-foreground' : ''}`}>
              {ticket.contact_nom || ticket.sender_name || 'Remitent desconegut'}
            </p>
            <div className="flex items-center gap-3 text-xs flex-shrink-0 ml-2">
              {ticket.status !== 'Llegit' && <span className="w-2 h-2 rounded-full bg-primary animate-pulse"></span>}
              <span className="text-muted-foreground">{formatTicketDate(ticket.sent_at)}</span>
            </div>
          </div>
          <p className="text-sm font-medium truncate">{ticket.subject}</p>
          <p className="text-sm text-muted-foreground truncate mt-1">{ticket.preview}</p>
        </div>
      </div>
      <Button
        variant="ghost"
        size="icon"
        className="absolute top-2 right-2 h-7 w-7 opacity-0 group-hover:opacity-100"
        onClick={handleDelete}
        title="Elimina"
      >
        <Trash2 className="w-4 h-4 text-destructive" />
      </Button>
    </div>
  );
};

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_hooks/useCompose.ts ===================

// src/app/[locale]/(app)/comunicacio/inbox/_hooks/useCompose.ts
import { useState, useEffect, useMemo, useTransition } from 'react';
import { useEditor } from '@tiptap/react';
import StarterKit from '@tiptap/starter-kit';
import TextAlign from '@tiptap/extension-text-align';
import { toast } from "sonner";
import { useTranslations } from 'next-intl';

import { renderTemplate } from '@/lib/utils/templates';
import { sendEmailAction } from '../actions';

// ✨ CANVI: Importem els tipus directament de db.ts
import type { Contact, Template } from '@/types/db';
import type { InitialData } from '../_components/ComposeDialog';

interface UseComposeProps {
  templates: Template[];
  contacts: Contact[];
  initialData: InitialData | null;
  onClose: () => void;
  onEmailSent: () => void;
}

export function useCompose({ templates, contacts, initialData, onClose, onEmailSent }: UseComposeProps) {
  const t = useTranslations('InboxPage');
  const [isSending, startSendTransition] = useTransition();

  const editor = useEditor({
    immediatelyRender: false,
    extensions: [StarterKit, TextAlign.configure({ types: ['heading', 'paragraph'] })],
    editorProps: {
      attributes: {
        class: 'prose dark:prose-invert max-w-none text-base p-4 focus:outline-none h-full border border-input rounded-md min-h-[400px]',
      },
    },
  });
  
  const [subject, setSubject] = useState('');
  const [selectedContactId, setSelectedContactId] = useState<number | ''>(''); // ✨ CANVI: L'ID és un número.
  const [contactSearch, setContactSearch] = useState('');
  const [selectedTemplate, setSelectedTemplate] = useState<Template | null>(null); // ✨ CANVI: Utilitzem el tipus 'Template'
  const [variableValues, setVariableValues] = useState<{ [key: string]: string }>({});
  const [debouncedVariableValues, setDebouncedVariableValues] = useState<{ [key: string]: string }>({});

  useEffect(() => {
    // ✨ CANVI: Assegurem que el contactId és un número.
    setSelectedContactId(initialData?.contactId ? Number(initialData.contactId) : '');
    setSubject(initialData?.subject || '');
    editor?.commands.setContent(initialData?.body || '');
    setSelectedTemplate(null);
    setVariableValues({});
    setDebouncedVariableValues({});
    setContactSearch('');
  }, [initialData, editor]);

  useEffect(() => {
    const handler = setTimeout(() => setDebouncedVariableValues(variableValues), 500);
    return () => clearTimeout(handler);
  }, [variableValues]);
  
  useEffect(() => {
    if (selectedTemplate && selectedTemplate.subject) {
      setSubject(renderTemplate(selectedTemplate.subject, debouncedVariableValues));
    }
  }, [selectedTemplate, debouncedVariableValues]);

  const finalHtmlBody = useMemo(() => {
    if (selectedTemplate && selectedTemplate.body) {
      return renderTemplate(selectedTemplate.body, debouncedVariableValues);
    }
    return editor?.getHTML() || '';
  }, [selectedTemplate, debouncedVariableValues, editor]);
  
  const filteredContacts = useMemo(() => {
    if (!contactSearch) return contacts;
    const search = contactSearch.toLowerCase();
    return contacts.filter(contact => {
      // ✨ SENSE CANVI: 'nom' és correcte segons la teva definició de la taula.
      const hasMatchingName = contact.nom.toLowerCase().includes(search);
      const hasMatchingEmail = !!contact.email && contact.email.toLowerCase().includes(search);
      return hasMatchingName || hasMatchingEmail;
    });
  }, [contacts, contactSearch]);

  const handleTemplateSelect = (templateId: string) => {
    if (!templateId || templateId === 'none') {
      setSelectedTemplate(null);
      return;
    }
    const template = templates.find(t => t.id.toString() === templateId);
    if (template) {
      setSelectedTemplate(template);
      setVariableValues({});
    }
  };

  const handleSend = () => {
    if (!selectedContactId || !subject || !finalHtmlBody.replace(/<p><\/p>/g, '').trim()) {
      toast.error(t('requiredFieldsErrorTitle'), { description: t('requiredFieldsErrorDescription') });
      return;
    }
    startSendTransition(async () => {
      const result = await sendEmailAction({
        contactId: Number(selectedContactId), // Assegurem que és un número.
        subject,
        htmlBody: finalHtmlBody,
        isReply: !!initialData?.contactId,
      });
      if (result.success) {
        toast.success(t('toastSuccessTitle'), { description: result.message });
        onClose();
        onEmailSent();
      } else {
        toast.error(t('toastErrorTitle'), { description: result.message });
      }
    });
  };

  return {
    editor, subject, setSubject,
    selectedContactId, setSelectedContactId,
    contactSearch, setContactSearch,
    selectedTemplate, handleTemplateSelect,
    variableValues, setVariableValues,
    finalHtmlBody, filteredContacts, isSending, handleSend,
  };
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_hooks/useInbox.ts ===================

// src/app/[locale]/(app)/comunicacio/inbox/_hooks/useInbox.ts
import { useCallback, useTransition } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from "sonner";
import type { User } from '@supabase/supabase-js';

import type { DbTableRow, EnrichedTicket, TeamMemberWithProfile } from '@/types/db';
import { deleteTicketAction, linkTicketsToContactAction } from '../actions';
import { useInboxStateAndFilters } from './useInboxStateAndFilter';
import { useTicketData } from './useTicketData';
import { useURLSync } from './useURLSync';
import { useInboxComputed } from './useInboxComputed';

// ✅ Mantenim el tipus original, però ara algunes props seran ignorades a favor de la lògica interna
export type UseInboxProps = {
  user: User;
  initialTickets: EnrichedTicket[];
  initialTemplates: DbTableRow<'email_templates'>[];
  initialUnreadCount: number;
  initialSentCount: number;
  teamMembers: TeamMemberWithProfile[];
  t: (key: string, values?: Record<string, string | number | Date>) => string;
  // Les props `initialSelectedTicket` i `initialSelectedTicketBody` ja no són necessàries aquí
};

export function useInbox({
  user,
  initialTickets,
  initialUnreadCount,
  initialSentCount,
  teamMembers,
  t,
}: UseInboxProps) {
  const router = useRouter();
  const [isActionPending, startActionTransition] = useTransition();

  const {
    selectedTicket, setSelectedTicket,
    ticketToDelete, setTicketToDelete,
    activeFilter, setActiveFilter,
    composeState, setComposeState,
    isContactPanelOpen, setIsContactPanelOpen,
    inboxFilter, setInboxFilter,
    searchTerm, setSearchTerm,
  } = useInboxStateAndFilters(user);

  const onTicketSelectedCallback = useCallback((ticket: EnrichedTicket) => {
    setSelectedTicket(ticket);
  }, [setSelectedTicket]);

  const onTicketDeselectedCallback = useCallback(() => {
    setSelectedTicket(null);
  }, [setSelectedTicket]);

  const {
    isPending: isDataPending,
    tickets,
    setTickets,
    selectedTicketBody,
    isBodyLoading,
    hasMore,
    debouncedSearchTerm,
    handleSelectTicket: performSelectTicket,
    fetchAndSelectTicket, // ✅ Rebem la funció des de useTicketData

    handleLoadMore,
  } = useTicketData({
    initialTickets,
    activeFilter,
    inboxFilter,
    searchTerm,
    onTicketSelected: onTicketSelectedCallback,
    onTicketDeselected: onTicketDeselectedCallback,
  });

  const handleSelectTicket = useCallback((ticket: EnrichedTicket | null) => {
    performSelectTicket(ticket, selectedTicket?.id);
  }, [performSelectTicket, selectedTicket?.id]);

  // ✅ Ara li podem passar 'fetchAndSelectTicket' directament
  useURLSync({
    selectedTicket,
    debouncedSearchTerm,
    initialTickets,
    onSelectTicketFromURL: handleSelectTicket,
    onFetchAndSelectTicket: fetchAndSelectTicket,
  });

  const { enrichedTickets, counts } = useInboxComputed({
    tickets,
    activeFilter,
    inboxFilter,
    teamMembers,
    initialUnreadCount,
    initialSentCount,
  });

  const handleDeleteTicket = useCallback(() => {
    if (!ticketToDelete) return;
    startActionTransition(async () => {
      const result = await deleteTicketAction(ticketToDelete.id!);
      toast[result.success ? 'success' : 'error'](result.message);
      if (result.success) {
        setTickets(prev => prev.filter(t => t.id !== ticketToDelete.id));
        if (selectedTicket?.id === ticketToDelete.id) {
          handleSelectTicket(null);
        }
        setTicketToDelete(null);
      }
    });
  }, [ticketToDelete, selectedTicket, handleSelectTicket, setTickets, setTicketToDelete]);

  const handleSaveContact = useCallback((newlyCreatedContact: DbTableRow<'contacts'>, originalTicket: EnrichedTicket) => {
    startActionTransition(async () => {
      if (!originalTicket.sender_email) {
        toast.error("El tiquet no té un email de remitent per vincular.");
        return;
      }
      const result = await linkTicketsToContactAction(newlyCreatedContact.id, originalTicket.sender_email);
      toast[result.success ? 'success' : 'error'](result.message);
      if (result.success) {
        router.refresh();
      }
    });
  }, [router]);

  const handleComposeNew = useCallback(() => setComposeState({ open: true, initialData: null }), [setComposeState]);

  const handleReply = useCallback((ticket: EnrichedTicket) => {
    const date = ticket.sent_at ? new Date(ticket.sent_at).toLocaleString("ca-ES") : new Date().toLocaleString("ca-ES");
    const name = ticket.contact_nom || ticket.sender_name || "";
    const quotedBody = `<br><br><p>${t("replyHeader", { date, name })}</p><blockquote>${selectedTicketBody ?? ""}</blockquote>`;
    setComposeState({
      open: true,
      initialData: {
        contactId: ticket.contact_id ? String(ticket.contact_id) : undefined,
        to: ticket.contact_email ?? ticket.sender_email ?? "",
        subject: `Re: ${ticket.subject}`,
        body: quotedBody,
      },
    });
  }, [selectedTicketBody, t, setComposeState]);

  const handleRefresh = useCallback(() => {
    startActionTransition(() => { router.refresh(); });
  }, [router]);

  return {
    selectedTicket,
    ticketToDelete,
    activeFilter,
    composeState,
    selectedTicketBody,
    isBodyLoading,
    hasMore,
    searchTerm,
    isPending: isDataPending || isActionPending,
    isContactPanelOpen,
    inboxFilter,
    counts,
    enrichedTickets,
    setTicketToDelete,
    setActiveFilter,
    setComposeState,
    setSearchTerm,
    setIsContactPanelOpen,
    setInboxFilter,
    handleSelectTicket,
    handleDeleteTicket,
    handleLoadMore,
    handleSaveContact,
    handleComposeNew,
    handleReply,
    handleRefresh,
  };
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_hooks/useInboxComputed.ts ===================

// src/app/[locale]/(app)/comunicacio/inbox/_hooks/useInboxComputed.ts
import { useMemo } from 'react';
import type { EnrichedTicket, TeamMemberWithProfile, TicketFilter } from '@/types/db';

type UITicket = EnrichedTicket & { ownerColorClass?: string };

type UseInboxComputedProps = {
  tickets: EnrichedTicket[];
  activeFilter: TicketFilter;
  inboxFilter: string;
  teamMembers: TeamMemberWithProfile[];
  initialUnreadCount: number;
  initialSentCount: number;
};

export function useInboxComputed({
  tickets,
  activeFilter,
  inboxFilter,
  teamMembers,
  initialUnreadCount,
  initialSentCount,
}: UseInboxComputedProps) {
  
  const filteredTickets = useMemo(() => {
    let displayTickets = tickets;
    if (inboxFilter !== 'all') {
      displayTickets = displayTickets.filter(t => t.user_id === inboxFilter);
    }
    if (activeFilter === 'rebuts') return displayTickets.filter(t => t.type === 'rebut' || !t.type);
    if (activeFilter === 'enviats') return displayTickets.filter(t => t.type === 'enviat');
    if (activeFilter === 'noLlegits') return displayTickets.filter(t => (t.type === 'rebut' || !t.type) && t.status !== 'Llegit');
    return displayTickets;
  }, [tickets, activeFilter, inboxFilter]);

  const enrichedTickets = useMemo<UITicket[]>(() => {
    const userProfileMap = new Map<string, TeamMemberWithProfile>();
    teamMembers.forEach(member => {
      if (member.user_id) {
        userProfileMap.set(member.user_id, member);
      }
    });
    const colors = ['border-blue-500', 'border-green-500', 'border-yellow-500', 'border-purple-500', 'border-pink-500', 'border-indigo-500'];
    
    return filteredTickets.map((ticket, index) => {
      const ownerProfile = ticket.user_id ? userProfileMap.get(ticket.user_id) : undefined;
      return {
        ...ticket,
        profile_full_name: ticket.profile_full_name ?? ownerProfile?.full_name ?? null,
        profile_avatar_url: ticket.profile_avatar_url ?? ownerProfile?.avatar_url ?? null,
        ownerColorClass: ticket.user_id ? colors[index % colors.length] : 'border-transparent',
      };
    });
  }, [filteredTickets, teamMembers]);

  const counts = useMemo(() => ({
    unread: tickets.filter(t => (t.type === 'rebut' || !t.type) && t.status !== 'Llegit').length,
    received: initialUnreadCount,
    sent: initialSentCount,
  }), [tickets, initialUnreadCount, initialSentCount]);

  return { enrichedTickets, counts };
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_hooks/useInboxStateAndFilter.ts ===================

// src/app/[locale]/(app)/comunicacio/inbox/_hooks/useInboxStateAndFilters.ts
import { useState } from 'react';
import { useSearchParams } from 'next/navigation';
import type { User } from '@supabase/supabase-js';
import type { EnrichedTicket, TicketFilter } from '@/types/db';
import type { InitialData as ComposeInitialData } from '../_components/ComposeDialog';

export function useInboxStateAndFilters(user: User) {
  const searchParams = useSearchParams();

  const [selectedTicket, setSelectedTicket] = useState<EnrichedTicket | null>(null);
  const [ticketToDelete, setTicketToDelete] = useState<EnrichedTicket | null>(null);
  const [activeFilter, setActiveFilter] = useState<TicketFilter>('rebuts');
  const [composeState, setComposeState] = useState<{ open: boolean; initialData: ComposeInitialData | null }>({ open: false, initialData: null });
  const [isContactPanelOpen, setIsContactPanelOpen] = useState(false);
  const [inboxFilter, setInboxFilter] = useState<string>(user.id);
  const [searchTerm, setSearchTerm] = useState(searchParams.get('q') || '');

  return {
    // States
    selectedTicket,
    ticketToDelete,
    activeFilter,
    composeState,
    isContactPanelOpen,
    inboxFilter,
    searchTerm,
    // Setters
    setSelectedTicket,
    setTicketToDelete,
    setActiveFilter,
    setComposeState,
    setIsContactPanelOpen,
    setInboxFilter,
    setSearchTerm,
  };
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_hooks/useTicketData.ts ===================

// src/app/[locale]/(app)/comunicacio/inbox/_hooks/useTicketData.ts (CORREGIT FINAL)
import { useState, useTransition, useEffect, useCallback } from 'react';
import { useDebounce } from 'use-debounce';
import { toast } from 'sonner';
import {
  getTicketsAction,
  getTicketBodyAction,
  markTicketAsReadAction,
  getTicketByIdAction
} from '../actions';
import type { EnrichedTicket, TicketFilter } from '@/types/db';

type UseTicketDataProps = {
  initialTickets: EnrichedTicket[];
  activeFilter: TicketFilter;
  inboxFilter: string;
  searchTerm: string;
  onTicketSelected: (ticket: EnrichedTicket) => void;
  onTicketDeselected: () => void;
};

export function useTicketData({
  initialTickets,
  activeFilter,
  inboxFilter,
  searchTerm,
  onTicketSelected,
  onTicketDeselected,
}: UseTicketDataProps) {
  const [isPending, startTransition] = useTransition();
  const [tickets, setTickets] = useState<EnrichedTicket[]>(initialTickets);
  const [selectedTicketBody, setSelectedTicketBody] = useState<string | null>(null);
  const [isBodyLoading, setIsBodyLoading] = useState(false);
  const [page, setPage] = useState(2);
  const [hasMore, setHasMore] = useState(initialTickets.length > 0);
  const [debouncedSearchTerm] = useDebounce(searchTerm, 500);

  useEffect(() => {
    startTransition(async () => {
      const results = await getTicketsAction(1, activeFilter, inboxFilter, debouncedSearchTerm);
      setTickets(results);
      setHasMore(results.length > 0);
      setPage(2);
    });
  }, [activeFilter, inboxFilter, debouncedSearchTerm]);

  const handleSelectTicket = useCallback(async (ticket: EnrichedTicket | null, currentSelectedId: number | undefined | null) => {
    if (currentSelectedId === ticket?.id) return;

    if (!ticket || !ticket.id) {
      setSelectedTicketBody(null);
      onTicketDeselected();
      return;
    }

    setIsBodyLoading(true);
    setSelectedTicketBody(null);
    onTicketSelected(ticket);

    try {
      const { body } = await getTicketBodyAction(ticket.id);
      setSelectedTicketBody(body);
    } catch (error) {
      console.error("Error en carregar el cos del tiquet:", error);
      setSelectedTicketBody('<p>Error en carregar el contingut.</p>');
    } finally {
      setIsBodyLoading(false);
    }

    if (ticket.status !== 'Llegit') {
      setTickets(currentTickets =>
        currentTickets.map(t => t.id === ticket.id ? { ...t, status: 'Llegit' as const } : t)
      );
      await markTicketAsReadAction(ticket.id);
    }
  }, [onTicketSelected, onTicketDeselected]);

  // ----------------------------------------------------------------------
  // 🎯 FUNCIÓ CLAU: FETCH I SELECCIÓ FORÇADA (FIX BODY)
  // ----------------------------------------------------------------------
  const fetchAndSelectTicket = useCallback(async (ticketId: number) => {

    console.log(`📡 [Fetch Ticket] Forçant càrrega per a l'ID: ${ticketId}`);

    // 1. Netejar cos anterior i posar càrrega
    setIsBodyLoading(true);
    setSelectedTicketBody(null);
    onTicketDeselected(); // Desselecciona l'anterior mentre carreguem

    // 2. Crida a la Server Action per obtenir el tiquet ENRIQUIT (sense el body)
    const result = await getTicketByIdAction(ticketId);

    if (result.error || !result.data) {
      console.error('❌ [Fetch Ticket] Error o tiquet no trobat:', result.error);
      toast.error("Error carregant el correu.", {
        description: result.error || "No s'ha pogut trobar el correu especificat."
      });
      setIsBodyLoading(false);
      return;
    }

    // 3. Trobem el tiquet, l'establirem com a seleccionat.
    const fetchedTicket = result.data;
    onTicketSelected(fetchedTicket); // 🔑 Estableix selectedTicket (sense el body)

    // --------------------------------------------------------------------
    // 🔑 FIX CLAU: Carregar el cos del correu amb la segona Server Action
    // --------------------------------------------------------------------
    try {
      if (typeof fetchedTicket.id === 'number') {
        const { body } = await getTicketBodyAction(fetchedTicket.id); // 5. Carrega el Body
        setSelectedTicketBody(body); // 6. Estableix el Body
      } else {
        throw new Error("ID del tiquet no vàlid.");
      }
    } catch (error) {
      console.error("Error en carregar el cos del tiquet forçat:", error);
      setSelectedTicketBody('<p>Error en carregar el contingut del correu.</p>');
    } finally {
      setIsBodyLoading(false);
    }
    // --------------------------------------------------------------------

    // 7. Opcional: Afegeix el tiquet a la llista local (per a millor UX de la llista)
    setTickets(prevTickets => {
      if (!prevTickets.some(t => t.id === fetchedTicket.id)) {
        // Com que l'hem carregat per ID, assumim que hauria d'estar al principi de la llista.
        return [fetchedTicket, ...prevTickets];
      }
      return prevTickets;
    });

    // 8. Marcar com a llegit (si escau)
    if (fetchedTicket.status !== 'Llegit') {
      setTickets(currentTickets =>
        currentTickets.map(t => t.id === fetchedTicket.id ? { ...t, status: 'Llegit' as const } : t)
      );
      if (typeof fetchedTicket.id === 'number') {
        await markTicketAsReadAction(fetchedTicket.id);
      }
    }


  }, [onTicketSelected, onTicketDeselected, setTickets, setIsBodyLoading, setSelectedTicketBody]);
  // ✅ CORRECCIÓ: Restaurem la lògica de 'handleLoadMore'
  const handleLoadMore = useCallback(() => {
    if (!hasMore || isPending) return;
    startTransition(async () => {
      // Ara 'page' es fa servir correctament aquí
      const results = await getTicketsAction(page, activeFilter, inboxFilter, debouncedSearchTerm);
      if (results.length > 0) {
        setTickets(p => [...p, ...results]);
        setPage(p => p + 1);
      } else {
        setHasMore(false);
      }
    });
  }, [page, activeFilter, inboxFilter, debouncedSearchTerm, hasMore, isPending]);

  return {
    isPending,
    tickets,
    setTickets,
    selectedTicketBody,
    isBodyLoading,
    hasMore,
    debouncedSearchTerm,
    handleSelectTicket,
    handleLoadMore,
    fetchAndSelectTicket,
  };
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_hooks/useURLSync.ts ===================

import { useEffect, useRef } from 'react';
import { usePathname, useSearchParams } from 'next/navigation';
import type { EnrichedTicket } from '@/types/db';

type UseURLSyncProps = {
  selectedTicket: EnrichedTicket | null;
  debouncedSearchTerm: string;
  initialTickets: EnrichedTicket[];
  onSelectTicketFromURL: (ticket: EnrichedTicket) => void;
  onFetchAndSelectTicket: (ticketId: number) => void;
};

export function useURLSync({
  selectedTicket,
  debouncedSearchTerm,
  initialTickets,
  onSelectTicketFromURL,
  onFetchAndSelectTicket,

}: UseURLSyncProps) {
  const searchParams = useSearchParams();
  const pathname = usePathname();

  const hasInitializedFromUrl = useRef(false);

  const ticketsRef = useRef(initialTickets);
  ticketsRef.current = initialTickets;

  const onSelectRef = useRef(onSelectTicketFromURL);
  onSelectRef.current = onSelectTicketFromURL;

  const onFetchRef = useRef(onFetchAndSelectTicket);
  onFetchRef.current = onFetchAndSelectTicket;

  const searchParamsString = searchParams.toString();

  // -------------------------------------------------------------------------
  // EFECTE 1: LLEGIR LA URL (Inicialització).
  // -------------------------------------------------------------------------
  useEffect(() => {
    if (hasInitializedFromUrl.current) return; 
    
    const params = new URLSearchParams(searchParamsString);
    const ticketIdFromUrl = params.get('ticketId');

    if (ticketIdFromUrl) {
      const ticketIdNum = Number(ticketIdFromUrl);
      const ticketToSelect = ticketsRef.current.find(t => t.id === ticketIdNum);

      if (ticketToSelect) {
        // Cas A: Trobem el tiquet localment.
        hasInitializedFromUrl.current = true;
        onSelectRef.current(ticketToSelect);
      } else {
        // Cas B: Tiquet NO a la llista (Cal anar a buscar-lo).
        // Mantenim hasInitializedFromUrl = true per BLOCAR l'EFECTE 2 i evitar neteja
        hasInitializedFromUrl.current = true; 
        onFetchRef.current(ticketIdNum);
      }
    } else {
      // Cas C: Si NO hi ha ID a la URL, la inicialització de l'ID s'ha completat.
      hasInitializedFromUrl.current = true;
    }
  }, [initialTickets, searchParamsString]); 
    // Nota: Eliminem les funcions com a dependència ja que són refs estables.


  // -------------------------------------------------------------------------
  // EFECTE 2: ESCRVIRE A LA URL (Sincronització).
  // -------------------------------------------------------------------------
  useEffect(() => {
    const params = new URLSearchParams(searchParamsString);
    const ticketIdInUrl = params.get('ticketId'); // 🔑 Llegim l'estat actual de la URL
    
    // 🔑 DOBLE BLOQUEIG:
    // 1. Si l'inicialització no ha acabat.
    // 2. Si hi ha un ticketId a la URL, però selectedTicket encara és null (estem esperant el fetch).
    if (!hasInitializedFromUrl.current || (ticketIdInUrl && !selectedTicket?.id)) {
      return;
    }

    // La URL i l'estat estan sincronitzats, podem escriure
    if (selectedTicket?.id) {
      // L'usuari ha seleccionat un tiquet: escrivim l'ID
      params.set('ticketId', selectedTicket.id.toString());
    } else {
      // L'usuari ha tancat el detall (selectedTicket = null): esborrem l'ID
      params.delete('ticketId'); 
    }

    if (debouncedSearchTerm) {
      params.set('q', debouncedSearchTerm);
    } else {
      params.delete('q');
    }

    if (params.toString() !== searchParamsString) {
      window.history.replaceState(null, '', `${pathname}?${params.toString()}`);
    }
  }, [selectedTicket, debouncedSearchTerm, pathname, searchParamsString]);
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/actions.ts ===================

// Ubicació: /app/(app)/comunicacio/marketing/actions.ts

"use server";

import { revalidatePath } from "next/cache";
import { validateUserSession } from "@/lib/supabase/session"; // ✅ Importem el nostre helper!
import type { Campaign } from './page';

// ... (El teu tipus 'Strategy' es manté igual) ...
interface Strategy {
    name: string;
    type: string;
    target_audience: string;
    description: string;
}

/**
 * @summary Funció d'ajuda interna per centralitzar les crides a l'API de Gemini.
 * @private
 */
async function _callGeminiApi(prompt: string): Promise<{ data: string | null, error: string | null }> {
    if (!process.env.GEMINI_API_KEY) {
        return { data: null, error: "La clau de l'API de Gemini no està configurada." };
    }
    try {
        const payload = { contents: [{ role: "user", parts: [{ text: prompt }] }] };
        const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${process.env.GEMINI_API_KEY}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });

        if (!response.ok) {
            console.error("Error de l'API de Gemini:", await response.text());
            throw new Error(`Error de l'API de Gemini: ${response.statusText}`);
        }

        const result = await response.json();
        
        // Assegurem que la resposta té el format esperat abans d'accedir-hi
        const content = result?.candidates?.[0]?.content?.parts?.[0]?.text;
        if (typeof content !== 'string') {
            throw new Error("La resposta de l'API de Gemini no té el format esperat.");
        }

        return { data: content, error: null };
    } catch (error: unknown) {
        const message = error instanceof Error ? error.message : 'Error desconegut';
        console.error("Error en la crida a Gemini:", message);
        return { data: null, error: message };
    }
}

/**
 * @summary Genera idees d'estratègies de màrqueting. Ara és molt més simple.
 */
export async function generateStrategiesAction(goal: string): Promise<{ data: Strategy[] | null, error: string | null }> {
    const prompt = `
        Ets un director de màrqueting expert per a autònoms i PIMES.
        Un client té aquest objectiu: "${goal}".
        Proposa 3 estratègies de campanya de màrqueting diferents i creatives.
        Respon només amb un array JSON amb camps: 'name', 'type', 'target_audience', 'description'.
    `;
    
    const { data: rawText, error } = await _callGeminiApi(prompt);
    if (error || !rawText) {
        return { data: null, error: error || "No s'ha rebut resposta de l'IA." };
    }

    try {
        // ✅ CORRECCIÓ: Netejem la resposta de l'IA abans de parsejar-la.
        const cleanedJson = rawText.replace(/```json|```/g, '').trim();
        const strategies: Strategy[] = JSON.parse(cleanedJson);
        return { data: strategies, error: null };
    } catch (parseError) {
        console.error("Error en parsejar la resposta JSON de l'IA:", parseError);
        return { data: null, error: "La resposta de l'IA no tenia un format JSON vàlid." };
    }
}

/**
 * @summary Redacta el contingut d'una campanya. Ara també utilitza el helper.
 */
export async function draftContentAction(goal: string, strategy: Strategy): Promise<{ data: string | null, error: string | null }> {
    const prompt = `Basant-te en l'objectiu "${goal}" i l'estratègia "${strategy.name}", escriu el contingut complet per a la campanya de tipus "${strategy.type}".`;
    
    // La crida retorna directament el que necessitem
    return await _callGeminiApi(prompt);
}


/**
 * @summary Desa una nova campanya, ara utilitzant el helper de sessió.
 */
export async function saveCampaignAction(campaignData: Partial<Campaign>, goal: string) {
    // ✅ Utilitzem el helper per validar la sessió i obtenir les dades.
    const sessionResult = await validateUserSession();
    if ('error' in sessionResult) {
        return { data: null, error: sessionResult.error };
    }
    const { supabase, user, activeTeamId } = sessionResult;

    const dataToInsert = {
        user_id: user.id,
        team_id: activeTeamId,
        name: campaignData.name,
        type: campaignData.type,
        status: 'Planificat' as const, // Assegurem el tipus
        campaign_date: new Date().toISOString().split('T')[0],
        goal: goal,
        target_audience: campaignData.target_audience,
        content: campaignData.content,
    };

    const { data, error } = await supabase
        .from('campaigns')
        .insert(dataToInsert)
        .select()
        .single();
        
    revalidatePath('/comunicacio/marketing');
    return { data, error };
}

// updateCampaignAction es manté pràcticament igual, ja és prou simple.
export async function updateCampaignAction(campaignId: string, name: string, content: string) {
    const sessionResult = await validateUserSession();
     if ('error' in sessionResult) {
        return { data: null, error: sessionResult.error };
    }
    const { supabase } = sessionResult;

    const { error } = await supabase
        .from('campaigns')
        .update({ name, content })
        .eq('id', campaignId);
        
    revalidatePath('/comunicacio/marketing');
    return { error };
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/page.tsx ===================

/**
 * @file page.tsx (Marketing)
 * @summary Punt d'entrada per a la pàgina de Màrqueting, implementant React Suspense.
 */

import { Suspense } from 'react';
import type { Metadata } from 'next';
import { MarketingData } from './_components/MarketingData';
import { MarketingSkeleton } from './_components/MarketingSkeleton';

// Les metadades es queden igual.
export const metadata: Metadata = {
  title: 'Marketing | Ribot',
};

// --- Definició de Tipus de Dades ---
// Aquests tipus asseguren la consistència de les dades entre el servidor, el client i la base de dades.

export type Campaign = {
  id: string;
  name: string;
  type: string;
  status: 'Completat' | 'Actiu' | 'Planificat';
  campaign_date: string; // Utilitzem string per a una fàcil serialització.
  goal: string;
  target_audience: string;
  content: string;
};

export type Kpis = {
  totalLeads: number;
  conversionRate: number;
};

/**
* @function MarketingPage
* @summary Aquesta pàgina ja no és 'async'. Mostra un esquelet de càrrega
* mentre el component 'MarketingData' va a buscar les dades al servidor.
*/
export default function MarketingPage() {
 return (
   <Suspense fallback={<MarketingSkeleton />}>
     <MarketingData />
   </Suspense>
 );
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/_components/AICampaignWizard.tsx ===================

// Ubicació: /app/(app)/comunicacio/marketing/_components/AICampaignWizard.tsx

"use client";

import React from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { AnimatePresence } from "framer-motion";
import { useTranslations } from 'next-intl';
import { Wand2 } from "lucide-react";

import { useAICampaignWizard } from "../_hooks/useAICampaignWizard";
import { WizardStep1_Goal } from "./wizard/WizardStep1_Goal";
import { WizardStep2_SelectStrategy } from "./wizard/WizardStep2_SelectStrategy";
import { WizardStep3_Finalize } from "./wizard/WizardStep3_Finalize";

interface AICampaignWizardProps {
    open: boolean;
    onOpenChange: (open: boolean) => void;
    onCampaignCreated: () => void;
}

const WizardProgressBar = ({ step }: { step: number }) => (
    <div className="flex items-center pt-4">
        {[1, 2, 3].map((s) => (
            <React.Fragment key={s}>
                <div className="flex flex-col items-center">
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center transition-all ${step >= s ? "bg-primary text-primary-foreground" : "bg-muted"}`}>
                        {s}
                    </div>
                </div>
                {s < 3 && <div className={`flex-1 h-0.5 transition-all ${step > s ? "bg-primary" : "bg-muted"}`} />}
            </React.Fragment>
        ))}
    </div>
);

export const AICampaignWizard: React.FC<AICampaignWizardProps> = ({ open, onOpenChange, onCampaignCreated }) => {
  const t = useTranslations('AICampaignWizard');
  const {
      step, goal, strategies, selectedStrategy, isPending, processingIndex,
      setStep, setGoal, setSelectedStrategy, resetWizard,
      handleGenerateStrategies, handleDraftContent, handleSaveCampaign
  } = useAICampaignWizard({ 
      onCampaignCreated, 
      onClose: () => onOpenChange(false), 
      t 
  });

  return (
      <Dialog open={open} onOpenChange={(isOpen) => { if (!isOpen) resetWizard(); onOpenChange(isOpen); }}>
          <DialogContent className="glass-effect max-w-2xl min-h-[400px]">
              <DialogHeader>
                  <DialogTitle className="flex items-center gap-2 text-2xl">
                      <Wand2 className="text-primary" /> {t('title')}
                  </DialogTitle>
                  <WizardProgressBar step={step} />
              </DialogHeader>

              <AnimatePresence mode="wait">
                  {step === 1 && (
                      <WizardStep1_Goal
                          goal={goal}
                          setGoal={setGoal}
                          onGenerate={handleGenerateStrategies}
                          isPending={isPending}
                          t={t}
                      />
                  )}

                  {step === 2 && (
                      <WizardStep2_SelectStrategy
                          strategies={strategies}
                          onSelect={handleDraftContent}
                          onBack={() => setStep(1)}
                          isPending={isPending}
                          processingIndex={processingIndex}
                          t={t}
                      />
                  )}
                  
                  {step === 3 && selectedStrategy && (
                      <WizardStep3_Finalize
                          strategy={selectedStrategy}
                          // ✅ CORRECCIÓ: Passem directament la funció 'setSelectedStrategy'
                          // que ve del hook 'useState'.
                          onStrategyChange={setSelectedStrategy}
                          onSave={handleSaveCampaign}
                          onBack={() => setStep(2)}
                          isPending={isPending}
                          t={t}
                      />
                  )}
              </AnimatePresence>
          </DialogContent>
      </Dialog>
  );
};

// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/_components/CampaignCalendar.tsx ===================

/**
 * @file CampaignCalendar.tsx
 * @summary Component de client que renderitza un calendari visual per a les campanyes de màrqueting.
 * Permet a l'usuari veure les campanyes organitzades per mes i seleccionar-ne una per veure'n els detalls.
 */

"use client"; // És un component de client perquè gestiona l'estat del mes actual i la interacció de l'usuari.

import React, { useState, useMemo, FC } from 'react';
import { Button } from '@/components/ui/button';
import { ChevronLeft, ChevronRight } from 'lucide-react';
// Importem funcions de la llibreria 'date-fns' per a la manipulació de dates. És molt potent i lleugera.
import { format, startOfMonth, endOfMonth, startOfWeek, endOfWeek, eachDayOfInterval, isSameMonth, isSameDay, addMonths, subMonths } from 'date-fns';
import { ca, es, enUS } from 'date-fns/locale';
import { type Campaign } from '../page'; // Tipus de dades per a una campanya.
import { useLocale, useTranslations } from 'next-intl';

// Interfície de propietats del component.
interface CampaignCalendarProps {
  campaigns: Campaign[]; // Llista de campanyes a mostrar.
  onCampaignSelect: (campaign: Campaign) => void; // Funció per notificar quan es fa clic a una campanya.
}

export const CampaignCalendar: FC<CampaignCalendarProps> = ({ campaigns, onCampaignSelect }) => {
  // Estat per controlar quin mes s'està visualitzant actualment.
  const [currentMonth, setCurrentMonth] = useState(new Date());
  const t = useTranslations('CampaignCalendar');
  const locale = useLocale();

  // --- Càlculs de dates per construir la graella del calendari ---
  const monthStart = startOfMonth(currentMonth);
  const monthEnd = endOfMonth(monthStart);
  // Per tenir una graella completa, calculem des de l'inici de la primera setmana fins al final de l'última.
  const startDate = startOfWeek(monthStart, { weekStartsOn: 1 }); // Comencem la setmana en dilluns.
  const endDate = endOfWeek(monthEnd, { weekStartsOn: 1 });
  // Generem un array amb tots els dies que s'han de mostrar a la graella.
  const days = eachDayOfInterval({ start: startDate, end: endDate });

  /**
   * @constant campaignsByDate
   * @summary Memoitzem el càlcul per agrupar les campanyes per data.
   * `useMemo` evita que aquest càlcul es torni a fer en cada renderització si les campanyes no han canviat.
   * El resultat és un objecte on cada clau és una data (ex: '2025-09-15') i el valor és un array de campanyes.
   */
  const campaignsByDate = useMemo(() => {
    return campaigns.reduce((acc, campaign) => {
      const date = format(new Date(campaign.campaign_date), 'yyyy-MM-dd');
      if (!acc[date]) acc[date] = [];
      acc[date].push(campaign);
      return acc;
    }, {} as Record<string, Campaign[]>);
  }, [campaigns]);
  // ✅ 3. Funció per obtenir l'objecte de localització correcte per a 'date-fns'.
  const getDateLocale = () => {
    switch (locale) {
      case 'es': return es;
      case 'en': return enUS;
      default: return ca;
    }
  }
  // ✅ 4. Obtenim els dies de la setmana traduïts.
  const daysOfWeek = [
    t('daysOfWeek.monday'), t('daysOfWeek.tuesday'), t('daysOfWeek.wednesday'),
    t('daysOfWeek.thursday'), t('daysOfWeek.friday'), t('daysOfWeek.saturday'),
    t('daysOfWeek.sunday')
  ];
  return (
        <div className="glass-effect rounded-xl p-4">
          <div className="flex justify-between items-center mb-4">
            <Button variant="ghost" size="icon" onClick={() => setCurrentMonth(subMonths(currentMonth, 1))}><ChevronLeft /></Button>
            {/* ✅ 5. Utilitzem la localització correcta per al format de la data. */}
            <h3 className="text-lg font-semibold capitalize">{format(currentMonth, "MMMM yyyy", { locale: getDateLocale() })}</h3>
            <Button variant="ghost" size="icon" onClick={() => setCurrentMonth(addMonths(currentMonth, 1))}><ChevronRight /></Button>
          </div>
          <div className="grid grid-cols-7 gap-1 text-center text-xs text-muted-foreground">
            {/* ✅ 6. Renderitzem els dies de la setmana traduïts. */}
            {daysOfWeek.map(day => <div key={day} className="font-bold">{day}</div>)}
          </div>
          <div className="grid grid-cols-7 gap-1 mt-2">
            {days.map(day => (
              <div key={day.toString()} className={`h-24 rounded-lg p-1 overflow-hidden ${isSameMonth(day, monthStart) ? 'bg-background/20' : 'bg-background/5'}`}>
                <time dateTime={format(day, 'yyyy-MM-dd')} className={`text-xs ${isSameDay(day, new Date()) ? 'font-bold text-primary' : ''}`}>{format(day, 'd')}</time>
                <div className="mt-1 space-y-1">
                  {(campaignsByDate[format(day, 'yyyy-MM-dd')] || []).map(campaign => (
                    <div key={campaign.id} onClick={() => onCampaignSelect(campaign)} className="text-xs bg-primary/20 text-primary-foreground p-1 rounded truncate cursor-pointer hover:bg-primary/40">{campaign.name}</div>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>
      );
    };

// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/_components/CampaignDetailDialog.tsx ===================

// Ubicació: /app/(app)/comunicacio/marketing/_components/CampaignDetailDialog.tsx

"use client";

import React, { useState, useEffect, useTransition, FC } from 'react';
import { toast } from "sonner";
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Loader2 } from 'lucide-react';
import { type Campaign } from '../page';
import { updateCampaignAction } from '../actions';
import { format } from 'date-fns';
import { ca, es, enUS } from 'date-fns/locale';
import { useTranslations } from 'next-intl';
import { useLocale } from 'next-intl';

interface CampaignDetailDialogProps {
    campaign: Campaign | null;
    open: boolean;
    onOpenChange: (open: boolean) => void;
    onCampaignUpdated: () => void;
}

export const CampaignDetailDialog: FC<CampaignDetailDialogProps> = ({ campaign, open, onOpenChange, onCampaignUpdated }) => {
    const t = useTranslations('Marketing');
    const locale = useLocale();

    const [editedCampaign, setEditedCampaign] = useState<Campaign | null>(null);
    const [isPending, startTransition] = useTransition();

    useEffect(() => {
        // ✅ CORRECCIÓ: Només actualitzem l'estat intern si la 'prop' 'campaign' canvia.
        // Això evita que l'estat local es reseteji a cada render.
        setEditedCampaign(campaign);
    }, [campaign]);

    const handleSave = () => {
        if (!editedCampaign) return;
        startTransition(async () => {
            const { error } = await updateCampaignAction(editedCampaign.id, editedCampaign.name, editedCampaign.content);
            if (error) {
                toast.error('Error', { description: t('toastErrorUpdate') });
            } else {
                toast.success('Èxit!', { description: t('toastSuccessUpdate') });
                onCampaignUpdated();
                onOpenChange(false);
            }
        });
    };

    const getDateLocale = () => {
        switch(locale) {
            case 'es': return es;
            case 'en': return enUS;
            default: return ca;
        }
    }

    // ✅ CORRECCIÓ: No fem un retorn anticipat de 'null' si la campanya no existeix.
    // El component Dialog s'encarrega de no renderitzar el contingut si 'open' és fals.
    // Això garanteix que les animacions de sortida del diàleg funcionin correctament.

    return (
        <Dialog open={open} onOpenChange={onOpenChange}>
            <DialogContent className="glass-effect max-w-4xl h-[90vh] flex flex-col">
                {/* Només renderitzem el contingut si tenim una campanya per editar */}
                {editedCampaign && (
                    <>
                        <DialogHeader>
                            <DialogTitle className="text-2xl">{t('detailDialogTitle')}</DialogTitle>
                            <div className="flex items-center gap-4 pt-2 text-sm text-muted-foreground">
                                <Badge variant="outline" className={undefined}>{editedCampaign.type}</Badge>
                                <span>|</span>
                                <span>{t('detailDialogScheduledFor')}: {format(new Date(editedCampaign.campaign_date), "d MMMM yyyy", { locale: getDateLocale() })}</span>
                            </div>
                        </DialogHeader>
                        <div className="flex-1 flex flex-col gap-6 overflow-y-auto pr-2 py-4">
                            <div className="space-y-2">
                                <Label htmlFor="campaignName" className="font-semibold">{t('detailDialogNameLabel')}</Label>
                                <Input
                                    id="campaignName"
                                    value={editedCampaign.name}
                                    onChange={(e) => setEditedCampaign(c => c ? { ...c, name: e.target.value } : null)}
                                    className="text-lg"
                                />
                            </div>
                            <div className="space-y-2">
                                <Label htmlFor="campaignAudience" className="font-semibold">{t('detailDialogAudienceLabel')}</Label>
                                <Input
                                    id="campaignAudience"
                                    value={editedCampaign.target_audience}
                                    disabled
                                />
                            </div>
                            <div className="space-y-2 flex-1 flex flex-col">
                                <Label htmlFor="campaignContent" className="font-semibold">{t('detailDialogContentLabel')}</Label>
                                <Textarea
                                    id="campaignContent"
                                    value={editedCampaign.content}
                                    onChange={(e) => setEditedCampaign(c => c ? { ...c, content: e.target.value } : null)}
                                    className="flex-1 text-base"
                                    rows={15}
                                />
                            </div>
                        </div>
                        <DialogFooter className="pt-4 border-t border-border">
                            <Button variant="ghost" onClick={() => onOpenChange(false)}>Tancar</Button>
                            <Button onClick={handleSave} disabled={isPending}>
                                {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                                {t('saveChangesButton')}
                            </Button>
                        </DialogFooter>
                    </>
                )}
            </DialogContent>
        </Dialog>
    );
};

// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/_components/CampaignList.tsx ===================

/**
 * @file CampaignList.tsx
 * @summary Component de client purament presentacional per a la llista de campanyes.
 * ✅ NOU: Ara està totalment internacionalitzat.
 */

"use client";

import React, { FC } from 'react';
import { Badge } from '@/components/ui/badge';
// ✅ CORRECCIÓ: Importem 'format' des de l'arrel i totes les localitzacions des de 'date-fns/locale'.
import { format } from 'date-fns';
import { ca, es, enUS } from 'date-fns/locale';
import { useLocale, useTranslations } from 'next-intl';
import { type Campaign } from '../page';

const statusColors: Record<string, string> = { 'Completat': 'bg-green-500/20 text-green-300', 'Actiu': 'bg-blue-500/20 text-blue-300', 'Planificat': 'bg-yellow-500/20 text-yellow-300' };

interface CampaignListProps {
  campaigns: Campaign[];
  onCampaignSelect: (campaign: Campaign) => void;
}

export const CampaignList: FC<CampaignListProps> = ({ campaigns, onCampaignSelect }) => {
  const t = useTranslations('Marketing');
  const locale = useLocale();
  
  // Aquesta funció retorna l'objecte de localització correcte per a 'date-fns' basant-se en l'idioma actiu.
  const getDateLocale = () => {
    switch(locale) {
      case 'es': return es;
      case 'en': return enUS;
      default: return ca;
    }
  }

  return (
    <div className="glass-effect rounded-xl overflow-hidden">
      <table className="w-full text-left">
        <thead className="bg-white/5"><tr className="border-b border-border"><th className="p-4 font-semibold">{t('campaignListHeader')}</th><th className="p-4 font-semibold hidden md:table-cell">{t('typeListHeader')}</th><th className="p-4 font-semibold">{t('statusListHeader')}</th><th className="p-4 font-semibold hidden md:table-cell">{t('dateListHeader')}</th></tr></thead>
        <tbody>
          {campaigns.map(c => (
            <tr key={c.id} className="border-t border-white/10 hover:bg-white/5 transition-colors cursor-pointer" onClick={() => onCampaignSelect(c)}>
              <td className="p-4 font-medium">{c.name}</td>
              <td className="p-4 text-gray-300 hidden md:table-cell">{c.type}</td>
              <td className="p-4"><Badge className={statusColors[c.status]} variant={undefined}>{c.status}</Badge></td>
              <td className="p-4 text-gray-300 hidden md:table-cell">{format(new Date(c.campaign_date), "d MMM, yyyy", { locale: getDateLocale() })}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};



// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/_components/marketing-client.tsx ===================

// Ubicació: /app/(app)/comunicacio/marketing/_components/MarketingClient.tsx

"use client";

import React from 'react';
import { motion } from 'framer-motion';
import { useTranslations } from 'next-intl';
import { Button } from '@/components/ui/button';
import { Sparkles, List, Calendar, Target, BarChart2, CheckCircle } from 'lucide-react';

import { useMarketing } from '../_hooks/useMarketing'; // ✅ Importem el nou hook
import type { Campaign, Kpis } from '../page';

// ✅ Importem els components fills
import { MetricCard } from './MetricCard';
import { CampaignList } from './CampaignList';
import { CampaignCalendar } from './CampaignCalendar';
import { CampaignDetailDialog } from './CampaignDetailDialog';
import { AICampaignWizard } from './AICampaignWizard';


export function MarketingClient({ initialKpis, initialCampaigns }: { initialKpis: Kpis, initialCampaigns: Campaign[] }) {
    const t = useTranslations('Marketing');
    const {
        view,
        isWizardOpen,
        selectedCampaign,
        setView,
        setIsWizardOpen,
        handleRefreshData,
        handleOpenWizard,
        handleSelectCampaign,
    } = useMarketing(); // ✅ Tota la lògica ve del hook

    return (
        <>
            <AICampaignWizard 
                open={isWizardOpen} 
                onOpenChange={setIsWizardOpen} 
                onCampaignCreated={handleRefreshData} 
            />
            <CampaignDetailDialog 
                open={!!selectedCampaign} 
                onOpenChange={(isOpen) => !isOpen && handleSelectCampaign(null)} 
                campaign={selectedCampaign} 
                onCampaignUpdated={handleRefreshData} 
            />

            <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} className="space-y-8">
                <div className="flex justify-between items-center">
                    <h1 className="text-3xl font-bold">{t('title')}</h1>
                    <Button onClick={handleOpenWizard}>
                        <Sparkles className="w-4 h-4 mr-2" /> {t('createCampaignButton')}
                    </Button>
                </div>
                
                <div className="flex flex-col md:flex-row gap-6">
                    <MetricCard title={t('kpiNewContacts')} value={initialKpis.totalLeads} icon={<Target className="text-purple-400" />} />
                    <MetricCard title={t('kpiConversionRate')} value={`${initialKpis.conversionRate.toFixed(1)}%`} icon={<CheckCircle className="text-purple-400" />} />
                    <MetricCard title={t('kpiInteraction')} value="N/A" icon={<BarChart2 className="text-purple-400" />} />
                </div>
                
                <div className="flex justify-between items-center mt-8">
                    <h2 className="text-2xl font-semibold">{t('yourCampaignsTitle')}</h2>
                    <div className="flex gap-2">
                        <Button variant={view === 'list' ? 'secondary' : 'ghost'} size="icon" onClick={() => setView('list')}><List className="h-4 w-4" /></Button>
                        <Button variant={view === 'calendar' ? 'secondary' : 'ghost'} size="icon" onClick={() => setView('calendar')}><Calendar className="h-4 w-4" /></Button>
                    </div>
                </div>

                {initialCampaigns.length === 0 ? (
                    <p className="text-center text-gray-400 p-8">{t('noCampaignsMessage')}</p>
                ) : view === 'list' ? (
                    <CampaignList campaigns={initialCampaigns} onCampaignSelect={handleSelectCampaign} />
                ) : (
                    <CampaignCalendar campaigns={initialCampaigns} onCampaignSelect={handleSelectCampaign} />
                )}
            </motion.div>
        </>
    );
};

// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/_components/MarketingData.tsx ===================

// Ubicació: /app/(app)/comunicacio/marketing/_components/MarketingData.tsx

import { validatePageSession } from '@/lib/supabase/session'; // ✅ Importem el helper correcte
import { MarketingClient } from './marketing-client';
import type { Campaign, Kpis } from '../page';

export async function MarketingData() {
    // ✅ La validació de sessió és ara una sola línia!
    const { supabase, activeTeamId } = await validatePageSession();

    const { data, error } = await supabase.rpc('get_marketing_page_data', {
        p_team_id: activeTeamId 
    });

    if (error) {
        console.error("Error en obtenir les dades de màrqueting:", error);
        return <MarketingClient initialKpis={{ totalLeads: 0, conversionRate: 0 }} initialCampaigns={[]} />;
    }
    
    const isObject = typeof data === 'object' && data !== null && !Array.isArray(data);

    type MarketingPageData = { kpis: Kpis; campaigns: Campaign[] };
    const typedData = isObject ? (data as MarketingPageData) : undefined;

    const kpis: Kpis = typedData && typedData.kpis ? typedData.kpis : { totalLeads: 0, conversionRate: 0 };
    const campaigns: Campaign[] = typedData && typedData.campaigns ? typedData.campaigns : [];

    return <MarketingClient initialKpis={kpis} initialCampaigns={campaigns} />;
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/_components/MarketingSkeleton.tsx ===================

"use client";

import React from 'react';

/**
 * @summary Mostra un esquelet de càrrega per a la pàgina de Màrqueting.
 */
export const MarketingSkeleton: React.FC = () => (
    <div className="space-y-8 animate-pulse">
        {/* Esquelet per a la capçalera */}
        <div className="flex justify-between items-center">
            <div className="h-9 bg-muted rounded-lg w-1/3"></div>
            <div className="h-10 bg-muted rounded-lg w-1/4"></div>
        </div>

        {/* Esquelet per a les targetes de KPI */}
        <div className="flex flex-col md:flex-row gap-6">
            <div className="h-24 bg-muted rounded-xl flex-1"></div>
            <div className="h-24 bg-muted rounded-xl flex-1"></div>
            <div className="h-24 bg-muted rounded-xl flex-1"></div>
        </div>

        {/* Esquelet per a la llista de campanyes */}
        <div className="flex justify-between items-center mt-8">
            <div className="h-8 bg-muted rounded-lg w-1/4"></div>
            <div className="flex gap-2">
                <div className="h-10 w-10 bg-muted rounded-lg"></div>
                <div className="h-10 w-10 bg-muted rounded-lg"></div>
            </div>
        </div>
        <div className="h-64 bg-muted rounded-xl"></div>
    </div>
);

// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/_components/MetricCard.tsx ===================

// Ubicació: /app/(app)/comunicacio/marketing/_components/MetricCard.tsx

import React from 'react';

interface MetricCardProps {
    title: string;
    value: string | number;
    icon: React.ReactNode;
}

export const MetricCard: React.FC<MetricCardProps> = ({ title, value, icon }) => (
    <div className="glass-effect p-6 rounded-xl flex-1">
        <div className="flex items-center gap-4">
            <div className="bg-purple-500/20 p-3 rounded-lg">{icon}</div>
            <div>
                <p className="text-gray-300 text-sm">{title}</p>
                <p className="text-2xl font-bold">{value}</p>
            </div>
        </div>
    </div>
);

// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/_components/wizard/WizardStep1_Goal.tsx ===================

// Ubicació: /app/(app)/comunicacio/marketing/_components/wizard/WizardStep1_Goal.tsx

import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { Textarea } from "@/components/ui/textarea";
import { Sparkles, Loader2 } from "lucide-react";

interface Props {
    goal: string;
    setGoal: (value: string) => void;
    onGenerate: () => void;
    isPending: boolean;
    t: (key: string) => string;
}

export const WizardStep1_Goal = ({ goal, setGoal, onGenerate, isPending, t }: Props) => (
    <motion.div key="step1" initial={{ opacity: 0, x: 20 }} animate={{ opacity: 1, x: 0 }} exit={{ opacity: 0, x: -20 }}>
        <DialogDescription>{t('step1Description')}</DialogDescription>
        <Textarea
            placeholder={t('step1Placeholder')}
            value={goal}
            onChange={(e) => setGoal(e.target.value)}
            className="my-4"
            rows={4}
        />
        <DialogFooter>
            <Button onClick={onGenerate} disabled={isPending || !goal.trim()}>
                {isPending ? <Loader2 className="animate-spin mr-2" /> : <Sparkles className="mr-2 h-4 w-4" />}
                {t('generateStrategiesButton')}
            </Button>
        </DialogFooter>
    </motion.div>
);

// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/_components/wizard/WizardStep2_SelectStrategy.tsx ===================

// Ubicació: /app/(app)/comunicacio/marketing/_components/wizard/WizardStep2_SelectStrategy.tsx

import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { Loader2, Lightbulb, Users, ChevronLeft } from "lucide-react";

// El tipus 'Strategy' hauria d'estar en un fitxer compartit, però el definim aquí per claredat.
interface Strategy {
    name: string;
    type: string;
    target_audience: string;
    description: string;
}

interface Props {
    strategies: Strategy[];
    onSelect: (strategy: Strategy, index: number) => void;
    onBack: () => void;
    isPending: boolean;
    processingIndex: number | null;
    t: (key: string) => string;
}

export const WizardStep2_SelectStrategy = ({ strategies, onSelect, onBack, isPending, processingIndex, t }: Props) => (
    <motion.div key="step2" initial={{ opacity: 0, x: 20 }} animate={{ opacity: 1, x: 0 }} exit={{ opacity: 0, x: -20 }}>
        <DialogDescription>{t('step2Description')}</DialogDescription>

        <div className="my-4 space-y-3 max-h-[50vh] overflow-y-auto p-1">
            {strategies.map((s, i) => (
                <div
                    key={i}
                    className={`p-4 border border-border rounded-lg transition-all ${isPending && processingIndex !== i ? "opacity-50 cursor-not-allowed" : "hover:border-primary cursor-pointer"}`}
                    onClick={() => !isPending && onSelect(s, i)}
                >
                    {isPending && processingIndex === i ? (
                        <div className="flex items-center justify-center py-4">
                            <Loader2 className="animate-spin text-primary" />
                            <span className="ml-2">{t('creatingMagic')}</span>
                        </div>
                    ) : (
                        <>
                            <h3 className="font-semibold flex items-center gap-2">
                                <Lightbulb className="text-yellow-400 h-4 w-4" /> {s.name} <Badge variant="outline" className={undefined}>{s.type}</Badge>
                            </h3>
                            <p className="text-sm text-muted-foreground mt-1">
                                <Users className="inline h-4 w-4 mr-1" /> {s.target_audience}
                            </p>
                            <p className="text-sm mt-2">{s.description}</p>
                        </>
                    )}
                </div>
            ))}
        </div>
        <DialogFooter>
            <Button variant="ghost" onClick={onBack}>
                <ChevronLeft className="mr-2 h-4 w-4" /> {t('backButton')}
            </Button>
        </DialogFooter>
    </motion.div>
);

// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/_components/wizard/WizardStep3_Finalize.tsx ===================

// Ubicació: /app/(app)/comunicacio/marketing/_components/wizard/WizardStep3_Finalize.tsx

import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Loader2} from "lucide-react";
import type { SetStateAction } from 'react';

// ✅ CORRECCIÓ: Aquest tipus ha de ser el mateix que s'utilitza en el hook.
// Si Strategy té camps opcionals, els mantenim.
interface Strategy {
    name: string;
    type: string;
    target_audience: string;
    description: string;
    content?: string;
}

interface Props {
    // ✅ CORRECCIÓ: Fem servir el tipus 'Strategy' complet.
    strategy: Strategy;
    // ✅ CORRECCIÓ: El tipus ha de coincidir exactament.
    onStrategyChange: (value: SetStateAction<Strategy | null>) => void;
    onSave: () => void;
    onBack: () => void;
    isPending: boolean;
    t: (key: string) => string;
}

export const WizardStep3_Finalize = ({ strategy, onStrategyChange, onSave, onBack, isPending, t }: Props) => (
    <motion.div key="step3" initial={{ opacity: 0, x: 20 }} animate={{ opacity: 1, x: 0 }} exit={{ opacity: 0, x: -20 }}>
        <DialogDescription>{t('step3Description')}</DialogDescription>

        <div className="my-4 space-y-4">
            <Input
                value={strategy.name}
                onChange={(e) => onStrategyChange(prev => prev ? { ...prev, name: e.target.value } : null)}
                className="text-lg font-bold"
            />
            <Textarea
                value={strategy.content ?? ""}
                onChange={(e) => onStrategyChange(prev => prev ? { ...prev, content: e.target.value } : null)}
                className="h-[40vh] text-base"
            />
        </div>
        <DialogFooter>
            <Button variant="ghost" onClick={onBack}>{t('backButton')}</Button>
            <Button onClick={onSave} disabled={isPending}>
                {isPending && <Loader2 className="animate-spin mr-2" />} {t('saveCampaignButton')}
            </Button>
        </DialogFooter>
    </motion.div>
);

// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/_hooks/useAICampaignWizard.ts ===================

// Ubicació: /app/(app)/comunicacio/marketing/_hooks/useAICampaignWizard.ts

import { useState, useTransition } from "react";
import { toast } from "sonner";
import { generateStrategiesAction, draftContentAction, saveCampaignAction } from "../actions";

// Tipus per a les estratègies
interface Strategy {
    name: string;
    type: string;
    target_audience: string;
    description: string;
    content?: string;
}

// Propietats que rep el hook
interface UseAICampaignWizardProps {
    onCampaignCreated: () => void;
    onClose: () => void;
    t: (key: string) => string;
}

export function useAICampaignWizard({ onCampaignCreated, onClose, t }: UseAICampaignWizardProps) {
    const [step, setStep] = useState(1);
    const [goal, setGoal] = useState("");
    const [strategies, setStrategies] = useState<Strategy[]>([]);
    const [selectedStrategy, setSelectedStrategy] = useState<Strategy | null>(null);
    const [isPending, startTransition] = useTransition();
    const [processingIndex, setProcessingIndex] = useState<number | null>(null);

    const resetWizard = () => {
        setStep(1);
        setGoal("");
        setStrategies([]);
        setSelectedStrategy(null);
        setProcessingIndex(null);
    };

    const handleGenerateStrategies = () => {
        if (!goal.trim()) return;
        startTransition(async () => {
            const { data, error } = await generateStrategiesAction(goal);
            if (error) {
                toast.error(t('toastErrorAI'), { description: error });
            } else {
                setStrategies(data || []);
                setStep(2);
            }
        });
    };

    const handleDraftContent = (strategy: Strategy, index: number) => {
        setProcessingIndex(index);
        startTransition(async () => {
            const { data, error } = await draftContentAction(goal, strategy);
            if (error) {
                toast.error(t('toastErrorAI'), { description: error });
            } else {
                setSelectedStrategy({ ...strategy, content: data || "" });
                setStep(3);
            }
            setProcessingIndex(null);
        });
    };

    const handleSaveCampaign = () => {
        if (!selectedStrategy) return;
        startTransition(async () => {
            const { error } = await saveCampaignAction(selectedStrategy, goal);
            if (error) {
                toast.error(t('toastErrorSave'), { description: t('toastErrorSaveDescription') });
            } else {
                toast.success(t('toastSuccessSave'), { description: t('toastSuccessSaveDescription') });
                onCampaignCreated();
                onClose();
                resetWizard();
            }
        });
    };

    return {
        step,
        goal,
        strategies,
        selectedStrategy,
        isPending,
        processingIndex,
        setStep,
        setGoal,
        setSelectedStrategy,
        resetWizard,
        handleGenerateStrategies,
        handleDraftContent,
        handleSaveCampaign
    };
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/_hooks/useMarketing.ts ===================

// Ubicació: /app/(app)/comunicacio/marketing/_hooks/useMarketing.ts

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import type { Campaign } from '../page';

export function useMarketing() {
    const router = useRouter();
    const [view, setView] = useState<'list' | 'calendar'>('list');
    const [isWizardOpen, setIsWizardOpen] = useState(false);
    const [selectedCampaign, setSelectedCampaign] = useState<Campaign | null>(null);

    const handleRefreshData = () => {
        router.refresh();
    };

    const handleOpenWizard = () => setIsWizardOpen(true);
    
    const handleCloseWizard = () => setIsWizardOpen(false);

    const handleSelectCampaign = (campaign: Campaign | null) => {
        setSelectedCampaign(campaign);
    };

    return {
        view,
        isWizardOpen,
        selectedCampaign,
        setView,
        setIsWizardOpen,
        handleRefreshData,
        handleOpenWizard,
        handleCloseWizard,
        handleSelectCampaign,
    };
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/planificador/actions.ts ===================

"use server";

import { revalidatePath } from "next/cache";
import type { SocialPost } from "@/types/comunicacio/SocialPost";
import { getTranslations } from "next-intl/server";
import { validateUserSession } from "@/lib/supabase/session";
import { validateSessionAndPermission, PERMISSIONS } from "@/lib/permissions";

// Aquest tipus de retorn es pot moure a un fitxer de tipus globals si el fas servir a més llocs.

// ✅ CORRECCIÓ 1: El missatge ara és opcional.
type ActionResult<T = unknown> = {
    success: boolean;
    message?: string;
    data?: T;
};

/**
 * Funció d'ajuda interna per a validar la sessió i els permisos específics del planificador.
 * Evita repetir el mateix codi a cada acció.
 */
/**
 * Funció d'ajuda interna per a validar la sessió i els permisos específics del planificador.
 * Ara fa servir el nostre validador centralitzat.
 */
async function validateSocialPlannerPermissions() {
    // Cridem directament a la nostra nova funció guardiana!
    const validationResult = await validateSessionAndPermission(PERMISSIONS.MANAGE_INTEGRATIONS);

    if ('error' in validationResult) {
        const t = await getTranslations('Errors');
        // Pots retornar un missatge d'error genèric o el de la validació
        return { error: t('permissionDenied') };
    }

    // Si la validació és correcta, retornem les dades necessàries.
    return validationResult;
}
// ----------------------------------------------------------------------------------

/**
 * Crea una URL de pujada signada (presigned URL) a Supabase Storage.
 */
export async function getPresignedUploadUrlAction(fileNames: string[]): Promise<ActionResult<{ signedUrls: { signedUrl: string; path: string; }[] }>> {
    // Aquesta acció només requereix que l'usuari estigui autenticat.
    const session = await validateUserSession();
    if ('error' in session) return { success: false, message: session.error.message };
    const { supabase, user } = session;

    try {
        const signedUrls = await Promise.all(
            fileNames.map(async (fileName) => {
                const fileExt = fileName.split('.').pop();
                const filePath = `${user.id}/${Date.now()}-${Math.random()}.${fileExt}`;
                const { data, error } = await supabase.storage
                    .from('social_media')
                    .createSignedUploadUrl(filePath);

                if (error) throw new Error(`Error creant URL per a ${fileName}: ${error.message}`);
                return { signedUrl: data.signedUrl, path: data.path };
            })
        );
        return { success: true, message: "URLs creades.", data: { signedUrls } };
    } catch (err: unknown) {
        const message = err instanceof Error ? err.message : "Error desconegut creant URLs signades.";
        return { success: false, message };
    }
}

/**
 * Crea un registre de publicació en esborrany.
 */
export async function createSocialPostAction(
    content: string,
    providers: string[],
    mediaPaths: string[] | null,
    mediaType: string | null
): Promise<ActionResult<SocialPost>> {
    const validation = await validateSocialPlannerPermissions();
    if ('error' in validation) {
        // ✅ CORRECCIÓ: Retornem el missatge d'error de la validació
        return { success: false, message: validation.error };
    }
    const { supabase, user, activeTeamId } = validation;

    const t = await getTranslations('Planificador.toasts');

    let media_urls: string[] | null = null;
    if (mediaPaths && mediaPaths.length > 0) {
        media_urls = mediaPaths.map(path =>
            supabase.storage.from('social_media').getPublicUrl(path).data.publicUrl
        );
    }

    const { data: postData, error: postError } = await supabase
        .from('social_posts')
        .insert({
            user_id: user.id,
            team_id: activeTeamId,
            provider: providers,
            content: content,
            media_url: media_urls,
            media_type: mediaType,
            status: 'draft',
        })
        .select()
        .single();

    if (postError) {
        console.error("Error creant la publicació:", postError);
        return { success: false, message: t('errorPostCreation') };
    }

    revalidatePath('/comunicacio/planificador');
    return { success: true, message: t('successDraftCreated'), data: postData };
}
/**
 * Planifica una publicació.
 */
export async function scheduleSocialPostAction(postId: number, scheduledAt: string): Promise<ActionResult> {
    const validation = await validateSocialPlannerPermissions();
    if ('error' in validation) return { success: false, message: validation.error };
    const { supabase } = validation;

    // ✅ CORRECCIÓ: Canviem el 'namespace' al que correspon.
    const t = await getTranslations('Planificador.toasts');

    const { error } = await supabase
        .from('social_posts')
        .update({ status: 'scheduled', scheduled_at: scheduledAt })
        .eq('id', postId);

    if (error) {
        console.error("Error planificant la publicació:", error);
        return { success: false, message: t('errorScheduling') };
    }

    revalidatePath('/comunicacio/planificador');
    return { success: true, message: t('successScheduled') };
}

/**
 * Retorna una publicació a l'estat d'esborrany.
 */
export async function unscheduleSocialPostAction(postId: number): Promise<ActionResult> {
    const validation = await validateSocialPlannerPermissions();
    if ('error' in validation) return { success: false, message: validation.error };
    const { supabase } = validation;

    // ✅ CORRECCIÓ: Canviem 'SocialPlanner.toasts' per 'Planificador.toasts'
    const t = await getTranslations('Planificador.toasts'); const { error } = await supabase
        .from('social_posts')
        .update({ status: 'draft', scheduled_at: null })
        .eq('id', postId);

    if (error) {
        console.error("Error desplanificant la publicació:", error);
        return { success: false, message: t('errorUnscheduling') };
    }

    revalidatePath('/comunicacio/planificador');
    return { success: true, message: t('successUnscheduled') };
}

/**
 * Elimina una publicació social.
 */
export async function deleteSocialPostAction(postId: number): Promise<ActionResult> {
    const validation = await validateSocialPlannerPermissions();
    if ('error' in validation) return { success: false, message: validation.error };
    const { supabase } = validation;
    // ✅ CORRECCIÓ: Canviem 'SocialPlanner.toasts' per 'Planificador.toasts'
    const t = await getTranslations('Planificador.toasts');

    const { data: post } = await supabase.from('social_posts').select('media_url').eq('id', postId).single();

    if (post && Array.isArray(post.media_url)) {
        try {
            // ✅ CORRECCIÓ 2: Afegim el tipus explícit a 'url'.
            const pathsToRemove = post.media_url.map((url: string) =>
                new URL(url).pathname.split('/social_media/')[1]
            ).filter(Boolean);

            if (pathsToRemove.length > 0) {
                await supabase.storage.from('social_media').remove(pathsToRemove);
            }
        } catch (e) {
            console.error("Error en eliminar de Storage:", e);
        }
    }

    const { error: deleteError } = await supabase.from('social_posts').delete().eq('id', postId);

    if (deleteError) {
        console.error("Error eliminant la publicació:", deleteError);
        return { success: false, message: t('errorDeleting') };
    }

    revalidatePath('/comunicacio/planificador');
    return { success: true, message: t('successPostDeleted') };
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/planificador/page.tsx ===================

// Ubicació: /app/(app)/comunicacio/planificador/page.tsx

import { Suspense } from 'react';
import { SocialPlannerClient } from './_components/SocialPlannerClient';
import type { SocialPost } from "@/types/comunicacio/SocialPost";
import { UpgradePlanNotice } from '@/app/[locale]/(app)/settings/billing/_components/UpgradePlanNotice';
import { validatePageSession } from '@/lib/supabase/session';

// ✅ Esborrem les importacions de 'permissions' que no s'utilitzen aquí directament.
// import { hasPermission, PERMISSIONS } from '@/lib/permissions';
// import { getUserRoleInTeam } from '@/lib/permissions';

export default async function SocialPlannerPage() {
    const session = await validatePageSession();
    // ✅ CORRECCIÓ 1: Comprovem si hi ha hagut un error (encara que 'validatePageSession' redirigeix,
    // TypeScript necessita aquesta comprovació per saber que 'session' no és un error).
    if (!session) {
        // Aquesta línia realment no s'executarà perquè validatePageSession ja haurà redirigit,
        // però satisfà el tipatge de TypeScript.
        return null; 
    }
    const { supabase, user, activeTeamId } = session;
    const locale = user.user_metadata?.locale || 'ca';

    // Comprovació de pla de subscripció
    const activeTeamPlan = user.app_metadata?.active_team_plan as string | undefined;
    const allowedPlans = ['plus', 'premium'];
    // ✅ CORRECCIÓ 2: Fem la comprovació més robusta (insensible a majúscules/minúscules).
    if (!activeTeamPlan || !allowedPlans.includes(activeTeamPlan.toLowerCase())) {
        return <UpgradePlanNotice featureName="Planificador Social" requiredPlan="Plus" locale={locale} />;
    }

    // ✅ CORRECCIÓ 3: La comprovació de permisos es feia DUES VEGADES i amb permisos incorrectes.
    // La centralitzarem i la simplificarem. La lògica principal de permisos ja està dins
    // de les 'actions', així que la comprovació aquí només ha de ser de visualització bàsica si cal.
    // De moment, la podem eliminar si les RLS de Supabase ja protegeixen les dades. Si no,
    // hauria de ser una única comprovació amb el permís correcte.

    // Com que les Server Actions ja tenen una validació robusta amb 'validateSocialPlannerPermissions',
    // podem confiar en que l'usuari no podrà fer accions no permeses. La càrrega inicial
    // de dades estarà protegida per les polítiques RLS de Supabase.

    // La resta de la càrrega de dades es manté igual...
    const { data: posts, error } = await supabase
        .from('social_posts')
        .select('*')
        .eq('team_id', activeTeamId) // Afegim el filtre per equip per RLS.
        .order('created_at', { ascending: false });

    if (error) console.error("Error carregant les publicacions:", error);

    const [userCredsRes, teamCredsRes] = await Promise.all([
        supabase.from('user_credentials').select('provider').eq('user_id', user.id),
        supabase.from('team_credentials').select('provider').eq('team_id', activeTeamId)
    ]);
    const userProviders = userCredsRes.data?.map(c => c.provider) || [];
    const teamProviders = teamCredsRes.data?.map(c => c.provider) || [];
    const allConnectedProviders = new Set([...userProviders, ...teamProviders]);

    const connectionStatuses = {
        linkedin: allConnectedProviders.has('linkedin'),
        facebook: allConnectedProviders.has('facebook'),
        instagram: allConnectedProviders.has('instagram'),
    };

    return (
        <Suspense fallback={<div>Carregant planificador...</div>}>
            <SocialPlannerClient
                initialPosts={(posts as SocialPost[]) || []}
                connectionStatuses={connectionStatuses}
            />
        </Suspense>
    );
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/planificador/types.ts ===================

// Ubicació: /app/(app)/comunicacio/planificador/types.ts (Fitxer nou)

export interface ConnectionStatuses {
    [key: string]: boolean;
    linkedin: boolean;
    facebook: boolean;
    instagram: boolean;
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/planificador/_components/CreatePostDialog.tsx ===================

//* eslint-disable react/jsx-no-undef */
// Ubicació: /app/(app)/comunicacio/planificador/_components/CreatePostDialog.tsx
"use client";

import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import Image from 'next/image';
import { Link, Loader2, PlayCircle, Trash2 } from 'lucide-react';

import { useCreatePost } from '../_hooks/useCreatePost';
import type { SocialPost } from '@/types/comunicacio/SocialPost';
import { type ConnectionStatuses } from '../types'; // ✅ Importem el tipus centralitzat

interface CreatePostDialogProps {
    isOpen: boolean;
    onOpenChange: (isOpen: boolean) => void;
    onCreate: (newPost: SocialPost) => void;
    connectionStatuses: ConnectionStatuses;
    t: (key: string) => string;
}

export function CreatePostDialog({ isOpen, onOpenChange, onCreate, connectionStatuses, t }: CreatePostDialogProps) {
    const {
        content, setContent, previewUrls, selectedProviders, isPending,
        handleMediaChange, removeMedia, setSelectedProviders, handleSubmit, resetState,
        mediaFiles // <-- Add this line to destructure mediaFiles from the hook
    } = useCreatePost({
        isOpen,
        connectionStatuses,
        onCreate,
        onClose: () => onOpenChange(false),
        t
    });

    const handleClose = (open: boolean) => {
        if (!open) {
            resetState();
        }
        onOpenChange(open);
    };
    const hasAnyConnection = Object.values(connectionStatuses).some(status => status === true);

    return (
        <Dialog open={isOpen} onOpenChange={handleClose}>
            <DialogContent className="max-w-4xl h-[90vh] md:h-[80vh] flex flex-col">
                <DialogHeader><DialogTitle>{t('createDialogTitle')}</DialogTitle></DialogHeader>
                <div className="grid md:grid-cols-2 gap-6 p-1 md:p-4 flex-grow overflow-y-auto">
                    <div className="space-y-4 flex flex-col">
                        <Textarea
                            placeholder={t('whatsOnYourMind')}
                            className="flex-grow text-base min-h-[200px]"
                            value={content}
                            onChange={(e) => setContent(e.target.value)}
                        />
                        <input type="file" multiple accept="image/*,video/*" onChange={handleMediaChange} className="text-sm" />
                        <div className="space-y-2 pt-4 border-t">
                            <h4 className="font-semibold text-sm">{t('publishTo')}:</h4>
                            {!hasAnyConnection ? (
                                <p className="text-sm text-muted-foreground italic">
                                    {t('noConnectionsMessage')} <Link href="/settings/integrations" className="underline text-primary hover:text-primary/80"> {t('connectHere')}</Link>.
                                </p>
                            ) : (
                                <div className="flex items-center gap-6 flex-wrap">
                                    {Object.entries(connectionStatuses).map(([key, isConnected]) => isConnected && (
                                        <div key={key} className="flex items-center space-x-2">
                                            <Checkbox
                                                id={key}
                                                checked={selectedProviders.includes(key)}
                                                onCheckedChange={(checked) => setSelectedProviders(prev => checked ? [...prev, key] : prev.filter(p => p !== key))}
                                            />
                                            <Label htmlFor={key} className="capitalize">{key}</Label>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </div>
                    </div>
                    <div className="bg-muted/50 p-4 rounded-lg flex flex-col">
                        <h3 className="font-semibold mb-2 text-sm flex-shrink-0">{t('preview')}</h3>
                        <div className="border rounded-md p-3 bg-card space-y-3 flex-grow overflow-y-auto">
                            <p className="text-sm whitespace-pre-wrap">{content || t('textWillAppearHere')}</p>
                            {previewUrls.length > 0 && (
                                <div className="grid grid-cols-2 sm:grid-cols-3 gap-2 mt-4">
                                    {previewUrls.map((url, index) => {
                                        const file = mediaFiles[index];
                                        const isVideo = file?.type.startsWith('video/');

                                        return (
                                            <div key={url} className="relative group aspect-square">
                                                <Image src={url} alt={`Preview ${index + 1}`} className="rounded-md object-cover" fill unoptimized />
                                                {/* ✅ ICONA DE PLAY PER A VÍDEOS */}
                                                {isVideo && (
                                                    <div className="absolute inset-0 bg-black/30 flex items-center justify-center">
                                                        <PlayCircle className="w-8 h-8 text-white" />
                                                    </div>
                                                )}
                                                <Button size="icon" variant="destructive" className="absolute top-1 right-1 h-6 w-6 opacity-0 group-hover:opacity-100 ..." onClick={() => removeMedia(index)}>
                                                    <Trash2 className="h-3 w-3" />
                                                </Button>
                                            </div>
                                        );
                                    })}
                                </div>
                            )}
                        </div>
                    </div>
                </div>
                <DialogFooter className="flex-shrink-0 mt-4">
                    <Button variant="ghost" onClick={() => handleClose(false)}>{t('cancel')}</Button>
                    <Button onClick={handleSubmit} disabled={isPending || !content || selectedProviders.length === 0}>
                        {isPending && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                        {isPending ? t('saving') : t('saveDraft')}
                    </Button>
                </DialogFooter>
            </DialogContent>
        </Dialog>
    );
};



// =================== FILE: src/app/[locale]/(app)/comunicacio/planificador/_components/PostCard.tsx ===================

// --- PostCard.tsx ---
import type { SocialPost } from '@/types/comunicacio/SocialPost';
import { format, parseISO } from 'date-fns';
import { Clock, CheckCircle, XCircle, Trash2, AlertTriangle, Images, Video } from 'lucide-react';
import { Button } from '@/components/ui/button';
import Image from 'next/image';
import React from 'react'; // ✅ Importem React

interface PostCardProps {
    post: SocialPost;
    isDragging: boolean;
    onDelete: (postId: number) => void;
    t: (key: string) => string;
    children?: React.ReactNode; // ✅ CORRECCIÓ: Afegim la propietat 'children'
}

export function PostCard({ post, isDragging, onDelete, t, children }: PostCardProps) {
    const statusStyles: { [key: string]: { border: string; icon: React.ReactNode | null; text: string } } = {
        scheduled: { border: 'border-primary/50', icon: <Clock size={12} />, text: 'text-primary' },
        published: { border: 'border-green-500', icon: <CheckCircle size={12} />, text: 'text-green-600' },
        failed: { border: 'border-destructive', icon: <XCircle size={12} />, text: 'text-destructive' },
        partial_success: { border: 'border-amber-500', icon: <AlertTriangle size={12} />, text: 'text-amber-600' },
        draft: { border: 'border-border', icon: null, text: '' }
    };

    const style = statusStyles[post.status] || statusStyles.draft;
    
    const mediaUrls = post.media_url || [];
    const hasMedia = mediaUrls.length > 0;
    const imageCount = mediaUrls.length;

    return (
        <div className={`group relative p-1.5 rounded-md bg-card text-xs flex items-start gap-1.5 border ${style.border} ${isDragging ? 'shadow-2xl scale-105' : 'shadow-sm'}`}>
            
            {/* ✅ CORRECCIÓ: Renderitzem el 'children' que conté l'agafador */}
            {children}
            
            <div className="flex-grow overflow-hidden">
                {post.status !== 'draft' && post.scheduled_at && (
                    <p className={`font-bold flex items-center gap-1 mb-0.5 ${style.text}`}>
                        {style.icon}
                        {post.status === 'scheduled' && format(parseISO(post.scheduled_at), 'HH:mm')}
                    </p>
                )}
                <p className="truncate">{post.content || t('noContent')}</p>
            </div>

            {hasMedia && (
                <div className="relative w-10 h-10 flex-shrink-0 rounded-sm overflow-hidden bg-muted flex items-center justify-center">
                    {/* ✅ LÒGICA ACTUALITZADA PER A LA PREVISUALITZACIÓ */}
                    {post.media_type === 'image' ? (
                        <>
                            <Image src={mediaUrls[0]} alt={t('imagePreviewAlt')} fill className="object-cover" unoptimized />
                            {imageCount > 1 && (
                                <div className="absolute bottom-0.5 right-0.5 bg-black/70 ...">
                                    <Images size={10} />
                                    <span>{imageCount}</span>
                                </div>
                            )}
                        </>
                    ) : post.media_type === 'video' ? (
                        // Mostrem la icona de vídeo
                        <Video className="w-5 h-5 text-muted-foreground" />
                    ) : null}
                </div>
            )}

            {post.status === 'draft' && (
                <Button variant="ghost" size="icon" className="absolute top-0 right-0 h-6 w-6 opacity-0 group-hover:opacity-100 focus:opacity-100" onClick={(e) => { e.stopPropagation(); onDelete(post.id); }}>
                    <Trash2 className="h-3.5 w-3.5 text-destructive" />
                </Button>
            )}
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/planificador/_components/PostPreview.tsx ===================

"use client";

import { useState } from 'react';
import type { SocialPost } from '@/types/comunicacio/SocialPost';
import Image from 'next/image';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import { ChevronLeft, ChevronRight, ThumbsUp, MessageCircle, Share2 } from 'lucide-react';
import { FaLinkedin, FaFacebook, FaInstagram } from 'react-icons/fa';

const ProviderIcon = ({ provider }: { provider: string }) => {
    switch (provider) {
        case 'linkedin': return <FaLinkedin className="w-4 h-4 text-[#0A66C2]" />;
        case 'facebook': return <FaFacebook className="w-4 h-4 text-[#1877F2]" />;
        case 'instagram': return <FaInstagram className="w-4 h-4 text-[#E4405F]" />;
        default: return null;
    }
};

export function PostPreview({ post, t }: { post: Partial<SocialPost>, t: (key: string) => string }) {
    const [currentImageIndex, setCurrentImageIndex] = useState(0);

    const mediaUrls = Array.isArray(post.media_url) ? post.media_url : [];
    const hasMedia = mediaUrls.length > 0;
    const mediaType = post.media_type;

    const nextImage = () => setCurrentImageIndex(prev => (prev + 1) % mediaUrls.length);
    const prevImage = () => setCurrentImageIndex(prev => (prev - 1 + mediaUrls.length) % mediaUrls.length);

    return (
        <div className="border rounded-lg bg-card text-card-foreground shadow-sm w-full">
            {/* Capçalera */}
            <div className="p-4 border-b">
                <div className="flex items-center gap-3">
                    <Avatar>
                        <AvatarFallback>R</AvatarFallback>
                    </Avatar>
                    <div>
                        <p className="font-semibold text-sm">{t('yourPage')}</p>
                        <div className="flex items-center gap-1 text-xs text-muted-foreground">
                            <span>{t('publishingTo')}</span>
                            {(post.provider || []).map(p => <ProviderIcon key={p} provider={p} />)}
                        </div>
                    </div>
                </div>
            </div>

            {/* Contingut */}
            <div className="p-4 space-y-4">
                <p className="text-sm whitespace-pre-wrap">
                    {post.content || t('yourTextPlaceholder')}
                </p>

                {hasMedia && (
                    <div className="relative w-full aspect-square overflow-hidden rounded-md">
                        {mediaUrls.map((url, index) => (
                            <div key={index} className="absolute w-full h-full transition-opacity duration-300" style={{ opacity: index === currentImageIndex ? 1 : 0 }}>
                                {mediaType === 'image' ? (
                                    <Image src={url} alt={`Preview ${index + 1}`} layout="fill" className="object-cover" unoptimized />
                                ) : (
                                    <video src={url} controls className="w-full h-full object-cover" />
                                )}
                            </div>
                        ))}
                        {mediaUrls.length > 1 && (
                            <>
                                <Button size="icon" variant="secondary" className="absolute left-2 top-1/2 -translate-y-1/2 h-8 w-8 rounded-full" onClick={prevImage}><ChevronLeft className="h-4 w-4" /></Button>
                                <Button size="icon" variant="secondary" className="absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8 rounded-full" onClick={nextImage}><ChevronRight className="h-4 w-4" /></Button>
                                <div className="absolute bottom-2 left-1/2 -translate-x-1/2 flex gap-1.5">
                                    {mediaUrls.map((_, index) => (
                                        <div key={index} className={`h-2 w-2 rounded-full transition-colors ${index === currentImageIndex ? 'bg-white' : 'bg-white/50'}`} />
                                    ))}
                                </div>
                            </>
                        )}
                    </div>
                )}
            </div>

            {/* Peu */}
            <div className="p-2 border-t flex justify-around text-muted-foreground">
                <Button variant="ghost" size="sm" className="w-full flex items-center gap-2">
                    <ThumbsUp className="w-4 h-4" /> {t('like')}
                </Button>
                <Button variant="ghost" size="sm" className="w-full flex items-center gap-2">
                    <MessageCircle className="w-4 h-4" /> {t('comment')}
                </Button>
                <Button variant="ghost" size="sm" className="w-full flex items-center gap-2">
                    <Share2 className="w-4 h-4" /> {t('share')}
                </Button>
            </div>
        </div>
    );
}


// =================== FILE: src/app/[locale]/(app)/comunicacio/planificador/_components/SchedulePostDialog.tsx ===================

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from '@/components/ui/dialog';
import { useTranslations } from 'next-intl';

interface SchedulePostDialogProps {
    isOpen: boolean;
    onOpenChange: (isOpen: boolean) => void;
    onConfirm: (time: string) => void;
    isPending: boolean;
}

export function SchedulePostDialog({ isOpen, onOpenChange, onConfirm, isPending }: SchedulePostDialogProps) {
    const t = useTranslations('Planificador');
    const [time, setTime] = useState('10:00');
    const userTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;

    return (
        <Dialog open={isOpen} onOpenChange={onOpenChange}>
            <DialogContent className="sm:max-w-xs">
                <DialogHeader>
                    <DialogTitle>{t('schedulePostTitle')}</DialogTitle>
                    <DialogDescription>{t('schedulePostDescription')}</DialogDescription>
                </DialogHeader>
                <div className="flex flex-col items-center p-4 gap-2">
                    <input 
                        type="time"
                        value={time}
                        onChange={(e) => setTime(e.target.value)}
                        className="p-2 rounded-md border bg-transparent text-2xl"
                    />
                    <p className="text-xs text-muted-foreground">
                        {t('timeZone', { timeZone: userTimeZone })}
                    </p>
                </div>
                <DialogFooter>
                    <Button variant="ghost" onClick={() => onOpenChange(false)}>{t('cancel')}</Button>
                    <Button onClick={() => onConfirm(time)} disabled={isPending}>
                        {isPending ? t('planning') : t('confirm')}
                    </Button>
                </DialogFooter>
            </DialogContent>
        </Dialog>
    )
}


// =================== FILE: src/app/[locale]/(app)/comunicacio/planificador/_components/SocialPlannerClient.tsx ===================

// Ubicació: /app/(app)/comunicacio/planificador/_components/SocialPlannerClient.tsx

"use client";

import { DragDropContext, Droppable, Draggable } from '@hello-pangea/dnd';
import { format, startOfMonth, endOfMonth, eachDayOfInterval, getDay, isSameDay, parseISO } from 'date-fns';
import { es } from 'date-fns/locale';
import { Button } from '@/components/ui/button';
import { PlusCircle, ChevronLeft, ChevronRight, GripVertical } from 'lucide-react';
import { useTranslations } from 'next-intl';

import { useSocialPlanner } from '../_hooks/useSocialPlanner';
import { PostCard } from './PostCard';
import { CreatePostDialog } from './CreatePostDialog';
import { SchedulePostDialog } from './SchedulePostDialog';
import { ViewPostDialog } from './ViewPostDialog';
import type { SocialPost } from '@/types/comunicacio/SocialPost';
import { type ConnectionStatuses } from '../types';
import { cn } from '@/lib/utils/utils'; // ✅ Importem la utilitat 'cn'

interface SocialPlannerClientProps {
    initialPosts: SocialPost[];
    connectionStatuses: ConnectionStatuses;
}

export function SocialPlannerClient({ initialPosts, connectionStatuses }: SocialPlannerClientProps) {
    const t = useTranslations('Planificador');
    const {
        currentMonth, isPending, unscheduledDrafts, calendarPosts, dialogState, postToView,
        onDragEnd, handleScheduleConfirm, handleCreatePost, handleUnschedule, handleDeletePost,
        openViewDialog, openCreateDialog, setDialogState, nextMonth, prevMonth
    } = useSocialPlanner({ initialPosts });

    const firstDayOfMonth = startOfMonth(currentMonth);
    const daysInMonth = eachDayOfInterval({ start: firstDayOfMonth, end: endOfMonth(currentMonth) });
    const startingDayIndex = getDay(firstDayOfMonth) === 0 ? 6 : getDay(firstDayOfMonth) - 1;

    return (
        <DragDropContext onDragEnd={onDragEnd}>
            {/* ✅ CORRECCIÓ 1: Canviem l'estructura principal per a un millor control */}
            <div className="flex flex-col lg:flex-row h-[calc(100vh-theme(spacing.24))] gap-6 p-4 md:p-6">

                {/* Columna d'Esborranys (Sidebar) */}
                <aside className="lg:w-[320px] xl:w-[350px] flex-shrink-0 flex flex-col gap-4 min-h-[300px] lg:min-h-0">
                    <Button onClick={openCreateDialog} className="w-full flex-shrink-0">
                        <PlusCircle className="mr-2 h-4 w-4" /> {t('createPost')}
                    </Button>
                    <div className="bg-muted/50 rounded-lg p-4 flex-grow flex flex-col">
                        <h2 className="font-semibold mb-3 flex-shrink-0">{t('pendingDrafts')}</h2>
                        <Droppable droppableId="unscheduled-drafts">
                            {(provided, snapshot) => (
                                <div
                                    {...provided.droppableProps}
                                    ref={provided.innerRef}
                                    className={cn(
                                        "space-y-3 flex-grow overflow-y-auto pr-2 -mr-2 rounded transition-colors",
                                        snapshot.isDraggingOver && "bg-primary/10" // ✅ Feedback visual en arrossegar
                                    )}
                                >
                                    {unscheduledDrafts.map((post, index) => (
                                        <Draggable key={post.id} draggableId={post.id.toString()} index={index}>
                                            {(provided, snapshot) => (
                                                <div ref={provided.innerRef} {...provided.draggableProps} onDoubleClick={() => openViewDialog(post)}>
                                                    <PostCard post={post} isDragging={snapshot.isDragging} onDelete={handleDeletePost} t={t}>
                                                        <div {...provided.dragHandleProps} className="cursor-grab p-2">
                                                            <GripVertical className="h-4 w-4 text-muted-foreground" />
                                                        </div>
                                                    </PostCard>
                                                </div>
                                            )}
                                        </Draggable>
                                    ))}
                                    {provided.placeholder}
                                </div>
                            )}
                        </Droppable>
                    </div>
                </aside>

                {/* Calendari */}
                <section className="flex-grow bg-card p-4 rounded-lg shadow-sm flex flex-col h-full overflow-hidden">
                    <div className="flex justify-between items-center mb-4 flex-shrink-0">
                        <Button variant="ghost" size="icon" onClick={prevMonth}><ChevronLeft className="h-4 w-4" /></Button>
                        <h2 className="text-xl font-bold capitalize">{format(currentMonth, 'MMMM yyyy', { locale: es })}</h2>
                        <Button variant="ghost" size="icon" onClick={nextMonth}><ChevronRight className="h-4 w-4" /></Button>
                    </div>
                    <header className="grid grid-cols-7 gap-1 text-center font-semibold text-xs text-muted-foreground mb-2 flex-shrink-0">
                        {['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'].map(day => <div key={day} className="capitalize">{t(`weekdays.${day}`)}</div>)}
                    </header>
                    {/* ✅ CORRECCIÓ 2: El 'grid' del calendari ara ocupa tot l'espai restant */}
                    <main className="grid grid-cols-7 grid-rows-5 gap-2 flex-grow min-h-0">
                        {Array.from({ length: startingDayIndex }).map((_, i) => <div key={`empty-${i}`} />)}
                        {daysInMonth.map(day => {
                            const postsOnThisDay = calendarPosts.filter(p => p.scheduled_at && isSameDay(parseISO(p.scheduled_at), day));
                            return (
                                <Droppable key={day.toString()} droppableId={`day-${day.toISOString()}`}>
                                    {(provided, snapshot) => (
                                        // ✅ CORRECCIÓ 3: Millorem el feedback visual i l'àrea de drop
                                        <div
                                            {...provided.droppableProps}
                                            ref={provided.innerRef}
                                            className={cn(
                                                'rounded-md p-1.5 flex flex-col gap-2 transition-colors',
                                                snapshot.isDraggingOver ? 'bg-primary/20' : 'bg-muted/30'
                                            )}
                                        >
                                            <span className="font-semibold text-sm text-center">{format(day, 'd')}</span>
                                            <div className="flex-grow space-y-2 overflow-y-auto pr-1">
                                                {postsOnThisDay.map((post, index) => (
                                                    <Draggable key={post.id} draggableId={post.id.toString()} index={index}>
                                                        {(provided, snapshot) => (
                                                            <div ref={provided.innerRef} {...provided.draggableProps} onDoubleClick={() => openViewDialog(post)}>
                                                                <PostCard post={post} isDragging={snapshot.isDragging} onDelete={handleDeletePost} t={t}>
                                                                    <div {...provided.dragHandleProps} className="cursor-grab p-2">
                                                                        <GripVertical className="h-4 w-4 text-muted-foreground" />
                                                                    </div>
                                                                </PostCard>
                                                            </div>
                                                        )}
                                                    </Draggable>
                                                ))}
                                                {provided.placeholder}
                                            </div>
                                        </div>
                                    )}
                                </Droppable>
                            );
                        })}
                    </main>
                </section>
            </div>

            {/* Diàlegs (es mantenen igual) */}
            <CreatePostDialog isOpen={dialogState.create} onOpenChange={(isOpen) => setDialogState(p => ({...p, create: isOpen}))} onCreate={handleCreatePost} connectionStatuses={connectionStatuses} t={t} />
            <SchedulePostDialog isOpen={dialogState.schedule} onOpenChange={(isOpen) => setDialogState(p => ({...p, schedule: isOpen}))} onConfirm={handleScheduleConfirm} isPending={isPending} />
            <ViewPostDialog isOpen={dialogState.view} onOpenChange={(isOpen) => setDialogState(p => ({...p, view: isOpen}))} post={postToView} onUnschedule={handleUnschedule} onDelete={handleDeletePost} isPending={isPending} t={t} />
        </DragDropContext>
    );
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/planificador/_components/ViewPostDialog.tsx ===================

import type { SocialPost } from '@/types/comunicacio/SocialPost';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Undo2, Trash2 } from 'lucide-react';
import { PostPreview } from './PostPreview';

interface ViewPostDialogProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  post: SocialPost | null;
  onUnschedule: (postId: number) => void;
  onDelete: (postId: number) => void;
  isPending: boolean;
  t: (key: string) => string;
}

export function ViewPostDialog({ isOpen, onOpenChange, post, onUnschedule, onDelete, isPending, t }: ViewPostDialogProps) {
  if (!post) return null;

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-lg">
        <DialogHeader>
          <DialogTitle>{t('viewPostTitle')}</DialogTitle>
        </DialogHeader>

        <div className="max-h-[60vh] overflow-y-auto pr-2">
          <PostPreview post={post} t={t} />
        </div>

        <DialogFooter className="flex-col sm:flex-row sm:justify-between w-full gap-2">
          <div className="flex gap-2">
            {post.status === 'scheduled' && (
              <Button variant="outline" onClick={() => onUnschedule(post.id)} disabled={isPending}>
                <Undo2 className="mr-2 h-4 w-4" /> {t('returnToDraft')}
              </Button>
            )}
            {post.status === 'draft' && (
              <Button variant="destructive" onClick={() => { onDelete(post.id); onOpenChange(false); }} disabled={isPending}>
                <Trash2 className="mr-2 h-4 w-4" /> {t('deleteDraft')}
              </Button>
            )}
          </div>
          <Button onClick={() => onOpenChange(false)}>{t('close')}</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}


// =================== FILE: src/app/[locale]/(app)/comunicacio/planificador/_hooks/useCreatePost.ts ===================

// Ubicació: /app/(app)/comunicacio/planificador/_hooks/useCreatePost.ts

"use client";

import { useState, useTransition, useEffect } from 'react';
import { toast } from 'sonner';
import { getPresignedUploadUrlAction, createSocialPostAction } from '../actions';
import type { SocialPost } from '@/types/comunicacio/SocialPost';
import { type ConnectionStatuses } from '../types';
import { generateVideoThumbnail } from '@/lib/utils/media';

interface UseCreatePostProps {
    isOpen: boolean;
    connectionStatuses: ConnectionStatuses;
    onCreate: (newPost: SocialPost) => void;
    onClose: () => void;
    t: (key: string) => string;
}
// --- Funció d'ajuda per a la validació ---
const validateImageAspectRatio = (file: File): Promise<boolean> => {
    return new Promise((resolve) => {
        if (!file.type.startsWith('image/')) {
            resolve(true); // No és una imatge, no la validem aquí
            return;
        }

        const reader = new FileReader();
        reader.onload = (e) => {
            const img = new Image();
            img.onload = () => {
                const aspectRatio = img.width / img.height;
                // Instagram requereix entre 4:5 (0.8) i 1.91:1
                const isValid = aspectRatio >= 0.8 && aspectRatio <= 1.91;
                resolve(isValid);
            };
            img.src = e.target?.result as string;
        };
        reader.readAsDataURL(file);
    });
};
export function useCreatePost({ isOpen, connectionStatuses, onCreate, onClose, t }: UseCreatePostProps) {
    const [content, setContent] = useState('');
    const [mediaFiles, setMediaFiles] = useState<File[]>([]);
    const [previewUrls, setPreviewUrls] = useState<string[]>([]);
    const [selectedProviders, setSelectedProviders] = useState<string[]>([]);
    const [isPending, startTransition] = useTransition();

    useEffect(() => {
        if (isOpen) {
            const defaultProviders = Object.keys(connectionStatuses).filter(key => connectionStatuses[key]);
            setSelectedProviders(defaultProviders);
        }
    }, [isOpen, connectionStatuses]);

    const resetState = () => {
        setContent('');
        setMediaFiles([]);
        previewUrls.forEach(url => URL.revokeObjectURL(url));
        setPreviewUrls([]);
        setSelectedProviders([]);
    };

    const handleMediaChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
        const files = Array.from(e.target.files || []);
        if (files.length === 0) return;

        const isUploadingVideo = files.some(file => file.type.startsWith('video/'));
        const hasExistingMedia = mediaFiles.length > 0;
        const hasExistingVideo = hasExistingMedia && mediaFiles[0].type.startsWith('video/');

        if ((isUploadingVideo && hasExistingMedia) || (hasExistingVideo && files.length > 0)) {
            toast.error(t('errorMediaMix'), { description: t('errorMediaMixDescription') });
            return;
        }
        if (isUploadingVideo && files.length > 1) {
            toast.error(t('errorMultipleVideos'), { description: t('errorMultipleVideosDescription') });
            return;
        }

        const validFiles: File[] = [];
        for (const file of files) {
            if (file.type.startsWith('image/')) {
                const isValid = await validateImageAspectRatio(file);
                if (isValid) {
                    validFiles.push(file);
                } else {
                    toast.error(t('invalidAspectRatioTitle'), { description: t('invalidAspectRatioDescription') });
                }
            } else {
                validFiles.push(file); // Afegim vídeos directament
            }
        }
        if (validFiles.length === 0) return;

        const newFiles = [...mediaFiles, ...validFiles].slice(0, 10);
        setMediaFiles(newFiles);

        // Neteja URLs anteriors
        previewUrls.forEach(url => { if (url.startsWith('blob:')) URL.revokeObjectURL(url); });

        const newPreviewPromises = newFiles.map(file => {
            if (file.type.startsWith('video/')) {
                return generateVideoThumbnail(file);
            }
            return Promise.resolve(URL.createObjectURL(file));
        });
        const newUrls = await Promise.all(newPreviewPromises);
        setPreviewUrls(newUrls);
    };

    const removeMedia = (indexToRemove: number) => {
        setMediaFiles(prev => prev.filter((_, index) => index !== indexToRemove));
        setPreviewUrls(prev => {
            const urlToRemove = prev[indexToRemove];
            URL.revokeObjectURL(urlToRemove);
            return prev.filter((_, index) => index !== indexToRemove);
        });
    };

    const handleSubmit = () => {
        startTransition(async () => {
            let mediaPaths: string[] | null = null;
            let mediaType: string | null = null;

            if (mediaFiles.length > 0) {
                try {
                    const fileNames = mediaFiles.map(f => f.name);
                    const urlResult = await getPresignedUploadUrlAction(fileNames);
                    // ✅ CORRECCIÓ: Proporcionem un missatge per defecte si 'urlResult.message' és undefined
                    if (!urlResult.success || !urlResult.data) {
                        throw new Error(urlResult.message || "Error desconegut en obtenir les URLs de pujada.");
                    }

                    await Promise.all(
                        urlResult.data.signedUrls.map((urlInfo, index) =>
                            fetch(urlInfo.signedUrl, { method: 'PUT', body: mediaFiles[index] })
                        )
                    );

                    mediaPaths = urlResult.data.signedUrls.map(info => info.path);
                    mediaType = mediaFiles[0].type.startsWith('image') ? 'image' : 'video';
                } catch (error) {
                    toast.error(error instanceof Error ? error.message : "Error en pujar els fitxers.");
                    return;
                }
            }

            const createResult = await createSocialPostAction(content, selectedProviders, mediaPaths, mediaType);
            if (createResult.success && createResult.data) {
                toast.success(t('successDraftCreated'));
                onCreate(createResult.data);
            } else {
                // ✅ CORRECCIÓ: Proporcionem un missatge per defecte aquí també
                toast.error(createResult.message || "Hi ha hagut un error en crear la publicació.");
            }
            onClose();
        });
    };

    return {
        content, setContent, mediaFiles, previewUrls, selectedProviders, isPending,
        handleMediaChange, removeMedia, setSelectedProviders, handleSubmit, resetState
    };
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/planificador/_hooks/useSocialPlanner.ts ===================

// Ubicació: /app/(app)/comunicacio/planificador/_hooks/useSocialPlanner.ts
"use client";

import { useState, useMemo, useTransition } from 'react';
import { DropResult } from '@hello-pangea/dnd';
import { addMonths, subMonths } from 'date-fns';
import { toast } from 'sonner';

import { scheduleSocialPostAction, unscheduleSocialPostAction, deleteSocialPostAction } from '../actions';
import type { SocialPost } from '@/types/comunicacio/SocialPost';

interface UseSocialPlannerProps {
    initialPosts: SocialPost[];
}

export function useSocialPlanner({ initialPosts }: UseSocialPlannerProps) {
    const [posts, setPosts] = useState(initialPosts);
    const [currentMonth, setCurrentMonth] = useState(new Date());
    const [isPending, startTransition] = useTransition();

    // Gestió dels diàlegs
    const [dialogState, setDialogState] = useState({
        create: false,
        schedule: false,
        view: false,
    });
    const [postToView, setPostToView] = useState<SocialPost | null>(null);
    const [postToSchedule, setPostToSchedule] = useState<{ post: SocialPost; date: Date } | null>(null);

    // Dades derivades
    const unscheduledDrafts = useMemo(() => posts.filter(p => p.status === 'draft'), [posts]);
    const calendarPosts = useMemo(() => posts.filter(p => p.status !== 'draft'), [posts]);

    // Handlers dels diàlegs
    const openCreateDialog = () => setDialogState(p => ({ ...p, create: true }));
    const openViewDialog = (post: SocialPost) => {
        setPostToView(post);
        setDialogState(p => ({ ...p, view: true }));
    };

    // Lògica de Drag & Drop
    const onDragEnd = (result: DropResult) => {
        const { destination, draggableId } = result;
        if (!destination) return;

        const postId = parseInt(draggableId);
        const post = posts.find(p => p.id === postId);
        if (!post) return;

        if (destination.droppableId.startsWith('day-')) {
            const dateStr = destination.droppableId.replace('day-', '');
            setPostToSchedule({ post, date: new Date(dateStr) });
            setDialogState(p => ({ ...p, schedule: true }));
        } else if (destination.droppableId === 'unscheduled-drafts' && post.status === 'scheduled') {
            handleUnschedule(post.id);
        }
    };

    // Accions
    const handleScheduleConfirm = (time: string) => {
        if (!postToSchedule) return;
        const [hours, minutes] = time.split(':').map(Number);
        const scheduledDateTime = new Date(postToSchedule.date.getFullYear(), postToSchedule.date.getMonth(), postToSchedule.date.getDate(), hours, minutes);

        startTransition(async () => {
            const { success, message } = await scheduleSocialPostAction(postToSchedule.post.id, scheduledDateTime.toISOString());
            toast[success ? 'success' : 'error'](message);
            if (success) {
                setPosts(prev => prev.map(p => p.id === postToSchedule.post.id ? { ...p, status: 'scheduled', scheduled_at: scheduledDateTime.toISOString() } : p));
            }
            setDialogState(p => ({ ...p, schedule: false }));
            setPostToSchedule(null);
        });
    };

    const handleCreatePost = (newPost: SocialPost) => {
        setPosts(prev => [newPost, ...prev]);
        setDialogState(p => ({ ...p, create: false }));
    };

    const handleUnschedule = (postId: number) => {
        startTransition(async () => {
            const result = await unscheduleSocialPostAction(postId);
            toast[result.success ? 'success' : 'error'](result.message);
            if (result.success) {
                setPosts(prev => prev.map(p => p.id === postId ? { ...p, status: 'draft', scheduled_at: null } : p));
                setDialogState(p => ({ ...p, view: false }));
            }
        });
    };

    const handleDeletePost = (postId: number) => {
        startTransition(async () => {
            const result = await deleteSocialPostAction(postId);
            toast[result.success ? 'success' : 'error'](result.message);
            if (result.success) {
                setPosts(prev => prev.filter(p => p.id !== postId));
            }
        });
    };
    
    // Navegació del calendari
    const nextMonth = () => setCurrentMonth(prev => addMonths(prev, 1));
    const prevMonth = () => setCurrentMonth(prev => subMonths(prev, 1));

    return {
        posts, currentMonth, isPending, unscheduledDrafts, calendarPosts, dialogState, postToView, postToSchedule,
        onDragEnd, handleScheduleConfirm, handleCreatePost, handleUnschedule, handleDeletePost, openViewDialog, openCreateDialog,
        setDialogState, nextMonth, prevMonth
    };
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/templates/actions.ts ===================

"use server";

import { revalidatePath } from "next/cache";
import { type EmailTemplate } from './page';
import type { PostgrestError } from "@supabase/supabase-js";
import { validateUserSession } from "@/lib/supabase/session"; // ✅ 1. Importem la funció

/**
 * Desa (crea o actualitza) una plantilla d'email.
 */
export async function saveTemplateAction(
    templateData: Omit<EmailTemplate, "id" | "created_at" | "user_id" | "team_id">,
    templateId: string | null
): Promise<{ data: EmailTemplate | null; error: PostgrestError | null }> {
    // ✅ 2. Validació centralitzada de la sessió.
    const session = await validateUserSession();
    if ('error' in session) {
        return { data: null, error: { message: session.error.message } as PostgrestError };
    }
    const { supabase, user, activeTeamId } = session;

    if (!templateData.name) {
        return { data: null, error: { message: "El nom de la plantilla és obligatori." } as PostgrestError };
    }
    
    let query;

    if (templateId && templateId !== 'new') {
        // En actualitzar, la RLS verificarà l'accés.
        query = supabase
            .from('email_templates')
            .update(templateData)
            .eq('id', templateId)
            .select()
            .single();
    } else {
        // En crear, afegim l'ID de l'usuari i l'ID de l'equip actiu.
        query = supabase
            .from('email_templates')
            .insert({ 
                ...templateData, 
                user_id: user.id, 
                team_id: activeTeamId 
            })
            .select()
            .single();
    }

    const { data, error } = await query;

    if (error) {
        console.error("Error en desar la plantilla:", error);
        return { data: null, error };
    }

    revalidatePath('/comunicacio/templates');
    return { data, error: null };
}

/**
 * Elimina una plantilla d'email.
 */
export async function deleteTemplateAction(
    templateId: string
): Promise<{ error: PostgrestError | null }> {
    // ✅ Fem el mateix aquí.
    const session = await validateUserSession();
    if ('error' in session) {
        return { error: { message: session.error.message } as PostgrestError };
    }
    const { supabase } = session;

    // La política RLS s'encarregarà de la seguretat.
    const { error } = await supabase
        .from('email_templates')
        .delete()
        .eq('id', templateId);

    if (error) {
        console.error("Error en eliminar la plantilla:", error);
        return { error };
    }

    revalidatePath('/comunicacio/templates');
    return { error: null };
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/templates/page.tsx ===================

/**
 * @file page.tsx (Templates)
 * @summary Componente de Página que implementa React Suspense para una carga instantánea.
 */
import { Suspense } from 'react';
import type { Metadata } from 'next';
import { TemplatesData } from './_components/TemplatesData';
import { TemplatesSkeleton } from './_components/TemplatesSkeleton';

export const metadata: Metadata = {
  title: 'Plantilles d\'Email | Ribot',
};

// El tipo de dato puede vivir aquí o en un fichero centralizado (ej: src/types/comunicacio.ts)
export type EmailTemplate = {
  id: string;
  created_at: string;
  user_id: string;
  name: string;
  subject: string;
  body: string;
  variables: string[];
};

export default function TemplatesPage() {
  return (
    <Suspense fallback={<TemplatesSkeleton />}>
      <TemplatesData />
    </Suspense>
  );
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/templates/_components/TemplateEditor.tsx ===================

/**
 * @file TemplateEditor.tsx
 * @summary Renderitza la columna central amb els camps d'edició (nom, assumpte) i l'editor de codi/vista prèvia.
 */
"use client";

import React, { useState } from 'react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Code, Eye, FileText } from 'lucide-react';
import Editor from 'react-simple-code-editor';
import { highlight, languages } from 'prismjs/components/prism-core';
import 'prismjs/components/prism-clike';
import 'prismjs/components/prism-javascript';
import 'prismjs/components/prism-markup';
import { useTranslations } from 'next-intl';
import type { EmailTemplate } from '../page';

interface TemplateEditorProps {
    selectedTemplate: EmailTemplate | null;
    onUpdateTemplate: React.Dispatch<React.SetStateAction<EmailTemplate | null>>;
    onSave: (currentTemplate: EmailTemplate, detectedVariables: string[]) => void;
  }

export function TemplateEditor({ selectedTemplate, onUpdateTemplate }: TemplateEditorProps) {
  const t = useTranslations('TemplatesPage');
  const [editorView, setEditorView] = useState<'code' | 'preview'>('preview');

  if (!selectedTemplate) {
    return (
      <div className="flex flex-col items-center justify-center h-full text-center p-4 glass-card rounded-xl">
        <FileText className="w-16 h-16 text-muted-foreground mb-4" />
        <h2 className="text-xl font-semibold">{t('noTemplateSelected')}</h2>
      </div>
    );
  }

  return (
    <div className="flex flex-col gap-4">
      <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
        <Input
          placeholder={t('templateNamePlaceholder')}
          value={selectedTemplate.name}
          onChange={(e) => onUpdateTemplate(t => t ? { ...t, name: e.target.value } : null)}
        />
        <Input
          placeholder={t('subjectPlaceholder')}
          value={selectedTemplate.subject}
          onChange={(e) => onUpdateTemplate(t => t ? { ...t, subject: e.target.value } : null)}
        />
      </div>

      <div className="flex-1 flex flex-col min-h-0 glass-card rounded-xl overflow-hidden">
        <div className="p-2 border-b border-border flex justify-between items-center">
          <h3 className="font-semibold px-2">{t('contentTitle')}</h3>
          <div className="flex items-center gap-1 p-1 rounded-lg bg-black/20">
            <Button variant={editorView === 'code' ? 'secondary' : 'ghost'} size="sm" className="h-7 px-3" onClick={() => setEditorView('code')}>
              <Code className="w-4 h-4 mr-2"/>{t('codeButton')}
            </Button>
            <Button variant={editorView === 'preview' ? 'secondary' : 'ghost'} size="sm" className="h-7 px-3" onClick={() => setEditorView('preview')}>
              <Eye className="w-4 h-4 mr-2"/>{t('previewButton')}
            </Button>
          </div>
        </div>

        {editorView === 'code' ? (
          <div className="flex-1 overflow-y-auto font-mono text-sm editor-container">
            <Editor
              value={selectedTemplate.body || ""}
              onValueChange={(code) => onUpdateTemplate(t => t ? { ...t, body: code } : null)}
              highlight={(code) => highlight(code, languages.markup!, "markup")}
              padding={16}
              className="bg-transparent h-full"
              style={{ minHeight: "100%" }}
            />
          </div>
        ) : (
          <iframe
            srcDoc={selectedTemplate.body}
            title={t('previewTitle')}
            className="w-full h-full border-0 bg-white"
          />
        )}
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/templates/_components/TemplateList.tsx ===================

/**
 * @file TemplateList.tsx
 * @summary Renderitza la columna esquerra amb la llista de plantilles i el botó per crear-ne de noves.
 */
"use client";

import { Button } from '@/components/ui/button';
import { Plus, Trash2 } from 'lucide-react';
import { useTranslations } from 'next-intl';
import type { EmailTemplate } from '../page';

interface TemplateListProps {
  templates: EmailTemplate[];
  selectedTemplateId: string | null;
  onSelectTemplate: (template: EmailTemplate) => void;
  onNewTemplate: () => void;
  onSetTemplateToDelete: (template: EmailTemplate) => void;
}

export function TemplateList({
  templates,
  selectedTemplateId,
  onSelectTemplate,
  onNewTemplate,
  onSetTemplateToDelete,
}: TemplateListProps) {
  const t = useTranslations('TemplatesPage');

  return (
    <div className="glass-card flex flex-col overflow-hidden">
      <div className="p-4 border-b border-border flex justify-between items-center">
        <h2 className="font-semibold">{t('templatesListTitle')}</h2>
        <Button size="icon" variant="ghost" onClick={onNewTemplate}>
          <Plus className="w-4 h-4" />
        </Button>
      </div>

      <div className="flex-1 overflow-y-auto">
        {templates.map(template => (
          <div
            key={template.id}
            onClick={() => onSelectTemplate(template)}
            className={`group flex justify-between items-center p-4 cursor-pointer border-l-4 ${
              selectedTemplateId === template.id
                ? 'bg-primary/20 border-primary'
                : 'border-transparent hover:bg-muted'
            }`}
          >
            <p className="font-semibold truncate">{template.name}</p>
            <Button
              variant="ghost"
              size="icon"
              className="h-7 w-7 opacity-0 group-hover:opacity-100"
              onClick={(e) => {
                e.stopPropagation(); // Evitem que el clic seleccioni la plantilla
                onSetTemplateToDelete(template);
              }}
            >
              <Trash2 className="w-4 h-4 text-destructive" />
            </Button>
          </div>
        ))}
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/templates/_components/templates-client.tsx ===================

"use client";

import React from 'react';
import { motion } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { Loader2 } from 'lucide-react';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { useTemplates } from '../_hooks/useTemplates';

import { TemplateList } from './TemplateList';
import { TemplateEditor } from './TemplateEditor';
import { TemplateVariables } from './TemplateVariables';
import { type EmailTemplate } from '../page';

export function TemplatesClient({ initialTemplates }: { initialTemplates: EmailTemplate[] }) {
    const {
        isSaving, isDeleting,
        templates,
        selectedTemplate, setSelectedTemplate,
        templateToDelete, setTemplateToDelete,
        // ✅ CORRECCIÓ 1: 'detectedVariables' ja no es necessita aquí.
        // El seu valor es gestiona internament al hook.
        setDetectedVariables,
        handleNewTemplate,
        handleSaveTemplate,
        handleDeleteTemplate,
        t,
    } = useTemplates({ initialTemplates });

    return (
        <>
            <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} className="h-full flex flex-col">
                <div className="flex justify-between items-center mb-6 flex-shrink-0">
                    <h1 className="text-3xl font-bold">{t('pageTitle')}</h1>
                    <Button onClick={handleSaveTemplate} disabled={isSaving || !selectedTemplate}>
                        {isSaving && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                        {t('saveButton')}
                    </Button>
                </div>

                <div className="flex-1 grid grid-cols-1 lg:grid-cols-[280px_1fr_280px] gap-6 min-h-0">
                    <TemplateList
                        templates={templates}
                        selectedTemplateId={selectedTemplate?.id || null}
                        onSelectTemplate={setSelectedTemplate}
                        onNewTemplate={handleNewTemplate}
                        onSetTemplateToDelete={setTemplateToDelete}
                    />
                    <TemplateEditor
                        selectedTemplate={selectedTemplate}
                        onUpdateTemplate={setSelectedTemplate}
                        onSave={handleSaveTemplate}
                    />
                    <TemplateVariables
                        selectedTemplate={selectedTemplate}
                        onVariablesChange={setDetectedVariables}
                    />
                </div>
            </motion.div>

            {/* ✅ CORRECCIÓ 2: Canviem 'onOpenChange' per a que passi el valor correcte */}
            <AlertDialog open={!!templateToDelete} onOpenChange={(isOpen) => {
                if (!isOpen) {
                    setTemplateToDelete(null);
                }
            }}>
                <AlertDialogContent>
                    <AlertDialogHeader>
                        <AlertDialogTitle>{t('deleteConfirmTitle')}</AlertDialogTitle>
                        <AlertDialogDescription>{t('deleteConfirmDescription')}</AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                        <AlertDialogCancel>{t('cancelButton')}</AlertDialogCancel>
                        <AlertDialogAction onClick={handleDeleteTemplate} disabled={isDeleting} className="bg-destructive hover:bg-destructive/90">{isDeleting ? t('deletingButton') : t('confirmDeleteButton')}</AlertDialogAction>
                    </AlertDialogFooter>
                </AlertDialogContent>
            </AlertDialog>
        </>
    );
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/templates/_components/TemplatesData.tsx ===================

import { TemplatesClient } from './templates-client';
import type { EmailTemplate } from '../page';
import { validatePageSession } from "@/lib/supabase/session"; // ✅ 1. Importem la funció

export async function TemplatesData() {
    // ✅ 2. Validació de sessió que gestiona les redireccions.
    const { supabase } = await validatePageSession();

    // La RLS filtrarà automàticament per l'equip actiu.
    const { data: templates, error } = await supabase
        .from('email_templates')
        .select('*')
        .order('created_at', { ascending: false });

    if (error) {
        console.error('Error en carregar les plantilles (pot ser per RLS):', error);
        // Si hi ha un error, retornem el component client amb dades buides per a mostrar un estat d'error.
        return <TemplatesClient initialTemplates={[]} />;
    }

    return (
        <TemplatesClient
            initialTemplates={
                templates
                    ? templates.map((t) => ({
                        ...t,
                        id: String(t.id),
                    })) as EmailTemplate[]
                    : []
            }
        />
    );
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/templates/_components/TemplatesSkeleton.tsx ===================

/**
 * @file TemplatesSkeleton.tsx
 * @summary Muestra un esqueleto de carga para la página de Plantillas.
 */
"use client";

import React from 'react';

export const TemplatesSkeleton: React.FC = () => (
    <div className="space-y-6 animate-pulse">
        {/* Esqueleto para la cabecera */}
        <div className="flex justify-between items-center">
            <div className="h-9 bg-muted rounded-lg w-1/3"></div>
            <div className="h-10 bg-muted rounded-lg w-36"></div>
        </div>

        {/* Esqueleto para las 3 columnas */}
        <div className="grid grid-cols-1 lg:grid-cols-[280px_1fr_280px] gap-6 min-h-0 h-[calc(100vh-12rem)]">
            <div className="h-full bg-muted rounded-xl"></div>
            <div className="h-full bg-muted rounded-xl"></div>
            <div className="h-full bg-muted rounded-xl"></div>
        </div>
    </div>
);

// =================== FILE: src/app/[locale]/(app)/comunicacio/templates/_components/TemplateVariables.tsx ===================

/**
 * @file TemplateVariables.tsx
 * @summary Renderitza la columna dreta que detecta i mostra les variables de la plantilla.
 */
"use client";

import React, { useMemo, useEffect } from 'react'; // Només necessitem aquests hooks
import { Button } from '@/components/ui/button';
import { toast } from 'sonner';
import { Variable } from 'lucide-react';
import { useTranslations } from 'next-intl';
import type { EmailTemplate } from '../page';

interface TemplateVariablesProps {
  selectedTemplate: EmailTemplate | null;
  onVariablesChange: (variables: string[]) => void;
}

export function TemplateVariables({ selectedTemplate, onVariablesChange }: TemplateVariablesProps) {
    const t = useTranslations('TemplatesPage');

    // ✅ BONA PRÀCTICA: Utilitzem 'useMemo' per a calcular dades derivades.
    // Aquest codi només s'executa si 'selectedTemplate' canvia.
    const detectedVariables = useMemo(() => {
        if (!selectedTemplate) {
            return [];
        }
        const content = `${selectedTemplate.subject || ''} ${selectedTemplate.body || ''}`;
        const foundVariables = content.match(/\{\{([^}]+)\}\}/g) || [];
        // Retornem un array net de variables úniques.
        return [...new Set(foundVariables.map(v => v.replace(/[{}]/g, '').trim()))];
    }, [selectedTemplate]);

    // ✅ BONA PRÀCTICA: Utilitzem 'useEffect' NOMÉS per a efectes secundaris.
    // En aquest cas, el nostre efecte és notificar al component pare quan les variables han canviat.
    useEffect(() => {
        onVariablesChange(detectedVariables);
    }, [detectedVariables, onVariablesChange]);

    return (
        <div className="glass-card flex flex-col overflow-hidden">
            <div className="p-4 border-b border-border">
                <h3 className="font-semibold flex items-center gap-2">
                    <Variable className="w-4 h-4 text-primary"/>{t('detectedVariablesTitle')}
                </h3>
            </div>
            <div className="p-4 space-y-3 overflow-y-auto">
                <p className="text-xs text-muted-foreground">{t('variablesDescription')}</p>
                <div className="flex flex-wrap gap-2">
                    {detectedVariables.length > 0 ? (
                        detectedVariables.map(v => (
                            <Button
                                key={v}
                                variant="outline"
                                size="sm"
                                onClick={() => {
                                    navigator.clipboard.writeText(`{{${v}}}`);
                                    toast.success(t('toastCopiedTitle'), {
                                        description: t('toastCopiedDescription', { variable: `{{${v}}}` }),
                                    });
                                }}
                            >
                                {`{{${v}}}`}
                            </Button>
                        ))
                    ) : (
                        <p className="text-xs text-muted-foreground italic">{t('noVariablesDetected')}</p>
                    )}
                </div>
            </div>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/templates/_hooks/useTemplates.ts ===================

"use client";

import { useState, useTransition } from 'react';
import { toast } from "sonner";
import { useTranslations } from 'next-intl';
import { type EmailTemplate } from '../page';
import { saveTemplateAction, deleteTemplateAction } from '../actions';

type UseTemplatesProps = {
    initialTemplates: EmailTemplate[];
};

export function useTemplates({ initialTemplates }: UseTemplatesProps) {
    const t = useTranslations('TemplatesPage');
    const [isSaving, startSaveTransition] = useTransition();
    const [isDeleting, startDeleteTransition] = useTransition();

    const [templates, setTemplates] = useState(initialTemplates);
    const [selectedTemplate, setSelectedTemplate] = useState<EmailTemplate | null>(initialTemplates[0] || null);
    const [templateToDelete, setTemplateToDelete] = useState<EmailTemplate | null>(null);
    const [detectedVariables, setDetectedVariables] = useState<string[]>([]);

    const handleNewTemplate = () => {
        const newTemplateBody = t.raw('newTemplateBody');
        const newTpl: EmailTemplate = {
            id: 'new',
            name: t('newTemplateName'),
            subject: '',
            body: newTemplateBody,
            variables: [],
            created_at: new Date().toISOString(),
            user_id: ''
        };
        setSelectedTemplate(newTpl);
    };

    const handleSaveTemplate = () => {
        if (!selectedTemplate) return;
        const templateData = { 
            name: selectedTemplate.name, 
            subject: selectedTemplate.subject, 
            body: selectedTemplate.body, 
            variables: detectedVariables 
        };
        
        startSaveTransition(async () => {
            const { data, error } = await saveTemplateAction(templateData, selectedTemplate.id);
            if (error) {
                toast.error(t('toastErrorTitle'), { description: error.message });
            } else if (data) {
                toast.success(t('toastSuccessTitle'), { description: t('toastSaveSuccessDescription') });
                if (selectedTemplate?.id === 'new') { 
                    setTemplates(prev => [data, ...prev]); 
                } else { 
                    setTemplates(prev => prev.map(t => t.id === data.id ? data : t)); 
                }
                setSelectedTemplate(data);
            }
        });
    };

    const handleDeleteTemplate = () => {
        if (!templateToDelete) return;
        startDeleteTransition(async () => {
            const { error } = await deleteTemplateAction(templateToDelete.id);
            if (error) {
                toast.error(t('toastErrorTitle'), { description: error.message });
            } else {
                toast.success(t('toastSuccessTitle'), { description: t('toastDeleteSuccessDescription') });
                const newTemplates = templates.filter(t => t.id !== templateToDelete.id);
                setTemplates(newTemplates);
                setSelectedTemplate(newTemplates[0] || null);
            }
            setTemplateToDelete(null);
        });
    };

    // Retornem tots els estats i funcions que el component necessita
    return {
        isSaving, isDeleting,
        templates,
        selectedTemplate, setSelectedTemplate,
        templateToDelete, setTemplateToDelete,
        detectedVariables, setDetectedVariables,
        handleNewTemplate,
        handleSaveTemplate,
        handleDeleteTemplate,
        t,
    };
}

// =================== FILE: src/app/[locale]/(app)/crm/activitats/page.tsx ===================

import type { Metadata } from 'next';
import { Suspense } from 'react';

// Importem els nostres nous components d'orquestració
import { ActivitiesData } from './_components/ActivitiesData';
import { ActivitiesSkeleton } from './_components/ActivitiesSkeleton';

export const metadata: Metadata = {
  title: 'Historial d\'Activitats | Ribot',
};

// Ja no necessitem definir el tipus 'Activity' aquí,
// ja que el gestionem dins de 'ActivitiesData' i 'activitats-client',
// que l'importen des del fitxer central 'src/types/crm.ts'.

// La pàgina principal ja no és 'async'. Es renderitza a l'instant.
export default function ActivitatsPage() {
  return (
    <Suspense fallback={<ActivitiesSkeleton />}>
      {/* Suspense mostrarà l'esquelet a l'instant, eliminant la "congelació".
        Mentrestant, <ActivitiesData /> carregarà les dades en segon pla.
      */}
      <ActivitiesData />
    </Suspense>
  );
}

// =================== FILE: src/app/[locale]/(app)/crm/activitats/_components/activitats-client.tsx ===================

// /app/[locale]/(app)/crm/activitats/_components/activitats-client.tsx

"use client";

import React from 'react';
import { motion } from 'framer-motion';
import Link from 'next/link';
import { AlertTriangle, CheckCircle } from 'lucide-react';
import { format } from 'date-fns';
import { ca, es, enUS } from 'date-fns/locale';
import { useLocale, useTranslations } from 'next-intl';

// ✅ PAS 3: Importem el tipus directament del nostre component de dades del servidor.
import { type ActivityWithContact } from './ActivitiesData';

/**
 * @summary Sub-component reutilitzable per mostrar un únic element de l'historial d'activitats.
 */
const HistoricActivityItem: React.FC<{ activity: ActivityWithContact }> = ({ activity }) => {
    const t = useTranslations('ActivitiesClient');
    const locale = useLocale();
    
    const getDateLocale = () => {
        switch (locale) {
            case 'es': return es;
            case 'en': return enUS;
            default: return ca;
        }
    };

    const isRead = activity.is_read;
    const Icon = isRead ? CheckCircle : AlertTriangle;
    const iconColor = isRead ? 'text-green-400' : 'text-yellow-400';

    const activityContent = (
        <div className="flex items-start gap-4">
            <div className="mt-1">
                <Icon className={`w-5 h-5 ${iconColor}`} />
            </div>
            <div className="flex-1">
                <div className="flex justify-between items-center">
                    {/* ✅ Adaptem l'accés a les dades: 'activity.contacts.nom' */}
                    <p className="font-semibold">{activity.type} - <span className="font-normal">{activity.contacts?.nom || t('deletedContact')}</span></p>
                    {/* ✅ Ens assegurem de gestionar el possible null de 'created_at' */}
                    <p className="text-xs text-muted-foreground">{activity.created_at ? format(new Date(activity.created_at), t('dateFormat'), { locale: getDateLocale() }) : ''}</p>
                </div>
                <p className="text-sm text-muted-foreground mt-1 italic">"{activity.content}"</p>
            </div>
        </div>
    );

    // ✅ La lògica ara utilitza 'activity.contact_id' (que és un number)
    if (activity.contact_id && activity.contacts) {
        return (
            <Link
                href={`/${locale}/crm/contactes/${activity.contact_id}`}
                className="block p-4 hover:bg-white/10 transition-colors"
            >
                {activityContent}
            </Link>
        );
    }

    return (
        <div className="block p-4">
            {activityContent}
        </div>
    );
};

interface ActivitatsClientProps {
    initialActivities: ActivityWithContact[];
}

/**
 * @summary Component de Client principal per a la pàgina d'historial d'activitats.
 */
export const ActivitatsClient: React.FC<ActivitatsClientProps> = ({ initialActivities }) => {
    const t = useTranslations('ActivitiesClient');

    return (
        <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }}>
            <div className="flex justify-between items-center mb-8">
                <h1 className="text-3xl font-bold">{t('title')}</h1>
            </div>

            <div className="glass-card overflow-hidden">
                {initialActivities.length > 0 ? (
                    <div className="divide-y divide-white/10">
                        {initialActivities.map(activity => (
                            // ✅ 'activity.id' ara és un number, que és una key vàlida.
                            <HistoricActivityItem key={activity.id} activity={activity} />
                        ))}
                    </div>
                ) : (
                    <div className="text-center p-12">
                        <p className="text-muted-foreground">{t('noActivities')}</p>
                    </div>
                )}
            </div>
        </motion.div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/activitats/_components/ActivitiesData.tsx ===================

// /app/[locale]/(app)/crm/activitats/_components/ActivitiesData.tsx

import { createClient } from '@/lib/supabase/server';
import { ActivitatsClient } from './activitats-client';
import { Database } from '@/types/supabase'; // ✅ Importem la definició principal

// ✅ PAS 1: Definim el tipus que representa el resultat EXACTE de la nostra consulta.
// És una fila de 'activities' enriquida amb una fila (o null) de 'contacts'.
export type ActivityWithContact = Database['public']['Tables']['activities']['Row'] & {
  contacts: Database['public']['Tables']['contacts']['Row'] | null;
};

export async function ActivitiesData() {
    const supabase = createClient();
    
    // ✅ La consulta ara demana TOTES les columnes de 'contacts' amb (*)
    const { data: activities, error } = await supabase
        .from('activities')
        .select('*, contacts(*)') // Canviem de 'contacts(nom, email)' a 'contacts(*)' per consistència
        .order('created_at', { ascending: false });

    if (error) {
        console.error("Error en obtenir les activitats (pot ser per RLS):", error.message);
        return <ActivitatsClient initialActivities={[]} />;
    }

    // ✅ PAS 2: Passem les dades directament, sense transformar-les.
    // Utilitzem 'as' perquè TypeScript no pot inferir el tipus de la relació 'contacts(*)'
    // Aquest patró és segur perquè hem definit 'ActivityWithContact' per a aquest propòsit.
    return <ActivitatsClient initialActivities={activities as ActivityWithContact[]} />;
}

// =================== FILE: src/app/[locale]/(app)/crm/activitats/_components/ActivitiesSkeleton.tsx ===================

"use client";


// Aquest component mostra un esquelet per a la pàgina d'activitats
export function ActivitiesSkeleton() {
  return (
    <div className="animate-pulse">
      {/* Esquelet de la capçalera */}
      <div className="flex justify-between items-center mb-8">
        <div className="h-9 w-64 bg-gray-700/50 rounded-md"></div>
      </div>

      {/* Esquelet de la llista d'activitats */}
      <div className="glass-card divide-y divide-white/10">
        {[...Array(7)].map((_, i) => (
          <div key={i} className="p-4 flex items-start gap-4">
            <div className="mt-1">
              <div className="w-5 h-5 bg-gray-700/50 rounded-full"></div>
            </div>
            <div className="flex-1 space-y-2">
              <div className="flex justify-between items-center">
                <div className="h-5 w-1/3 bg-gray-700/50 rounded-md"></div>
                <div className="h-3 w-1/4 bg-gray-700/50 rounded-md"></div>
              </div>
              <div className="h-4 w-4/5 bg-gray-700/50 rounded-md"></div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/crm/calendari/actions.ts ===================

// src/app/[locale]/(app)/crm/calendari/actions.ts

'use server';

import { z } from 'zod';
import { validatePageSession } from '@/lib/supabase/session';
import { EnrichedTaskForCalendar, EnrichedQuoteForCalendar, EnrichedEmailForCalendar } from './_components/CalendarData';
import { ActiveSources } from '@/types/crm/calendar';   


// ✅ Funció optimitzada i amb correcció de seguretat per 'activeSources'
export async function getCalendarData(startDate: string, endDate: string, activeSources?: ActiveSources) {
    const sessionResult = await validatePageSession();
    if ('error' in sessionResult) {
        return { tasks: null, quotes: null, sentEmails: null, receivedEmails: null, error: 'Error de sessió. Torna a iniciar la sessió.' };
    }
    const { supabase, activeTeamId } = sessionResult;

    // 🧠 FIX CLAU: Si activeSources és undefined (càrrega inicial del Server Component),
    // utilitzem el filtre per defecte (només tasques).
    const filters: ActiveSources = activeSources || {
        tasks: true,
        quotes: false,
        emails: false,
        receivedEmails: false,
    };


    // Validació de dades d'entrada (unchanged)
    const dateSchema = z.string().datetime({ message: 'La data ha de ser una ISO 8601 string vàlida.' });
    if (!dateSchema.safeParse(startDate).success || !dateSchema.safeParse(endDate).success) {
        return { tasks: null, quotes: null, sentEmails: null, receivedEmails: null, error: 'Rang de dates invàlid.' };
    }

    // Pas 1: Obtenim la llista d'IDs dels usuaris de l'equip actiu (Condicionalment).
    let userIdsInTeam: string[] = [];
    // ✅ Utilitzem 'filters' per a la verificació
    if (filters.emails || filters.receivedEmails) {
        const { data: teamMembers, error: membersError } = await supabase
          .from('team_members')
          .select('user_id')
          .eq('team_id', activeTeamId);

        if (membersError) {
            console.error("Error fetching team members for calendar:", membersError);
            return { tasks: null, quotes: null, sentEmails: null, receivedEmails: null, error: membersError.message };
        }
        userIdsInTeam = teamMembers.map(member => member.user_id);
    }
    
    // Pas 2: Executem consultes condicionalment
    const promises = [];

    // 1. Tasques
    if (filters.tasks) {
        promises.push(
            supabase
                .from('tasks')
                .select('*, profiles:user_asign_id (id, full_name, avatar_url), contacts(id, nom), departments(id, name)')
                .eq('team_id', activeTeamId)
                .gte('due_date', startDate) 
                .lte('due_date', endDate)
        );
    } else {
        promises.push(Promise.resolve({ data: [] as EnrichedTaskForCalendar[], error: null }));
    }

    // 2. Pressupostos
    if (filters.quotes) {
        promises.push(
            supabase
                .from('quotes')
                .select('*, contacts (id, nom)')
                .eq('team_id', activeTeamId)
                .not('expiry_date', 'is', null)
                .gte('expiry_date', startDate) 
                .lte('expiry_date', endDate)
        );
    } else {
        promises.push(Promise.resolve({ data: [] as EnrichedQuoteForCalendar[], error: null }));
    }

    // 3. Correus Enviats
    if (filters.emails && userIdsInTeam.length > 0) {
        promises.push(
            supabase
                .from('tickets')
                .select('*, contacts (id, nom)')
                .in('user_id', userIdsInTeam) 
                .eq('type', 'enviat')
                .not('sent_at', 'is', null)
                .gte('sent_at', startDate) 
                .lte('sent_at', endDate)
        );
    } else {
        promises.push(Promise.resolve({ data: [] as EnrichedEmailForCalendar[], error: null }));
    }

    // 4. Correus Rebuts
    if (filters.receivedEmails && userIdsInTeam.length > 0) {
        promises.push(
            supabase
                .from('tickets')
                .select('*, contacts (id, nom)')
                .in('user_id', userIdsInTeam)
                .eq('type', 'rebut')
                .not('sent_at', 'is', null)
                .gte('sent_at', startDate) 
                .lte('sent_at', endDate)
        );
    } else {
        promises.push(Promise.resolve({ data: [] as EnrichedEmailForCalendar[], error: null }));
    }
    
    const [tasksResult, quotesResult, sentEmailsResult, receivedEmailsResult] = await Promise.all(promises);

    const error = tasksResult.error || quotesResult.error || sentEmailsResult.error || receivedEmailsResult.error;

    if (error) {
        console.error("Error fetching calendar data:", {
            tasksError: tasksResult.error,
            quotesError: quotesResult.error,
            sentEmailsError: sentEmailsResult.error,
            receivedEmailsError: receivedEmailsResult.error,  
        });
        return { tasks: null, quotes: null, sentEmails: null, receivedEmails: null, error: error ? error.message : 'Error desconegut' };
    }

    return {
        tasks: tasksResult.data as unknown as EnrichedTaskForCalendar[],
        quotes: quotesResult.data as unknown as EnrichedQuoteForCalendar[],
        sentEmails: sentEmailsResult.data as unknown as EnrichedEmailForCalendar[], 
        receivedEmails: receivedEmailsResult.data as unknown as EnrichedEmailForCalendar[], 
    };
}

// =================== FILE: src/app/[locale]/(app)/crm/calendari/page.tsx ===================

import { Suspense } from 'react';
import CalendarData from './_components/CalendarData';
import CalendarSkeleton from './_components/CalendarSkeleton';

export default function CalendarPage() {
  return (
    // Utilitzem un contenidor que no afegeix marges o paddings verticals innecessaris
    <div className="h-full w-full">
      <Suspense fallback={<CalendarSkeleton />}>
        <CalendarData />
      </Suspense>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/crm/calendari/_components/calendar-custom.css ===================

/* * Assegura que el contenidor de la columna de dia tingui posició relativa
 * perquè els esdeveniments posicionats de forma absoluta es mantinguin dins.
*/
.rbc-day-slot .rbc-event-content {
    white-space: normal !important;
    word-wrap: break-word !important;
}
.rbc-day-slot .rbc-event,
.rbc-day-slot .rbc-background-event {
    position: relative !important;
    width: 95% !important;
    margin-bottom: 5px !important;
    left: 2.5% !important;
    right: 2.5% !important;
    top: auto !important;
    height: auto !important;
    min-height: 25px; /* Una alçada mínima per a esdeveniments curts */
}

/* * Elimina l'alçada fixa de les files de temps per permetre que creixin 
 * verticalment segons el contingut.
*/
.rbc-time-content > .rbc-time-slot,
.rbc-time-slot {
    height: auto !important;
    min-height: 40px; /* Mantenim una alçada mínima per a les hores buides */
}

/* * Assegura que el contenidor que agrupa els esdeveniments en una mateixa
 * franja horària sigui flexible i organitzi els fills en columna.
*/
.rbc-day-slot .rbc-events-container {
    display: flex;
    flex-direction: column;
    gap: 2px; /* Espai entre esdeveniments */
    position: relative !important;
    width: 100% !important;
    top: 0 !important;
    left: 0 !important;
}

/* * Ajusta l'estil de l'indicador "now" (la línia de l'hora actual)
 * per assegurar que es mostri correctament amb la nova estructura flexible.
*/
.rbc-time-view .rbc-current-time-indicator {
    z-index: 1;
}

// =================== FILE: src/app/[locale]/(app)/crm/calendari/_components/CalendarClient.tsx ===================

'use client';

import { useMemo, useCallback } from 'react';
import { Calendar, dateFnsLocalizer, EventPropGetter, CalendarProps, View, NavigateAction } from 'react-big-calendar';
import { format, parse, startOfWeek, getDay } from 'date-fns';
import { es } from 'date-fns/locale';
import withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop';
import { useTranslations } from 'next-intl';
import 'react-big-calendar/lib/css/react-big-calendar.css';
import 'react-big-calendar/lib/addons/dragAndDrop/styles.css';

// NOU: Importem el nou fitxer de estils personalitzats
import './calendar-custom.css';

import { CalendarEvent } from '@/types/crm';
import { fetchCalendarData } from '../_hooks/calendarFetch';
import { ActiveSources } from '@/types/crm/calendar';
import { EnrichedTaskForCalendar, EnrichedQuoteForCalendar, EnrichedEmailForCalendar } from './CalendarData';
import { TaskDialogManager } from '@/components/features/tasks/TaskDialogManager';
import { Tables } from '@/types/supabase';
import CalendarToolbar from './CalendarToolbar';
import useCalendar from '../_hooks/useCalendar';
import { QuoteDetailDialog } from './QuoteDetailDialog';
import { EmailDetailDialog } from './EmailDetailDialog';
import { cn } from '@/lib/utils/utils';
import { useCalendarController } from '../_hooks/useCalendarController';
import { useCalendarDialogs } from '../_hooks/useCalendarDialog';
import CalendarSkeletonEvent from './CalendarSkeletonEvent';

export type EventSourcesState = ActiveSources;

const locales = { es };
const localizer = dateFnsLocalizer({ format, parse, startOfWeek, getDay, locales });
const DragAndDropCalendar = withDragAndDrop(Calendar as React.ComponentType<CalendarProps<CalendarEvent>>);
const CALENDAR_VIEWS: View[] = ['month', 'week', 'day', 'agenda'];

// 🎨 DEFINICIONS D'ESTILS
const eventStyles = {
    task: {
        Baixa: { backgroundColor: '#3498db', color: 'white' },
        Mitjana: { backgroundColor: '#f1c40f', color: 'black' },
        Alta: { backgroundColor: '#e74c3c', color: 'white' },
    },
    quote: { backgroundColor: '#2ecc71', color: 'white' },
    email: { backgroundColor: '#9b59b6', color: 'white' },
    receivedEmail: { backgroundColor: '#34495e', color: 'white' },
    default: { backgroundColor: '#95a5a6', color: 'white' },
};

const eventStyleGetter: EventPropGetter<CalendarEvent> = (event) => {
    const { eventType, resource } = event;
    let style = { ...eventStyles.default };

    if (eventType === 'task' && resource && typeof resource === 'object' && 'priority' in resource) {
        const priority = (resource as { priority: string }).priority as keyof typeof eventStyles.task;
        style = eventStyles.task[priority] || eventStyles.default;
    } else if (eventType === 'quote') {
        style = eventStyles.quote;
    } else if (eventType === 'email') {
        style = eventStyles.email;
    } else if (eventType === 'receivedEmail') {
        style = eventStyles.receivedEmail;
    }

    return { style: { ...style, borderRadius: '5px', opacity: 0.9, border: '0px', display: 'block' } };
};

// ----------------------------------------------------------------------
// 📦 INTERFÍCIE DE PROPIETATS
// ----------------------------------------------------------------------
export interface CalendarClientProps {
    initialTasks: EnrichedTaskForCalendar[];
    initialQuotes: EnrichedQuoteForCalendar[];
    initialSentEmails: EnrichedEmailForCalendar[];
    initialReceivedEmails: EnrichedEmailForCalendar[];
    teamUsers: { id: string; full_name: string | null }[];
    contacts: Tables<'contacts'>[];
    departments: Tables<'departments'>[];
    fetchCalendarDataAction: typeof fetchCalendarData;
}

// ----------------------------------------------------------------------
// ⚙️ COMPONENT PRINCIPAL
// ----------------------------------------------------------------------
export default function CalendarClient(props: CalendarClientProps) {
    const t = useTranslations('Calendar');

    const {
        tasks,
        filteredEvents,
        view,
        date,
        eventSources,
        handleToolbarNavigation,
        handleViewChange,
        handleDataMutation,
        handleMoveTask,
        setEventSources,
        updateDateAndData,
    } = useCalendarController(props);

    const {
        isTaskDialogOpen,
        isQuoteDialogOpen,
        isEmailDialogOpen,
        setIsTaskDialogOpen,
        setIsQuoteDialogOpen,
        setIsEmailDialogOpen,
        selectedTask,
        selectedQuote,
        selectedEmail,
        initialDate,
        handleSelectEvent,
        handleSelectSlot,
        handleOpenNewTaskDialog,
    } = useCalendarDialogs({ updateDateAndData });

    const { handleMoveEvent } = useCalendar(tasks, handleMoveTask);
    
    // NOU: Lògica per gestionar el clic a "+X més"
    const handleShowMore = useCallback((events: CalendarEvent[], date: Date) => {
        handleViewChange('day');
        handleToolbarNavigation('DATE', date);
    }, [handleViewChange, handleToolbarNavigation]);

    const messages = useMemo(() => ({
        allDay: t('allDay'),
        previous: t('previous'),
        next: t('next'),
        today: t('today'),
        month: t('month'),
        week: t('week'),
        day: t('day'),
        agenda: t('agenda'),
        date: t('date'),
        time: t('time'),
        event: t('event'),
        noEventsInRange: t('noEventsInRange'),
        showMore: (total: number) => `+ ${total} ${t('more')}`,
    }), [t]);

    const formattedLabel = useMemo(() => {
        let dateFormat: string;
        switch (view) {
            case 'month': dateFormat = 'MMMM yyyy'; break;
            case 'week': dateFormat = 'dd MMM yyyy'; break;
            case 'day': dateFormat = 'EEEE, dd MMMM yyyy'; break;
            case 'agenda': dateFormat = 'dd MMMM yyyy'; break;
            default: dateFormat = 'MMMM yyyy';
        }
        return format(date, dateFormat, { locale: es }).replace(/^\w/, c => c.toUpperCase());
    }, [date, view]);
    
    const handleCalendarNavigate: CalendarProps<CalendarEvent>['onNavigate'] = useCallback((newDate: Date, view: View, action: NavigateAction) => {
        handleToolbarNavigation(action, newDate);
    }, [handleToolbarNavigation]);
    
    const handleToolbarAction = useCallback((action: NavigateAction) => {
        handleToolbarNavigation(action, undefined);
    }, [handleToolbarNavigation]);


    const toolbarProps = useMemo(() => ({
        label: formattedLabel,
        onNavigate: handleToolbarAction, 
        onView: handleViewChange,
        view: view,
        views: CALENDAR_VIEWS,
        date: date,
        localizer: localizer,
        onEventSourcesChange: setEventSources,
        eventSources: eventSources,
        onCreateTask: handleOpenNewTaskDialog,
    }), [formattedLabel, handleViewChange, view, date, eventSources, setEventSources, handleOpenNewTaskDialog, handleToolbarAction]);

    return (
        <div>
            <CalendarToolbar {...toolbarProps} />
            
            <DragAndDropCalendar
                localizer={localizer}
                events={filteredEvents}
                startAccessor="start"
                endAccessor="end"
                style={{ height: 'calc(100vh - 150px)', borderRadius: '0 0 0.5rem 0.5rem' }}
                selectable
                onSelectSlot={handleSelectSlot}
                onSelectEvent={handleSelectEvent}
                onEventDrop={handleMoveEvent}
                eventPropGetter={eventStyleGetter}
                messages={messages}
                culture="es"
                view={view}
                date={date}
                onView={handleViewChange}
                onNavigate={handleCalendarNavigate}
                // NOU: Afegim el gestor per a la vista de setmana i mes
                onShowMore={handleShowMore}
                className={cn('rbc-calendar-force-light-theme')}
                components={{
                    toolbar: () => null,
                    event: (props) =>
                        props.event.eventType === 'skeleton' ? (
                            <CalendarSkeletonEvent {...props} />
                        ) : (
                            <div className="rbc-event-content">{props.title}</div>
                        ),
                }}
            />

            <TaskDialogManager
                task={selectedTask ? { ...selectedTask, user_id: selectedTask.user_id ?? '' } : null}
                open={isTaskDialogOpen}
                onOpenChange={setIsTaskDialogOpen}
                contacts={props.contacts}
                departments={props.departments}
                teamMembers={props.teamUsers}
                onTaskMutation={handleDataMutation}
                initialDate={initialDate}
            />

            <QuoteDetailDialog
                quote={selectedQuote}
                open={isQuoteDialogOpen}
                onOpenChange={setIsQuoteDialogOpen}
            />

            <EmailDetailDialog
                email={selectedEmail}
                open={isEmailDialogOpen}
                onOpenChange={setIsEmailDialogOpen}
            />
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/calendari/_components/CalendarData.tsx ===================

// src/app/[locale]/(app)/crm/calendari/_components/CalendarData.tsx
import CalendarClient from './CalendarClient';
import { validatePageSession } from '@/lib/supabase/session';
import { TaskWithAssignee } from '@/types/crm';
import { Tables } from '@/types/supabase';
import { getCalendarData } from '../actions'; 
import { startOfWeek, endOfWeek } from 'date-fns';

// --- Tipus Enriquits per al Calendari (unchanged) ---
export type EnrichedTaskForCalendar = TaskWithAssignee & {
    contacts: Tables<'contacts'> | null;
    departments: Tables<'departments'> | null;
};
export type EnrichedQuoteForCalendar = Tables<'quotes'> & {
    contacts: Pick<Tables<'contacts'>, 'id' | 'nom'> | null;
};
export type EnrichedEmailForCalendar = Tables<'tickets'> & {
    contacts: Pick<Tables<'contacts'>, 'id' | 'nom'> | null;
};

// 🧠 NOU: Estat inicial de filtres (Només Tasques Actives)
const INITIAL_ACTIVE_SOURCES = {
    tasks: true,
    quotes: false,
    emails: false,
    receivedEmails: false,
};


export default async function CalendarData() {
    const { supabase, activeTeamId } = await validatePageSession();

    // CÀLCUL INICIAL (Vista per defecte "setmana")
    const today = new Date();
    const initialStart = startOfWeek(today, { weekStartsOn: 1 as const }).toISOString();
    const initialEnd = endOfWeek(today, { weekStartsOn: 1 as const }).toISOString();
    
    // ✅ FIX CLAU: Passem l'estat inicial dels filtres al Server Action
    const initialData = await getCalendarData(initialStart, initialEnd, INITIAL_ACTIVE_SOURCES); 

    const [usersResult, contactsResult, departmentsResult] = await Promise.all([
        supabase.from('team_members_with_profiles').select('user_id, full_name').eq('team_id', activeTeamId),
        supabase.from('contacts').select('*').eq('team_id', activeTeamId),
        supabase.from('departments').select('*').eq('team_id', activeTeamId),
    ]);

    if (initialData.error || usersResult.error || contactsResult.error || departmentsResult.error) {
        console.error('Error carregant dades per al calendari:',
            initialData.error || usersResult.error || contactsResult.error || departmentsResult.error
        );
        return <CalendarClient 
            initialTasks={[]} 
            initialQuotes={[]} 
            initialSentEmails={[]} 
            initialReceivedEmails={[]} 
            teamUsers={[]} 
            contacts={[]} 
            departments={[]} 
            fetchCalendarDataAction={getCalendarData} 
        />;
    }

    const users = usersResult.data
        ?.filter(member => member.user_id)
        .map(member => ({ id: member.user_id!, full_name: member.full_name })) ?? [];

    return (
        <CalendarClient
            initialTasks={initialData.tasks ?? []}
            initialQuotes={initialData.quotes ?? []}
            initialSentEmails={initialData.sentEmails ?? []}
            initialReceivedEmails={initialData.receivedEmails ?? []}
            teamUsers={users} 
            contacts={contactsResult.data ?? []}
            departments={departmentsResult.data ?? []}
            fetchCalendarDataAction={getCalendarData} 
        />
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/calendari/_components/CalendarSkeleton.tsx ===================

// src/app/[locale]/(app)/crm/calendari/_components/CalendarSkeleton.tsx
'use client';

import { Skeleton } from "@/components/ui/skeleton";
import { cn } from "@/lib/utils/utils"; // Assumim que cn està disponible

const SkeletonCard = () => (
    <Skeleton className="h-6 w-full rounded-sm mb-1 bg-gray-200 dark:bg-gray-700" />
);

export default function CalendarSkeleton() {
    // 🧠 Racional: Utilitzem una graella per simular les cel·les del calendari
    // Fons blanc forçat per consistència amb el CalendarClient.tsx
    return (
        <div className={cn("p-2 border rounded-lg bg-white shadow-md")} style={{ height: 'calc(100vh - 150px)' }}>
            
            {/* 1. Capçalera de dies de la setmana (Simulació) */}
            <div className="grid grid-cols-7 border-b text-center font-semibold text-sm h-10">
                {['Dl.', 'Dt.', 'Dc.', 'Dj.', 'Dv.', 'Ds.', 'Dg.'].map((day) => (
                    <div key={day} className="py-2 text-foreground">
                        {day}
                    </div>
                ))}
            </div>

            {/* 2. Graella de dies (Simulació del contingut del mes/setmana) */}
            {/* L'altura total es calcula per omplir l'espai restant de la pantalla */}
            <div className="grid grid-cols-7" style={{ height: 'calc(100% - 40px)' }}>
                {/* Creem 5 setmanes de simulació per omplir la vista de mes/setmana */}
                {[...Array(35)].map((_, index) => ( 
                    <div 
                        key={index} 
                        className="p-1 border-r border-b space-y-2 overflow-hidden"
                        // El 28 és l'últim dia, evitem la vora dreta
                        style={{ minHeight: '90px' }} 
                    >
                        {/* Indicador de dia */}
                        <Skeleton className="h-4 w-6 mb-2 bg-gray-200 dark:bg-gray-700" />
                        
                        {/* Fins a 3 cards de skeleton per dia */}
                        {index % 7 === 0 && <SkeletonCard />}
                        {index % 7 === 1 && <SkeletonCard />}
                        {index % 7 === 2 && <SkeletonCard />}
                        {index % 7 === 4 && <SkeletonCard />}
                        {index % 7 === 6 && <SkeletonCard />}

                        {/* Més indicadors de càrrega (opcional) */}
                        {index % 5 === 0 && <SkeletonCard />}
                    </div>
                ))}
            </div>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/calendari/_components/CalendarSkeletonEvent.tsx ===================

// src/app/[locale]/(app)/crm/calendari/_components/CalendarSkeletonEvent.tsx
'use client';

import { Skeleton } from "@/components/ui/skeleton";
import { EventProps } from "react-big-calendar";
import { CalendarEvent } from "@/types/crm";
import { cn } from "@/lib/utils/utils"; 
import * as React from "react";


// 🧠 Racional: Aquest component simula la "targeta" d'una tasca/quote,
// utilitzant un color neutral i animació de Skeleton.
export default function CalendarSkeletonEvent({ event }: EventProps<CalendarEvent>) {
    // Si és un esdeveniment d'un dia sencer (month/week view), simulem la card de tasca
    if (event.allDay) {
        // Utilitzem un ampli de classe per simular diferents tipus de tasques
        const widthClass = event.id === 'skeleton-1' ? "w-full" : "w-11/12";
        const heightClass = event.id === 'skeleton-2' ? "h-5" : "h-6";
        
        // El padding-x de 0.5 és important per l'estil de react-big-calendar
        return (
            <div className="flex items-center space-x-1 p-0.5" style={{ paddingLeft: 0, paddingRight: 0 }}>
                <Skeleton className={cn(heightClass, widthClass, "rounded-sm bg-gray-200 dark:bg-gray-700")} />
            </div>
        );
    }
    
    // Per a la vista de dia/agenda (amb hora), podem fer-lo més llarg
    return (
        <div className="absolute inset-0 p-1">
            <Skeleton className="h-full w-full rounded-md bg-gray-200 dark:bg-gray-700" />
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/calendari/_components/CalendarToolbar.tsx ===================

// src/app/[locale]/(app)/crm/calendari/_components/CalendarToolbar.tsx
'use client';

import { ToolbarProps, View } from 'react-big-calendar';
import { useTranslations } from 'next-intl';
import { Button } from '@/components/ui/button';
import { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group';
import {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuCheckboxItem,
  DropdownMenuLabel,
  DropdownMenuSeparator
} from '@/components/ui/dropdown-menu';
import { ChevronLeft, ChevronRight, Filter, PlusCircle } from 'lucide-react';
import { cn } from '@/lib/utils/utils';
import { EventSourcesState } from './CalendarClient';
import { CalendarEvent } from '@/types/crm';
import * as React from 'react';
import * as SeparatorPrimitive from '@radix-ui/react-separator';

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(({ className, orientation = 'horizontal', decorative = true, ...props }, ref) => (
  <SeparatorPrimitive.Root
    ref={ref}
    decorative={decorative}
    orientation={orientation}
    className={cn(
      'shrink-0 bg-gray-200',
      orientation === 'horizontal' ? 'h-[1px] w-full' : 'h-full w-[1px]',
      className
    )}
    {...props}
  />
));
Separator.displayName = SeparatorPrimitive.Root.displayName;

interface CalendarToolbarProps extends ToolbarProps<CalendarEvent> {
  eventSources: EventSourcesState;
  onEventSourcesChange: (newSources: EventSourcesState) => void;
  onCreateTask: () => void;
}

type CalendarViewTranslationKey = 'month' | 'week' | 'day' | 'agenda';

export default function CalendarToolbar({
  label,
  onNavigate,
  onView,
  view,
  views,
  eventSources,
  onEventSourcesChange,
  onCreateTask,
}: CalendarToolbarProps) {
  const t = useTranslations('Calendar');
  const tFilters = useTranslations('Calendar.filters');

  return (
    <div className="flex flex-wrap items-center justify-between gap-4 p-2 pb-2 bg-white rounded-t-md py-6">
      <div className="flex items-center gap-2">
        <Button variant="ghost" size="icon" onClick={() => onNavigate('PREV')} aria-label={t('previous')}>
          <ChevronLeft className="h-4 w-4 text-black" />
        </Button>
        <Button variant="ghost" className="font-semibold text-black" onClick={() => onNavigate('TODAY')}>
          {t('today')}
        </Button>
        <Button variant="ghost" size="icon" onClick={() => onNavigate('NEXT')} aria-label={t('next')}>
          <ChevronRight className="h-4 w-4 text-black" />
        </Button>
        <h2 className="text-2xl font-bold ml-6 text-black">{label}</h2>
      </div>

      <div className="flex items-center gap-3">
        <ToggleGroup
          type="single"
          value={view}
          onValueChange={(newView: View) => { if (newView) onView(newView); }}
          aria-label="Calendar view"
        >
          {(views as View[]).map((viewName) => (
            <ToggleGroupItem key={viewName} value={viewName} aria-label={t(viewName as CalendarViewTranslationKey)} className="capitalize text-black">
              {t(viewName as CalendarViewTranslationKey)}
            </ToggleGroupItem>
          ))}
        </ToggleGroup>

        <Separator orientation="vertical" className="h-8" />

        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" size="icon" aria-label={tFilters('title')}>
              <Filter className="h-4 w-4 text-black" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuLabel className="text-white , bg-gray-800">{tFilters('title')}</DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuCheckboxItem checked={eventSources.tasks} onCheckedChange={(checked) => onEventSourcesChange({ ...eventSources, tasks: !!checked })}>
              {tFilters('tasks')}
            </DropdownMenuCheckboxItem>
            <DropdownMenuCheckboxItem checked={eventSources.quotes} onCheckedChange={(checked) => onEventSourcesChange({ ...eventSources, quotes: !!checked })}>
              {tFilters('quotes')}
            </DropdownMenuCheckboxItem>
            <DropdownMenuCheckboxItem checked={eventSources.emails} onCheckedChange={(checked) => onEventSourcesChange({ ...eventSources, emails: !!checked })}>
              {tFilters('emailsSent')}
            </DropdownMenuCheckboxItem>
            <DropdownMenuCheckboxItem checked={eventSources.receivedEmails} onCheckedChange={(checked) => onEventSourcesChange({ ...eventSources, receivedEmails: !!checked })}>
              {tFilters('emailsReceived')}
            </DropdownMenuCheckboxItem>
          </DropdownMenuContent>
        </DropdownMenu>

        <Button onClick={onCreateTask} className="text-white">
          <PlusCircle className="mr-2 h-4 w-4 text-white" />
          {t('newTask')}
        </Button>
      </div>
    </div>
  );
}


// =================== FILE: src/app/[locale]/(app)/crm/calendari/_components/EmailDetailDialog.tsx ===================

// src/app/[locale]/(app)/crm/calendari/_components/EmailDetailDialog.tsx (AQUEST CODI ERA CORRECTE)
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';
import { EnrichedEmailForCalendar } from './CalendarData';
import { format } from 'date-fns';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import { ArrowUpRight } from 'lucide-react';

interface Props {
  email: EnrichedEmailForCalendar | null;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function EmailDetailDialog({ email, open, onOpenChange }: Props) {
  if (!email) return null;

  // La construcció de la URL sempre ha estat correcta.
  const emailUrl = `/comunicacio/inbox?ticketId=${email.id}`;

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Detall del Correu</DialogTitle>
          <DialogDescription>Data: {format(new Date(email.sent_at!), 'PPP p')}</DialogDescription>
        </DialogHeader>
        <div className="space-y-2 py-4">
          <p><strong>{email.type === 'enviat' ? 'Per a:' : 'De:'}</strong> {email.contacts?.nom || email.sender_name}</p>
          <p><strong>Assumpte:</strong> {email.subject}</p>
          <hr/>
          <div className="text-sm text-muted-foreground max-h-48 overflow-y-auto" dangerouslySetInnerHTML={{ __html: email.preview || '' }} />
        </div>
        <DialogFooter>
          <Button variant="outline" asChild>
            <Link href={emailUrl}>
              Anar al Correu
              <ArrowUpRight className="ml-2 h-4 w-4" />
            </Link>
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

// =================== FILE: src/app/[locale]/(app)/crm/calendari/_components/QuoteDetailDialog.tsx ===================

import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';
import { EnrichedQuoteForCalendar } from './CalendarData';
import { format } from 'date-fns';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import { ArrowUpRight } from 'lucide-react';

interface Props {
  quote: EnrichedQuoteForCalendar | null;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function QuoteDetailDialog({ quote, open, onOpenChange }: Props) {
  if (!quote) return null;

  const quoteUrl = `/crm/quotes/${quote.id}`;

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Detall del Pressupost: {quote.quote_number}</DialogTitle>
          <DialogDescription>Venciment: {format(new Date(quote.expiry_date!), 'PPP')}</DialogDescription>
        </DialogHeader>
        <div className="space-y-2 py-4">
          <p><strong>Client:</strong> {quote.contacts?.nom || 'N/A'}</p>
          <p><strong>Total:</strong> {new Intl.NumberFormat('es-ES', { style: 'currency', currency: 'EUR' }).format(quote.total)}</p>
          <p><strong>Estat:</strong> {quote.status}</p>
        </div>
        {/* ✅ NOU: Peu del diàleg amb el botó de redirecció */}
        <DialogFooter>
          <Button variant="outline" asChild>
            <Link href={quoteUrl}>
              Veure Detalls
              <ArrowUpRight className="ml-2 h-4 w-4" />
            </Link>
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

// =================== FILE: src/app/[locale]/(app)/crm/calendari/_hooks/calendarFetch.ts ===================

// src/app/[locale]/(app)/crm/calendari/_hooks/calendarFetch.ts
import { ActiveSources } from '@/types/crm'; // Importem el tipus ActiveSources si és allà on el tens definit (o hauria de ser al teu types/crm/calendar.ts)
// ⚠️ IMPORTANT: Importem la funció Server Action real, que has anomenat getCalendarData
import { getCalendarData } from '../actions'; 

// El tipus EventSourcesState hauria de ser ActiveSources (per coherència amb la Server Action)
export const fetchCalendarData = async (
  startDate: string,
  endDate: string,
  eventSources: ActiveSources // 🧠 Passem l'estat dels filtres
) => {
  // Crida la Server Action amb tots els paràmetres necessaris
  const data = await getCalendarData(startDate, endDate, eventSources);

  // 🚨 Gestió d'errors: L'acció del servidor ja retorna un objecte amb 'error', l'hem de propagar o gestionar.
  if (data.error) {
    // Aquí podríem llençar un error o retornar l'estructura d'error
    // Però pel patró actual de useCalendarController que espera null en cas d'error,
    // retornem l'estructura de dades amb nulls.
    return {
      tasks: null,
      quotes: null,
      sentEmails: null,
      receivedEmails: null,
      error: data.error
    };
  }

  // ✅ Retornem les dades obtingudes
  return {
    tasks: data.tasks ?? [],
    quotes: data.quotes ?? [],
    sentEmails: data.sentEmails ?? [],
    receivedEmails: data.receivedEmails ?? [],
  };
};

// ⚠️ Recordatori: Si ActiveSources no està definit a ../actions.ts, has de crear un fitxer de tipus
// per a CalendarEvent i ActiveSources (ex: src/types/crm/calendar.ts) i importar-lo allà.
// Per ara, assumim que està correctament importat a través de CalendarClient.

// =================== FILE: src/app/[locale]/(app)/crm/calendari/_hooks/calendarHelpers.ts ===================

import { startOfWeek, endOfWeek, startOfMonth, endOfMonth, endOfDay } from 'date-fns';

export const getDateRange = (date: Date, view: string) => {
  const weekOptions = { weekStartsOn: 1 as const };
  switch(view) {
    case 'month': return { start: startOfWeek(startOfMonth(date), weekOptions), end: endOfWeek(endOfMonth(date), weekOptions) };
    case 'week': case 'agenda': return { start: startOfWeek(date, weekOptions), end: endOfWeek(date, weekOptions) };
    case 'day': return { start: date, end: endOfDay(date) };
    default: return { start: startOfWeek(date, weekOptions), end: endOfWeek(date, weekOptions) };
  }
};


// =================== FILE: src/app/[locale]/(app)/crm/calendari/_hooks/calendarMapEvents.ts ===================

import { CalendarEvent } from '@/types/crm';
import { EventSourcesState } from '../_components/CalendarClient';
import { EnrichedTaskForCalendar, EnrichedQuoteForCalendar, EnrichedEmailForCalendar } from '../_components/CalendarData';
import { addDays, startOfWeek } from 'date-fns'; // 🔑 Necessari per al fallback

interface MapEventsParams {
  tasks: EnrichedTaskForCalendar[];
  quotes: EnrichedQuoteForCalendar[];
  sentEmails: EnrichedEmailForCalendar[];
  receivedEmails: EnrichedEmailForCalendar[];
  eventSources: EventSourcesState;
  isLoading: boolean;
  date: Date;
}

export const mapEvents = ({
  tasks, quotes, sentEmails, receivedEmails, eventSources, isLoading, date
}: MapEventsParams): CalendarEvent[] => {

  // 1. Definició estricta de tipus d'esdeveniment
  type EventType = 'skeleton' | 'task' | 'quote' | 'email' | 'receivedEmail';
  const EVENT_TYPE_SKELETON: EventType = 'skeleton'; // 🔑 Definició del literal per al fix

  const allEvents: (EnrichedTaskForCalendar | EnrichedQuoteForCalendar | EnrichedEmailForCalendar)[] = [];
  
  // Mantenim l'acumulació de tots els esdeveniments per al mode predictiu
  if (eventSources.tasks) allEvents.push(...tasks);
  if (eventSources.quotes) allEvents.push(...quotes);
  if (eventSources.emails) allEvents.push(...sentEmails);
  if (eventSources.receivedEmails) allEvents.push(...receivedEmails);


  if (isLoading) {
    // 🔑 FIX DE PREDICCIÓ: Si està carregant i tenim dades antigues, les usem com a skeleton
    
    // Fallback: Si no hi havia res carregat, creem un patró uniforme de skeletons.
    if (allEvents.length === 0) {
        const fallbackEvents: CalendarEvent[] = [];
        const WEEK_STARTS_ON = 1 as const;
        const skeletonsPerDay = 2;
        const currentWeekDays = Array.from({ length: 7 }, (_, i) => 
            addDays(startOfWeek(date, { weekStartsOn: WEEK_STARTS_ON }), i)
        );
        let skeletonCounter = 0;
        currentWeekDays.forEach((d) => {
            for (let i = 0; i < skeletonsPerDay; i++) {
                fallbackEvents.push({
                    id: `skeleton-fallback-${skeletonCounter++}`, 
                    title: 'Carregant...', 
                    start: d, 
                    end: d, 
                    allDay: true, 
                    resource: null, 
                    eventType: EVENT_TYPE_SKELETON // 🔑 Ús del literal
                });
            }
        });
        return fallbackEvents;
    }
    
    // Mapegem els esdeveniments antics com a Skeletons predictius
    return allEvents.map((item, index) => {
        let d: Date | null = null;
        let allDay: boolean = true;
        
        // Determinem el tipus per saber quina data buscar
        if ('priority' in item) { d = item.due_date ? new Date(item.due_date) : null; } 
        else if ('expiry_date' in item) { d = item.expiry_date ? new Date(item.expiry_date) : null; } 
        else if ('sent_at' in item) { 
            // type = item.type === 'enviat' ? 'email' : 'receivedEmail'; // Eliminat perquè no s'utilitza
            d = item.sent_at ? new Date(item.sent_at) : null;
            allDay = false;
        } else {
            // Si el tipus no es pot determinar, retornem un skeleton genèric
            return { id: `unknown-${index}`, title: 'Carregant...', start: new Date(), end: new Date(), allDay: true, resource: null, eventType: EVENT_TYPE_SKELETON };
        }
        
        const validDate = d || new Date(); 

        return {
            id: `skeleton-predictive-${item.id}-${index}`, 
            title: 'Carregant...', // El title ja es pot deixar com a string
            start: validDate, 
            end: validDate, 
            allDay: allDay, 
            resource: item,
            eventType: EVENT_TYPE_SKELETON // 🔑 Ús del literal forçat
        };
    }).filter(e => e.start);
  }

  // -------------------------------------------------------------------------
  // 2. Lògica normal (quan no està carregant)
  // -------------------------------------------------------------------------
  const events: CalendarEvent[] = [];

  const addEvent = <T extends { id: number }>(
    source: T[],
    type: EventType, // Ja utilitza el tipus restringit
    getDate: (item: T) => Date | null,
    getTitle: (item: T) => string
  ) => {
    source.forEach(item => {
      const d = getDate(item);
      if (d) events.push({ id: `${type}-${item.id}`, title: getTitle(item), start: d, end: d, allDay: type !== 'email' && type !== 'receivedEmail', resource: item, eventType: type });
    });
  };

  if (eventSources.tasks) addEvent(tasks, 'task', t => t.due_date ? new Date(t.due_date) : null, t => t.title);
  if (eventSources.quotes) addEvent(quotes, 'quote', q => q.expiry_date ? new Date(q.expiry_date) : null, q => `Venciment P.: ${q.contacts?.nom || 'N/A'}`);
  if (eventSources.emails) addEvent(sentEmails, 'email', e => e.sent_at ? new Date(e.sent_at) : null, e => `Correu a: ${e.contacts?.nom || e.sender_name || 'Destinatari desconegut'}`);
  if (eventSources.receivedEmails) addEvent(receivedEmails, 'receivedEmail', e => e.sent_at ? new Date(e.sent_at) : null, e => `Correu de: ${e.contacts?.nom || e.sender_name || 'Remitent desconegut'}`);

  return events;
};

// =================== FILE: src/app/[locale]/(app)/crm/calendari/_hooks/useCalendar.tsx ===================

// src/app/[locale]/(app)/crm/calendari/_hooks/useCalendar.tsx
'use client'; 
// 🔹 Indiquem que és un component/client hook (necessari per React en entorns Next.js 13+)

// -----------------------------------------------------------------------------
// 📦 IMPORTACIONS
// -----------------------------------------------------------------------------
import { useCallback } from 'react';       // Per memoritzar funcions i evitar re-renderitzats innecessaris
import { toast } from 'sonner';            // Llibreria per mostrar notificacions d’usuari
import { updateSimpleTask} from '@/app/actions/tasks/actions'; // Acció del servidor per actualitzar la data d’una tasca
import { CalendarEvent } from '@/types/crm'; // Tipus genèric d’esdeveniment del calendari
import { EnrichedTaskForCalendar } from '../_components/CalendarData'; // Tipus específic per a tasques

// -----------------------------------------------------------------------------
// 🧠 DESCRIPCIÓ GENERAL
// -----------------------------------------------------------------------------
// Aquest hook encapsula la lògica de "Drag & Drop" per moure esdeveniments
// (ara mateix només tasques) dins el calendari.
// Quan una tasca es mou de dia, actualitza el seu due_date tant al frontend
// com al backend, gestionant errors i notificacions d’usuari.
// -----------------------------------------------------------------------------

export default function useCalendar(
  tasks: EnrichedTaskForCalendar[],                      // 🔸 Llista actual de tasques mostrades al calendari
  onTaskMove: (taskId: number, newDueDate: string) => void // 🔸 Callback per actualitzar el frontend de manera optimista
) {

  // ---------------------------------------------------------------------------
  // 🎯 handleMoveEvent
  // ---------------------------------------------------------------------------
  // Aquesta funció es crida quan l’usuari arrossega una tasca a una nova data.
  // Actualitza la data tant al frontend (optimista) com al backend (definitiu).
  // ---------------------------------------------------------------------------

  const handleMoveEvent = useCallback(async ({ event, start }: { event: CalendarEvent, start: string | Date }) => {
    // 🧠 Només tractem esdeveniments de tipus "tasca"
    if (event.eventType !== 'task') return;
    
    // 🔍 Extraiem l’ID de la tasca: pot venir amb prefix (“task-”), així que el netegem
    const taskId = Number(String(event.id).replace('task-', ''));

    // 🕓 Convertim la nova data d’inici a format ISO per coherència amb el backend
    const newDueDate = new Date(start).toISOString();

    // 🔎 Busquem la tasca original (per poder fer un revert si falla)
    const originalTask = tasks.find(t => t.id === taskId);
    if (!originalTask) return; // Si no la trobem, parem aquí

    // -------------------------------------------------------------------------
    // 🧩 ACTUALITZACIÓ OPTIMISTA
    // -------------------------------------------------------------------------
    // Actualitzem el frontend immediatament per donar sensació de fluïdesa.
    // Si després hi ha error de servidor, revertirem la data.
    onTaskMove(taskId, newDueDate);

    // -------------------------------------------------------------------------
    // ⚙️ ACTUALITZACIÓ REAL AL BACKEND
    // -------------------------------------------------------------------------
    const result = await updateSimpleTask(taskId, { due_date: newDueDate });

    // -------------------------------------------------------------------------
    // 🧯 GESTIÓ D'ERRORS I FEEDBACK A L’USUARI
    // -------------------------------------------------------------------------
    if (result.error) {
        // ❌ Si el servidor respon amb error, mostrem toast i revertim la data
        toast.error("Error en actualitzar la data.", { description: result.error.message });
        onTaskMove(taskId, originalTask.due_date!);
    } else {
        // ✅ Si tot va bé, mostrem confirmació d’èxit
        toast.success("Tasca actualitzada correctament.");
    }

  // 🧩 Dependències: només canvia si canvien les tasques o la funció de moviment
  }, [tasks, onTaskMove]);

  // ---------------------------------------------------------------------------
  // 📤 RETORN DEL HOOK
  // ---------------------------------------------------------------------------
  // Exposem només la funció principal, ja que la resta és interna.
  // El component que utilitza el calendari (ex: CalendarClient) la rebrà
  // i la passarà al component de calendari com a handler d’“onEventDrop”.
  // ---------------------------------------------------------------------------
  return { handleMoveEvent };
}


// =================== FILE: src/app/[locale]/(app)/crm/calendari/_hooks/useCalendarController.ts ===================

'use client';

import { useState, useMemo, useCallback, useEffect } from 'react';
import { View, NavigateAction } from 'react-big-calendar';
import { toast } from 'sonner';
// 💡 Imports NETEJATS: Només mantenim les funcions necessàries per al càlcul manual de dates
import { 
    startOfToday, 
    addDays, addWeeks, addMonths 
} from 'date-fns';

import { CalendarEvent } from '@/types/crm';
import { ActiveSources } from '@/types/crm/calendar';
import { EnrichedTaskForCalendar, EnrichedQuoteForCalendar, EnrichedEmailForCalendar } from '../_components/CalendarData';
import { getDateRange } from './calendarHelpers';
import { fetchCalendarData } from './calendarFetch';
import { mapEvents } from './calendarMapEvents';

// Hem eliminat la definició de 'localizer' ja que no s'utilitzava directament.


interface UseCalendarControllerProps {
    initialTasks: EnrichedTaskForCalendar[];
    initialQuotes: EnrichedQuoteForCalendar[];
    initialSentEmails: EnrichedEmailForCalendar[];
    initialReceivedEmails: EnrichedEmailForCalendar[];
    fetchCalendarDataAction: typeof fetchCalendarData;
}

type EventSourcesState = ActiveSources;

export const useCalendarController = ({
    initialTasks, initialQuotes, initialSentEmails, initialReceivedEmails, fetchCalendarDataAction
}: UseCalendarControllerProps) => {

    const [tasks, setTasks] = useState(initialTasks);
    const [quotes, setQuotes] = useState(initialQuotes);
    const [sentEmails, setSentEmails] = useState(initialSentEmails);
    const [receivedEmails, setReceivedEmails] = useState(initialReceivedEmails);
    const [view, setView] = useState<View>('week');
    const [date, setDate] = useState(new Date());
    const [isLoading, setIsLoading] = useState(false);
    const [eventSources, setEventSources] = useState<EventSourcesState>({
        tasks: true, quotes: false, emails: false, receivedEmails: false
    });
    
    // -------------------------------------------------------------------------
    // 🧠 handleDataFetch: Lògica Asíncrona AÏLLADA
    // -------------------------------------------------------------------------
    const handleDataFetch = useCallback(async (currentDate: Date, currentView: View, currentSources: EventSourcesState) => {
        
        console.log('🔄 [Fetch] Iniciant càrrega de dades. Loading=true');
        setIsLoading(true); 
        
        try {
            const { start, end } = getDateRange(currentDate, currentView);
            const startDateStr = start.toISOString();
            const endDateStr = end.toISOString();

            console.log('   [Fetch] Sol·licitant dades per al rang:', startDateStr.slice(0, 10), 'a', endDateStr.slice(0, 10));

            const data = await fetchCalendarDataAction(startDateStr, endDateStr, currentSources);

            if (data.error) {
                console.error('   [Fetch] Error del servidor:', data.error);
                toast.error("Error carregant dades del calendari.", { description: data.error });
                setTasks([]); 
                setQuotes([]);
                setSentEmails([]);
                setReceivedEmails([]);
                return;
            }
            
            setTasks(data.tasks ?? []);
            setQuotes(data.quotes ?? []);
            setSentEmails(data.sentEmails ?? []);
            setReceivedEmails(data.receivedEmails ?? []);
            
        } catch (e) {
            console.error('   [Fetch] Error de xarxa/genèric:', e);
            toast.error("Error carregant dades del calendari (error de xarxa).");
        } finally {
            console.log('   [Fetch] Finalitzant càrrega. Loading=false');
            setIsLoading(false);
        }
    }, [fetchCalendarDataAction]); 

    
    // 💡 useEffect: SINCRONITZADOR D'ESTAT (Dispara la càrrega quan l'estat canvia)
    useEffect(() => {
        handleDataFetch(date, view, eventSources);
    }, [date, view, eventSources, handleDataFetch]);


    // -------------------------------------------------------------------------
    // 🧭 updateDateAndData: Sols canvia l'estat
    // -------------------------------------------------------------------------
    const updateDateAndData = useCallback((newDate: Date, newView: View) => {
        console.log(`🧭 [Update] Canviant Data/View: ${newDate.toISOString().slice(0,10)} / ${newView}`);
        setDate(newDate);
        setView(newView);
        
    }, []);

    // -------------------------------------------------------------------------
    // ⚙️ handleToolbarNavigation: Gestió Unificada (FIX CLAU)
    // -------------------------------------------------------------------------
    const handleToolbarNavigation = useCallback((action: NavigateAction, newDate?: Date) => {
        let targetDate: Date;
        
        console.log(`▶️ [Nav] Clic a: ${action}. Nova data suggerida: ${newDate ? newDate.toISOString().slice(0,10) : 'CALCULANT...'}`);

        // 1. Check if newDate is provided (Internal R-B-C navigation)
        if (newDate) {
            targetDate = newDate;
        } else {
            // 2. If newDate is NOT provided (External Toolbar navigation), calculate it manually.
            
            const currentDate = date;
            const multiplier = (action === 'NEXT' ? 1 : -1);

            switch (action) {
                case 'TODAY':
                    targetDate = startOfToday();
                    break;
                case 'NEXT':
                case 'PREV':
                    // Utilitzem les funcions primitives de date-fns segons la vista
                    switch (view) {
                        case 'month':
                            targetDate = addMonths(currentDate, multiplier);
                            break;
                        case 'week':
                            targetDate = addWeeks(currentDate, multiplier);
                            break;
                        case 'day':
                            targetDate = addDays(currentDate, multiplier);
                            break;
                        case 'agenda':
                            // Per a l'agenda, utilitzem navegació mensual
                            targetDate = addMonths(currentDate, multiplier);
                            break;
                        default:
                            targetDate = currentDate; 
                    }
                    break;
                default:
                    targetDate = currentDate;
            }
        }
        
        // Finalment, actualitzem la data (targetDate ja és vàlida) i la vista
        updateDateAndData(targetDate, view);
        
    }, [view, updateDateAndData, date]); 


    // -------------------------------------------------------------------------
    // 🔄 handleEventSourcesChange: Gestió de Filtres
    // -------------------------------------------------------------------------
    const handleEventSourcesChange = useCallback((newSources: EventSourcesState) => {
        console.log('🔘 [Filtre] Canviant filtres a:', newSources);

        console.log('   [Filtre] Netejant dades antigues (Wipe)');
        setTasks([]);
        setQuotes([]);
        setSentEmails([]);
        setReceivedEmails([]);
        
        setEventSources(newSources); 
        
    }, []);

    // -------------------------------------------------------------------------
    // 🔄 handleViewChange: Gestió de Canvi de Vista
    // -------------------------------------------------------------------------
    const handleViewChange = useCallback((newView: View) => {
        setView(newView); 
    }, []);

    const handleMoveTask = useCallback((taskId: number, newDueDate: string) => setTasks(t => t.map(task => task.id === taskId ? { ...task, due_date: newDueDate } : task)), []);
    
    // Per re-carregar dades després d'una acció (mutació)
    const handleDataMutation = useCallback(() => {
        handleDataFetch(date, view, eventSources);
    }, [date, view, eventSources, handleDataFetch]);

    // -------------------------------------------------------------------------
    // 🧬 filteredEvents: Llista d'esdeveniments per al Calendari (useMemo)
    // -------------------------------------------------------------------------
    const filteredEvents: CalendarEvent[] = useMemo(() => {
        console.log(`✨ [Memo] Recomputant events...`);
        return mapEvents({ tasks, quotes, sentEmails, receivedEmails, eventSources, isLoading, date });
    }, [tasks, quotes, sentEmails, receivedEmails, eventSources, isLoading, date]);
    
    // -------------------------------------------------------------------------
    // 📤 RETORN DEL HOOK
    // -------------------------------------------------------------------------
    return {
        tasks, filteredEvents, view, date, eventSources, isLoading,
        handleToolbarNavigation, handleViewChange, handleDataMutation, handleMoveTask,
        setEventSources: handleEventSourcesChange,
        updateDateAndData,
    };
};

// =================== FILE: src/app/[locale]/(app)/crm/calendari/_hooks/useCalendarDialog.ts ===================

// src/app/[locale]/(app)/crm/calendari/_hooks/useCalendarDialogs.ts
'use client';

// 🔧 React Hooks bàsics per a gestió d’estats i memòria de funcions
import { useState, useCallback } from 'react';

// ✅ Importem tipus del calendari (View i SlotInfo) per definir signatures més precises
import { SlotInfo, View } from 'react-big-calendar'; 

// 🔤 Tipus del nostre projecte CRM (perquè els diàlegs sàpiguen quin tipus d’objecte estan obrint)
import { CalendarEvent } from '@/types/crm';
import { EnrichedTaskForCalendar, EnrichedQuoteForCalendar, EnrichedEmailForCalendar } from '../_components/CalendarData';

// ✅ Definim el tipus de la funció que rep del Controller (per actualitzar vista i data)
type UpdateDateAndData = (newDate: Date, newView: View) => void;

interface UseCalendarDialogsProps {
    updateDateAndData: UpdateDateAndData;
}

/**
 * 🎯 Hook personalitzat que centralitza tota la lògica de gestió dels diàlegs del calendari:
 * - Obrir i tancar diàlegs per tasques, pressupostos i correus.
 * - Gestionar quin element està seleccionat.
 * - Obrir el mode “crear nova tasca” o “anar a vista de dia”.
 */
export const useCalendarDialogs = ({ updateDateAndData }: UseCalendarDialogsProps) => {

    // -------------------------------------------------------------------------
    // 🧩 1. ESTATS DE DIÀLEGS
    // -------------------------------------------------------------------------
    // Controlen si els diferents diàlegs (Task, Quote, Email) estan oberts o tancats.
    const [isTaskDialogOpen, setIsTaskDialogOpen] = useState(false);
    const [isQuoteDialogOpen, setIsQuoteDialogOpen] = useState(false);
    const [isEmailDialogOpen, setIsEmailDialogOpen] = useState(false);
    
    // -------------------------------------------------------------------------
    // 📌 2. ESTATS D’ELEMENTS SELECCIONATS
    // -------------------------------------------------------------------------
    // Quan l’usuari fa clic en un esdeveniment, guardem quin tipus d’element és.
    // Això permet que el diàleg mostri la informació específica de cada cas.
    const [selectedTask, setSelectedTask] = useState<EnrichedTaskForCalendar | null>(null);
    const [selectedQuote, setSelectedQuote] = useState<EnrichedQuoteForCalendar | null>(null);
    const [selectedEmail, setSelectedEmail] = useState<EnrichedEmailForCalendar | null>(null);
    
    // -------------------------------------------------------------------------
    // 🕒 3. DATA INICIAL PER A CREACIÓ
    // -------------------------------------------------------------------------
    // S'utilitza quan l’usuari vol crear una nova tasca manualment.
    const [initialDate, setInitialDate] = useState<Date | undefined>(undefined);

    // -------------------------------------------------------------------------
    // 🎯 4. HANDLER: Quan l’usuari selecciona un esdeveniment existent
    // -------------------------------------------------------------------------
    const handleSelectEvent = useCallback((event: CalendarEvent) => {
        // 🔄 Reiniciem els estats anteriors (per evitar que quedin oberts diversos diàlegs)
        setSelectedTask(null);
        setSelectedQuote(null);
        setSelectedEmail(null);

        // 🧠 Decidim quin diàleg obrir segons el tipus d’esdeveniment seleccionat
        switch (event.eventType) {
            case 'task':
                setSelectedTask(event.resource as EnrichedTaskForCalendar);
                setIsTaskDialogOpen(true);
                break;
            case 'quote':
                setSelectedQuote(event.resource as EnrichedQuoteForCalendar);
                setIsQuoteDialogOpen(true);
                break;
            case 'email':
            case 'receivedEmail':
                setSelectedEmail(event.resource as EnrichedEmailForCalendar);
                setIsEmailDialogOpen(true);
                break;
            default:
                break;
        }
    }, []);

    // -------------------------------------------------------------------------
    // 🗓️ 5. HANDLER: Quan es fa clic a un espai buit del calendari (slot)
    // -------------------------------------------------------------------------
    const handleSelectSlot = useCallback((slotInfo: SlotInfo) => {
        // 🔁 Fem servir la funció del Controller per canviar la vista del calendari a “dia”
        // Això permet mostrar de seguida la data clicada amb els esdeveniments corresponents.
        updateDateAndData(slotInfo.start, 'day');
    }, [updateDateAndData]);

    // -------------------------------------------------------------------------
    // ✨ 6. HANDLER: Obrir el diàleg per crear una nova tasca
    // -------------------------------------------------------------------------
    const handleOpenNewTaskDialog = useCallback(() => {
        // Assegurem que no hi ha cap tasca seleccionada (nova creació)
        setSelectedTask(null);

        // Assignem la data actual com a base per a la nova tasca
        setInitialDate(new Date());

        // Obrim el diàleg de creació
        setIsTaskDialogOpen(true);
    }, []);

    // -------------------------------------------------------------------------
    // 📤 7. RETORN DEL HOOK
    // -------------------------------------------------------------------------
    // Exposem tant els estats com els handlers perquè el component pare (Calendari)
    // pugui controlar i reaccionar davant les interaccions.
    return {
        // Estats dels diàlegs
        isTaskDialogOpen,
        isQuoteDialogOpen,
        isEmailDialogOpen,
        setIsTaskDialogOpen,
        setIsQuoteDialogOpen,
        setIsEmailDialogOpen,

        // Elements seleccionats
        selectedTask,
        selectedQuote,
        selectedEmail,
        initialDate,

        // Handlers per al calendari
        handleSelectEvent,
        handleSelectSlot,
        handleOpenNewTaskDialog,
    };
};


// =================== FILE: src/app/[locale]/(app)/crm/contactes/actions.ts ===================

"use server";

import { revalidatePath } from "next/cache";
import type { Contact } from '@/types/crm/contacts'; // Assegurem que s'importa el tipus Contact correctament
import { validateUserSession } from "@/lib/supabase/session"; 
import { type ActionResult } from "@/types/shared/index";
// ----------------------------------------------------
// ACCIONS DE LLISTA/FETCHING
// ----------------------------------------------------

/**
 * Obté tots els contactes/proveïdors de l'equip actiu.
 * Aquesta funció és cridada per Server Components com ExpenseDetailData.tsx.
 * * * ✅ El Per Què: Optimitza la càrrega de llistes per a selectors (dropdowns).
 */
export async function fetchContacts(): Promise<Contact[]> {
    const session = await validateUserSession();
    
    // Si la sessió falla (usuari no logat o sense equip), no podem fer el fetch.
    if ('error' in session) {
        // En lloc de llençar un error, que podria trencar la pàgina de detall,
        // retornem un array buit si la llista de contactes no és essencial per a l'autenticació.
        // Tot i així, en una aplicació on la despesa depèn de l'usuari, el redirect ja s'hauria fet.
        console.error("No es pot carregar la sessió per obtenir els contactes:", session.error.message);
        return [];
    }

    const { supabase } = session;
    
    // La clau és utilitzar un SELECT lleuger. 
    // La RLS filtrarà automàticament per team_id.
    const { data, error } = await supabase
        .from('contacts')
        .select(`
            id,
            nom,
            nif,
            email,
            telefon,
            estat,
            empresa,
            valor
        `)
        .order('nom', { ascending: true }); // Ordenació alfabètica per defecte

    if (error) {
        console.error("Error en carregar els contactes:", error);
        // Llançar un error actiu per al error.tsx (gestió d'errors al servidor)
        throw new Error("No s'han pogut carregar els contactes.");
    }
    
    // ✅ Bona Pràctica: Casting segur al tipus definit (Contact[])
    return (data as Contact[]) || []; 
}


// ----------------------------------------------------
// ACCIONS DE MUTACIÓ
// ----------------------------------------------------

export async function createContactAction(
    formData: FormData
): Promise<{ data: Contact | null; error: { message: string } | null }> {

    // ✅ 2. Cridem la funció de validació.
    const session = await validateUserSession();
    if ('error' in session) {
        return { data: null, error: session.error };
    }
    const { supabase, user, activeTeamId } = session;

    const nom = formData.get('nom') as string;
    const email = formData.get('email') as string;

    if (!nom || !email) {
        return { data: null, error: { message: 'El nom i l\'email són obligatoris.' } };
    }

    const dataToInsert = {
        nom,
        email,
        empresa: formData.get('empresa') as string,
        telefon: formData.get('telefon') as string,
        estat: formData.get('estat') as 'Lead' | 'Proveidor' | 'Client',
        valor: parseFloat(formData.get('valor') as string) || 0,
        team_id: activeTeamId, 
        user_id: user.id,
    };

    const { data, error } = await supabase
        .from('contacts')
        .insert(dataToInsert)
        .select()
        .single();

    if (error) {
        console.error("Error en crear el contacte:", error);
        return { data: null, error: { message: error.message } };
    }

    revalidatePath('/crm/contactes');
    return { data, error: null };
}


/**
 * ✅ NOVA FUNCIÓ
 * Obté tots els contactes (persones) associats a un proveïdor (empresa) específic.
 * S'utilitzarà a la pàgina de detall del proveïdor per a la Visió 360.
 */
export async function fetchContactsForSupplier(supplierId: string) {
  const session = await validateUserSession();
  if ("error" in session) {
    console.error("Session error in fetchContactsForSupplier:", session.error);
    return [];
  }
  const { supabase, activeTeamId } = session;

  const { data, error } = await supabase
    .from('contacts')
    .select('id, nom, job_title, email, telefon')
    .eq('supplier_id', supplierId) // El filtre clau
    .eq('team_id', activeTeamId)
    .order('nom', { ascending: true });

  if (error) {
    console.error("Error fetching contacts for supplier:", error.message);
    return [];
  }

  return data;
}

// Tipus per a la resposta d'aquesta funció (opcional però recomanat)
export type ContactForSupplier = Awaited<ReturnType<typeof fetchContactsForSupplier>>[0];

/**
 * Cerca contactes que NO estan vinculats a cap proveïdor.
 */
export async function searchContactsForLinking(
  searchTerm: string
): Promise<Pick<Contact, 'id' | 'nom' | 'email'>[]> {
  const session = await validateUserSession();
  if ("error" in session) return [];
  const { supabase, activeTeamId } = session;

  let query = supabase
    .from('contacts')
    .select('id, nom, email')
    .eq('team_id', activeTeamId)
    .is('supplier_id', null) // ✅ Clau: Només contactes no vinculats
    .limit(10);

  if (searchTerm) {
    query = query.ilike('nom', `%${searchTerm}%`);
  }

  const { data, error } = await query;

  if (error) {
    console.error("Error searching contacts for linking:", error.message);
    return [];
  }
  return data || [];
}

/**
 * Vincula un contacte existent a un proveïdor.
 * ✅ MODIFICAT: Ara també actualitza el nom de l'empresa.
 */
export async function linkContactToSupplier(
  contactId: string,
  supplierId: string
): Promise<ActionResult<Contact>> {
  const session = await validateUserSession();
  if ("error" in session) return { success: false, message: session.error.message };
  const { supabase, activeTeamId } = session;

  // 1. ✅ NOU: Obtenim el nom del proveïdor
  const { data: supplierData, error: supplierError } = await supabase
    .from('suppliers')
    .select('nom')
    .eq('id', supplierId)
    .eq('team_id', activeTeamId)
    .single();

  if (supplierError || !supplierData) {
    console.error("Error fetching supplier name:", supplierError);
    return { success: false, message: "No s'ha pogut trobar el proveïdor." };
  }
  
  const supplierName = supplierData.nom;

  // 2. Actualitzem el contacte
  const { data, error } = await supabase
    .from('contacts')
    .update({ 
      supplier_id: supplierId,
      estat: 'P',
      empresa: supplierName // ✅ NOU: Assignem el nom del proveïdor a l'empresa
    })
    .eq('id', contactId)
    .eq('team_id', activeTeamId) // Seguretat
    .select()
    .single();

  if (error) {
    console.error("Error linking contact:", error);
    return { success: false, message: `Error en vincular el contacte: ${error.message}` };
  }

  revalidatePath(`/finances/suppliers/${supplierId}`);
  revalidatePath(`/crm/contactes/${contactId}`);

  return { success: true, message: "Contacte vinculat.", data: data as Contact };
}


/**
 * ✅ NOU: Desvincula un contacte d'un proveïdor.
 * (No l'esborra, només elimina l'associació)
 */
export async function unlinkContactFromSupplier(
  contactId: string,
  supplierId: string // Per revalidar
): Promise<ActionResult> {
  const session = await validateUserSession();
  if ("error" in session) return { success: false, message: session.error.message };
  const { supabase, activeTeamId } = session;

  // Revertim l'estat a 'Lead' (o el que consideris per defecte)
  // i posem 'supplier_id' i 'empresa' a null.
  const { error } = await supabase
    .from('contacts')
    .update({ 
      supplier_id: null,
      estat: 'Lead', // O 'Prospecte', o el teu estat per defecte
      empresa: null
    })
    .eq('id', contactId)
    .eq('team_id', activeTeamId); // Seguretat

  if (error) {
    console.error("Error unlinking contact:", error);
    return { success: false, message: `Error en desvincular el contacte: ${error.message}` };
  }

  // Revalidem les pàgines afectades
  revalidatePath(`/finances/suppliers/${supplierId}`);
  revalidatePath(`/crm/contactes/${contactId}`);

  return { success: true, message: "Contacte desvinculat." };
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/page.tsx ===================

import { Suspense } from 'react';
import type { Metadata } from 'next';
import { ContactsData } from './_components/ContactsData';
import { ContactsSkeleton } from './_components/ContactsSkeleton';

export const metadata: Metadata = { title: 'Contactes | Ribot' };

// ✅ NOU: Definim tots els paràmetres que podem rebre
interface ContactesPageProps {
    searchParams: Promise<{ 
        page?: string;
        sort?: string;
        status?: string;
        q?: string; // També per a la cerca
        view?: 'cards' | 'list'; // ✅ NOU: Afegim el paràmetre de vista

    }>;
}

export default async function ContactesPage(props: ContactesPageProps) {
    const searchParams = await props.searchParams;
    
    // ✅ NOU: Llegim els valors de la URL o utilitzem valors per defecte
    const page = searchParams?.page || '1';
    const sortBy = searchParams?.sort || 'newest'; // Per defecte, els més nous
    const status = searchParams?.status || 'all';   // Per defecte, tots
    const searchTerm = searchParams?.q || '';       // Mantenim la cerca
    const viewMode = searchParams?.view || 'cards'; // ✅ NOU: Llegim la vista o per defecte 'cards'


    // ✅ NOU: Creem una 'key' única per a Suspense perquè es reiniciï amb cada canvi de filtre
    const suspenseKey = `${page}-${sortBy}-${status}-${searchTerm}`;

    return (
        <Suspense key={suspenseKey} fallback={<ContactsSkeleton />}>
            <ContactsData 
                page={page}
                sortBy={sortBy}
                status={status}
                searchTerm={searchTerm}
                viewMode={viewMode} // ✅ NOU: Passem la vista al component de dades

            />
        </Suspense>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/actions.ts ===================

"use server";

import { revalidatePath } from "next/cache";
import { type Database } from "@/types/supabase"; // Ja ho tens
import { validateUserSession } from "@/lib/supabase/session"; // Ja ho tens

// --- Tipus ---

// Tipus base de la fila
type ContactRow = Database['public']['Tables']['contacts']['Row'];

// ✅ NOU: Tipus de detall que inclou el proveïdor (pel JOIN)
export type ContactDetail = Omit<ContactRow, 'suppliers'> & {
  suppliers: Database['public']['Tables']['suppliers']['Row'] | null;
};

// --- Accions ---

/**
 * ✅ NOVA FUNCIÓ
 * Obté el detall d'un contacte, incloent l'empresa (supplier) associada.
 */
export async function fetchContactDetail(contactId: number): Promise<ContactDetail | null> {
  const session = await validateUserSession();
  if ("error" in session) return null;
  const { supabase, activeTeamId } = session;

  const { data, error } = await supabase
    .from("contacts")
    // Aquí fem el JOIN per obtenir el 'nom' del proveïdor
    .select(`
      *, 
      suppliers (id, nom)
    `)
    .eq("id", contactId)
    .eq("team_id", activeTeamId)
    .single();

  if (error) {
    console.error("Error fetching contact detail:", error.message);
    return null;
  }
  
  // Fem un 'cast' al nostre nou tipus
  return data as unknown as ContactDetail;
}


/**
 * ✅ ACCIÓ MODIFICADA
 * Actualitza un contacte a partir de FormData.
 */
export async function updateContactAction(
    contactId: number, 
    formData: FormData
): Promise<{ data: ContactDetail | null; error: { message: string } | null }> {
    const session = await validateUserSession();
    if ('error' in session) return { data: null, error: session.error };
    const { supabase, activeTeamId } = session;

    const hobbiesValue = formData.get('hobbies') as string;
    
    // ✅ CANVI: Llegim 'supplier_id' i el posem a null si està buit.
    const supplierId = formData.get('supplier_id') as string;

    const dataToUpdate = {
        nom: formData.get('nom') as string,
        // ❌ 'empresa' HA DESAPAREGUT
        supplier_id: supplierId || null, // ✅ 'supplier_id' ÉS LA NOVA CLAU
        email: formData.get('email') as string,
        telefon: formData.get('telefon') as string,
        estat: formData.get('estat') as string,
        job_title: formData.get('job_title') as string,
        industry: formData.get('industry') as string,
        lead_source: formData.get('lead_source') as string,
        birthday: formData.get('birthday') || null,
        notes: formData.get('notes') as string,
        children_count: formData.get('children_count') ? parseInt(formData.get('children_count') as string, 10) : null,
        partner_name: formData.get('partner_name') as string,
        hobbies: hobbiesValue ? hobbiesValue.split(',').map(item => item.trim()) : [],
        address: {
            city: formData.get('address.city') as string,
        },
        social_media: {
            linkedin: formData.get('social_media.linkedin') as string,
        }
    };

    const { data, error } = await supabase
        .from('contacts')
        .update(dataToUpdate)
        .eq('id', contactId)
        .eq('team_id', activeTeamId)
        .select(`
          *, 
          suppliers (id, nom)
        `) // ✅ Retornem les dades amb el JOIN
        .single();

    if (error) {
        console.error("Error updating contact:", error);
        return { data: null, error: { message: error.message } };
    }

    revalidatePath(`/crm/contactes/${contactId}`);
    return { data: data as unknown as ContactDetail, error: null };
}

// ✅ Aquesta funció es queda igual
export async function deleteContactAction(
    contactId: number
): Promise<{ success: boolean; message: string }> {
   const session = await validateUserSession();
    if ('error' in session) {
        return { success: false, message: session.error.message };
    }
    const { supabase, activeTeamId } = session;

    const { error } = await supabase
        .from('contacts')
        .delete()
        .eq('id', contactId)
        .eq('team_id', activeTeamId);

    if (error) {
        console.error("Error deleting contact:", error);
        return { success: false, message: "No s'ha pogut eliminar el contacte." };
    }

    revalidatePath('/crm/contactes');
    return { success: true, message: "Contacte eliminat correctament." };
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/page.tsx ===================

import { createClient } from '@/lib/supabase/server';
import { Suspense } from 'react';
import type { Metadata } from 'next';
import { ContactDetailData } from './_components/ContactDetailData';
import { ContactDetailSkeleton } from './_components/ContactDetailSkeleton';

interface ContactDetailPageProps {
    params: Promise<{ contactId: string }>;
}

export async function generateMetadata(props: ContactDetailPageProps): Promise<Metadata> {
    const { contactId } = await props.params;
    const contactIdNumber = Number(contactId);
    const supabase = createClient();
    
    const { data: contact } = await supabase
        .from('contacts')
        .select('nom')
        .eq('id', contactIdNumber)
        .single();

    return { title: `${contact?.nom || 'Contacte'} | Ribot` };
}

export default async function ContactDetailPage(props: ContactDetailPageProps) {
    const { contactId } = await props.params;

    return (
        <Suspense fallback={<ContactDetailSkeleton />}>
            {/* ✅ CORRECCIÓ: Embolcallem 'contactId' dins d'un objecte 'params'. */}
            <ContactDetailData params={{ contactId: contactId }} />
        </Suspense>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_components/contact-detail-client.tsx ===================

"use client";

import React from 'react';
import { motion } from 'framer-motion';
import { useTranslations } from 'next-intl';
import { type Database } from '@/types/supabase';
// ✅ Importa ContactDetail
import { type ContactDetail } from '../actions';
import { useContactDetail } from '../_hooks/useContactDetail';
import { ContactDetailHeader } from './ContactDetailHeader';
import { ContactDetailTabs } from './ContactDetailTabs';

// Tipus base per a dades relacionades
type Quote = Database['public']['Tables']['quotes']['Row'];
type Opportunity = Database['public']['Tables']['opportunities']['Row'];
type Invoice = Database['public']['Tables']['invoices']['Row'];
type Activity = Database['public']['Tables']['activities']['Row'];

interface ContactDetailClientProps {
    // ✅ Accepta ContactDetail
    initialContact: ContactDetail;
    initialRelatedData: {
        quotes: Quote[];
        opportunities: Opportunity[];
        invoices: Invoice[];
        activities: Activity[];
    };
}

export function ContactDetailClient({ initialContact, initialRelatedData }: ContactDetailClientProps) {
    const t = useTranslations('ContactDetailPage');

    const {
        contact,
        isEditing,
        isPending,
        formRef,
        handleSaveChanges,
        handleDelete,
        handleCancelEdit,
        setIsEditing,
    } = useContactDetail(initialContact, t);

    return (
        <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} className="flex flex-col h-full">
            <form action={handleSaveChanges} ref={formRef} className="flex flex-col h-full">
                <ContactDetailHeader
                    contact={contact}
                    isEditing={isEditing}
                    isPending={isPending}
                    onEdit={() => setIsEditing(true)}
                    onCancel={handleCancelEdit}
                    onDelete={handleDelete}
                />
                {/* ContactDetailTabs rep 'contact' que prové de l'estat del hook, inicialitzat amb initialContact */}
                <ContactDetailTabs
                    contact={contact}
                    relatedData={initialRelatedData}
                    isEditing={isEditing}
                />
            </form>
        </motion.div>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_components/ContactDetailData.tsx ===================

// /app/[locale]/(app)/crm/contactes/[contactId]/_components/ContactDetailData.tsx
import { notFound } from 'next/navigation';
// ✅ Importem fetchContactDetail
import { fetchContactDetail } from '../actions';
import { ContactDetailClient } from './contact-detail-client';
import { validatePageSession } from "@/lib/supabase/session";
import { type Database } from '@/types/supabase';

// Tipus per a dades relacionades
type Quote = Database['public']['Tables']['quotes']['Row'];
type Opportunity = Database['public']['Tables']['opportunities']['Row'];
type Invoice = Database['public']['Tables']['invoices']['Row'];
type Activity = Database['public']['Tables']['activities']['Row'];

interface ContactDetailDataProps {
    params: { contactId: string };
}

export async function ContactDetailData({ params }: ContactDetailDataProps) {
    const { supabase, activeTeamId } = await validatePageSession();
    const contactId = params.contactId;

    const numericContactId = parseInt(contactId, 10);
    if (isNaN(numericContactId)) {
        notFound();
    }

    // ✅ Cridem a fetchContactDetail
    const contactData = await fetchContactDetail(numericContactId);

    if (!contactData) {
        notFound();
    }

    // Carreguem dades relacionades
    const [quotesRes, oppsRes, invoicesRes, activitiesRes] = await Promise.all([
        supabase.from('quotes').select('*').eq('contact_id', numericContactId).eq('team_id', activeTeamId).order('created_at', { ascending: false }),
        supabase.from('opportunities').select('*').eq('contact_id', numericContactId).eq('team_id', activeTeamId).order('created_at', { ascending: false }),
        supabase.from('invoices').select('*').eq('contact_id', numericContactId).eq('team_id', activeTeamId).order('created_at', { ascending: false }),
        supabase.from('activities').select('*').eq('contact_id', numericContactId).eq('team_id', activeTeamId).order('created_at', { ascending: false })
    ]);

    const relatedData = {
        quotes: (quotesRes.data as Quote[]) || [],
        opportunities: (oppsRes.data as Opportunity[]) || [],
        invoices: (invoicesRes.data as Invoice[]) || [],
        activities: (activitiesRes.data as Activity[]) || []
    };

    // ✅ Passem contactData (tipus ContactDetail) a initialContact
    return <ContactDetailClient initialContact={contactData} initialRelatedData={relatedData} />;
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_components/ContactDetailHeader.tsx ===================

"use client";

import { useSearchParams, useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { ArrowLeft, Edit, Save, Trash2, X, Loader2 } from 'lucide-react';
import { type Database } from '@/types/supabase';
// ✅ Importem els components d'AlertDialog
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
// Assumeixo que DeleteConfirmationDialog JA NO és necessari si fem servir AlertDialog directament aquí.
// import { DeleteConfirmationDialog } from './DeleteConfirmationDialog'; 

type Contact = Database['public']['Tables']['contacts']['Row'];

interface ContactDetailHeaderProps {
    contact: Contact;
    isEditing: boolean;
    isPending: boolean;
    onEdit: () => void;
    onCancel: () => void;
    onDelete: () => void; // Aquesta és la funció que s'executarà en confirmar
}

export function ContactDetailHeader({
    contact,
    isEditing,
    isPending,
    onEdit,
    onCancel,
    onDelete, // Rep la funció onDelete
}: ContactDetailHeaderProps) {
    const router = useRouter();
    const searchParams = useSearchParams(); 
    const fromUrl = searchParams.get('from');

    const handleBackOrCancel = () => {
        if (isEditing) {
            onCancel(); 
        } else if (fromUrl) {
            router.push(fromUrl);
        } else {
            router.push('/crm/contactes');
        }
    };

    return (
        <div className="flex items-center justify-between p-4 border-b bg-background sticky top-0 z-10">
            <div className="flex items-center gap-4">
                <Button
                    variant="outline"
                    size="icon"
                    onClick={handleBackOrCancel}
                    disabled={isPending}
                    aria-label={isEditing ? "Cancel·lar edició" : "Tornar"}
                >
                    {isEditing ? <X className="h-4 w-4" /> : <ArrowLeft className="h-4 w-4" />}
                </Button>
                <div>
                    <h1 className="text-2xl font-bold">{contact.nom}</h1>
                    <p className="text-sm text-muted-foreground">{contact.empresa || contact.email}</p>
                </div>
            </div>

            <div className="flex items-center gap-2">
                {isEditing ? (
                    <>
                        <Button type="submit" disabled={isPending}>
                            {isPending ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : <Save className="h-4 w-4 mr-2" />}
                            Desar
                        </Button>
                    </>
                ) : (
                    <>
                        <Button variant="outline" onClick={onEdit} disabled={isPending}>
                            <Edit className="h-4 w-4 mr-2" />
                            Editar
                        </Button>
                        
                        {/* ✅ SOLUCIÓ: Utilitzem AlertDialog directament */}
                        <AlertDialog>
                            <AlertDialogTrigger asChild>
                                <Button variant="destructive" size="icon" disabled={isPending}>
                                    <Trash2 className="h-4 w-4" />
                                </Button>
                            </AlertDialogTrigger>
                            <AlertDialogContent>
                                <AlertDialogHeader>
                                    <AlertDialogTitle>Estàs segur?</AlertDialogTitle>
                                    <AlertDialogDescription>
                                        Aquesta acció no es pot desfer. S'esborrarà permanentment el contacte 
                                        <span className="font-medium"> {contact.nom}</span>.
                                    </AlertDialogDescription>
                                </AlertDialogHeader>
                                <AlertDialogFooter>
                                    <AlertDialogCancel disabled={isPending}>Cancel·lar</AlertDialogCancel>
                                    {/* ✅ Passem la funció 'onDelete' a l'AlertDialogAction */}
                                    <AlertDialogAction 
                                        className="bg-destructive hover:bg-destructive/90"
                                        onClick={onDelete} // Aquí es crida la funció passada com a prop
                                        disabled={isPending}
                                    >
                                        {isPending ? <Loader2 className="h-4 w-4 animate-spin" /> : "Esborrar"}
                                    </AlertDialogAction>
                                </AlertDialogFooter>
                            </AlertDialogContent>
                        </AlertDialog>
                    </>
                )}
            </div>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_components/ContactDetailSkeleton.tsx ===================

"use client";



export function ContactDetailSkeleton() {
  return (
    <div className="space-y-8 animate-pulse">
      {/* Esquelet de la Capçalera */}
      <div>
        <div className="h-9 w-40 bg-gray-700/50 rounded-md mb-4"></div>
        <div className="flex items-center gap-6">
          <div className="w-20 h-20 bg-gray-700/50 rounded-full shrink-0"></div>
          <div>
            <div className="h-10 w-64 bg-gray-700/50 rounded-md"></div>
            <div className="h-6 w-48 bg-gray-700/50 rounded-md mt-2"></div>
          </div>
        </div>
      </div>

      {/* Esquelet de les Pestanyes */}
      <div className="glass-card p-2">
        <div className="flex border-b border-gray-700/50">
          {[...Array(5)].map((_, i) => (
            <div key={i} className="h-10 w-28 bg-gray-700/50 m-1 rounded-md"></div>
          ))}
        </div>
        <div className="p-8">
          <div className="h-8 w-56 bg-gray-700/50 rounded-md mb-6"></div>
          <div className="space-y-4">
            <div className="h-6 w-full bg-gray-700/50 rounded-md"></div>
            <div className="h-6 w-3/4 bg-gray-700/50 rounded-md"></div>
            <div className="h-6 w-5/6 bg-gray-700/50 rounded-md"></div>
          </div>
        </div>
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_components/ContactDetailTabs.tsx ===================

"use client";

import { useTranslations, useLocale } from 'next-intl';
import { ca, es, enUS } from 'date-fns/locale';
import { type Database } from '@/types/supabase';
import { CONTACT_STATUS_MAP } from '@/config/contacts';
// ✅ 1. Importem el tipus 'ContactDetail' des de la font original.
import { type ContactDetail } from '../actions';
import { Tabs, TabsContent, TabsList } from "@/components/ui/tabs";
import { Briefcase, FileText, Receipt, Activity as ActivityIcon, Edit } from 'lucide-react';

import { TabTriggerWithCount } from './shared/TabTriggerWithCount';
import { ActivitiesTab } from './tabs/ActivitiesTab';
import { RelatedDataTable } from './tabs/RelatedDataTable';
import { DetailsTab } from './tabs/DetailsTab';

// Definicions de tipus base (es queden igual)
type Quote = Database['public']['Tables']['quotes']['Row'];
type Opportunity = Database['public']['Tables']['opportunities']['Row'];
type Invoice = Database['public']['Tables']['invoices']['Row'];
type Activity = Database['public']['Tables']['activities']['Row'];

interface Props {
    // ✅ 2. Usem 'ContactDetail' directament. Això resol la discrepància.
    contact: ContactDetail;
    relatedData: { 
        quotes: Quote[]; 
        opportunities: Opportunity[]; 
        invoices: Invoice[]; 
        activities: Activity[]; 
    };
    isEditing: boolean;
}

export function ContactDetailTabs({ contact, relatedData, isEditing }: Props) {
    const t = useTranslations('ContactDetailPage');
    const locale = useLocale();
    const dateLocale = { ca, es, en: enUS }[locale] || ca;
    
    const getStatusLabel = (statusCode?: string | null) => {
        if (!statusCode) return t('details.noData');
        const status = CONTACT_STATUS_MAP.find(s => s.code === statusCode);
        return status ? t(`contactStatuses.${status.key}`) : statusCode;
    };

    return (
        <div className="glass-card p-4 md:p-6 mt-8">
            <Tabs defaultValue="activitats" className="w-full">
                <div className="overflow-x-auto -mx-4 px-4 pb-px">
                    <TabsList className="grid w-full sm:w-auto sm:grid-cols-5">
                        <TabTriggerWithCount value="activitats" icon={ActivityIcon} count={relatedData.activities.length} label={t('tabs.activities')} />
                        <TabTriggerWithCount value="oportunitats" icon={Briefcase} count={relatedData.opportunities.length} label={t('tabs.opportunities')} />
                        <TabTriggerWithCount value="pressupostos" icon={FileText} count={relatedData.quotes.length} label={t('tabs.quotes')} />
                        <TabTriggerWithCount value="factures" icon={Receipt} count={relatedData.invoices.length} label={t('tabs.invoices')} />
                        <TabTriggerWithCount value="detalls" icon={Edit} count={0} label={t('tabs.details')} />
                    </TabsList>
                </div>
                
                <TabsContent value="oportunitats" className="pt-6">
                    <h3 className="text-2xl font-bold mb-6">{t('opportunities.title')}</h3>
                    <RelatedDataTable data={relatedData.opportunities} columns={[{ key: 'name', label: t('opportunities.table.name') }, { key: 'stage', label: t('opportunities.table.status') }, { key: 'value', label: t('opportunities.table.value') }]} linkPath="/crm/pipeline" emptyMessage={t('opportunities.empty')} />
                </TabsContent>
                
                {/* ... la resta de TabsContent es queden igual ... */}
                <TabsContent value="activitats" className="pt-6">
                    <h3 className="text-2xl font-bold mb-6">{t('activities.title')}</h3>
                    <ActivitiesTab activities={relatedData.activities} dateLocale={dateLocale} emptyMessage={t('activities.empty')}/>
                </TabsContent>

                <TabsContent value="pressupostos" className="pt-6">
                    <h3 className="text-2xl font-bold mb-6">{t('quotes.title')}</h3>
                    <RelatedDataTable data={relatedData.quotes} columns={[{ key: 'quote_number', label: t('quotes.table.number') }, { key: 'status', label: t('quotes.table.status') }, { key: 'total_amount', label: t('quotes.table.total') }]} linkPath="/crm/quotes" emptyMessage={t('quotes.empty')} />
                </TabsContent>

                <TabsContent value="factures" className="pt-6">
                    <h3 className="text-2xl font-bold mb-6">{t('invoices.title')}</h3>
                    <RelatedDataTable data={relatedData.invoices} columns={[{ key: 'invoice_number', label: t('invoices.table.number') }, { key: 'status', label: t('invoices.table.status') }, { key: 'total_amount', label: t('invoices.table.total') }]} emptyMessage={t('invoices.empty')} />
                </TabsContent>

                <TabsContent value="detalls" className="pt-6">
                    {/* Ara 'contact' és del tipus correcte ('ContactDetail') que DetailsTab espera. */}
                    <DetailsTab contact={contact} isEditing={isEditing} dateLocale={dateLocale} getStatusLabel={getStatusLabel} />
                </TabsContent>
            </Tabs>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_components/DeleteConfirmationDialog.tsx ===================

// @/app/[locale]/(app)/crm/contactes/[id]/_components/DeleteConfirmationDialog.tsx
import React from 'react';
import { Button } from '@/components/ui/button';
import {
    DialogContent,
    DialogHeader,
    DialogTitle,
    DialogDescription,
    DialogFooter,
    DialogClose, // Utilitzem DialogClose per al botó de cancel·lar
} from "@/components/ui/dialog";
import { Loader2, Trash } from 'lucide-react';
import { useTranslations } from 'next-intl';

interface Props {
    onConfirm: () => void;
    isPending: boolean;
}

export function DeleteConfirmationDialog({ onConfirm, isPending }: Props) {
    const t = useTranslations('ContactDetailPage');
    return (
        <DialogContent className="sm:max-w-lg">
            <DialogHeader className="space-y-4 text-center">
                <Trash className="w-12 h-12 mx-auto text-red-600" />
                <DialogTitle className="text-2xl font-bold text-red-600">{t('deleteDialog.title')}</DialogTitle>
                <DialogDescription className="text-base text-muted-foreground">
                    {t('deleteDialog.description1')} <span className="font-semibold text-red-600">{t('deleteDialog.irreversible')}</span>. {t('deleteDialog.description2')}
                </DialogDescription>
            </DialogHeader>
            <DialogFooter className="flex justify-end gap-3">
                <DialogClose asChild>
                    <Button variant="outline">{t('buttons.cancel')}</Button>
                </DialogClose>
                <Button variant="destructive" onClick={onConfirm} disabled={isPending}>
                    {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                    {t('buttons.confirmDelete')}
                </Button>
            </DialogFooter>
        </DialogContent>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_components/EditableField.tsx ===================

// @/app/[locale]/(app)/crm/contactes/[id]/_components/EditableField.tsx
import React from 'react';
import { Label } from '@/components/ui/label';

interface EditableFieldProps {
    label: string;
    isEditing: boolean;
    viewValue: React.ReactNode;
    editComponent: React.ReactNode;
    className?: string;
}

/**
 * Component per mostrar un camp que pot ser visualitzat o editat.
 * Encapsula la lògica de renderitzar un <p> o un component d'edició (<Input>, <Select>, etc.)
 */
export const EditableField: React.FC<EditableFieldProps> = ({ label, isEditing, viewValue, editComponent, className }) => {
    return (
        <div className={`space-y-2 ${className}`}>
            <Label>{label}</Label>
            {isEditing ? (
                editComponent
            ) : (
                <p className="text-lg pt-2 min-h-[42px] flex items-center text-foreground">
                    {viewValue}
                </p>
            )}
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_components/shared/TabTriggerWithCount.tsx ===================

import { FC, ElementType } from 'react';
import { TabsTrigger } from "@/components/ui/tabs";

interface Props { value: string; icon: ElementType; count: number; label: string; }

export const TabTriggerWithCount: FC<Props> = ({ value, icon: Icon, count, label }) => (
    <TabsTrigger value={value} className="flex items-center gap-2 text-sm px-4">
        <Icon className="w-4 h-4" />
        <span className="font-semibold">{label}</span>
        {count > 0 && <span className="ml-1 px-2 py-0.5 text-xs font-bold rounded-full bg-primary/20 text-primary">{count}</span>}
    </TabsTrigger>
);

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_components/tabs/ActivitiesTab.tsx ===================

// /app/[locale]/(app)/crm/contactes/[contactId]/_components/tabs/ActivitiesTab.tsx (Refactoritzat)

import { FC } from 'react';
import { format } from 'date-fns';
import { type Locale } from 'date-fns';
import { EmptyState } from '@/components/shared/EmptyState';
// ✅ 1. Importem la definició de la base de dades.
import { type Database } from '@/types/supabase';

// ✅ 2. Definim el tipus 'Activity' a partir de la taula corresponent.
type Activity = Database['public']['Tables']['activities']['Row'];

interface Props {
    activities: Activity[];
    dateLocale: Locale;
    emptyMessage: string;
}

export const ActivitiesTab: FC<Props> = ({ activities, dateLocale, emptyMessage }) => {
    if (activities.length === 0) return <EmptyState message={emptyMessage} />;

    return (
        <div className="space-y-4">
            {activities.map(act => (
                <div key={act.id} className="p-4 rounded-lg bg-background/50 border">
                    <div className="flex justify-between items-center text-sm mb-2">
                        <span className="font-bold text-primary">{act.type}</span>
                        {/* ✅ 3. Afegim una comprovació per si 'created_at' és nul. */}
                        <span className="text-muted-foreground">
                            {act.created_at ? format(new Date(act.created_at), "d MMMM yyyy, HH:mm", { locale: dateLocale }) : ''}
                        </span>
                    </div>
                    <p className="text-foreground italic">"{act.content}"</p>
                </div>
            ))}
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_components/tabs/DetailsTab.tsx ===================

// /app/[locale]/(app)/crm/contactes/[contactId]/_components/tabs/DetailsTab.tsx (Refactoritzat)

import { FC } from 'react';
// ✅ 1. Importem el tipus directament de la definició de la BD.
import { GeneralInfoSection } from './GeneralInfoSection';
import { PersonalInfoSection } from './PersonalInfoSection';
import { NotesSection } from './NotesSection';
import { Locale } from 'date-fns'; // Corregit l'import des de date-fns
import { type ContactDetail } from '../../actions'; // Importem el tipus correcte

// ✅ 2. Definim el tipus per a la fila de la taula 'contacts'.
interface Props {
    contact: ContactDetail;
    isEditing: boolean;
    dateLocale: Locale;
    getStatusLabel: (code?: string | null) => string; // Permetem que el codi sigui null
}


export const DetailsTab: FC<Props> = ({ contact, isEditing, dateLocale, getStatusLabel }) => {
    return (
        <div className="space-y-12">
            <GeneralInfoSection 
                contact={contact} 
                isEditing={isEditing} 
                getStatusLabel={getStatusLabel} 
            />
            <PersonalInfoSection 
                contact={contact} 
                isEditing={isEditing} 
                dateLocale={dateLocale} 
            />
            <NotesSection 
                contact={contact} 
                isEditing={isEditing} 
            />
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_components/tabs/GeneralInfoSection.tsx ===================

import { FC } from 'react';
import { EditableField } from '../EditableField';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useTranslations } from 'next-intl';
import Link from 'next/link';

// ✅ 1. Importem el nou tipus de dades des de la nostra action
import { type ContactDetail } from '../../actions';
import { CONTACT_STATUS_MAP } from '@/config/contacts';

// ✅ 2. Importem el Combobox compartit
import { SupplierCombobox } from '@/components/shared/SupplierCombobox';

interface Props {
    // ✅ 3. El 'contact' ara és del tipus 'ContactDetail'
    contact: ContactDetail;
    isEditing: boolean;
    getStatusLabel: (code?: string | null) => string;
}

export const GeneralInfoSection: FC<Props> = ({ contact, isEditing, getStatusLabel }) => {
    const t = useTranslations('ContactDetailPage');
    return (
        <div>
            <h3 className="text-2xl font-bold mb-6">{t('details.generalInfo')}</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-x-8 gap-y-6">

                <EditableField label={t('details.labels.email')} isEditing={isEditing} viewValue={contact.email || t('details.noData')} editComponent={<Input name="email" type="email" defaultValue={contact.email || ''} />} />

                <EditableField label={t('details.labels.phone')} isEditing={isEditing} viewValue={contact.telefon || t('details.noData')} editComponent={<Input name="telefon" defaultValue={contact.telefon || ''} />} />

                <EditableField label={t('details.labels.status')} isEditing={isEditing} viewValue={getStatusLabel(contact.estat)} editComponent={
                    <Select name="estat" defaultValue={contact.estat || undefined}>
                        <SelectTrigger><SelectValue /></SelectTrigger>
                        <SelectContent>{CONTACT_STATUS_MAP.map(s => <SelectItem key={s.code} value={s.code}>{t(`contactStatuses.${s.key}`)}</SelectItem>)}</SelectContent>
                    </Select>
                } />

                <EditableField label={t('details.labels.jobTitle')} isEditing={isEditing} viewValue={contact.job_title || t('details.noData')} editComponent={<Input name="job_title" defaultValue={contact.job_title || ''} />} />

                {/* --- AQUEST ÉS EL CANVI PRINCIPAL --- */}
                {/* Afegeix un nou EditableField per a l'empresa */}
                <EditableField
                    label={t('details.labels.company')} // Assegura't de tenir aquesta traducció
                    isEditing={isEditing}

                    // ✅ 4. Mode Vista: Mostrem el nom del proveïdor (si existeix)
                    // ✅ Mode Vista: Ara és un enllaç!
                    viewValue={
                        contact.suppliers ? (
                            <Link
                                href={`/finances/suppliers/${contact.suppliers.id}`}
                                className="font-medium text-blue-600 hover:underline"
                            >
                                {contact.suppliers.nom}
                            </Link>
                        ) : t('details.noData')
                    }
                    // ✅ 5. Mode Edició: Mostrem el Combobox adaptat
                    editComponent={
                        <SupplierCombobox
                            // 'name' és crucial per al FormData
                            name="supplier_id"
                            // 'defaultValue' és l'ID del proveïdor
                            defaultValue={contact.suppliers ? contact.suppliers.id : undefined}
                            // 'initialSupplier' és l'objecte per mostrar el nom per defecte
                            initialSupplier={contact.suppliers ? { id: contact.suppliers.id, nom: contact.suppliers.nom } : null}
                        />
                    }
                />
                {/* --- FI DEL CANVI --- */}

                <EditableField label={t('details.labels.industry')} isEditing={isEditing} viewValue={contact.industry || t('details.noData')} editComponent={<Input name="industry" defaultValue={contact.industry || ''} />} />

                <EditableField label={t('details.labels.leadSource')} isEditing={isEditing} viewValue={contact.lead_source || t('details.noData')} editComponent={<Input name="lead_source" defaultValue={contact.lead_source || ''} />} />

            </div>
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_components/tabs/NotesSection.tsx ===================

// /app/[locale]/(app)/crm/contactes/[contactId]/_components/tabs/NotesSection.tsx (Refactoritzat)

import { FC } from 'react';
import { useTranslations } from 'next-intl';
import { Textarea } from '@/components/ui/textarea';
// ✅ 1. Importem el tipus de la base de dades.
import { type Database } from '@/types/supabase';

// ✅ 2. Definim el tipus 'Contact' a partir de la fila de la taula.
type Contact = Database['public']['Tables']['contacts']['Row'];

interface Props {
    contact: Contact;
    isEditing: boolean;
}

export const NotesSection: FC<Props> = ({ contact, isEditing }) => {
    const t = useTranslations('ContactDetailPage');

    return (
        <div>
            <h3 className="text-2xl font-bold mb-6">{t('details.notes')}</h3>
            {isEditing ? (
                <Textarea name="notes" defaultValue={contact.notes || ''} rows={6} />
            ) : (
                <p className="text-base text-muted-foreground whitespace-pre-wrap min-h-[120px]">
                    {contact.notes || t('details.noNotes')}
                </p>
            )}
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_components/tabs/PersonalInfoSection.tsx ===================

// /app/[locale]/(app)/crm/contactes/[contactId]/_components/tabs/PersonalInfoSection.tsx (Refactoritzat)

import { FC } from 'react';
import { format } from 'date-fns';
import { type Locale } from 'date-fns';
import { useTranslations } from 'next-intl';
import { EditableField } from '../EditableField';
import { Input } from '@/components/ui/input';
// ✅ 1. Importem el tipus 'Database' i 'Json' per als camps JSONB.
import { type Database, type Json } from '@/types/supabase';

// ✅ 2. Definim el tipus 'Contact' a partir de la fila de la taula.
type Contact = Database['public']['Tables']['contacts']['Row'];

interface Props {
    contact: Contact;
    isEditing: boolean;
    dateLocale: Locale;
}

export const PersonalInfoSection: FC<Props> = ({ contact, isEditing, dateLocale }) => {
    const t = useTranslations('ContactDetailPage');

    const formattedBirthday = contact.birthday 
        ? format(new Date(contact.birthday), 'dd/MM/yyyy', { locale: dateLocale }) 
        : t('details.noData');

    // ✅ 3. Definim funcions segures per a accedir a les dades dels camps JSONB.
    const getAddressCity = (address: Json) => (address as { city?: string })?.city || '';
    const getSocialMediaLinkedin = (social: Json) => (social as { linkedin?: string })?.linkedin || '';
    const hobbiesString = Array.isArray(contact.hobbies) ? contact.hobbies.join(', ') : '';

    return (
        <div>
            <h3 className="text-2xl font-bold mb-6">{t('details.personalInfo')}</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-x-8 gap-y-6">
                <EditableField
                    label={t('details.labels.birthday')}
                    isEditing={isEditing}
                    viewValue={formattedBirthday}
                    editComponent={<Input type="date" name="birthday" defaultValue={contact.birthday || ''} />}
                />
                <EditableField
                    label={t('details.labels.city')}
                    isEditing={isEditing}
                    viewValue={getAddressCity(contact.address) || t('details.noData')}
                    editComponent={<Input name="address.city" defaultValue={getAddressCity(contact.address)} />}
                />
                <EditableField
                    label={t('details.labels.linkedin')}
                    isEditing={isEditing}
                    viewValue={getSocialMediaLinkedin(contact.social_media) || t('details.noData')}
                    editComponent={<Input name="social_media.linkedin" defaultValue={getSocialMediaLinkedin(contact.social_media)} />}
                />
                <EditableField
                    label={t('details.labels.children')}
                    isEditing={isEditing}
                    viewValue={contact.children_count ?? t('details.noData')}
                    editComponent={<Input type="number" name="children_count" defaultValue={contact.children_count ?? ''} />}
                />
                <EditableField
                    label={t('details.labels.partnerName')}
                    isEditing={isEditing}
                    viewValue={contact.partner_name || t('details.noData')}
                    editComponent={<Input name="partner_name" defaultValue={contact.partner_name || ''} />}
                />
                <EditableField
                    label={t('details.labels.hobbies')}
                    isEditing={isEditing}
                    viewValue={hobbiesString || t('details.noData')}
                    editComponent={<Input name="hobbies" defaultValue={hobbiesString} />}
                />
            </div>
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_components/tabs/RelatedDataTable.tsx ===================

// /app/[locale]/(app)/crm/contactes/[contactId]/_components/tabs/RelatedDataTable.tsx (Refactoritzat)

import Link from 'next/link';
import { FC } from 'react';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { StatusBadge } from '@/components/shared/StatusBadge';
import { EmptyState } from '@/components/shared/EmptyState';

// ✅ 1. Ajustem el tipus 'id' per a acceptar 'number' a més de 'string'.
type DataItem = { 
    id: string | number; 
    status?: string | null; 
    stage_name?: string | null; 
    total?: number | null; 
    value?: number | null; 
    name?: string | null; 
    quote_number?: string | null; 
    invoice_number?: string | null; 
};

interface Column { 
    key: string; 
    label: string; 
}

interface Props { 
    data: DataItem[]; 
    columns: Column[]; 
    linkPath?: string; 
    emptyMessage: string; 
}

export const RelatedDataTable: FC<Props> = ({ data, columns, linkPath, emptyMessage }) => {
    if (data.length === 0) return <EmptyState message={emptyMessage} />;

    return (
        <Table>
            <TableHeader><TableRow>{columns.map(col => <TableHead key={col.key} className={col.key === 'total' ? 'text-right' : ''}>{col.label}</TableHead>)}</TableRow></TableHeader>
            <TableBody>
                {data.map((item) => (
                    <TableRow key={item.id}>
                        <TableCell className="font-medium">
                            {linkPath ? <Link href={`${linkPath}/${item.id}`} className="text-primary hover:underline">{item.name || item.quote_number || item.invoice_number}</Link> : item.name || item.invoice_number}
                        </TableCell>
                        <TableCell><StatusBadge status={item.status || item.stage_name} /></TableCell>
                        <TableCell className="text-right font-semibold">€{((item.total || item.value) || 0).toLocaleString('ca-ES')}</TableCell>
                    </TableRow>
                ))}
            </TableBody>
        </Table>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_hooks/useContactDetail.ts ===================

"use client";

import { useState, useTransition, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
// ✅ 1. Importem el tipus 'ContactDetail' a més de l'acció
import { updateContactAction, deleteContactAction, type ContactDetail } from '../actions';
import { type useTranslations } from 'next-intl';

type TFunction = ReturnType<typeof useTranslations<string>>;

/**
 * Hook per gestionar la lògica de la pàgina de detall d'un contacte.
 */
// ✅ 2. Canviem el tipus del paràmetre d'entrada a 'ContactDetail'.
export function useContactDetail(initialContact: ContactDetail, t: TFunction) {
    const router = useRouter();
    const [isPending, startTransition] = useTransition();
    const [isEditing, setIsEditing] = useState(false);
    
    // ✅ 3. Assegurem que l'estat intern també sigui del tipus 'ContactDetail'.
    const [contact, setContact] = useState<ContactDetail>(initialContact);
    const formRef = useRef<HTMLFormElement>(null);

    const handleSaveChanges = (formData: FormData) => {
        startTransition(async () => {
            const { data, error } = await updateContactAction(contact.id, formData);
            if (error) {
                toast.error(t('toast.errorTitle'), { description: error.message });
            } else if (data) {
                toast.success(t('toast.successTitle'), { description: t('toast.updateSuccess') });

                // ✅ 4. L'actualització de l'estat ara és segura.
                // 'data' ja és del tipus 'ContactDetail', així que no cal fer 'as'.
                setContact(data);
                
                setIsEditing(false);
            }
        });
    };

    const handleDelete = () => {
        startTransition(async () => {
            const res = await deleteContactAction(contact.id);
            if (!res.success) {
                toast.error(t('toast.errorTitle'), { description: res.message });
            } else {
                toast.success(t('toast.successTitle'), { description: t('toast.deleteSuccess') });
                router.push('/crm/contactes');
                router.refresh(); 
            }
        });
    };

    const handleCancelEdit = () => {
        // ✅ 5. En cancel·lar, resetejem l'estat amb les dades inicials completes.
        setContact(initialContact);
        setIsEditing(false);
        formRef.current?.reset();
    };

    return {
        contact,
        isEditing,
        isPending,
        formRef,
        handleSaveChanges,
        handleDelete,
        handleCancelEdit,
        setIsEditing,
    };
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/_components/ContactCard.tsx ===================

"use client";

import React from 'react';
// Framer Motion per a animacions fluides.
import { motion } from 'framer-motion';
// Icones de Lucide React.
import { User, Building, Mail, Phone} from 'lucide-react';
// Hook de traduccions.
import { useTranslations } from 'next-intl';

// 👇 PAS 1: Importem la definició de la nostra base de dades
import { type Database } from '@/types/supabase';
// 👇 PAS 2: Importem la constant des de la seva nova llar a /config
import { CONTACT_STATUS_MAP } from '@/config/contacts';

// 👇 PAS 3: Definim el tipus 'Contact' a partir de l'esquema de la base de dades
type Contact = Database['public']['Tables']['contacts']['Row'];

// Definim les propietats (props) que el nostre component espera rebre.
interface ContactCardProps {
    contact: Contact; // L'objecte amb totes les dades d'un contacte.
    onClick: () => void; // Una funció que s'executarà quan es faci clic a la targeta.
}

/**
 * @summary Aquest és un component presentacional reutilitzable i internacionalitzat.
 * La seva única responsabilitat és mostrar les dades d'un contacte en un format de targeta visual.
 * Rep tota la lògica i les dades del seu component pare.
 */
const ContactCard: React.FC<ContactCardProps> = ({ contact, onClick }) => {
    // Inicialitzem el hook de traduccions.
    const t = useTranslations('ContactsClient');

    /**
     * @summary Funció interna per obtenir el text traduït de l'estat a partir del seu codi.
     * @param statusCode El codi de l'estat (ex: 'L', 'P', 'C').
     * @returns El text complet i traduït (ex: "Lead", "Cliente", "Proveedor").
     */
    const getStatusLabel = (statusCode?: string | null) => {
        if (!statusCode) return ''; // Si no hi ha estat, no retornem res.
        const statusObject = CONTACT_STATUS_MAP.find(s => s.code === statusCode);
        // Si el trobem, utilitzem la seva 'key' per obtenir la traducció.
        // Si no, retornem el codi original com a fallback.
        return statusObject ? t(`contactStatuses.${statusObject.key}`) : statusCode;
    };

    return (
        // Utilitzem 'motion.div' de Framer Motion per a animacions.
        <motion.div
            layoutId={`contact-card-${contact.id}`}
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.9 }}
            onClick={onClick}
            className="group glass-effect p-6 rounded-xl hover:border-primary/50 border border-transparent transition-all cursor-pointer flex flex-col justify-between h-full"
        >
            <div className="min-w-0">
                <div className="flex items-start justify-between mb-4">
                    <div className="flex items-center gap-4 min-w-0">
                        <div className="w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center shrink-0">
                            <User className="w-6 h-6 text-white" />
                        </div>
                        <div className="min-w-0">
                            {/* 📛 Nom — Corregit a 'contact.name' per coincidir amb la base de dades */}
                            <h3
                                className="font-bold text-lg text-foreground truncate max-w-[200px] group-hover:max-w-[500px] group-hover:whitespace-normal transition-all duration-300"
                            >
                                {contact.nom} 
                            </h3>
                            {/* Empresa — Corregit a 'contact.company' */}
                            <p className="text-sm text-muted-foreground flex items-center gap-1.5 truncate max-w-[200px]">
                                <Building className="w-4 h-4 shrink-0" />
                                <span className="truncate">{contact.empresa || t('noCompany')}</span>
                            </p>
                        </div>
                    </div>
                    {/* 🏷 Estat — Corregit a 'contact.status' */}
                    <span
                        className={`status-badge status-${contact.estat?.toLowerCase()} shrink-0 transition-transform duration-300 group-hover:scale-75 group-hover:opacity-80`}
                    >
                        {getStatusLabel(contact.estat)}
                    </span>
                </div>

                {/* Info de contacte */}
                <div className="space-y-2 text-sm min-w-0">
                    <p className="flex items-center gap-2 text-muted-foreground truncate max-w-[250px]">
                        <Mail className="w-4 h-4 text-primary/70 shrink-0" />
                        <span className="truncate">{contact.email}</span>
                    </p>
                    <p className="flex items-center gap-2 text-muted-foreground truncate max-w-[200px]">
                        <Phone className="w-4 h-4 text-primary/70 shrink-0" />
                        {/* Corregit a 'contact.phone' */}
                        <span className="truncate">{contact.telefon || t('notSpecified')}</span>
                    </p>
                </div>
            </div>
        </motion.div>
    );
}

export default ContactCard;

// =================== FILE: src/app/[locale]/(app)/crm/contactes/_components/ContactDialog.tsx ===================

"use client";

import React, { useState, useEffect, useTransition } from 'react';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger, DialogFooter, DialogClose } from "@/components/ui/dialog";
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Loader2 } from 'lucide-react';
import { createContactAction } from '../actions';
import { toast } from 'sonner';
import { useTranslations } from 'next-intl';
//import { CONTACT_STATUS_MAP } from '@/types/crm';

import { CONTACT_STATUS_MAP } from '@/config/contacts';


// Props que el nostre diàleg acceptarà
interface ContactDialogProps {
    trigger: React.ReactNode; // El botó o element que obrirà el diàleg
    initialData?: {          // Dades opcionals per a pre-omplir el formulari
        nom?: string | null;
        email?: string | null;
    };
    onContactSaved?: (newContact: unknown) => void; // Funció que s'executa quan es desa
}

export function ContactDialog({ trigger, initialData, onContactSaved }: ContactDialogProps) {
    const t = useTranslations('ContactsClient');
    const [isOpen, setIsOpen] = useState(false);
    const [isPending, startTransition] = useTransition();
    const formRef = React.useRef<HTMLFormElement>(null);

    // Reseteja el formulari cada vegada que s'obre per a asegurar dades fresques
    useEffect(() => {
        if (isOpen) {
            formRef.current?.reset();
        }
    }, [isOpen]);

    const handleFormAction = (formData: FormData) => {
        startTransition(async () => {
            const result = await createContactAction(formData);
            if (result.error) {
                toast.error(t('toastErrorTitle'), { description: result.error.message });
            } else if (result.data) {
                toast.success(t('toastSuccessTitle'), { description: t('toastSuccessDescription') });
                setIsOpen(false);
                onContactSaved?.(result.data); // Cridem el callback amb el nou contacte
            }
        });
    };

    return (
        <Dialog open={isOpen} onOpenChange={setIsOpen}>
            <DialogTrigger asChild>{trigger}</DialogTrigger>
            <DialogContent>
                <DialogHeader>
                    <DialogTitle>{t('dialogTitle')}</DialogTitle>
                    <DialogDescription>{t('dialogDescription')}</DialogDescription>
                </DialogHeader>
                <form ref={formRef} action={handleFormAction} className="space-y-4 pt-4">
                    <Input name="nom" placeholder={t('namePlaceholder')} required defaultValue={initialData?.nom ?? ''} />
                    <Input name="empresa" placeholder={t('companyPlaceholder')} />
                    <Input name="email" type="email" placeholder={t('emailPlaceholder')} required defaultValue={initialData?.email ?? ''} />
                    <Input name="telefon" placeholder={t('phonePlaceholder')} />
                    <Input name="valor" type="number" placeholder={t('valuePlaceholder')} defaultValue={0} />
                    <Select name="estat" defaultValue="Lead">
                        <SelectTrigger><SelectValue /></SelectTrigger>
                        <SelectContent>
                            {CONTACT_STATUS_MAP.map(status => (
                                <SelectItem key={status.code} value={status.code}>
                                    {t(`contactStatuses.${status.key}`)}
                                </SelectItem>
                            ))}
                        </SelectContent>
                    </Select>
                    <DialogFooter>
                        <DialogClose asChild><Button type="button" variant="ghost">{t('cancelButton')}</Button></DialogClose>
                        <Button type="submit" disabled={isPending}>
                            {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                            {t('saveButton')}
                        </Button>
                    </DialogFooter>
                </form>
            </DialogContent>
        </Dialog>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/_components/contacts-client.tsx ===================

// @/app/[locale]/(app)/crm/contactes/_components/ContactsClient.tsx (Versió Refactoritzada)
"use client";

import React, { useState, useMemo, useTransition } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { motion, AnimatePresence } from 'framer-motion';
import { useTranslations } from 'next-intl';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Plus, Search, LayoutGrid, List, FilePlus2, Upload, Download } from 'lucide-react';
import { toast } from 'sonner';

// ✅ 1. Importem el nou tipus des del seu origen i la definició de la BD.
import { Database } from '@/types/supabase';
import { type ContactWithOpportunities } from './ContactsData';
// ✅ 2. El mapa d'estats s'importa de /config, la qual cosa és correcta.
import { CONTACT_STATUS_MAP } from '@/config/contacts';

import { useContactFilters } from '../_hooks/useContactFilters';

import { ContactDialog } from './ContactDialog';
import ContactCard from './ContactCard';
import ContactTable from './ContactTable';
import ExcelDropdownButton, { DropdownOption } from '@/app/[locale]/(app)/excel/ExcelDropdownButton';
import { exportToExcel,importFromExcel } from '@/app/[locale]/(app)/excel/actions';

// Definim el tipus base per a un contacte nou, que no tindrà la relació 'opportunities'
type Contact = Database['public']['Tables']['contacts']['Row'];

interface ContactsClientProps {
    // ✅ 3. Actualitzem la prop per a utilitzar el nou tipus enriquit.
    initialContacts: ContactWithOpportunities[];
    totalPages: number;
    currentPage: number;
    initialViewMode: 'cards' | 'list';
}

export function ContactsClient({
    initialContacts,
    totalPages,
    currentPage,
    initialViewMode
}: ContactsClientProps) {
    const t = useTranslations('ContactsClient');
    const t2 = useTranslations('excel');
    const router = useRouter();
    const searchParams = useSearchParams();
    const [isExporting, startTransition] = useTransition(); 

    const { sortBy, statusFilter, viewMode, handleFilterChange } = useContactFilters(initialViewMode);

    // ✅ 4. L'estat ara és del tipus correcte.
    const [contacts, setContacts] = useState<ContactWithOpportunities[]>(initialContacts);
    const [searchTerm, setSearchTerm] = useState(searchParams.get('q') || '');

    // Aquesta lògica continua funcionant sense canvis, ja que les propietats són les mateixes.
    const filteredContacts = useMemo(() => contacts.filter(c =>
        (c.nom?.toLowerCase() || '').includes(searchTerm.toLowerCase()) ||
        (c.empresa?.toLowerCase() || '').includes(searchTerm.toLowerCase()) ||
        (c.email?.toLowerCase() || '').includes(searchTerm.toLowerCase())
    ), [contacts, searchTerm]);

    const handleContactClick = (contact: ContactWithOpportunities) => {
        // 'contact.id' és un number, que és vàlid per a les URLs.
        router.push(`/crm/contactes/${contact.id}`);
    };

    const excelOptions: DropdownOption[] = [
        { value: 'create', label: t2('contacts.create'), icon: FilePlus2 },
        { value: 'load', label: t2('contacts.load'), icon: Upload },
        { value: 'download', label: t2('contacts.download'), icon: Download },
    ];

    async function handleExportAndDownload(shouldDownload: boolean) {
        toast.info(t2('contacts.startingexport'));
        try {
            const result = await exportToExcel('contacts', shouldDownload);

            if (result.success && result.fileBuffer) {
                const byteCharacters = atob(result.fileBuffer);
                const byteNumbers = new Array(byteCharacters.length);
                for (let i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                const byteArray = new Uint8Array(byteNumbers);
                const blob = new Blob([byteArray], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });

                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = result.fileName || 'export.xlsx';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);

                toast.success(t2('successexport'));
            } else {
                toast.error(t2('errorexport'), { description: result.message });
            }
        } catch (error) {
            toast.error(t2('unexpectederror'), { description: (error as Error).message });
            console.error(error);
        }
    }

    function handleImport() {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.xlsx, .xls';

        input.onchange = async (e) => {
            const file = (e.target as HTMLInputElement).files?.[0];
            if (!file) {

            toast.error(t2('nofileselected'));
                return;
            }

            toast.info(t2('processingfile'));

            const formData = new FormData();
            formData.append('file', file);

            startTransition(async () => {
                try {
                    const result = await importFromExcel('contacts', formData);

                    if (result.success) {
                        toast.success(result.message);
                    } else {
                        toast.error(t2('errorloadingdata'), { description: result.message });
                    }
                } catch (error) {
                    toast.error(t2('unexpectederrorloadingfile'), { description: (error as Error).message });
                }
            });
        };

        input.click();
    }

    const handleExcelAction = (option: DropdownOption) => {
        switch (option.value) {
            case 'download':
                startTransition(() => handleExportAndDownload(true));
                break;
            case 'create':
                startTransition(() => handleExportAndDownload(false));
                break;
            case 'load':
                handleImport();
                break;
            default:
                break;
        }
    };

    return (
        <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} className="h-full flex flex-col">
            {/* CAPÇALERA */}
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6">
                <h1 className="text-3xl font-bold">{t('title')}</h1>
                <div className="flex w-full sm:w-auto items-center gap-2">
                    {/* Cercador */}
                    <div className="relative flex-grow">
                        <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground" />
                        <Input placeholder={t('searchPlaceholder')} className="pl-9" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} />
                    </div>

                    <Select value={sortBy} onValueChange={(value) => handleFilterChange('sort', value)}>
                        <SelectTrigger className="w-[180px]"><SelectValue placeholder={t('filters.sortBy')} /></SelectTrigger>
                        <SelectContent>
                            <SelectItem value="newest">{t('filters.newest')}</SelectItem>
                            <SelectItem value="oldest">{t('filters.oldest')}</SelectItem>
                        </SelectContent>
                    </Select>

                    <Select value={statusFilter} onValueChange={(value) => handleFilterChange('status', value)}>
                        <SelectTrigger className="w-[180px]"><SelectValue placeholder={t('filters.status')} /></SelectTrigger>
                        <SelectContent>
                            <SelectItem value="all">{t('filters.allStatuses')}</SelectItem>
                            {CONTACT_STATUS_MAP.map(status => (
                                <SelectItem key={status.code} value={status.code}>
                                    {t(`contactStatuses.${status.key}`)}
                                </SelectItem>
                            ))}
                        </SelectContent>
                    </Select>

                    {/* Botons de vista */}
                    <div className="flex items-center gap-1 p-1 bg-muted rounded-lg">
                        <Button variant={viewMode === 'cards' ? 'secondary' : 'ghost'} size="icon" onClick={() => handleFilterChange('view', 'cards')}>
                            <LayoutGrid className="w-4 h-4" />
                        </Button>
                        <Button variant={viewMode === 'list' ? 'secondary' : 'ghost'} size="icon" onClick={() => handleFilterChange('view', 'list')}>
                            <List className="w-4 h-4" />
                        </Button>
                    </div>

                    <ExcelDropdownButton
                        options={excelOptions}
                        onSelect={handleExcelAction}
                        disabled={isExporting}
                    />

                    <ContactDialog
                        trigger={
                            <Button className="flex-shrink-0">
                                <Plus className="w-4 h-4 md:mr-2" />
                                <span className="hidden md:inline">{t('newContactButton')}</span>
                            </Button>
                        }
                        // ✅ 5. Quan guardem un contacte nou, el convertim al tipus enriquit
                        // per a què coincideixi amb la resta de l'estat.
                        onContactSaved={(newContact) => setContacts(prev => [
                            { ...(newContact as Contact), opportunities: [] }, 
                            ...prev
                        ])}
                    />
                </div>
            </div>

            {/* LLISTA DE CONTACTES */}
            <div className="flex-1 overflow-y-auto -mr-4 pr-4">
                <AnimatePresence mode="wait">
                    <motion.div key={viewMode} initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }}>
                        {filteredContacts.length > 0 ? (
                            viewMode === 'cards' ? (
                                <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4 gap-6">
                                    {filteredContacts.map(contact => (
                                        <ContactCard key={contact.id} contact={contact} onClick={() => handleContactClick(contact)} />
                                    ))}
                                </div>
                            ) : (<ContactTable contacts={filteredContacts} onRowClick={handleContactClick} />)
                        ) : (<div className="text-center py-16"><p>{t('noContactsFound')}</p></div>)}
                    </motion.div>
                </AnimatePresence>
            </div>
            {/* PAGINACIÓ */}
            {totalPages > 1 && (
                <div className="flex justify-center items-center gap-2 md:gap-4 mt-8 flex-shrink-0">
                    <Button asChild disabled={currentPage <= 1} size="sm" className="px-3">
                        <Link href={`/crm/contactes?page=${currentPage - 1}`}>
                            <span className="hidden md:inline">{t('pagination.previous')}</span>
                            <span className="md:hidden">←</span>
                        </Link>
                    </Button>
                    <span className="text-sm text-muted-foreground">
                        {t('pagination.page', { currentPage, totalPages })}
                    </span>
                    <Button asChild disabled={currentPage >= totalPages} size="sm" className="px-3">
                        <Link href={`/crm/contactes?page=${currentPage + 1}`}>
                            <span className="hidden md:inline">{t('pagination.next')}</span>
                            <span className="md:hidden">→</span>
                        </Link>
                    </Button>
                </div>
            )}
        </motion.div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/contactes/_components/ContactsData.tsx ===================

// /app/[locale]/crm/contactes/_components/ContactsData.tsx (Versió Refactoritzada)

import { ContactsClient } from './contacts-client';
// ✅ 1. Importem la definició completa de la base de dades
import { Database } from "@/types/supabase";
import { validateUserSession } from "@/lib/supabase/session";

const ITEMS_PER_PAGE = 50;

interface ContactsDataProps {
    page: string;
    sortBy: string;
    status: string;
    searchTerm: string;
    viewMode: 'cards' | 'list';
}

// ✅ 2. Definim el tipus que representa el resultat EXACTE de la consulta.
// És una fila de 'contacts' enriquida amb un array d'objectes (o null) d' 'opportunities'.
export type ContactWithOpportunities = Database['public']['Tables']['contacts']['Row'] & {
  opportunities: Pick<Database['public']['Tables']['opportunities']['Row'], 'id' | 'value'>[] | null;
};


export async function ContactsData({ page, sortBy, status, searchTerm, viewMode }: ContactsDataProps) {
    const session = await validateUserSession();

    if ('error' in session) {
        console.error("ContactsData: Sessió invàlida.", session.error.message);
        return <ContactsClient initialContacts={[]} totalPages={0} currentPage={1} initialViewMode={viewMode} />;
    }

    const { supabase } = session;
    const currentPage = Number(page) || 1;
    const from = (currentPage - 1) * ITEMS_PER_PAGE;
    const to = from + ITEMS_PER_PAGE - 1;

    let query = supabase
        .from('contacts')
        .select('*, opportunities(id, value)', { count: 'exact' });

    if (searchTerm) {
        query = query.or(`nom.ilike.%${searchTerm}%,empresa.ilike.%${searchTerm}%,email.ilike.%${searchTerm}%`);
    }
    if (status && status !== 'all') {
        query = query.eq('estat', status);
    }
    query = query.order('created_at', { ascending: sortBy === 'oldest' });
    query = query.range(from, to);

    const { data: contacts, error, count } = await query;
    
    if (error) {
        console.error("Error en obtenir contactes (pot ser per RLS):", error.message);
        return <ContactsClient initialContacts={[]} totalPages={0} currentPage={1} initialViewMode={viewMode} />;
    }

    const totalPages = Math.ceil((count || 0) / ITEMS_PER_PAGE);

    return (
        <ContactsClient 
            // ✅ 3. Passem les dades amb el nou tipus. L'ús de 'as' aquí és segur perquè hem definit el tipus per a aquesta consulta.
            initialContacts={contacts as ContactWithOpportunities[] || []} 
            totalPages={totalPages} 
            currentPage={currentPage}
            initialViewMode={viewMode}
        />
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/_components/ContactsSkeleton.tsx ===================

"use client";



// Aquest component mostra un esquelet genèric per a la pàgina de contactes.
export function ContactsSkeleton() {
  return (
    <div className="h-full flex flex-col animate-pulse">
      {/* Esquelet de la capçalera */}
      <div className="flex flex-col md:flex-row justify-between md:items-center gap-4 mb-6 flex-shrink-0">
        <div className="h-9 w-48 bg-gray-700/50 rounded-md"></div>
        <div className="flex items-center gap-2">
          <div className="h-10 w-48 bg-gray-700/50 rounded-md"></div>
          <div className="h-10 w-20 bg-gray-700/50 rounded-md"></div>
          <div className="h-10 w-32 bg-gray-700/50 rounded-md"></div>
        </div>
      </div>

      {/* Esquelet de les targetes de contacte */}
      <div className="flex-1 overflow-y-auto">
        <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4 gap-6">
          {[...Array(8)].map((_, i) => (
            <div key={i} className="h-56 bg-white/5 rounded-xl"></div>
          ))}
        </div>
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/_components/ContactTable.tsx ===================

// /app/[locale]/(app)/crm/contactes/_components/ContactTable.tsx (Versió Refactoritzada)
"use client";

import React from 'react';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { User, MoreVertical } from 'lucide-react';
import { useTranslations } from 'next-intl';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { Button } from '@/components/ui/button';

// ✅ 1. Importem el tipus enriquit des del seu origen correcte.
import { type ContactWithOpportunities } from './ContactsData';
// ✅ 2. Importem la constant des de /config, la seva nova ubicació centralitzada.
import { CONTACT_STATUS_MAP } from '@/config/contacts';

// Definim les propietats que el component espera.
interface ContactTableProps {
    // ✅ 3. Actualitzem la prop per a utilitzar el nou tipus.
    contacts: ContactWithOpportunities[]; 
    onRowClick: (contact: ContactWithOpportunities) => void;
}

/**
 * Component presentacional que renderitza una llista de contactes en format de taula.
 */
const ContactTable: React.FC<ContactTableProps> = ({ contacts, onRowClick }) => {
    const t = useTranslations('ContactsClient');

    const getStatusLabel = (statusCode?: string | null) => { // ✅ Tipat com a string | null per seguretat
        if (!statusCode) return '';
        const statusObject = CONTACT_STATUS_MAP.find(s => s.code === statusCode);
        return statusObject ? t(`contactStatuses.${statusObject.key}`) : statusCode;
    };

    return (
        <div className="glass-card rounded-xl overflow-x-auto">
            <Table>
                <TableHeader>
                    <TableRow className="border-b-border hover:bg-muted/50">
                        <TableHead className="w-[250px]">{t('table.name')}</TableHead>
                        <TableHead>{t('table.status')}</TableHead>
                        <TableHead>{t('table.email')}</TableHead> {/* Aquesta ja era responsive, la deixem */}
                        <TableHead className="hidden md:table-cell">{t('table.phone')}</TableHead>
                        <TableHead className="hidden lg:table-cell">{t('table.company')}</TableHead>
                        <TableHead className="sm:hidden text-right">...</TableHead>
                    </TableRow>
                </TableHeader>
                <TableBody>
                    {contacts.map((contact) => (
                        // ✅ Les propietats com 'id', 'nom', 'estat', etc., continuen funcionant
                        // perquè el nostre nou tipus és un superconjunt del tipus base.
                        <TableRow key={contact.id} onClick={() => onRowClick(contact)} className="border-b-border hover:bg-muted/50 cursor-pointer">
                            <TableCell className="font-medium flex items-center gap-3">
                                <div className="w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center shrink-0">
                                    <User className="w-5 h-5 text-white" />
                                </div>
                                {contact.nom}
                            </TableCell>
                            <TableCell>
                                <span className={`status-badge status-${contact.estat?.toLowerCase()} shrink-0`}>
                                    {getStatusLabel(contact.estat)}
                                </span>
                            </TableCell>
                            <TableCell className="text-muted-foreground hidden sm:table-cell">{contact.email}</TableCell>
                            <TableCell className="text-muted-foreground hidden md:table-cell">{contact.telefon || '-'}</TableCell>
                            <TableCell className="hidden lg:table-cell text-muted-foreground">{contact.empresa || '-'}</TableCell>
                            <TableCell className="sm:hidden text-right">
                                <DropdownMenu>
                                    <DropdownMenuTrigger asChild>
                                        <Button variant="ghost" size="icon" onClick={(e) => e.stopPropagation()}>
                                            <MoreVertical className="w-4 h-4" />
                                        </Button>
                                    </DropdownMenuTrigger>
                                    <DropdownMenuContent>
                                        <DropdownMenuItem onSelect={() => onRowClick(contact)}>
                                            {t('table.viewDetails')}
                                        </DropdownMenuItem>
                                    </DropdownMenuContent>
                                </DropdownMenu>
                            </TableCell>
                        </TableRow>
                    ))}
                </TableBody>
            </Table>
        </div>
    );
};

export default ContactTable;

// =================== FILE: src/app/[locale]/(app)/crm/contactes/_hooks/useContactFilters.ts ===================

// @/hooks/useContactFilters.ts
"use client";

import { useState, useTransition } from 'react';
import { usePathname, useRouter, useSearchParams } from 'next/navigation';

type ViewMode = 'cards' | 'list';
type FilterType = 'sort' | 'status' | 'view';

/**
 * Hook personalitzat per gestionar els filtres de la pàgina de contactes.
 * Encapsula la lògica per llegir i escriure a la URL (search params),
 * gestionant l'estat de càrrega i les actualitzacions optimistes de la UI.
 * @param initialViewMode - El mode de vista per defecte ('cards' o 'list').
 */
export function useContactFilters(initialViewMode: ViewMode) {
    const router = useRouter();
    const pathname = usePathname();
    const searchParams = useSearchParams();
    const [isPending, startTransition] = useTransition();

    // Llegeix els valors actuals de la URL o estableix valors per defecte.
    const sortBy = searchParams.get('sort') || 'newest';
    const statusFilter = searchParams.get('status') || 'all';

    // Utilitzem un estat local per al 'viewMode' per tenir una resposta
    // visual immediata, abans que la URL s'actualitzi.
    const [viewMode, setViewMode] = useState<ViewMode>(initialViewMode);

    /**
     * Actualitza un paràmetre de la URL i navega a la nova ruta.
     * @param type - El tipus de filtre a canviar ('sort', 'status', 'view').
     * @param value - El nou valor per al filtre.
     */
    const handleFilterChange = (type: FilterType, value: string) => {
        const current = new URLSearchParams(Array.from(searchParams.entries()));
        current.set(type, value);

        // Si el filtre no és un canvi de vista, reiniciem a la primera pàgina.
        if (type !== 'view') {
            current.set('page', '1');
        }

        const search = current.toString();
        const query = search ? `?${search}` : "";

        // Actualització optimista per a una millor experiència d'usuari.
        if (type === 'view') {
            setViewMode(value as ViewMode);
        }
        
        // Utilitzem startTransition per evitar bloquejar la UI durant la navegació.
        startTransition(() => {
            router.push(`${pathname}${query}`);
        });
    };

    return {
        isPending,
        sortBy,
        statusFilter,
        viewMode,
        handleFilterChange,
    };
}

// =================== FILE: src/app/[locale]/(app)/crm/general/page.tsx ===================

// /app/[locale]/(app)/crm/general/page.tsx (Corregit)

import { Suspense } from 'react';
import type { Metadata } from 'next';
import { CrmData } from './_components/CrmData';
import { CrmSkeleton } from './_components/CrmSkeleton';
// ⛔ Ja no s'importa cap tipus des d'aquí.

export const metadata: Metadata = {
    title: 'CRM General | Ribot',
};

export default function CrmGeneralPage() {
    return (
        <Suspense fallback={<CrmSkeleton />}>
            <CrmData />
        </Suspense>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/general/_components/ActivityItem.tsx ===================

// /app/[locale]/(app)/crm/general/_components/ActivityItem.tsx (CORREGIT)
"use client";

import React, { FC } from 'react';
import { useRouter } from 'next/navigation';
import { formatDistanceToNow } from 'date-fns';
import { ca, es, enUS } from 'date-fns/locale';
import { AlertTriangle, Mail, Check } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { useTranslations, useLocale } from 'next-intl';
// ✅ 1. Importem el tipus correcte des de CrmData.
import { type UnreadActivity } from './CrmData';

interface ActivityItemProps {
    activity: UnreadActivity;
    onMarkAsRead: (id: number) => void;
    onReply: (activity: UnreadActivity) => void;
}

export const ActivityItem: FC<ActivityItemProps> = ({ activity, onMarkAsRead, onReply }) => {
    const t = useTranslations('CrmGeneralPage');
    const locale = useLocale();
    const router = useRouter();
    const dateLocale = { ca, es, en: enUS }[locale] || ca;

    const handleClick = () => {
        onMarkAsRead(activity.id);
        if (activity.contact_id) {
            router.push(`/${locale}/crm/contactes/${activity.contact_id}`);
        }
    };
    
    return (
        <div className="flex items-center gap-4 p-3 rounded-lg hover:bg-white/10 transition-colors group">
            <div className="p-2 rounded-lg bg-white/5">
                <AlertTriangle className="w-5 h-5 text-yellow-400" />
            </div>
            <div className="flex-1 min-w-0 cursor-pointer" onClick={handleClick}>
                <p className="font-semibold truncate">
                    {/* ✅ 2. Accedim al nom a través de la relació. */}
                    {activity.type} - <span className="font-normal">{activity.contacts?.nom}</span>
                </p>
                <p className="text-sm text-muted-foreground truncate italic">"{activity.content}"</p>
            </div>
            <div className="text-xs text-muted-foreground shrink-0">
                {activity.created_at ? formatDistanceToNow(new Date(activity.created_at), { addSuffix: true, locale: dateLocale }) : ''}
            </div>
            <div className="flex items-center opacity-0 group-hover:opacity-100 transition-opacity">
                <TooltipProvider>
                    <Tooltip>
                        <TooltipTrigger asChild>
                            <Button 
                                variant="ghost" 
                                size="icon" 
                                className="w-8 h-8 rounded-full" 
                                onClick={(e) => { e.stopPropagation(); onReply(activity); }}
                            >
                                <Mail className="w-4 h-4 text-blue-400" />
                            </Button>
                        </TooltipTrigger>
                        <TooltipContent><p>{t('replyTooltip')}</p></TooltipContent>
                    </Tooltip>
                </TooltipProvider>
                <TooltipProvider>
                    <Tooltip>
                        <TooltipTrigger asChild>
                            <Button 
                                variant="ghost" 
                                size="icon" 
                                className="w-8 h-8 rounded-full" 
                                // ✅ 3. Passem l'ID numèric.
                                onClick={(e) => { e.stopPropagation(); onMarkAsRead(activity.id); }}
                            >
                                <Check className="w-4 h-4 text-green-400" />
                            </Button>
                        </TooltipTrigger>
                        <TooltipContent><p>{t('markAsReadTooltip')}</p></TooltipContent>
                    </Tooltip>
                </TooltipProvider>
            </div>
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/general/_components/ComposeEmailDialog.tsx ===================

// /app/[locale]/(app)/crm/general/_components/ComposeEmailDialog.tsx (CORREGIT)

"use client";

import React, { useState, useEffect, useTransition } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Loader2, Send } from 'lucide-react';
import { toast } from 'sonner';
import { sendEmailWithGmailAction } from '@/app/[locale]/(app)/crm/general/_components/send-email-action';
import { useTranslations } from 'next-intl';

// ✅ 1. Definim el tipus correcte per a les dades inicials.
interface ComposeEmailDialogProps {
    open: boolean;
    onOpenChange: (open: boolean) => void;
    // 'contactId' ara és un 'number', alineat amb la resta de l'aplicació.
    initialData: { contactId: number; to: string; subject: string; body: string } | null;
    onEmailSent: () => void;
}

const ComposeEmailDialog: React.FC<ComposeEmailDialogProps> = ({ open, onOpenChange, initialData, onEmailSent }) => {
    const t = useTranslations('ComposeEmailDialog');

    // ✅ 2. L'estat intern ara gestiona 'contactId' com a 'number | null'.
    const [contactId, setContactId] = useState<number | null>(null);
    const [to, setTo] = useState('');
    const [subject, setSubject] = useState('');
    const [body, setBody] = useState('');
    const [isPending, startTransition] = useTransition();

    useEffect(() => {
        if (initialData) {
            setContactId(initialData.contactId ?? null);
            setTo(initialData.to || '');
            setSubject(initialData.subject || '');
            setBody(initialData.body || '');
        }
    }, [initialData]);

    const handleSend = () => {
        startTransition(async () => {
            // ✅ 3. Validació actualitzada per a un ID numèric.
            if (!contactId) {
                toast.error('Error', { description: "Falta l'ID del contacte." });
                return;
            }
            // ✅ 4. Cridem a la Server Action amb el 'contactId' numèric.
            const result = await sendEmailWithGmailAction(String(contactId), subject, body);
            if (result.success) {
                toast.success('Èxit!', { description: result.message });
                onEmailSent();
                onOpenChange(false);
            } else {
                toast.error('Error', { description: result.message });
            }
        });
    };

    return (
        <Dialog open={open} onOpenChange={onOpenChange}>
            <DialogContent className="glass-effect">
                <DialogHeader>
                    <DialogTitle>{t('dialogTitle')}</DialogTitle>
                </DialogHeader>
                <div className="py-4 space-y-4">
                    <div className="space-y-2">
                        <Label htmlFor="to">{t('toLabel')}</Label>
                        <Input id="to" value={to} readOnly disabled />
                    </div>
                    <div className="space-y-2">
                        <Label htmlFor="subject">{t('subjectLabel')}</Label>
                        <Input id="subject" value={subject} onChange={(e) => setSubject(e.target.value)} />
                    </div>
                    <div className="space-y-2">
                        <Label htmlFor="body">{t('messageLabel')}</Label>
                        <Textarea id="body" value={body} onChange={(e) => setBody(e.target.value)} rows={10} />
                    </div>
                </div>
                <DialogFooter>
                    <Button variant="ghost" onClick={() => onOpenChange(false)}>{t('cancelButton')}</Button>
                    <Button onClick={handleSend} disabled={isPending}>
                        {isPending ? <Loader2 className="w-4 h-4 mr-2 animate-spin" /> : <Send className="w-4 h-4 mr-2" />}
                        {t('sendButton')}
                    </Button>
                </DialogFooter>
            </DialogContent>
        </Dialog>
    );
};

export default ComposeEmailDialog;

// =================== FILE: src/app/[locale]/(app)/crm/general/_components/crm-client.tsx ===================

// /app/[locale]/(app)/crm/general/_components/crm-client.tsx (CORREGIT)
"use client";

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import { motion } from 'framer-motion';
import { createClient } from '@/lib/supabase/client';
import { toast } from 'sonner';
import { Users, TrendingUp, DollarSign, UserCheck, AlertTriangle, Crown, Calendar, BarChart3, Activity, FileText } from 'lucide-react';
import { useTranslations, useLocale } from 'next-intl';
// ✅ 1. Importem els tipus des del seu nou origen.
import { type CrmData, type UnreadActivity, type ComposeEmailData } from './CrmData';
import { StatCard } from './StatCard';
import { FunnelBar } from './FunnelBar';
import { ListItem } from './ListItem';
import { ActivityItem } from './ActivityItem';
import ComposeEmailDialog from './ComposeEmailDialog';

interface CrmClientProps {
    initialData: CrmData | null;
}

export function CrmClient({ initialData }: CrmClientProps) {
    const t = useTranslations('CrmGeneralPage');
    const locale = useLocale();
    const router = useRouter();
    const supabase = createClient();
    const [data, setData] = useState(initialData);
    const [composeState, setComposeState] = useState<{ open: boolean; initialData: ComposeEmailData | null; }>({ open: false, initialData: null });

    if (!data) {
        return (
            <div className="flex flex-col justify-center items-center h-full text-center">
                <AlertTriangle className="w-12 h-12 text-red-500 mb-4" />
                <h2 className="text-xl font-bold">{t('toast.errorTitle')}</h2>
                <p className="text-muted-foreground">{t('toast.fetchError')}</p>
            </div>
        );
    }

    // ✅ 2. La funció ara rep i utilitza un ID numèric.
    const handleMarkAsRead = async (activityId: number) => {
        if (!data) return;
        setData({ ...data, unreadActivities: data.unreadActivities.filter(a => a.id !== activityId) });
        const { error } = await supabase.from('activities').update({ is_read: true }).eq('id', activityId);
        if (error) {
            toast.error(t('toast.errorTitle'), { description: t('toast.markAsReadError') });
            router.refresh();
        }
    };
    
    // ✅ 3. La funció rep el tipus 'UnreadActivity' correcte.
    const handleReply = (activity: UnreadActivity) => {
        const date = activity.created_at ? new Date(activity.created_at).toLocaleDateString(locale) : '';
        const content = activity.content.replace(/\n/g, '\n> ');
        const quotedBody = t('replyBody', { date, content });

        setComposeState({
            open: true,
            initialData: {
                contactId: activity.contact_id ?? 0,
                to: activity.contacts?.email ?? '',
                subject: t('toast.replySubject'),
                body: quotedBody
            }
        });
    };

    const funnelMax = Math.max(data.funnel.leads, data.funnel.quoted, data.funnel.clients, 1);

    return (
        <>
            <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} className="space-y-8">
                {data.unreadActivities && data.unreadActivities.length > 0 && (
                    <div className="glass-card p-6">
                        <h2 className="text-xl font-bold mb-4">{t('recentAlerts', { count: data.unreadActivities.length })}</h2>
                        <div className="space-y-2">
                            {data.unreadActivities.map(activity => (
                                <ActivityItem key={activity.id} activity={activity} onMarkAsRead={handleMarkAsRead} onReply={handleReply} />
                            ))}
                        </div>
                    </div>
                )}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                    <StatCard icon={Users} title={t('totalContacts')} value={data.stats.totalContacts} color="text-blue-400" linkTo={`/${locale}/crm/contactes`} tooltip={t('tooltips.totalContacts')} />
                    <StatCard icon={UserCheck} title={t('newThisMonth')} value={data.stats.newContactsThisMonth} color="text-green-400" linkTo={`/${locale}/crm/contactes`} tooltip={t('tooltips.newContacts')} />
                    <StatCard icon={TrendingUp} title={t('opportunities')} value={data.stats.opportunities} color="text-purple-400" linkTo={`/${locale}/crm/pipeline`} tooltip={t('tooltips.opportunities')} />
                    <StatCard icon={DollarSign} title={t('pipelineValue')} value={`€${(data.stats.pipelineValue).toLocaleString('es-ES')}`} color="text-orange-400" linkTo={`/${locale}/crm/pipeline`} tooltip={t('tooltips.pipelineValue')} />
                </div>
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                    <div className="lg:col-span-2 glass-card p-6">
                        <h2 className="text-xl font-bold mb-4">{t('customerLifecycle')}</h2>
                        <div className="space-y-6">
                            <FunnelBar label={t('leads')} value={data.funnel.leads} maxValue={funnelMax} color="purple" icon={TrendingUp} />
                            <FunnelBar label={t('quoted')} value={data.funnel.quoted} maxValue={funnelMax} color="blue" icon={FileText} />
                            <FunnelBar label={t('clients')} value={data.funnel.clients} maxValue={funnelMax} color="green" icon={UserCheck} />
                        </div>
                    </div>
                    <div className="space-y-8">
                        <div className="glass-card p-6">
                            <h2 className="text-xl font-bold mb-4">{t('topClients')}</h2>
                            <div className="space-y-2">
                                {data.topClients.length > 0 ? (
                                    data.topClients.map((client, index) => <ListItem key={client.id} href={`/${locale}/crm/contactes/${client.id}`} icon={Crown} iconColor={index === 0 ? 'text-yellow-400' : 'text-gray-400'} title={client.nom || ''} value={`€${(client.total_invoiced).toLocaleString('es-ES')}`} />)
                                ) : <p className="text-sm text-muted-foreground text-center py-4">{t('noRevenueData')}</p>}
                            </div>
                        </div>
                        <div className="glass-card p-6">
                            <h2 className="text-xl font-bold mb-4">{t('healthRadar')}</h2>
                            <div className="space-y-2">
                                {data.coldContacts.length > 0 ? (
                                    data.coldContacts.map(contact => <ListItem key={contact.id} href={`/${locale}/crm/contactes/${contact.id}`} icon={AlertTriangle} iconColor="text-yellow-400" title={contact.nom || ''} subtitle={contact.last_interaction_at ? t('lastContactOn', { date: new Date(contact.last_interaction_at).toLocaleDateString(locale) }) : ''} />)
                                ) : <p className="text-sm text-muted-foreground text-center py-4">{t('allContactsWarm')}</p>}
                            </div>
                        </div>
                    </div>
                </div>
                <div className="glass-card p-6">
                    <h2 className="text-xl font-bold mb-4">{t('keyStatistics')}</h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <h3 className="font-semibold mb-3">{t('bestMonths')}</h3>
                            <div className="space-y-2">
                                {data.bestMonths.length > 0 ? (
                                    data.bestMonths.map(month => <ListItem key={month.month} href="#" icon={Calendar} iconColor="text-green-400" title={new Date(month.month + '-02').toLocaleString(locale, { month: 'long', year: 'numeric' })} value={`€${(month.total).toLocaleString('es-ES')}`} />)
                                ) : <p className="text-sm text-muted-foreground">{t('noRevenueHistory')}</p>}
                            </div>
                        </div>
                        <div>
                            <h3 className="font-semibold mb-3">{t('overallPerformance')}</h3>
                            <div className="space-y-2">
                                <ListItem href="#" icon={BarChart3} iconColor="text-blue-400" title={t('avgRevenuePerClient')} value={`€${(data.stats.avgRevenuePerClient || 0).toLocaleString('es-ES')}`} />
                                <ListItem href="#" icon={Activity} iconColor="text-purple-400" title={t('avgConversionTime')} value={`${data.stats.avgConversionTimeDays || 0} d`} />
                            </div>
                        </div>
                    </div>
                </div>
            </motion.div>
            <ComposeEmailDialog
                open={composeState.open}
                onOpenChange={(isOpen) => setComposeState({ open: isOpen, initialData: isOpen ? composeState.initialData : null })}
                initialData={composeState.initialData}
                onEmailSent={() => { }}
            />
        </>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/general/_components/CrmData.tsx ===================

// /app/[locale]/(app)/crm/general/_components/CrmData.tsx (Versió Final i Correcta)

import { validatePageSession } from "@/lib/supabase/session";
import { CrmClient } from './crm-client';
import { type Database } from '@/types/supabase';
import { startOfMonth, subDays } from 'date-fns';

// ✅ PAS 1: Definim i exportem tots els tipus aquí, derivats de la base de dades.

// Tipus per a una activitat no llegida, enriquida amb les dades del contacte.
export type UnreadActivity = Database['public']['Tables']['activities']['Row'] & {
  contacts: Pick<Database['public']['Tables']['contacts']['Row'], 'nom' | 'email'> | null;
};

// Tipus per als clients principals, el resultat esperat de la nostra consulta.
export type TopClient = {
  id: number;
  nom: string | null;
  total_invoiced: number;
};

// Tipus per a contactes freds, basat en la taula de contactes.
export type ColdContact = Pick<Database['public']['Tables']['contacts']['Row'], 'id' | 'nom' | 'last_interaction_at'>;

// Tipus principal que agrupa totes les dades del dashboard del CRM.
export type CrmData = {
  stats: {
    totalContacts: number;
    newContactsThisMonth: number;
    opportunities: number;
    pipelineValue: number;
    avgRevenuePerClient: number;
    avgConversionTimeDays: number;
  };
  funnel: {
    leads: number;
    quoted: number;
    clients: number;
  };
  unreadActivities: UnreadActivity[];
  topClients: TopClient[];
  coldContacts: ColdContact[];
  bestMonths: { month: string; total: number }[];
};

// Tipus per a les dades inicials del diàleg de correu.
export type ComposeEmailData = {
  contactId: number;
  to: string;
  subject: string;
  body: string;
};

export async function CrmData() {
    const session = await validatePageSession();
    if ('error' in session) {
        console.error(
            "CrmData: Sessió invàlida.",
            typeof session.error === "object" && session.error !== null && "message" in session.error
                ? (session.error as { message?: string }).message
                : session.error
        );
        return <CrmClient initialData={null} />;
    }
    const { supabase, activeTeamId } = session;

    const startOfCurrentMonth = startOfMonth(new Date()).toISOString();
    const thirtyDaysAgo = subDays(new Date(), 30).toISOString();

    // ✅ PAS 2: Executem totes les consultes en paral·lel, ARA SÍ, basant-nos en el teu esquema.
    const [
        contactsCountRes,
        newContactsCountRes,
        opportunitiesRes,
        funnelLeadsCountRes,
        funnelClientsCountRes,
        funnelQuotedCountRes,
        unreadActivitiesRes,
        topClientsRes,
        coldContactsRes,
        paidInvoicesRes,
        wonOpportunitiesRes
    ] = await Promise.all([
        supabase.from('contacts').select('id', { count: 'exact', head: true }).eq('team_id', activeTeamId),
        supabase.from('contacts').select('id', { count: 'exact', head: true }).eq('team_id', activeTeamId).gte('created_at', startOfCurrentMonth),
        supabase.from('opportunities').select('value', { count: 'exact' }).eq('team_id', activeTeamId).not('stage_name', 'in', '("Guanyat", "Perdut")'),
        supabase.from('contacts').select('id', { count: 'exact', head: true }).eq('team_id', activeTeamId).eq('estat', 'Lead'),
        supabase.from('contacts').select('id', { count: 'exact', head: true }).eq('team_id', activeTeamId).eq('estat', 'Client'),
        supabase.from('quotes').select('contact_id', { count: 'exact' }).eq('team_id', activeTeamId).not('contact_id', 'is', null),
        supabase.from('activities').select('*, contacts(nom, email)').eq('team_id', activeTeamId).eq('is_read', false).order('created_at', { ascending: false }).limit(5),
        supabase.from('invoices').select('total_amount, contacts(id, nom)').eq('team_id', activeTeamId).eq('status', 'Paid'),
        supabase.from('contacts').select('id, nom, last_interaction_at').eq('team_id', activeTeamId).lt('last_interaction_at', thirtyDaysAgo).order('last_interaction_at', { ascending: true }).limit(5),
        supabase.from('invoices').select('total_amount, contact_id, issue_date').eq('team_id', activeTeamId).eq('status', 'Paid'),
        supabase.from('opportunities').select('created_at, last_updated_at').eq('team_id', activeTeamId).eq('stage_name', 'Guanyat').not('last_updated_at', 'is', null)
    ]);
    
    // ✅ PAS 3: Processem els resultats.

    // --- Stats ---
    const totalContacts = contactsCountRes.count ?? 0;
    const newContactsThisMonth = newContactsCountRes.count ?? 0;
    const opportunities = opportunitiesRes.count ?? 0;
    const pipelineValue = opportunitiesRes.data?.reduce((sum, op) => sum + (op.value ?? 0), 0) ?? 0;

    // --- Càlculs financers ---
    const paidInvoices = paidInvoicesRes.data ?? [];
    const totalRevenue = paidInvoices.reduce((sum, inv) => sum + (inv.total_amount ?? 0), 0);
    const uniqueClientsWithRevenue = new Set(paidInvoices.map(inv => inv.contact_id)).size;
    const avgRevenuePerClient = uniqueClientsWithRevenue > 0 ? totalRevenue / uniqueClientsWithRevenue : 0;

    const monthlyRevenue = paidInvoices.reduce<Record<string, number>>((acc, inv) => {
        if(inv.issue_date) {
            const month = inv.issue_date.substring(0, 7); // Format YYYY-MM
            acc[month] = (acc[month] || 0) + (inv.total_amount ?? 0);
        }
        return acc;
    }, {});
    const bestMonths = Object.entries(monthlyRevenue).sort(([, a], [, b]) => b - a).slice(0, 3).map(([month, total]) => ({ month, total }));

    // --- Temps de conversió ---
    const wonOpportunities = wonOpportunitiesRes.data ?? [];
    const totalConversionTime = wonOpportunities.reduce((sum, op) => {
        if (op.created_at && op.last_updated_at) { // Utilitzem last_updated_at com a data de tancament
            const diff = new Date(op.last_updated_at).getTime() - new Date(op.created_at).getTime();
            return sum + diff;
        }
        return sum;
    }, 0);
    const avgConversionTimeMillis = wonOpportunities.length > 0 ? totalConversionTime / wonOpportunities.length : 0;
    const avgConversionTimeDays = Math.round(avgConversionTimeMillis / (1000 * 60 * 60 * 24));

    // --- Funnel ---
    const funnelLeads = funnelLeadsCountRes.count ?? 0;
    const funnelClients = funnelClientsCountRes.count ?? 0;
    const uniqueQuotedContacts = new Set(funnelQuotedCountRes.data?.map(q => q.contact_id)).size;

    // --- Top Clients ---
    const clientRevenue = (topClientsRes.data ?? []).reduce<Record<string, { id: number, nom: string | null, total: number }>>((acc, inv) => {
        const contact = inv.contacts;
        if (contact) {
            if (!acc[contact.id]) {
                acc[contact.id] = { id: contact.id, nom: contact.nom, total: 0 };
            }
            acc[contact.id].total += inv.total_amount ?? 0;
        }
        return acc;
    }, {});
    const topClients: TopClient[] = Object.values(clientRevenue)
        .sort((a, b) => b.total - a.total)
        .slice(0, 5)
        .map(c => ({ id: c.id, nom: c.nom, total_invoiced: c.total }));
        
    // ✅ PAS 4: Construïm l'objecte final de dades.
    const data: CrmData = {
        stats: {
            totalContacts,
            newContactsThisMonth,
            opportunities,
            pipelineValue,
            avgRevenuePerClient,
            avgConversionTimeDays
        },
        funnel: {
            leads: funnelLeads,
            quoted: uniqueQuotedContacts,
            clients: funnelClients,
        },
        unreadActivities: (unreadActivitiesRes.data as UnreadActivity[]) || [],
        topClients: topClients,
        coldContacts: (coldContactsRes.data as ColdContact[]) || [],
        bestMonths: bestMonths,
    };
    
    return <CrmClient initialData={data} />;
}

// =================== FILE: src/app/[locale]/(app)/crm/general/_components/CrmSkeleton.tsx ===================

"use client";

import React, { FC } from 'react';

/**
 * @summary Mostra un esquelet de càrrega per a la pàgina del Dashboard General del CRM.
 * Aquesta UI es mostra a l'instant gràcies a React Suspense.
 */
export const CrmSkeleton: FC = () => (
    <div className="space-y-8 animate-pulse">
        {/* Esquelet per a les targetes de KPI */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {[...Array(4)].map((_, i) => (
                <div key={i} className="h-[150px] bg-white/5 rounded-2xl"></div>
            ))}
        </div>
        
        {/* Esquelet per a l'embut de vendes i les llistes */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <div className="lg:col-span-2 h-[300px] bg-white/5 rounded-2xl"></div>
            <div className="space-y-8">
                <div className="h-[150px] bg-white/5 rounded-2xl"></div>
                <div className="h-[150px] bg-white/5 rounded-2xl"></div>
            </div>
        </div>

        {/* Esquelet per a les Estadístiques Clau */}
        <div className="h-[200px] bg-white/5 rounded-2xl"></div>
    </div>
);

// =================== FILE: src/app/[locale]/(app)/crm/general/_components/FunnelBar.tsx ===================

"use client";

import React, { FC, ElementType } from 'react';
import { motion } from 'framer-motion';

interface FunnelBarProps {
    label: string;
    value: number;
    maxValue: number;
    color: string;
    icon: ElementType;
}

/**
 * @summary Mostra una barra de progrés animada per a l'embut de vendes.
 */
export const FunnelBar: FC<FunnelBarProps> = ({ label, value, maxValue, color, icon: Icon }) => {
    const percentage = maxValue > 0 ? (value / maxValue) * 100 : 0;
    
    return (
        <div className="flex items-center gap-4 group">
            <div className={`w-12 h-12 flex-shrink-0 flex items-center justify-center rounded-lg bg-${color}-500/10 ring-1 ring-${color}-500/20`}>
                <Icon className={`w-6 h-6 text-${color}-400`} />
            </div>
            <div className="w-full">
                <div className="flex justify-between items-center mb-1">
                    <span className="text-sm font-medium">{label}</span>
                    <span className="text-sm font-bold">{value}</span>
                </div>
                <div className="w-full h-2 rounded-full bg-white/10 overflow-hidden">
                    <motion.div 
                        className={`h-full rounded-full bg-gradient-to-r from-${color}-500 to-${color}-400`} 
                        initial={{ width: 0 }} 
                        animate={{ width: `${percentage}%` }} 
                        transition={{ duration: 0.8, ease: "easeOut" }} 
                    />
                </div>
            </div>
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/general/_components/ListItem.tsx ===================

"use client";

import React, { FC, ElementType } from 'react';
import Link from 'next/link';

interface ListItemProps {
    href: string;
    icon: ElementType;
    iconColor: string;
    title: string;
    subtitle?: string;
    value?: string;
}

/**
 * @summary Mostra un element de llista genèric, clicable, per a rànquings.
 */
export const ListItem: FC<ListItemProps> = ({ href, icon: Icon, iconColor, title, subtitle, value }) => (
    <Link href={href} className="flex items-center gap-4 p-3 rounded-lg hover:bg-white/10 transition-colors">
        <div className="p-2 rounded-lg bg-white/5">
            <Icon className={`w-5 h-5 ${iconColor}`} />
        </div>
        <div className="flex-1 min-w-0">
            <p className="font-semibold truncate">{title}</p>
            {subtitle && <p className="text-sm text-muted-foreground truncate">{subtitle}</p>}
        </div>
        {value && <div className="font-semibold text-right">{value}</div>}
    </Link>
);

// =================== FILE: src/app/[locale]/(app)/crm/general/_components/send-email-action.ts ===================

"use server";

import { validateUserSession } from "@/lib/supabase/session"; // ✅ 1. Importem la nostra funció de validació

export async function sendEmailWithGmailAction(
  contactId: string,
  subject: string,
  htmlBody: string
): Promise<{ success: boolean; message: string }> {
  
  // ✅ 2. Reutilitzem la validació de sessió centralitzada.
  const session = await validateUserSession();
  if ('error' in session) {
    return { success: false, message: session.error.message };
  }
  const { supabase } = session; // Obtenim el client de Supabase ja validat.

  // ✅ 3. La resta de la lògica es manté igual, però ara és més neta.
  const { error } = await supabase.functions.invoke('send-email', {
    body: { contactId, subject, htmlBody },
  });

  if (error) {
    console.error("Error en invocar la funció 'send-email':", error);
    return { success: false, message: `Error en enviar el correu: ${error.message}` };
  }

  return { success: true, message: "El correu s'ha enviat correctament." };
}

// =================== FILE: src/app/[locale]/(app)/crm/general/_components/StatCard.tsx ===================

// src/app/[locale]/(app)/crm/general/_components/StatCard.tsx
"use client";

import Link from 'next/link';
import { ElementType, FC } from 'react';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";

// --- Sub-components ---
export const StatCard: FC<{ icon: ElementType; title: string; value: string | number; color: string; tooltip: string; linkTo: string; }> = ({ icon: Icon, title, value, color, tooltip, linkTo }) => (
    <TooltipProvider delayDuration={100}><Tooltip><TooltipTrigger asChild>
        <Link href={linkTo} className="group block relative p-6 rounded-2xl overflow-hidden ring-1 ring-white/10 bg-gradient-to-br from-white/5 to-transparent hover:bg-white/10 transition-all duration-300 hover:-translate-y-1 shadow-lg">
            <div className={`absolute -top-4 -right-4 h-24 w-24 ${color}/20 rounded-full blur-3xl opacity-70 group-hover:opacity-100 transition-opacity`}></div>
            <div className="relative z-10">
                <div className={`rounded-lg bg-white/10 p-2.5 inline-block ring-1 ring-white/10 mb-4`}><Icon className={`w-6 h-6 ${color}`} /></div>
                <p className="text-4xl font-bold">{value}</p>
                <p className="text-muted-foreground text-sm font-semibold">{title}</p>
            </div>
        </Link>
    </TooltipTrigger><TooltipContent><p>{tooltip}</p></TooltipContent></Tooltip></TooltipProvider>
);

// =================== FILE: src/app/[locale]/(app)/crm/pipeline/actions.ts ===================

// /app/[locale]/(app)/crm/pipeline/actions.ts (Refactoritzat)

"use server";

import { revalidatePath } from "next/cache";
import { validateUserSession } from "@/lib/supabase/session";

export async function saveOpportunityAction(formData: FormData) {
    const session = await validateUserSession();
    if ('error' in session) return { error: session.error };
    const { supabase, user, activeTeamId } = session;

    const rawData = Object.fromEntries(formData.entries());
    
    // ✅ Convertim els IDs a números abans de desar.
    const contactId = rawData.contact_id ? parseInt(rawData.contact_id as string, 10) : null;

    const dataToSave = {
        name: rawData.name as string,
        description: rawData.description as string,
        contact_id: contactId,
        stage_name: rawData.stage_name as string,
        value: rawData.value ? parseFloat(rawData.value as string) : null,
        close_date: rawData.close_date ? new Date(rawData.close_date as string).toISOString() : null,
        user_id: user.id,
        team_id: activeTeamId,
    };

    try {
        const { error } = await (rawData.id
            // Si estem actualitzant, l'ID ja és un número.
            ? supabase.from("opportunities").update(dataToSave).eq("id", parseInt(rawData.id as string, 10))
            : supabase.from("opportunities").insert(dataToSave));
        if (error) throw error;

        revalidatePath("/crm/pipeline");
        return { success: true };
    } catch (error: unknown) {
        const message = error instanceof Error ? error.message : "Error desconegut";
        return { error: { message } };
    }
}
 
export async function updateOpportunityStageAction(opportunityId: number, newStage: string) {
    const session = await validateUserSession();
    if ('error' in session) return { error: session.error };
    const { supabase, activeTeamId } = session;
 
    try {
        const { error } = await supabase
            .from("opportunities")
            .update({ stage_name: newStage })
            // ✅ L'ID que rebem ja és un número.
            .eq("id", opportunityId)
            .eq("team_id", activeTeamId);
 
        if (error) throw error;
 
        revalidatePath("/crm/pipeline");
        return { success: true };
    } catch (error: unknown) {
        const message = error instanceof Error ? error.message : "Error desconegut";
        return { error: { message } };
    }
}

// =================== FILE: src/app/[locale]/(app)/crm/pipeline/loading.tsx ===================

// /app/[locale]/(app)/crm/pipeline/loading.tsx (Refactoritzat)

import { PipelineSkeleton } from './_components/PipelineSkeleton';
import { createClient } from '@/lib/supabase/server';
// ✅ 1. Importem la definició de la base de dades.
import { type Database } from '@/types/supabase';

// ✅ 2. Definim el tipus Stage a partir de la taula corresponent.
type Stage = Database['public']['Tables']['pipeline_stages']['Row'];

export default async function PipelineLoading() {
    const supabase = createClient();
    
    const { data: stagesData } = await supabase
        .from('pipeline_stages')
        .select('id, name, position');

    // ✅ 3. El cast ara utilitza el tipus correcte.
    const stages = (stagesData as Stage[]) || [];

    return <PipelineSkeleton stages={stages} viewMode="columns" />;
}

// =================== FILE: src/app/[locale]/(app)/crm/pipeline/page.tsx ===================

/**
 * @file src/app/[locale]/(app)/page.tsx (Pipeline Page)
 * @summary Aquest és el Server Component que carrega les dades inicials (l'esquelet)
 * i les passa al component de client.
 */
import type { Metadata } from 'next';
import { Suspense } from 'react';

// Importem els nous components
import { PipelineData } from './_components/PipelineData'; 
import { PipelineSkeleton } from './_components/PipelineSkeleton';

export const metadata: Metadata = {
  title: 'Pipeline | Ribot',
};
// IMPORTANT: La pàgina principal JA NO ÉS 'async'
export default function PipelinePage() {
  // Aquest component ara es renderitza a l'instant!
  // No espera cap dada.

  return (
    <Suspense fallback={<PipelineSkeleton stages={[]} viewMode="columns" />}>
      {/* React 'Suspense' intentarà renderitzar <PipelineData />.
        Com que és un component 'async', se suspendrà.
        Mentre està suspès, mostrarà el 'fallback' (el teu Skeleton).
        Quan les dades de PipelineData estiguin llestes, el substituirà.
      */}
      <PipelineData />
    </Suspense>
  );
}

// =================== FILE: src/app/[locale]/(app)/crm/pipeline/pipeline-client.tsx ===================

// /app/[locale]/(app)/crm/pipeline/pipeline-client.tsx (Refactoritzat)
"use client";

import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { DragDropContext } from '@hello-pangea/dnd';
import { useTranslations } from 'next-intl';
import { Plus, LayoutGrid, Rows, Loader2 } from 'lucide-react';
import { Button } from '@/components/ui/button';

// ✅ 1. Importem els nous tipus des del component de dades.
import { type Stage, type Contact, type OpportunityWithContact } from './_components/PipelineData';
import { usePipeline } from './_hooks/usePipeline';
import { OpportunityDialog } from './_components/OpportunityDialog';
import { ColumnsView } from './_components/ColumnsView';
import { RowsView } from './_components/RowsView';

interface PipelineClientProps {
    initialStages: Stage[];
    initialContacts: Contact[];
    initialOpportunities: OpportunityWithContact[];
}

export function PipelineClient({ initialStages, initialContacts, initialOpportunities }: PipelineClientProps) {
    const t = useTranslations('PipelinePage');
    
    // ✅ 2. L'estat ara gestiona el tipus enriquit 'OpportunityWithContact'.
    const [opportunities, setOpportunities] = useState(initialOpportunities);

    useEffect(() => {
        setOpportunities(initialOpportunities);
    }, [initialOpportunities]);
    
    const {
        isPending,
        opportunitiesByStage,
        viewMode,
        setViewMode,
        isDialogOpen,
        setIsDialogOpen,
        editingOpportunity,
        onDragEnd,
        handleOpenDialog,
        handleSuccess,
    } = usePipeline({
        initialStages,
        opportunities,
        setOpportunities
    });

    return (
        <>
            <OpportunityDialog
                open={isDialogOpen}
                onOpenChange={setIsDialogOpen}
                contacts={initialContacts}
                stages={initialStages}
                onSuccess={handleSuccess}
                opportunityToEdit={editingOpportunity}
            />
            <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} className="h-full flex flex-col">
                <div className="flex justify-between items-center mb-6 flex-shrink-0">
                    <h1 className="text-3xl font-bold">{t('title')}</h1>
                    <div className="flex items-center gap-2">
                        <div className="bg-muted p-1 rounded-lg">
                            <Button variant={viewMode === 'columns' ? 'secondary' : 'ghost'} size="icon" onClick={() => setViewMode('columns')} aria-label={t('columnViewLabel')} disabled={isPending}><LayoutGrid className="w-4 h-4" /></Button>
                            <Button variant={viewMode === 'rows' ? 'secondary' : 'ghost'} size="icon" onClick={() => setViewMode('rows')} aria-label={t('rowViewLabel')} disabled={isPending}><Rows className="w-4 h-4" /></Button>
                        </div>
                        <Button onClick={() => handleOpenDialog()} disabled={isPending}>
                            {isPending ? <Loader2 className="w-4 h-4 mr-2 animate-spin"/> : <Plus className="w-4 h-4 mr-2" />}
                            {t('addOpportunity')}
                        </Button>
                    </div>
                </div>

                <DragDropContext onDragEnd={onDragEnd}>
                    {viewMode === 'columns' ? (
                        <ColumnsView
                            stages={initialStages}
                            opportunitiesByStage={opportunitiesByStage}
                            onEditOpportunity={(op) => handleOpenDialog(op)}
                            onAddClick={(stage) => handleOpenDialog(undefined, stage)}
                        />
                    ) : (
                        <RowsView
                            stages={initialStages}
                            opportunitiesByStage={opportunitiesByStage}
                            onEditOpportunity={(op) => handleOpenDialog(op)}
                            onAddClick={(stage) => handleOpenDialog(undefined, stage)}
                        />
                    )}
                </DragDropContext>
            </motion.div>
        </>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/pipeline/_components/ColumnsView.tsx ===================

import React from 'react';
import { type Stage, type OpportunityWithContact } from './PipelineData';
import { StageColumn } from './StageColumn';

interface ColumnsViewProps {
  stages: Stage[];
  opportunitiesByStage: Record<string, OpportunityWithContact[]>;
  onEditOpportunity: (opportunity: OpportunityWithContact) => void;
  onAddClick: (stageName: string) => void;
}

export const ColumnsView: React.FC<ColumnsViewProps> = ({ stages, opportunitiesByStage, onEditOpportunity, onAddClick }) => {
    return (
        <div className="flex-1 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4 min-h-0">
            {stages.map(stage => (
                <StageColumn
                    key={stage.id}
                    stage={stage}
                    opportunities={opportunitiesByStage[stage.name] || []}
                    onEditOpportunity={onEditOpportunity}
                    onAddClick={() => onAddClick(stage.name)}
                />
            ))}
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/pipeline/_components/OportunityCard.tsx ===================

// /app/[locale]/(app)/crm/pipeline/_components/OportunityCard.tsx (Refactoritzat)
"use client";

import React from 'react';
import { Draggable } from '@hello-pangea/dnd';
import { cn } from '@/lib/utils/utils';
import { User, Euro, Calendar } from 'lucide-react';
import { useTranslations, useLocale } from 'next-intl';
// ✅ 1. Importem el tipus correcte.
import { type OpportunityWithContact } from './PipelineData';

interface OpportunityCardProps {
    opportunity: OpportunityWithContact;
    index: number;
}

export const OpportunityCard: React.FC<OpportunityCardProps> = ({ opportunity, index }) => {
    const t = useTranslations('PipelinePage');
    const locale = useLocale();

    return (
        // ✅ 2. Convertim l'ID a string per al Draggable.
        <Draggable draggableId={opportunity.id.toString()} index={index}>
            {(provided, snapshot) => (
                <div
                    ref={provided.innerRef}
                    {...provided.draggableProps}
                    {...provided.dragHandleProps}
                    className={cn(
                        'bg-background/80 backdrop-blur-sm p-3 rounded-lg mb-3 border-l-4 transition-all duration-300 cursor-pointer',
                        snapshot.isDragging ? 'border-primary shadow-2xl shadow-primary/20 scale-105' : 'border-transparent hover:border-primary/50'
                    )}
                >
                    <h4 className="font-semibold text-foreground mb-2 text-sm">{opportunity.name}</h4>
                    {opportunity.description && (
                        <p className="text-xs text-muted-foreground mb-3 line-clamp-2">{opportunity.description}</p>
                    )}
                    <p className="text-xs text-muted-foreground flex items-center gap-2 mb-2">
                        {/* ✅ 3. Accedim al nom a través de la relació. */}
                        <User className="w-4 h-4 text-primary/80" /> {opportunity.contacts?.nom || t('noContact')}
                    </p>
                    <div className="flex justify-between items-center mt-3 pt-2 border-t border-white/5 text-xs">
                        <span className="font-semibold text-green-400 flex items-center gap-1">
                            <Euro className="w-3 h-3" /> {opportunity.value?.toLocaleString(locale) || '0'}
                        </span>
                        <span className="text-muted-foreground flex items-center gap-1">
                            <Calendar className="w-3 h-3" />{' '}
                            {opportunity.close_date ? new Date(opportunity.close_date).toLocaleDateString(locale, { day: '2-digit', month: '2-digit' }) : '-'}
                        </span>
                    </div>
                </div>
            )}
        </Draggable>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/pipeline/_components/OportunityRowCard.tsx ===================

import React from 'react';
import { Draggable } from '@hello-pangea/dnd';
import { cn } from '@/lib/utils/utils';
import { User, Euro, Calendar } from 'lucide-react';
import { useTranslations, useLocale } from 'next-intl';
import { type OpportunityWithContact } from './PipelineData';

interface OpportunityRowCardProps {
  op: OpportunityWithContact;
  index: number;
  onEdit: (op: OpportunityWithContact) => void;
}

export const OpportunityRowCard: React.FC<OpportunityRowCardProps> = ({ op, index, onEdit }) => {
    const t = useTranslations('PipelinePage');
    const locale = useLocale();

    return (
        <Draggable draggableId={op.id.toString()} index={index}>
            {(provided, snapshot) => (
                <div
                    ref={provided.innerRef}
                    {...provided.draggableProps}
                    {...provided.dragHandleProps}
                    onDoubleClick={() => onEdit(op)}
                    className={cn(
                        "grid grid-cols-2 md:grid-cols-5 gap-4 px-4 py-3 items-center rounded-lg bg-card shadow-md transition-all cursor-pointer",
                        "hover:shadow-lg hover:scale-[1.01]",
                        snapshot.isDragging ? "border-l-4 border-primary shadow-xl" : "border-l-4 border-transparent"
                    )}
                >
                    <div className="font-semibold text-base text-foreground col-span-2">{op.name}</div>
                    <div className="flex items-center text-sm text-foreground">
                        <User className="w-4 h-4 mr-2 text-primary" />
                        {op.contacts?.nom || t('noContact')}
                    </div>
                    <div className="flex items-center text-sm font-medium text-green-600">
                        <Euro className="w-4 h-4 mr-2" />
                        {op.value?.toLocaleString(locale) || "0"} €
                    </div>
                    <div className="flex justify-end items-center text-xs text-muted-foreground gap-2">
                        <Calendar className="w-3 h-3" />
                        {op.close_date ? new Date(op.close_date).toLocaleDateString(locale, { day: "2-digit", month: "2-digit" }) : "-"}
                    </div>
                </div>
            )}
        </Draggable>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/pipeline/_components/OpportunityDialog.tsx ===================

// /app/[locale]/(app)/crm/pipeline/_components/OpportunityDialog.tsx (Refactoritzat)
import React from 'react';
import { useLocale, useTranslations } from 'next-intl';
import { ca, es, enUS } from "date-fns/locale";
import { format } from "date-fns";
// ✅ 1. Importem els tipus correctes des del component de dades.
import { type Stage, type Contact, type OpportunityWithContact } from './PipelineData';
import { PIPELINE_STAGES_MAP } from '@/config/pipeline'; // ✅ Importem la constant des de /config

import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Calendar as CalendarIcon, Loader2 } from 'lucide-react';
import { cn } from "@/lib/utils/utils";
import { useOpportunityForm } from '../_hooks/useOpportunityForm';
import { ContactSelector } from '@/components/features/contactes/ContactSelector';

interface Props {
    open: boolean;
    onOpenChange: (open: boolean) => void;
    contacts: Contact[];
    stages: Stage[];
    onSuccess: () => void;
    // ✅ 2. La prop ara espera el tipus enriquit.
    opportunityToEdit: Partial<OpportunityWithContact> | null;
}

export function OpportunityDialog({ open, onOpenChange, contacts, stages, onSuccess, opportunityToEdit }: Props) {
    const t = useTranslations('OpportunityDialog');
    const statePipline = useTranslations('PipelinePage');
    const locale = useLocale();
    
    const { isPending, selectedContactId, setSelectedContactId, closeDate, setCloseDate, handleSubmit } = useOpportunityForm({
        opportunityToEdit,
        onSuccess,
        onOpenChange
    });

    const dateLocale = { ca, es, en: enUS }[locale] || ca;

    return (
        <Dialog open={open} onOpenChange={onOpenChange}>
            <DialogContent>
                <DialogHeader><DialogTitle>{opportunityToEdit?.id ? t('editTitle') : t('newTitle')}</DialogTitle></DialogHeader>
                <form action={handleSubmit} className="grid gap-4 pt-4">
                    <Input name="name" placeholder={t('namePlaceholder')} defaultValue={opportunityToEdit?.name || ''} required />
                    
                    {/* El ContactSelector necessita ser adaptat per gestionar 'number | null' */}
                    <ContactSelector contacts={contacts} selectedId={selectedContactId} onSelect={setSelectedContactId} />
                    
                    <Select name="stage_name" defaultValue={opportunityToEdit?.stage_name || stages[0]?.name}>
                        <SelectTrigger><SelectValue placeholder={t('selectStagePlaceholder')} /></SelectTrigger>
                        <SelectContent>
                            {PIPELINE_STAGES_MAP.map(stage => (
                                <SelectItem key={stage.key} value={stage.name}>
                                    {statePipline(`stageNames.${stage.key}`)}
                                </SelectItem>
                            ))}
                        </SelectContent>
                    </Select>
                    
                    <div className="grid grid-cols-2 gap-4">
                        <div>
                            <Label htmlFor="value">{t('valueLabel')}</Label>
                            <Input id="value" name="value" type="number" step="0.01" placeholder="0.00" defaultValue={opportunityToEdit?.value || ''} />
                        </div>
                        <div>
                            <Label>{t('closeDateLabel')}</Label>
                            <Popover>
                                <PopoverTrigger asChild>
                                    <Button variant="outline" className={cn("w-full justify-start text-left font-normal", !closeDate && "text-muted-foreground")}>
                                        <CalendarIcon className="mr-2 h-4 w-4" />
                                        {closeDate ? format(closeDate, "PPP", { locale: dateLocale }) : <span>{t('pickDate')}</span>}
                                    </Button>
                                </PopoverTrigger>
                                <PopoverContent className="w-auto p-0"><Calendar mode="single" selected={closeDate} onSelect={setCloseDate} /></PopoverContent>
                            </Popover>
                        </div>
                    </div>
                    
                    <Textarea name="description" placeholder={t('descriptionPlaceholder')} defaultValue={opportunityToEdit?.description || ''} />
                    
                    <DialogFooter className="pt-4">
                        <Button type="button" variant="ghost" onClick={() => onOpenChange(false)}>{t('cancelButton')}</Button>
                        <Button type="submit" disabled={isPending}>
                            {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />} {t('saveButton')}
                        </Button>
                    </DialogFooter>
                </form>
            </DialogContent>
        </Dialog>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/pipeline/_components/PipelineData.tsx ===================

// /app/[locale]/(app)/crm/pipeline/_components/PipelineData.tsx (Refactoritzat)

import { PipelineClient } from '../pipeline-client';
import { validatePageSession } from "@/lib/supabase/session";
import { type Database } from '@/types/supabase';

// ✅ 1. Definim els tipus necessaris a partir de la base de dades.

// Tipus per a una etapa del pipeline.
export type Stage = Database['public']['Tables']['pipeline_stages']['Row'];
// Tipus per a un contacte, només amb les dades que necessitem.
export type Contact = Pick<Database['public']['Tables']['contacts']['Row'], 'id' | 'nom'>;
// Tipus per a una oportunitat, enriquida amb la informació del contacte associat.
export type OpportunityWithContact = Database['public']['Tables']['opportunities']['Row'] & {
  contacts: Pick<Database['public']['Tables']['contacts']['Row'], 'id' | 'nom'> | null;
};

export async function PipelineData() {
    const { supabase } = await validatePageSession();
    
    // ✅ 2. Les consultes es mantenen, però ara sabem que els tipus són els correctes.
    const [stagesRes, contactsRes, opportunitiesRes] = await Promise.all([
        supabase.from('pipeline_stages').select('id, name, position').order('position', { ascending: true }),
        supabase.from('contacts').select('id, nom'),
        supabase.from('opportunities').select('*, contacts(id, nom)')
    ]);
    
    if (stagesRes.error) console.error("Error en carregar etapes (RLS?):", stagesRes.error);
    if (contactsRes.error) console.error("Error en carregar contactes (RLS?):", contactsRes.error);
    if (opportunitiesRes.error) console.error("Error en carregar oportunitats (RLS?):", opportunitiesRes.error);

    // ✅ 3. Passem les dades al client amb els tipus correctes, utilitzant 'as' de manera segura.
    const stages = (stagesRes.data as Stage[]) || [];
    const contacts = (contactsRes.data as Contact[]) || [];
    const opportunities = (opportunitiesRes.data as OpportunityWithContact[]) || [];

    return (
        <PipelineClient 
            initialStages={stages}
            initialContacts={contacts}
            initialOpportunities={opportunities}
        />
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/pipeline/_components/PipelineSkeleton.tsx ===================

// /app/[locale]/(app)/crm/pipeline/_components/PipelineSkeleton.tsx (Refactoritzat)
"use client";

import React from 'react';
// ✅ 1. Importem la definició de la base de dades.
import { type Database } from '@/types/supabase';

// ✅ 2. Definim el tipus Stage a partir de la taula corresponent.
type Stage = Database['public']['Tables']['pipeline_stages']['Row'];

interface PipelineSkeletonProps {
    stages: Stage[];
    viewMode: 'columns' | 'rows';
}

export const PipelineSkeleton: React.FC<PipelineSkeletonProps> = ({ stages, viewMode }) => {
    // La resta del JSX no canvia, ja que només depèn de propietats que no han canviat de nom ('id', 'name').
    if (viewMode === 'rows') {
        return (
            <div className="flex-1 overflow-y-auto pr-2 -mr-4 space-y-4">
                {stages.map(stage => (
                    <div key={stage.id} className="bg-muted/20 rounded-xl overflow-hidden border-l-4 border-gray-700">
                        <div className="flex justify-between items-center w-full px-4 py-3">
                            <div>
                                <div className="bg-gray-700/50 h-6 w-32 rounded-md animate-pulse"></div>
                                <div className="bg-gray-700/50 h-4 w-48 rounded-md mt-2 animate-pulse"></div>
                            </div>
                            <div className="bg-gray-700/50 h-9 w-24 rounded-md animate-pulse"></div>
                        </div>
                    </div>
                ))}
            </div>
        );
    }

    return (
        <div className="flex-1 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4 min-h-0">
            {stages.map(stage => (
                <div key={stage.id} className="flex flex-col h-full bg-muted/20 rounded-xl overflow-hidden">
                    <div className="p-4 border-t-4 border-gray-700">
                        <div className="flex justify-between items-center">
                            <div className="bg-gray-700/50 h-6 w-3/4 rounded-md animate-pulse"></div>
                            <div className="bg-gray-700/50 h-7 w-7 rounded-md animate-pulse"></div>
                        </div>
                        <div className="bg-gray-700/50 h-4 w-1/2 rounded-md mt-2 animate-pulse"></div>
                    </div>
                    <div className="flex-1 px-2 pt-2 space-y-3">
                        <div className="bg-background/80 h-24 rounded-lg animate-pulse"></div>
                        <div className="bg-background/80 h-20 rounded-lg animate-pulse"></div>
                    </div>
                </div>
            ))}
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/pipeline/_components/RowsView.tsx ===================

import React from 'react';
import { Droppable } from '@hello-pangea/dnd';
import { Button } from '@/components/ui/button';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Plus } from 'lucide-react';
import { cn } from '@/lib/utils/utils';
import { useTranslations, useLocale } from 'next-intl';
import { type Stage, type OpportunityWithContact } from './PipelineData';
import { PIPELINE_STAGES_MAP } from '@/config/pipeline';
import { OpportunityRowCard } from './OportunityRowCard';

interface RowsViewProps {
  stages: Stage[];
  opportunitiesByStage: Record<string, OpportunityWithContact[]>;
  onEditOpportunity: (opportunity: OpportunityWithContact) => void;
  onAddClick: (stageName: string) => void;
}

export const RowsView: React.FC<RowsViewProps> = ({ stages, opportunitiesByStage, onEditOpportunity, onAddClick }) => {
    const t = useTranslations('PipelinePage');
    const locale = useLocale();
    const stageColors: Record<string, string> = { 'Prospecte': 'border-blue-500', 'Contactat': 'border-cyan-500', 'Proposta Enviada': 'border-purple-500', 'Negociació': 'border-yellow-500', 'Guanyat': 'border-green-500', 'Perdut': 'border-red-500' };

    return (
        <div className="flex-1 overflow-y-auto pr-2 -mr-4">
            <Accordion type="multiple" defaultValue={stages.map(s => s.id.toString())} className="w-full space-y-4">
                {stages.map(stage => {
                    const stageKey = PIPELINE_STAGES_MAP.find(s => s.name === stage.name)?.key;
                    const opportunities = opportunitiesByStage[stage.name] || [];
                    const totalValue = opportunities.reduce((sum, op) => sum + (op.value || 0), 0);
                    return (
                        <AccordionItem key={stage.id} value={stage.id.toString()} className={cn("bg-muted/20 rounded-xl overflow-hidden border-l-4", stageColors[stage.name] || "border-gray-500")}>
                            <div className="flex justify-between items-center w-full px-4">
                                <AccordionTrigger className="flex-1 text-left py-3 hover:no-underline">
                                    <div>
                                        <h3 className="font-bold text-lg text-foreground">{stageKey ? t(`stageNames.${stageKey}`) : stage.name}</h3>
                                        <p className="text-xs text-muted-foreground text-left">
                                            {t('opportunityCount', { count: opportunities.length })} • €{totalValue.toLocaleString(locale)}
                                        </p>
                                    </div>
                                </AccordionTrigger>
                                <Button size="sm" variant="ghost" onClick={() => onAddClick(stage.name)} className="ml-4">
                                    <Plus className="w-4 h-4 mr-2" />{t('addOpportunity')}
                                </Button>
                            </div>
                            <AccordionContent className="px-2 pb-2">
                                <Droppable droppableId={stage.name}>
                                    {(provided, snapshot) => (
                                        <div ref={provided.innerRef} {...provided.droppableProps} className={cn("space-y-2 p-2 rounded-md transition-colors", snapshot.isDraggingOver ? "bg-primary/5" : "")}>
                                            {opportunities.length > 0 ? (
                                                opportunities.map((op, index) => (
                                                    <OpportunityRowCard key={op.id} op={op} index={index} onEdit={onEditOpportunity} />
                                                ))
                                            ) : (
                                                <p className="text-center text-sm text-muted-foreground p-4">{t('noOpportunitiesInStage')}</p>
                                            )}
                                            {provided.placeholder}
                                        </div>
                                    )}
                                </Droppable>
                            </AccordionContent>
                        </AccordionItem>
                    );
                })}
            </Accordion>
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/pipeline/_components/StageColumn.tsx ===================

import React from 'react';
import { Droppable } from '@hello-pangea/dnd';
import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils/utils';
import { Plus } from 'lucide-react';
import { useTranslations, useLocale } from 'next-intl';
import { type Stage, type OpportunityWithContact } from './PipelineData';
import { PIPELINE_STAGES_MAP } from '@/config/pipeline';
import { OpportunityCard } from './OportunityCard';

interface StageColumnProps {
  stage: Stage;
  opportunities: OpportunityWithContact[];
  onEditOpportunity: (opportunity: OpportunityWithContact) => void;
  onAddClick: () => void;
}

export const StageColumn: React.FC<StageColumnProps> = ({ stage, opportunities, onEditOpportunity, onAddClick }) => {
    const t = useTranslations('PipelinePage');
    const locale = useLocale();
    const totalValue = opportunities.reduce((sum, op) => sum + (op.value || 0), 0);
    const stageKey = PIPELINE_STAGES_MAP.find(s => s.name === stage.name)?.key;
    const stageColors: Record<string, string> = { 'Prospecte': 'border-blue-500', 'Contactat': 'border-cyan-500', 'Proposta Enviada': 'border-purple-500', 'Negociació': 'border-yellow-500', 'Guanyat': 'border-green-500', 'Perdut': 'border-red-500' };

    return (
        <div className="flex flex-col h-full bg-muted/20 rounded-xl overflow-hidden">
            <div className={cn('p-4 border-t-4', stageColors[stage.name] || 'border-gray-500')}>
                <div className="flex justify-between items-center">
                    <h3 className="font-bold text-lg text-foreground mb-1">{stageKey ? t(`stageNames.${stageKey}`) : stage.name}</h3>
                    <Button variant="ghost" size="icon" onClick={onAddClick} className="w-7 h-7">
                        <Plus className="w-4 h-4" />
                    </Button>
                </div>
                <p className="text-xs text-muted-foreground">
                    {t('opportunityCount', { count: opportunities.length })} • €{totalValue.toLocaleString(locale)}
                </p>
            </div>
            <Droppable droppableId={stage.name}>
                {(provided, snapshot) => (
                    <div
                        ref={provided.innerRef}
                        {...provided.droppableProps}
                        className={cn('flex-1 px-2 pt-2 overflow-y-auto transition-colors', snapshot.isDraggingOver ? 'bg-primary/10' : '')}
                    >
                        {opportunities.map((op, index) => (
                            <div key={op.id} onDoubleClick={() => onEditOpportunity(op)}>
                                <OpportunityCard opportunity={op} index={index} />
                            </div>
                        ))}
                        {provided.placeholder}
                    </div>
                )}
            </Droppable>
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/pipeline/_hooks/useOpportunityForm.ts ===================

// /app/[locale]/(app)/crm/pipeline/_hooks/useOpportunityForm.ts (Refactoritzat)

import { useState, useEffect, useTransition } from 'react';
import { toast } from 'sonner';
import { useTranslations } from 'next-intl';
import { saveOpportunityAction } from '../actions';
// ✅ Importem el tipus enriquit.
import { type OpportunityWithContact } from '../_components/PipelineData';

interface HookProps {
    opportunityToEdit: Partial<OpportunityWithContact> | null;
    onSuccess: () => void;
    onOpenChange: (open: boolean) => void;
}

export function useOpportunityForm({ opportunityToEdit, onSuccess, onOpenChange }: HookProps) {
    const t = useTranslations('OpportunityDialog');
    const [isPending, startTransition] = useTransition();
    // ✅ L'estat ara gestiona un número o null.
    const [selectedContactId, setSelectedContactId] = useState<number | null>(null);
    const [closeDate, setCloseDate] = useState<Date | undefined>();

    useEffect(() => {
        setSelectedContactId(opportunityToEdit?.contact_id || null);
        setCloseDate(opportunityToEdit?.close_date ? new Date(opportunityToEdit.close_date) : undefined);
    }, [opportunityToEdit]);

    const handleSubmit = (formData: FormData) => {
        // ✅ Si estem editant, afegim l'ID com a string (FormData només accepta strings).
        if (opportunityToEdit?.id) formData.set('id', opportunityToEdit.id.toString());
        if (selectedContactId) formData.set('contact_id', selectedContactId.toString());
        if (closeDate) formData.set('close_date', closeDate.toISOString());

        startTransition(async () => {
            const result = await saveOpportunityAction(formData);
            if (result.error) {
                toast.error(t('toastErrorTitle'), { description: result.error.message });
            } else {
                toast.success(t('toastSuccessTitle'), { description: t('toastSuccessDescription') });
                onSuccess();
                onOpenChange(false);
            }
        });
    };

    return {
        isPending,
        selectedContactId,
        setSelectedContactId,
        closeDate,
        setCloseDate,
        handleSubmit,
    };
}

// =================== FILE: src/app/[locale]/(app)/crm/pipeline/_hooks/usePipeline.ts ===================

// /app/[locale]/(app)/crm/pipeline/_hooks/usePipeline.ts (Refactoritzat)

import { useState, useMemo, useTransition, useCallback } from 'react'; 
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { type DropResult } from '@hello-pangea/dnd';
import { updateOpportunityStageAction } from '../actions';
// ✅ Importem els nous tipus.
import { type Stage, type OpportunityWithContact } from '../_components/PipelineData';

interface UsePipelineProps {
    initialStages: Stage[];
    opportunities: OpportunityWithContact[];
    setOpportunities: React.Dispatch<React.SetStateAction<OpportunityWithContact[]>>;
}

export function usePipeline({ initialStages, opportunities, setOpportunities }: UsePipelineProps) {
    const router = useRouter();
    const [isDndPending, startDndTransition] = useTransition();

    const [isDialogOpen, setIsDialogOpen] = useState(false);
    // ✅ El tipus ara és el correcte, amb l'ID numèric.
    const [editingOpportunity, setEditingOpportunity] = useState<Partial<OpportunityWithContact> | null>(null);
    const [viewMode, setViewMode] = useState<'columns' | 'rows'>('columns');

    const opportunitiesByStage = useMemo(() => {
        const grouped = initialStages.reduce((acc, stage) => {
            acc[stage.name] = [];
            return acc;
        }, {} as Record<string, OpportunityWithContact[]>);

        opportunities.forEach(op => {
            if (op.stage_name && grouped[op.stage_name]) {
                grouped[op.stage_name].push(op);
            }
        });
        Object.values(grouped).forEach(ops => ops.sort((a, b) => (a.value ?? 0) - (b.value ?? 0)));
        return grouped;
    }, [opportunities, initialStages]);

    const onDragEnd = useCallback((result: DropResult) => {
        const { source, destination, draggableId } = result;
        if (!destination || (source.droppableId === destination.droppableId && source.index === destination.index)) return;

        const newStage = destination.droppableId;
        const opportunityId = parseInt(draggableId, 10);
        const originalOpportunities = [...opportunities];

        setOpportunities(prev => prev.map(op => 
            op.id === opportunityId ? { ...op, stage_name: newStage } : op
        ));

        startDndTransition(async () => {
            // ✅ Passem l'ID com a número.
            const updateResult = await updateOpportunityStageAction(opportunityId, newStage);
            if (updateResult.error) {
                setOpportunities(originalOpportunities);
                toast.error("Error", { description: updateResult.error.message });
            } else {
                toast.success("Oportunitat moguda amb èxit.");
                router.refresh();
            }
        });
    }, [opportunities, setOpportunities, router]);

    const handleOpenDialog = useCallback((opportunity?: OpportunityWithContact, stageName?: string) => {
        if (opportunity) {
            setEditingOpportunity(opportunity);
        } else {
            setEditingOpportunity(stageName ? { stage_name: stageName } : {});
        }
        setIsDialogOpen(true);
    }, []);

    const handleSuccess = useCallback(() => {
        setIsDialogOpen(false);
        router.refresh();
    }, [router]);

    return {
        isPending: isDndPending,
        opportunitiesByStage,
        viewMode,
        setViewMode,
        isDialogOpen,
        setIsDialogOpen,
        editingOpportunity,
        onDragEnd,
        handleOpenDialog,
        handleSuccess,
    };
}

// =================== FILE: src/app/[locale]/(app)/crm/products/actions.ts ===================

// /app/[locale]/(app)/crm/products/actions.ts (Refactoritzat)
"use server";

import { revalidatePath } from "next/cache";
import { z } from "zod";
import { validateUserSession } from "@/lib/supabase/session";
// ✅ 1. Importem la definició de la base de dades.
import { type Database } from '@/types/supabase';

// ✅ 2. Definim el tipus Product a partir de la taula corresponent.
type Product = Database['public']['Tables']['products']['Row'];

// L'esquema de Zod es manté igual, ja que valida les dades entrants del formulari.
const productSchema = z.object({
    name: z.string().min(3, "El nom ha de tenir almenys 3 caràcters."),
    price: z.coerce.number().positive("El preu ha de ser un número positiu."),
    iva: z.coerce.number().min(0).optional().nullable(),
    discount: z.coerce.number().min(0).max(100).optional().nullable(),
    description: z.string().optional().nullable(),
    category: z.string().optional().nullable(),
    unit: z.string().optional().nullable(),
    is_active: z.boolean().default(true),
});

export type FormState = {
    success: boolean;
    message: string;
    errors?: Record<string, string[] | undefined>;
    data?: Product | null;
};

export async function createProduct(prevState: FormState, formData: FormData): Promise<FormState> {
    const session = await validateUserSession();
    if ('error' in session) {
        return { success: false, message: session.error.message };
    }
    const { supabase, user, activeTeamId } = session;

    const validatedFields = productSchema.safeParse({
        ...Object.fromEntries(formData.entries()),
        is_active: formData.get("is_active") === 'on',
    });

    if (!validatedFields.success) {
        return { success: false, message: "Errors de validació.", errors: validatedFields.error.flatten().fieldErrors };
    }

    const { data: newProduct, error } = await supabase.from("products").insert({ 
        ...validatedFields.data, 
        user_id: user.id, 
        team_id: activeTeamId 
    }).select().single();

    if (error) {
        return { success: false, message: `Error en crear el producte: ${error.message}` };
    }

    revalidatePath("/crm/products");
    return { success: true, message: "Producte creat correctament.", data: newProduct };
}
 
export async function updateProduct(id: number, prevState: FormState, formData: FormData): Promise<FormState> {
    const session = await validateUserSession();
    if ('error' in session) {
        return { success: false, message: session.error.message };
    }
    const { supabase } = session;

    const validatedFields = productSchema.safeParse({
        ...Object.fromEntries(formData.entries()),
        is_active: formData.get("is_active") === 'on',
    });

    if (!validatedFields.success) {
        return { success: false, message: "Errors de validació.", errors: validatedFields.error.flatten().fieldErrors };
    }
    
    const { data: updatedProduct, error } = await supabase
        .from("products")
        .update(validatedFields.data)
        .eq("id", id)
        .select()
        .single();

    if (error) {
        return { success: false, message: `Error en actualitzar el producte: ${error.message}` };
    }
    
    revalidatePath("/crm/products");
    revalidatePath(`/crm/products/${id}`);
    return { success: true, message: "Producte actualitzat correctament.", data: updatedProduct };
}

export async function deleteProduct(id: number): Promise<FormState> {
    const session = await validateUserSession();
    if ('error' in session) {
        return { success: false, message: session.error.message };
    }
    const { supabase } = session;

    const { error } = await supabase.from("products").delete().eq("id", id);

    if (error) {
        return { success: false, message: `Error en eliminar el producte: ${error.message}` };
    }

    revalidatePath("/crm/products");
    return { success: true, message: "Producte eliminat correctament." };
}

// =================== FILE: src/app/[locale]/(app)/crm/products/page.tsx ===================

import { Suspense } from 'react';
import type { Metadata } from 'next';
import { ProductsData } from './_components/ProductsData';
import { ProductsSkeleton } from './_components/ProductsSkeleton';

export const metadata: Metadata = {
  title: 'Conceptes | Ribot',
};


/**
 * @summary La pàgina principal de Productes, que ara actua com a orquestrador de Suspense.
 * Aquest component es renderitza a l'instant.
 */
export default function ProductsPage() {
  return (
    <div className="p-4 md:p-6 lg:p-8">
      <Suspense fallback={<ProductsSkeleton />}>
        {/* Suspense mostrarà l'esquelet a l'instant, eliminant la "congelació".
          Mentrestant, <ProductsData /> carregarà els productes en segon pla.
        */}
        <ProductsData />
      </Suspense>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/crm/products/_components/ProductForm.tsx ===================

// /app/[locale]/(app)/crm/products/_components/ProductForm.tsx (Refactoritzat)
"use client";

import { useActionState, useEffect } from "react"; 
import { useFormStatus } from "react-dom";
import { toast } from "sonner";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { createProduct, updateProduct } from "../actions";
// ✅ 1. Importem els tipus des de la seva font correcta.
import { type Product } from "./ProductsData";
import { type FormState } from "../actions";
import { Switch } from "@/components/ui/switch";
import { Textarea } from "@/components/ui/textarea";
import { useTranslations } from "next-intl";

function SubmitButton({ isEditing }: { isEditing: boolean }) {
    const t = useTranslations('ProductsPage');
    const { pending } = useFormStatus();
    return <Button type="submit" disabled={pending}>{pending ? t('form.saving') : (isEditing ? t('form.saveChanges') : t('form.createConcept'))}</Button>;
}

interface ProductFormProps {
    product: Product | null;
    onSuccess: (product: Product) => void;
}

export function ProductForm({ product, onSuccess }: ProductFormProps) {
    const t = useTranslations('ProductsPage');

    // ✅ 2. 'product.id' ara és un número, 'bind' funciona correctament.
    const action = product ? updateProduct.bind(null, product.id) : createProduct;
    const initialState: FormState = { success: false, message: "" };
    const [state, formAction] = useActionState(action, initialState);

    useEffect(() => {
        if (state.message) {
            if (state.success) {
                toast.success(t('toast.success'), { description: state.message });
                if (state.data) {
                    onSuccess(state.data);
                }
            } else if (!state.errors) {
                toast.error(t('toast.error'), { description: state.message });
            }
        }
    }, [state, onSuccess, t]);

    return (
        <form action={formAction} className="grid gap-6 py-4">
            <div className="flex items-center space-x-2">
                <Switch id="is_active" name="is_active" defaultChecked={product?.is_active ?? true} />
                <Label htmlFor="is_active">{t('form.activeLabel')}</Label>
                <p className="text-sm text-muted-foreground">{t('form.activeDescription')}</p>
            </div>
            <div className="grid grid-cols-2 gap-4">
                <div className="grid gap-2">
                    <Label htmlFor="name">{t('form.nameLabel')}</Label>
                    <Input id="name" name="name" defaultValue={product?.name || ""} required />
                </div>
                <div className="grid gap-2">
                    <Label htmlFor="category">{t('form.categoryLabel')}</Label>
                    <Input id="category" name="category" defaultValue={product?.category || ""} placeholder="Ex: Disseny Web" />
                </div>
            </div>
            <div className="grid gap-2">
                <Label htmlFor="description">{t('form.descriptionLabel')}</Label>
                <Textarea id="description" name="description" defaultValue={product?.description || ""} placeholder="Descripció detallada del servei o producte..." />
            </div>
            <div className="grid grid-cols-4 gap-4">
                <div className="grid gap-2 col-span-2">
                    <Label htmlFor="price">{t('form.priceLabel')}</Label>
                    <Input id="price" name="price" type="number" step="0.01" defaultValue={product?.price || ""} required />
                </div>
                <div className="grid gap-2">
                    <Label htmlFor="unit">{t('form.unitLabel')}</Label>
                    <Input id="unit" name="unit" defaultValue={product?.unit || ""} placeholder="hores, unitats..." />
                </div>
                <div className="grid gap-2">
                    <Label htmlFor="iva">{t('form.vatLabel')}</Label>
                    <Input id="iva" name="iva" type="number" defaultValue={product?.iva ?? 0} />
                </div>
            </div>
            <SubmitButton isEditing={!!product} />
        </form>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/products/_components/ProductsCardView.tsx ===================

// /app/[locale]/(app)/crm/products/_components/ProductsCardView.tsx (Refactoritzat)
"use client";

import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog";
import { Edit, Trash2 } from "lucide-react";
// ✅ 1. Importem el tipus correcte.
import type { Product } from "./ProductsData";
import { useTranslations } from "next-intl";

interface ProductsCardViewProps {
    products: Product[];
    onEdit: (product: Product) => void;
    onDelete: (id: number) => void; // ✅ 2. La funció espera un 'number'.
}

export function ProductsCardView({ products, onEdit, onDelete }: ProductsCardViewProps) {
    const t = useTranslations('ProductsPage');

    const groupedProducts = products.reduce((acc, product) => {
        const category = product.category || t('uncategorized');
        if (!acc[category]) { acc[category] = []; }
        acc[category].push(product);
        return acc;
    }, {} as Record<string, Product[]>);

    return (
        <div className="space-y-8">
            {Object.entries(groupedProducts).map(([category, productsInCategory]) => (
                <div key={category}>
                    <h2 className="text-xl font-bold mb-4">{category}</h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {productsInCategory.map((product) => (
                            <Card key={product.id} className="flex flex-col">
                                <CardHeader>
                                    <CardTitle>{product.name}</CardTitle>
                                    <CardDescription>{product.description || t('noDescription')}</CardDescription>
                                </CardHeader>
                                <CardContent className="flex-grow">
                                    <p className="font-mono text-2xl font-bold">€{product.price.toFixed(2)}</p>
                                    <p className="text-sm text-muted-foreground">{t('unitLabel', {unit: product.unit || "N/A"})} | {t('vatLabel', {iva: product.iva || 0})}</p>
                                </CardContent>
                                <CardFooter className="flex justify-end gap-2">
                                    <Button variant="ghost" size="sm" onClick={() => onEdit(product)}><Edit className="mr-2 h-4 w-4"/>{t('editButton')}</Button>
                                    
                                    <AlertDialog>
                                        <AlertDialogTrigger asChild>
                                            <Button variant="ghost" size="sm" className="text-destructive hover:text-destructive">
                                                <Trash2 className="mr-2 h-4 w-4"/>{t('deleteButton')}
                                            </Button>
                                        </AlertDialogTrigger>
                                        <AlertDialogContent>
                                            <AlertDialogHeader>
                                                <AlertDialogTitle>{t('deleteDialog.title')}</AlertDialogTitle>
                                                <AlertDialogDescription>{t('deleteDialog.description')}</AlertDialogDescription>
                                            </AlertDialogHeader>
                                            <AlertDialogFooter>
                                                <AlertDialogCancel>{t('deleteDialog.cancelButton')}</AlertDialogCancel>
                                                {/* ✅ 3. Passem l'ID numèric directament. */}
                                                <AlertDialogAction onClick={() => onDelete(product.id)} className="bg-destructive text-destructive-foreground hover:bg-destructive/90">
                                                    {t('deleteDialog.confirmButton')}
                                                </AlertDialogAction>
                                            </AlertDialogFooter>
                                        </AlertDialogContent>
                                    </AlertDialog>

                                </CardFooter>
                            </Card>
                        ))}
                    </div>
                </div>
            ))}
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/products/_components/ProductsClient.tsx ===================

// /app/[locale]/(app)/crm/products/_components/ProductsClient.tsx (Refactoritzat)
"use client";

import React from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { ToggleGroup, ToggleGroupItem } from "@/components/ui/toggle-group";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { PlusCircle, List, LayoutGrid, Loader2, FilePlus2, Upload, Download } from "lucide-react";
// ✅ 1. Importem el tipus des del seu nou origen.
import type { Product } from "./ProductsData";
import { ProductForm } from "./ProductForm";
import { ProductsTableView } from "./ProductsTableView";
import { ProductsCardView } from "./ProductsCardView";
import { useTranslations } from "next-intl";
import { useProducts } from "../_hooks/useProducts";
import { startTransition } from "react";
import { toast } from "sonner";
import { exportToExcel, importFromExcel } from '@/app/[locale]/(app)/excel/actions';
import ExcelDropdownButton, { DropdownOption } from '@/app/[locale]/(app)/excel/ExcelDropdownButton';

export function ProductsClient({ initialProducts }: { initialProducts: Product[] }) {
    const t = useTranslations('ProductsPage');
    const t2 = useTranslations('excel');
    
    const {
        isFormOpen, setFormOpen,
        selectedProduct,
        searchTerm, setSearchTerm,
        categoryFilter, setCategoryFilter,
        viewMode, setViewMode,
        categories,
        filteredProducts,
        isPending,
        handleEdit,
        handleCreate,
        handleDelete,
        handleSuccess,
    } = useProducts({ initialProducts, t });

    const excelOptions: DropdownOption[] = [
        { value: 'create', label: t2('products.create'), icon: FilePlus2 },
        { value: 'load', label: t2('products.load'), icon: Upload },
        { value: 'download', label: t2('products.download'), icon: Download },
    ];

    async function handleExportAndDownload(shouldDownload: boolean) {
        toast.info(t2('products.startingexport'));
        try {
            const result = await exportToExcel('products', shouldDownload);

            if (result.success && result.fileBuffer) {
                const byteCharacters = atob(result.fileBuffer);
                const byteNumbers = new Array(byteCharacters.length);
                for (let i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                const byteArray = new Uint8Array(byteNumbers);
                const blob = new Blob([byteArray], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });

                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = result.fileName || 'export.xlsx';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);

                toast.success(t2('successexport'));
            } else {
                toast.error(t2('errorexport'), { description: result.message });
            }
        } catch (error) {
            toast.error(t2('unexpectederror'), { description: t2('couldnotcomplete') });
            console.error(error);
        }
    }

    /* Funció del costat del client per iniciar el procés d'importació.
    * Crea un input de fitxers i el llança.
     */
    function handleImport() {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.xlsx, .xls';

        input.onchange = async (e) => {
            const file = (e.target as HTMLInputElement).files?.[0];
            if (!file) {
                toast.error(t2('nofileselected'));
                return;
            }

            toast.info(t2('processingfile'));

            const formData = new FormData();
            formData.append('file', file);

            startTransition(async () => {
                try {
                    const result = await importFromExcel('products', formData);

                    if (result.success) {
                        toast.success(result.message);
                    } else {
                        toast.error(t2('errorloadingdata'), { description: result.message });
                    }
                } catch (error) {
                    toast.error(t2('unexpectederrorloadingfile'), { description: (error as Error).message });
                }
            });
        };

        input.click();
    }

    const handleExcelAction = (option: DropdownOption) => {
        switch (option.value) {
            case 'download':
                startTransition(() => handleExportAndDownload(true)); // ➡️ ARA ES CRIDA startTransition
                break;
            case 'create':
                startTransition(() => handleExportAndDownload(false)); // ➡️ I AQUÍ TAMBÉ
                break;
            case 'load':
                handleImport();
                break;
            default:
                break;
        }
    };

    return (
        <div className="space-y-6">
            <div className="flex flex-wrap items-center justify-between gap-4">
                <div>
                    <h1 className="text-2xl font-bold">{t('title')}</h1>
                    <p className="text-muted-foreground">{t('description')}</p>
                </div>
                <div className="flex items-center gap-2">
                    <ExcelDropdownButton
                        options={excelOptions}
                        onSelect={handleExcelAction}
                    />
                    <Dialog open={isFormOpen} onOpenChange={setFormOpen}>
                        <DialogTrigger asChild>
                            <Button onClick={handleCreate}><PlusCircle className="mr-2 h-4 w-4" />{t('newConceptButton')}</Button>
                        </DialogTrigger>
                        <DialogContent className="sm:max-w-[600px]">
                            <DialogHeader><DialogTitle>{selectedProduct ? t('form.editTitle') : t('form.createTitle')}</DialogTitle></DialogHeader>
                            <ProductForm product={selectedProduct} onSuccess={handleSuccess} />
                        </DialogContent>
                    </Dialog>
                </div>
            </div>

            <div className="flex flex-col md:flex-row gap-4">
                <Input placeholder={t('searchPlaceholder')} value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="max-w-sm" />
                <Select value={categoryFilter} onValueChange={setCategoryFilter}>
                    <SelectTrigger className="w-full md:w-[200px]"><SelectValue placeholder={t('categoryFilterPlaceholder')} /></SelectTrigger>
                    <SelectContent>
                        {categories.map(cat => (
                            <SelectItem key={cat} value={cat}>
                                {cat === 'all' ? t('allCategories') : cat}
                            </SelectItem>
                        ))}
                    </SelectContent>
                </Select>
                <ToggleGroup type="single" value={viewMode} onValueChange={(value: "list" | "card") => value && setViewMode(value)} className="ml-auto">
                    <ToggleGroupItem value="list" aria-label={t('listView')}><List className="h-4 w-4" /></ToggleGroupItem>
                    <ToggleGroupItem value="card" aria-label={t('cardView')}><LayoutGrid className="h-4 w-4" /></ToggleGroupItem>
                </ToggleGroup>
            </div>

            <div>
                {isPending ? (
                    <div className="flex justify-center items-center h-64"><Loader2 className="w-8 h-8 animate-spin" /></div>
                ) : viewMode === 'list' ? (
                    <ProductsTableView products={filteredProducts} onEdit={handleEdit} onDelete={handleDelete} />
                ) : (
                    <ProductsCardView products={filteredProducts} onEdit={handleEdit} onDelete={handleDelete} />
                )}
            </div>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/products/_components/ProductsData.tsx ===================

// /app/[locale]/(app)/crm/products/_components/ProductsData.tsx (Refactoritzat)
import { ProductsClient } from "./ProductsClient";
import { validatePageSession } from "@/lib/supabase/session";
// ✅ 1. Importem la definició de la base de dades.
import { type Database } from '@/types/supabase';

// ✅ 2. Definim i exportem el tipus Product directament aquí.
export type Product = Database['public']['Tables']['products']['Row'];

export async function ProductsData() {
    const { supabase } = await validatePageSession();

    const { data: products, error } = await supabase
        .from("products")
        .select("*")
        .order("name", { ascending: true });
        
    if (error) {
        console.error("Error en carregar els productes (pot ser per RLS):", error);
        return <ProductsClient initialProducts={[]} />;
    }

    // ✅ 3. Passem les dades tal com venen de la BD, sense normalitzar.
    return <ProductsClient initialProducts={products || []} />;
}

// =================== FILE: src/app/[locale]/(app)/crm/products/_components/ProductsSkeleton.tsx ===================

"use client";

import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";

/**
 * @summary Mostra un esquelet de càrrega per a la pàgina de Productes/Conceptes.
 */
export function ProductsSkeleton() {
  return (
    <div className="space-y-6 animate-pulse">
      {/* Esquelet de la capçalera */}
      <div className="flex flex-wrap items-center justify-between gap-4">
        <div>
          <div className="h-8 w-48 bg-gray-700/50 rounded-md"></div>
          <div className="h-5 w-72 bg-gray-700/50 rounded-md mt-2"></div>
        </div>
        <div className="h-10 w-40 bg-gray-700/50 rounded-md"></div>
      </div>

      {/* Esquelet dels filtres */}
      <div className="flex flex-col md:flex-row gap-4">
        <div className="h-10 max-w-sm w-full bg-gray-700/50 rounded-md"></div>
        <div className="h-10 w-full md:w-[200px] bg-gray-700/50 rounded-md"></div>
        <div className="h-10 w-[100px] bg-gray-700/50 rounded-md ml-auto"></div>
      </div>

      {/* Esquelet de la taula */}
      <div className="border rounded-lg">
        <Table>
          <TableHeader>
            <TableRow>
              {[...Array(5)].map((_, i) => (
                <TableHead key={i}><div className="h-5 w-24 bg-gray-700/50 rounded-md"></div></TableHead>
              ))}
            </TableRow>
          </TableHeader>
          <TableBody>
            {[...Array(5)].map((_, i) => (
              <TableRow key={i}>
                {[...Array(5)].map((_, j) => (
                  <TableCell key={j}><div className="h-6 bg-gray-700/50 rounded-md"></div></TableCell>
                ))}
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/crm/products/_components/ProductsTableView.tsx ===================

// /app/[locale]/(app)/crm/products/_components/ProductsTableView.tsx (Refactoritzat)
"use client";

import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog";
import { Edit, Trash2 } from "lucide-react";
// ✅ 1. Importem el tipus correcte.
import type { Product } from "./ProductsData";
import { useTranslations } from "next-intl";

interface ProductsTableViewProps {
    products: Product[];
    onEdit: (product: Product) => void;
    onDelete: (id: number) => void; // ✅ 2. La funció espera un 'number'.
}

export function ProductsTableView({ products, onEdit, onDelete }: ProductsTableViewProps) {
    const t = useTranslations('ProductsPage');
    
    return (
        <div className="border rounded-lg">
            <Table>
                <TableHeader>
                    <TableRow>
                        <TableHead>{t('table.name')}</TableHead>
                        <TableHead>{t('table.category')}</TableHead>
                        <TableHead className="text-right">{t('table.price')}</TableHead>
                        <TableHead className="text-right">{t('table.unit')}</TableHead>
                        <TableHead className="w-[100px] text-right">{t('table.actions')}</TableHead>
                    </TableRow>
                </TableHeader>
                <TableBody>
                    {products.length > 0 ? (
                        products.map((product) => (
                            <TableRow key={product.id}>
                                <TableCell className="font-medium">{product.name}</TableCell>
                                <TableCell className="text-muted-foreground">{product.category || "-"}</TableCell>
                                <TableCell className="text-right font-mono">€{(product.price || 0).toFixed(2)}</TableCell>
                                <TableCell className="text-right">{product.unit || "-"}</TableCell>
                                <TableCell>
                                    <div className="flex justify-end gap-1">
                                        <Button variant="ghost" size="icon" onClick={() => onEdit(product)}>
                                            <Edit className="h-4 w-4" />
                                        </Button>
                                        <AlertDialog>
                                            <AlertDialogTrigger asChild>
                                                <Button variant="ghost" size="icon">
                                                    <Trash2 className="h-4 w-4 text-destructive" />
                                                </Button>
                                            </AlertDialogTrigger>
                                            <AlertDialogContent>
                                                <AlertDialogHeader>
                                                    <AlertDialogTitle>{t('deleteDialog.title')}</AlertDialogTitle>
                                                    <AlertDialogDescription>{t('deleteDialog.description')}</AlertDialogDescription>
                                                </AlertDialogHeader>
                                                <AlertDialogFooter>
                                                    <AlertDialogCancel>{t('deleteDialog.cancelButton')}</AlertDialogCancel>
                                                    {/* ✅ 3. Passem l'ID numèric. */}
                                                    <AlertDialogAction onClick={() => onDelete(product.id)} className="bg-destructive text-destructive-foreground hover:bg-destructive/90">
                                                        {t('deleteDialog.confirmButton')}
                                                    </AlertDialogAction>
                                                </AlertDialogFooter>
                                            </AlertDialogContent>
                                        </AlertDialog>
                                    </div>
                                </TableCell>
                            </TableRow>
                        ))
                    ) : (
                        <TableRow>
                            <TableCell colSpan={5} className="h-24 text-center">
                                {t('noProductsFound')}
                            </TableCell>
                        </TableRow>
                    )}
                </TableBody>
            </Table>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/products/_hooks/useProducts.ts ===================

// /app/[locale]/(app)/crm/products/_hooks/useProducts.ts (Refactoritzat)
"use client";

import { useState, useMemo, useTransition, useCallback } from "react";
import { toast } from 'sonner';
// ✅ 1. Importem el nou tipus des del seu origen correcte.
import type { Product } from "../_components/ProductsData";
import { deleteProduct } from "../actions";

type UseProductsProps = {
    initialProducts: Product[];
    t: (key: string) => string;
};

export function useProducts({ initialProducts, t }: UseProductsProps) {
    const [isPending, startTransition] = useTransition();
    const [products, setProducts] = useState<Product[]>(initialProducts);
    const [isFormOpen, setFormOpen] = useState(false);
    const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);
    const [searchTerm, setSearchTerm] = useState("");
    const [categoryFilter, setCategoryFilter] = useState("all");
    const [viewMode, setViewMode] = useState<"list" | "card">("list");

    const categories = useMemo(() => {
        const uniqueCategories = new Set(products.map(p => p.category).filter((c): c is string => !!c));
        return ["all", ...Array.from(uniqueCategories)];
    }, [products]);
    
    const filteredProducts = useMemo(() => {
        return products
            .filter(p => p.is_active)
            .filter(p => categoryFilter === "all" || p.category === categoryFilter)
            .filter(p => !searchTerm || p.name.toLowerCase().includes(searchTerm.toLowerCase()));
    }, [products, categoryFilter, searchTerm]);

    const handleEdit = useCallback((product: Product) => {
        setSelectedProduct(product);
        setFormOpen(true);
    }, []);

    const handleCreate = useCallback(() => {
        setSelectedProduct(null);
        setFormOpen(true);
    }, []);

    const handleDelete = useCallback((id: number) => {
        startTransition(async () => {
            const originalProducts = products;
            setProducts(currentProducts => currentProducts.filter(p => p.id !== id));
            
            const result = await deleteProduct(id);
            if (result.success) {
                toast.success(t('toast.success'), { description: result.message });
            } else {
                toast.error(t('toast.error'), { description: result.message });
                // ✅ En cas d'error, restaurem l'estat original.
                setProducts(originalProducts); 
            }
        });
    }, [t, products]); // ✅ Afegim 'products' a les dependències.

    const handleSuccess = useCallback((updatedOrNewProduct: Product) => {
        setFormOpen(false);
        setProducts(currentProducts => {
            const exists = currentProducts.some(p => p.id === updatedOrNewProduct.id);
            if (exists) {
                return currentProducts.map(p => p.id === updatedOrNewProduct.id ? updatedOrNewProduct : p);
            } else {
                return [updatedOrNewProduct, ...currentProducts];
            }
        });
    }, []);
    
    return {
        isFormOpen, setFormOpen,
        selectedProduct,
        searchTerm, setSearchTerm,
        categoryFilter, setCategoryFilter,
        viewMode, setViewMode,
        categories,
        filteredProducts,
        isPending,
        handleEdit,
        handleCreate,
        handleDelete,
        handleSuccess,
    };
}

// =================== FILE: src/app/[locale]/(app)/crm/quotes/actions.ts ===================

// /app/[locale]/(app)/crm/quotes/actions.ts

"use server";

import { revalidatePath } from "next/cache";
import { validateUserSession } from "@/lib/supabase/session";
// ✅ Importació dels tipus de Supabase per al tipus de l'ID
import type { Database } from '@/types/supabase';

// -------------------------------------------------------------
// ✅ TIPUS DE L'ID (Assumint number per bigint)
// -------------------------------------------------------------
type QuoteId = Database['public']['Tables']['quotes']['Row']['id'];

/**
 * @summary Deletes a quote and its associated items.
 */
// ✅ L'argument 'quoteId' ara té el tipus de Supabase (QuoteId, que és number).
export async function deleteQuoteAction(quoteId: QuoteId) {
    const session = await validateUserSession();
    if ('error' in session) {
        // Retornem un tipus d'error ben definit per a Next.js Server Actions
        return { success: false as const, message: session.error.message };
    }
    const { supabase } = session;

    if (!quoteId) {
        return { success: false as const, message: "ID de pressupost invàlid." };
    }

    // -------------------------------------------------------------
    // ✅ SEGURETAT DE TIPUS EN LA CONSULTA
    // -------------------------------------------------------------
    // La lògica de seguretat RLS ja protegeix aquestes operacions.
    const { error: itemsError } = await supabase
        .from('quote_items')
        .delete()
        .eq('quote_id', quoteId); // ✅ 'number' === 'number'.

    if (itemsError) {
        console.error("Error deleting quote items:", itemsError);
        return { success: false as const, message: "No s'han pogut eliminar els detalls del pressupost." };
    }

    const { error: quoteError } = await supabase
        .from('quotes')
        .delete()
        .eq('id', quoteId); // ✅ 'number' === 'number'.

    if (quoteError) {
        console.error("Error deleting quote:", quoteError);
        return { success: false as const, message: "No s'ha pogut eliminar el pressupost." };
    }

    revalidatePath('/crm/quotes');
    return { success: true as const, message: "Pressupost eliminat correctament." };
}

// =================== FILE: src/app/[locale]/(app)/crm/quotes/page.tsx ===================

import { Suspense } from 'react';
import type { Metadata } from 'next';
import { QuotesData } from './_components/QuotesData';
import { QuotesSkeleton } from './_components/QuotesSkeleton';
import type { Database } from '@/types/supabase';
import { z } from 'zod'; // És una bona pràctica afegir Zod per validar

// -------------------------------------------------------------------
// TIPUS DE DADES (Això es queda igual)
// -------------------------------------------------------------------
type Quote = Database['public']['Tables']['quotes']['Row'];
type Contact = Database['public']['Tables']['contacts']['Row'];

export type QuoteWithContact = Quote & {
    contacts: Pick<Contact, 'nom' | 'empresa'> | null;
};

// Zod schema per validar i donar valors per defecte als paràmetres de cerca
const searchParamsSchema = z.object({
  page: z.string().optional().default('1'),
  limit: z.string().optional().default('10'),
  query: z.string().optional(),
  status: z.string().optional(),
});

// -------------------------------------------------------------------
// ✅ CORRECCIÓ CLAU: La interfície de props amb 'searchParams' com a Promise
// -------------------------------------------------------------------
interface QuotesPageProps {
  searchParams: Promise<{
    page?: string;
    limit?: string;
    query?: string;
    status?: string;
  }>;
}

export const metadata: Metadata = {
  title: 'Pressupostos | Ribot',
};

/**
 * Component de pàgina (Server Component) per a la llista de pressupostos.
 */
// -------------------------------------------------------------------
// ✅ CORRECCIÓ: El component espera 'props' i fa 'await' a 'props.searchParams'
// -------------------------------------------------------------------
export default async function QuotesPage(props: QuotesPageProps) {
  
  // 1. Resolem la promesa per obtenir els paràmetres de cerca
  const searchParams = await props.searchParams;

  // 2. (Recomanat) Validem els paràmetres amb Zod per seguretat i valors per defecte
  const parsedSearchParams = searchParamsSchema.parse(searchParams);

  // 3. Creem una key única per al Suspense per garantir que es refresca
  const suspenseKey = JSON.stringify(parsedSearchParams);

  return (
    <div>
      <Suspense key={suspenseKey} fallback={<QuotesSkeleton />}>
        {/* Passem els paràmetres ja resolts i validats al component de dades */}
        <QuotesData searchParams={parsedSearchParams} />
      </Suspense>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/crm/quotes/[id]/actions.ts ===================

// /app/[locale]/(app)/crm/quotes/[id]/actions.ts (CORREGIT)
"use server";

import { revalidatePath } from "next/cache";
import { validateUserSession } from "@/lib/supabase/session";
import { type Database } from '@/types/supabase';
import type { ActionResult } from '@/types/shared/index';

// Definim els tipus directament des de la base de dades.
type Quote = Database['public']['Tables']['quotes']['Row'];
type QuoteItem = Database['public']['Tables']['quote_items']['Row'];
type Product = Database['public']['Tables']['products']['Row'];
type Team = Database['public']['Tables']['teams']['Row'];

// ✅ 1. Definim el tipus del payload que espera la funció.
// Aquest tipus coincideix amb el que envia el hook, on 'id' pot ser 'new' o 'number'.
type QuotePayload = Partial<Omit<Quote, 'id'>> & { 
    id: 'new' | number;
    items: Partial<QuoteItem>[];
};

/**
 * Desa (crea o actualitza) un pressupost i els seus conceptes.
 */
export async function saveQuoteAction(quoteData: QuotePayload): Promise<ActionResult<number>> {
    const session = await validateUserSession();
    if ('error' in session) return { success: false, message: session.error.message };
    const { supabase } = session;

    if (!quoteData.contact_id) return { success: false, message: "Si us plau, selecciona un client." };

    try {
        // La funció RPC 'upsert_quote_with_items' ja està dissenyada per rebre un 'id' que pot ser 'new'.
        const { data, error } = await supabase.rpc('upsert_quote_with_items', {
            quote_payload: quoteData as QuotePayload // Utilitzem el tipus específic per garantir la seguretat de tipus
        });

        if (error) {
            console.error("Supabase RPC Error:", JSON.stringify(error, null, 2));
            throw error;
        }
        
        const finalQuoteId = (data as { quote_id: number }).quote_id;

        revalidatePath('/crm/quotes');
        revalidatePath(`/crm/quotes/${finalQuoteId}`);
        
        return { success: true, message: "Pressupost desat correctament.", data: finalQuoteId };

    } catch(error: unknown) {
        const message = error instanceof Error ? error.message : "Error desconegut al desar el pressupost.";
        console.error("Error a saveQuoteAction:", message);
        return { success: false, message };
    }
}

// Les altres accions es mantenen igual, ja que esperen IDs numèrics,
// i el hook s'encarregarà de cridar-les només quan sigui apropiat.

export async function deleteQuoteAction(quoteId: number): Promise<ActionResult> {
    const session = await validateUserSession();
    if ('error' in session) return { success: false, message: session.error.message };
    const { supabase } = session;

    try {
        await supabase.from('quote_items').delete().eq('quote_id', quoteId);
        await supabase.from('quotes').delete().eq('id', quoteId);
        revalidatePath('/crm/quotes');
        return { success: true, message: "Pressupost eliminat." };
    } catch(error) {
        const message = error instanceof Error ? error.message : "Error en eliminar el pressupost.";
        return { success: false, message };
    }
}

export async function createProductAction(newProduct: { name: string, price: number }): Promise<ActionResult<Product>> {
    const session = await validateUserSession();
    if ('error' in session) return { success: false, message: session.error.message };
    const { supabase, user, activeTeamId } = session;

    try {
        const { data, error } = await supabase.from('products').insert({
            user_id: user.id, team_id: activeTeamId,
            name: newProduct.name, price: newProduct.price,
        }).select().single();

        if (error) throw error;
        revalidatePath(`/crm`, 'layout');
        return { success: true, message: 'Nou producte desat.', data };
    } catch (error: unknown) {
        const message = error instanceof Error ? error.message : "Error en crear el producte.";
        return { success: false, message };
    }
}

export async function sendQuoteAction(quoteId: number): Promise<ActionResult> {
    const session = await validateUserSession();
    if ('error' in session) return { success: false, message: session.error.message };
    const { supabase } = session;
    
    try {
        const { error } = await supabase.functions.invoke('send-quote-pdf', { body: { quoteId } });
        if (error) throw error;
        revalidatePath(`/crm/quotes/${quoteId}`);
        return { success: true, message: "S'ha iniciat l'enviament del pressupost." };
    } catch (error: unknown) {
        const message = error instanceof Error ? error.message : "Error en invocar l'Edge Function.";
        return { success: false, message };
    }
}

export async function updateTeamProfileAction(teamData: Partial<Team>): Promise<ActionResult<Team>> {
    const session = await validateUserSession();
    if ('error' in session) return { success: false, message: session.error.message };
    const { supabase, activeTeamId } = session;

    try {
        const { data, error } = await supabase
            .from('teams')
            .update(teamData)
            .eq('id', activeTeamId)
            .select()
            .single();
            
        if (error) throw error;
        
        revalidatePath(`/crm/quotes/[id]`, 'page');
        return { success: true, message: 'Perfil de l\'equip actualitzat.', data };
    } catch (error: unknown) {
        const message = error instanceof Error ? error.message : "Error en actualitzar el perfil.";
        return { success: false, message };
    }
}

// =================== FILE: src/app/[locale]/(app)/crm/quotes/[id]/page.tsx ===================

import { Suspense } from 'react';
import { type Metadata } from 'next';
import { QuoteEditorData } from './_components/QuoteEditorData';
import { QuoteEditorSkeleton } from './_components/QuoteEditorSkeleton';

// -------------------------------------------------------------------
// ✅ CORRECCIÓ: Definim el tipus de les props amb 'params' com una Promise
// -------------------------------------------------------------------
interface QuoteEditorPageProps {
    params: Promise<{ id: string; locale: string }>;
}

/**
 * Funció per generar metadades dinàmiques.
 */
export async function generateMetadata(props: QuoteEditorPageProps): Promise<Metadata> {
    // Resolem la promesa per accedir als paràmetres
    const { id } = await props.params;

    if (id === 'new') {
        return { title: 'Nou Pressupost | Ribot' };
    }
    return { title: `Editar Pressupost | Ribot` };
}

/**
 * Component de la pàgina per editar o crear un pressupost.
 */
// -------------------------------------------------------------------
// ✅ CORRECCIÓ: El component de pàgina esdevé 'async' i espera 'props.params'
// -------------------------------------------------------------------
export default async function QuoteEditorPage(props: QuoteEditorPageProps) {
    // Resolem la promesa per obtenir els valors de 'id' i 'locale'
    const { id, locale } = await props.params;

    return (
        <div className="h-full">
            <Suspense fallback={<QuoteEditorSkeleton />}>
                {/* Passem les variables ja resoltes al component de dades */}
                <QuoteEditorData quoteId={id} locale={locale} />
            </Suspense>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/quotes/[id]/_components/CompanyProfileDialog.tsx ===================

// /app/[locale]/(app)/crm/quotes/[id]/_components/CompanyProfileDialog.tsx (Refactoritzat)
"use client";

import React, { useState, useEffect, useTransition } from 'react';
import { toast } from "sonner";
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from '@/components/ui/dialog';
import { Loader2, Upload } from 'lucide-react';
import { createClient } from '@/lib/supabase/client';
import { updateTeamProfileAction } from '../actions';
import Image from 'next/image';
import { useTranslations } from 'next-intl';
// ✅ 1. Importem la definició de la base de dades.
import { type Database } from '@/types/supabase';

// ✅ 2. Definim el tipus per a la taula 'teams'.
type Team = Database['public']['Tables']['teams']['Row'];

export function CompanyProfileDialog({ open, onOpenChange, profile, onProfileUpdate }: {
    open: boolean;
    onOpenChange: (isOpen: boolean) => void;
    profile: Team | null; // <-- Tipus correcte
    onProfileUpdate: (newProfile: Team) => void; // <-- Tipus correcte
}) {
    const t = useTranslations('QuoteEditor');
    // ✅ 3. L'estat local ara és un objecte parcial del tipus 'Team'.
    const [localProfile, setLocalProfile] = useState<Partial<Team>>({});
    const [isSaving, startSaveTransition] = useTransition();
    const [isUploading, setIsUploading] = useState(false);
    const supabase = createClient();

    useEffect(() => {
        if (profile) {
            // No cal "traduir" els camps, simplement copiem el perfil.
            setLocalProfile(profile);
        }
    }, [profile]);

    const handleLogoUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (!file || !profile?.id) return;

        setIsUploading(true);
        const filePath = `${profile.id}/logo-${Date.now()}`;
        const { error } = await supabase.storage.from('logos').upload(filePath, file, { upsert: true });

        if (error) {
            toast.error(t('toast.errorTitle'), { description: t('toast.logoUploadError') });
        } else {
            const { data } = supabase.storage.from('logos').getPublicUrl(filePath);
            setLocalProfile(p => ({ ...p, logo_url: data.publicUrl }));
        }
        setIsUploading(false);
    };

    const handleSaveProfile = () => {
        startSaveTransition(async () => {
            // ✅ 4. Passem directament l'estat local, que ja té el format correcte.
            const result = await updateTeamProfileAction(localProfile);

            if (result.success && result.data) {
                toast.success(t('toast.successTitle'), { description: result.message });
                onProfileUpdate(result.data);
                onOpenChange(false);
            } else {
                toast.error(t('toast.errorTitle'), { description: result.message });
            }
        });
    };

    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value } = e.target;
        setLocalProfile(prev => ({ ...prev, [name]: value }));
    };

    return (
        <Dialog open={open} onOpenChange={onOpenChange}>
            <DialogContent>
                <DialogHeader>
                    <DialogTitle>{t('companyProfileDialog.title')}</DialogTitle>
                    <DialogDescription>{t('companyProfileDialog.description')}</DialogDescription>
                </DialogHeader>
                <div className="space-y-4 py-4 max-h-[60vh] overflow-y-auto">
                    <div>
                        <Label>{t('companyProfileDialog.logoLabel')}</Label>
                        <div className="mt-1 flex items-center gap-4">
                            {localProfile.logo_url ? (
                                <Image src={localProfile.logo_url} alt={t('companyProfileDialog.logoAlt')} width={64} height={64} className="object-contain rounded-lg bg-muted p-1" />
                            ) : <div className="h-16 w-16 bg-muted rounded-lg" />}
                            <Button asChild variant="outline">
                                <label htmlFor="logo-upload" className="cursor-pointer flex items-center gap-2">
                                    {isUploading ? <Loader2 className="animate-spin" /> : <Upload className="w-4 h-4" />}
                                    {t('companyProfileDialog.uploadButton')}
                                </label>
                            </Button>
                            <input id="logo-upload" type="file" accept="image/*" className="hidden" onChange={handleLogoUpload} disabled={isUploading} />
                        </div>
                    </div>
                    {/* ✅ 5. Els camps ara corresponen a les columnes de la taula 'teams'. */}
                    <div><Label htmlFor="name">{t('companyProfileDialog.nameLabel')}</Label><Input id="name" name="name" value={localProfile.name || ''} onChange={handleInputChange} /></div>
                    <div><Label htmlFor="tax_id">{t('companyProfileDialog.taxIdLabel')}</Label><Input id="tax_id" name="tax_id" value={localProfile.tax_id || ''} onChange={handleInputChange} /></div>
                    <div><Label htmlFor="address">{t('companyProfileDialog.addressLabel')}</Label><Input id="address" name="address" value={localProfile.address || ''} onChange={handleInputChange} /></div>
                    <div><Label htmlFor="email">{t('companyProfileDialog.emailLabel')}</Label><Input id="email" name="email" type="email" value={localProfile.email || ''} onChange={handleInputChange} /></div>
                    <div><Label htmlFor="phone">{t('companyProfileDialog.phoneLabel')}</Label><Input id="phone" name="phone" value={localProfile.phone || ''} onChange={handleInputChange} /></div>
                </div>
                <DialogFooter>
                    <Button onClick={() => onOpenChange(false)} variant="ghost">{t('buttons.cancel')}</Button>
                    <Button onClick={handleSaveProfile} disabled={isSaving}>
                        {isSaving && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                        {t('companyProfileDialog.saveButton')}
                    </Button>
                </DialogFooter>
            </DialogContent>
        </Dialog>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/quotes/[id]/_components/QuoteEditorClient.tsx ===================

// /app/[locale]/(app)/crm/quotes/[id]/_components/QuoteEditorClient.tsx (Refactoritzat per al Disseny)
"use client";

import React from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Loader2, ArrowLeft, Send, Trash2, Building } from 'lucide-react';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Switch } from "@/components/ui/switch";
import { type Database } from '@/types/supabase';
import { useQuoteEditor, type EditableQuote } from '../_hooks/useQuoteEditor';
import { CompanyProfileDialog } from './CompanyProfileDialog';
import { QuoteMeta } from './QuoteMeta';
import { QuoteItems } from './QuoteItems';
import { QuoteTotals } from './QuoteTotals';
import { QuotePreview } from './QuotePreview';
import { Separator } from '@/components/ui/separator'; // Importem el separador

// --- Tipus Derivats de la Base de Dades ---
type Contact = Database['public']['Tables']['contacts']['Row'];
type Product = Database['public']['Tables']['products']['Row'];
type Opportunity = Database['public']['Tables']['opportunities']['Row'];
type Team = Database['public']['Tables']['teams']['Row'];

interface QuoteEditorClientProps {
    initialQuote: EditableQuote;
    contacts: Contact[];
    products: Product[];
    companyProfile: Team | null;
    initialOpportunities: Opportunity[];
    userId: string;
    locale: string;
}

export function QuoteEditorClient(props: QuoteEditorClientProps) {
    const router = useRouter();

    const {
        state,
        quote,
        onQuoteChange,
        onItemsChange,
        setCurrentTeamData,
        setIsDeleteDialogOpen,
        setIsProfileDialogOpen,
        subtotal, discountAmount, tax, total,
        handleSave, handleDelete, handleSend,
        isSaving, isSending,
        t
    } = useQuoteEditor(props);
    
    // Funció per a la navegació enrere
    const handleBack = () => router.push(`/${props.locale}/crm/quotes`);

    // -------------------------------------------------------------
    // Funció de Renderitzat per a l'Estat d'Enviament (Card)
    // -------------------------------------------------------------
    const SentStatusCard = () => {
        if (!quote.sent_at) return null;

        const sentDate = new Date(quote.sent_at).toLocaleDateString(props.locale, { 
            day: '2-digit', 
            month: 'short', // 'short' per a estalviar espai a la capçalera
            year: 'numeric' 
        });

        return (
            <div 
                // ✅ Ús de fons 'success' per indicar estat positiu, amb text negre.
                className="inline-flex items-center px-3 py-1 bg-green-100 text-green-800 rounded-lg text-sm font-medium whitespace-nowrap"
            >
                {t('quoteEditor.sentOn', { date: sentDate })}
            </div>
        );
    };

    return (
        <>
            <CompanyProfileDialog
                open={state.isProfileDialogOpen}
                onOpenChange={setIsProfileDialogOpen}
                profile={state.currentTeamData}
                onProfileUpdate={setCurrentTeamData}
            />
            <AlertDialog open={state.isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
                <AlertDialogContent>
                    <AlertDialogHeader>
                        <AlertDialogTitle>{t('quoteEditor.deleteDialogTitle')}</AlertDialogTitle>
                        <AlertDialogDescription>{t('quoteEditor.deleteDialogDescription')}</AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                        <AlertDialogCancel disabled={isSaving}>Cancel·lar</AlertDialogCancel>
                        <AlertDialogAction onClick={handleDelete} className="bg-destructive hover:bg-destructive/90" disabled={isSaving}>
                            {isSaving && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                            Confirmar Eliminació
                        </AlertDialogAction>
                    </AlertDialogFooter>
                </AlertDialogContent>
            </AlertDialog>

            <div className="flex flex-col h-full">
                {/* ------------------------------------------------------------- */}
                {/* ✅ NOU DISSENY DE LA CAPÇALERA AMB L'ESTAT A L'ESQUERRA */}
                {/* ------------------------------------------------------------- */}
                <header className="flex justify-between items-center mb-6 flex-shrink-0">
                    <div className="flex items-center gap-4">
                        <Button variant="outline" onClick={handleBack}> 
                            <ArrowLeft className="w-4 h-4 mr-2" />{t('quoteEditor.backButton')}
                        </Button>
                        <SentStatusCard /> {/* ✅ Estat d'enviament al costat del botó de tornada */}
                    </div>
                    
                    <div className="flex items-center gap-2">
                        <Button variant="ghost" size="icon" onClick={() => setIsProfileDialogOpen(true)} title={t('quoteEditor.companyDataTooltip')}>
                            <Building className="w-4 h-4" />
                        </Button>
                        {quote.id !== 'new' &&
                            <Button variant="outline" size="icon" onClick={() => setIsDeleteDialogOpen(true)} title={t('quoteEditor.deleteTooltip')}>
                                <Trash2 className="w-4 h-4 text-destructive" />
                            </Button>
                        }
                        <Button onClick={handleSave} disabled={isSaving || isSending} className="min-w-[100px]">
                            {isSaving && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                            {quote.id === 'new' ? t('quoteEditor.createButton') : t('quoteEditor.saveButton')}
                        </Button>
                        {quote.id !== 'new' && (
                            <Button onClick={handleSend} disabled={isSaving || isSending} className="min-w-[120px]">
                                {isSending ? (
                                    <>
                                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                        {state.sendingStatus === 'generating' && t('quoteEditor.generatingPDF')}
                                        {state.sendingStatus === 'uploading' && t('quoteEditor.uploadingFile')}
                                        {state.sendingStatus === 'sending' && t('quoteEditor.sending')}
                                    </>
                                ) : (
                                    <>
                                        <Send className="mr-2 h-4 w-4" />
                                        {quote.sent_at ? t('quoteEditor.resendButton') : t('quoteEditor.sendButton')}
                                    </>
                                )}
                            </Button>
                        )}
                    </div>
                </header>

                {/* ❌ Eliminem l'anterior div de sent_at, ja no és necessari */}

                <main className="flex-1 grid grid-cols-1 lg:grid-cols-2 gap-8 min-h-0">
                    <section className="flex flex-col gap-4 overflow-y-auto pr-4">
                        
                        {/* ------------------------------------------------------------- */}
                        {/* ✅ Ús de Card per sortir del fons gris ('glass-card' a 'Card') */}
                        {/* ------------------------------------------------------------- */}
                        <Card className="p-4"> 
                            <QuoteMeta
                                contact_id={quote.contact_id !== null && quote.contact_id !== undefined ? String(quote.contact_id) : null}
                                quote_number={quote.quote_number}
                                issue_date={quote.issue_date}
                                expiry_date={quote.expiry_date ?? null}
                                onMetaChange={onQuoteChange}
                                contacts={props.contacts}
                            />
                        </Card>

                        <Card className="p-4"> 
                            <Label>{t('quoteEditor.clientOpportunitiesLabel')}</Label>
                            {state.contactOpportunities.length > 0 ? (
                                <Select
                                    value={quote.opportunity_id ? String(quote.opportunity_id) : ''}
                                    onValueChange={(value) => onQuoteChange('opportunity_id', value ? Number(value) : null)}
                                    disabled={!quote.contact_id}
                                >
                                    <SelectTrigger className="w-full text-foreground">
                                        <SelectValue placeholder="Selecciona una oportunitat" />
                                    </SelectTrigger>
                                    <SelectContent>
                                        {state.contactOpportunities.map(o => (
                                            <SelectItem key={o.id} value={String(o.id)}>
                                                {o.name} ({o.stage_name})
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            ) : (
                                <p className="mt-2 text-sm text-muted-foreground">{t('quoteEditor.noOpenOpportunities')}</p>
                            )}
                        </Card>

                        <Card className="p-2"> 
                            <QuoteItems
                                items={quote.items || []}
                                onItemsChange={onItemsChange}
                                products={props.products}
                                userId={props.userId}
                            />
                            <Separator className="my-4" />
                            <QuoteTotals
                                subtotal={subtotal}
                                discount={quote.discount}
                                setDiscount={(d) => onQuoteChange('discount', d)}
                                discountAmount={discountAmount}
                                tax={tax}
                                total={total}
                                tax_percent={quote.tax_percent}
                                setTaxPercent={(p) => onQuoteChange('tax_percent', p)}
                            />
                        </Card>

                        <Card>
                            <CardHeader><CardTitle>{t('options.title')}</CardTitle></CardHeader>
                            <CardContent>
                                <div className="flex items-center space-x-2">
                                    <Switch
                                        id="show-quantity"
                                        checked={quote.show_quantity ?? true}
                                        onCheckedChange={(checked) => onQuoteChange('show_quantity', checked)}
                                    />
                                    <Label htmlFor="show-quantity">{t('options.showQuantitiesLabel')}</Label>
                                </div>
                                <p className="text-sm text-muted-foreground mt-2">{t('options.showQuantitiesDescription')}</p>
                            </CardContent>
                        </Card>

                        <Card className="p-4"> 
                            <Label>Notes Addicionals</Label>
                            <Textarea
                                value={quote.notes ?? ''}
                                onChange={(e) => onQuoteChange('notes', e.target.value)}
                                className="mt-2 min-h-[220px]"
                            />
                        </Card>
                    </section>

                    <aside id="quote-preview-for-pdf-wrapper" className="hidden lg:block glass-card p-4 overflow-y-auto">
                        <QuotePreview
                            quote={quote}
                            contacts={props.contacts}
                            companyProfile={state.currentTeamData}
                            subtotal={subtotal}
                            discountAmount={discountAmount}
                            tax={tax}
                            total={total}
                        />
                    </aside>
                </main>
            </div>
        </>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/quotes/[id]/_components/QuoteEditorData.tsx ===================

// /app/[locale]/(app)/crm/quotes/[id]/_components/QuoteEditorData.tsx (Final i Validat)

import { redirect } from 'next/navigation';
import { QuoteEditorClient } from './QuoteEditorClient';
import { validatePageSession } from "@/lib/supabase/session";
import type { Database } from '@/types/supabase';

// --- Tipus Derivats de la Base de Dades ---
type Quote = Database['public']['Tables']['quotes']['Row'];
type QuoteItem = Database['public']['Tables']['quote_items']['Row'];
type Opportunity = Database['public']['Tables']['opportunities']['Row'];

// Tipus explícit per al retorn esperat de la funció RPC 'get_quote_details'
type QuoteDetailsResponse = {
    quote: Quote & { items: QuoteItem[] };
    opportunities: Opportunity[];
}

interface QuoteEditorDataProps {
    quoteId: string;
    locale: string;
}

/**
 * Aquest Server Component carrega totes les dades tipades per a l'editor de pressupostos
 * i les passa al component client 'QuoteEditorClient'.
 */
export async function QuoteEditorData({ quoteId, locale }: QuoteEditorDataProps) {
    const { supabase, user, activeTeamId } = await validatePageSession();

    // --- LÒGICA PER A UN PRESSUPOST NOU ---
    if (quoteId === 'new') {
        const [contactsRes, productsRes, teamRes, lastQuoteRes] = await Promise.all([
            supabase.from('contacts').select('*'),
            supabase.from('products').select('*').eq('is_active', true),
            supabase.from('teams').select('*').eq('id', activeTeamId).single(),
            supabase.from('quotes')
                .select('sequence_number')
                .eq('team_id', activeTeamId)
                .order('sequence_number', { ascending: false })
                .limit(1)
                .maybeSingle()
        ]);

        if (contactsRes.error || productsRes.error || teamRes.error || lastQuoteRes.error) {
            console.error("Error en carregar les dades per a un nou pressupost:", {
                contacts: contactsRes.error,
                products: productsRes.error,
                team: teamRes.error,
                lastQuote: lastQuoteRes.error,
            });
            return <div>Error en carregar les dades de l'editor.</div>;
        }

        const lastSequence = lastQuoteRes.data?.sequence_number || 0;
        const nextSequence = lastSequence + 1;
        const year = new Date().getFullYear();
        const formattedQuoteNumber = `PRE-${year}-${String(nextSequence).padStart(4, '0')}`;

        // Tipus per a un nou pressupost que encara no té ID a la BD
        type NewQuote = Omit<Quote, 'id'> & { id: 'new'; items: Partial<QuoteItem>[] };

        // Define a union type for initialQuote to accept both new and existing quotes
        type InitialQuoteType = (Quote & { items: QuoteItem[] }) | NewQuote;

        const initialQuote: NewQuote = {
            id: 'new',
            team_id: activeTeamId,
            user_id: user.id,
            contact_id: null,
            opportunity_id: null,
            quote_number: formattedQuoteNumber,
            sequence_number: nextSequence,
            issue_date: new Date().toISOString().slice(0, 10),
            expiry_date: null,
            status: 'Draft',
            notes: 'Gràcies pel vostre interès en els nostres serveis.',
            subtotal: 0,
            discount: 0,
            tax: 0,
            tax_percent: 21,
            total: 0,
            show_quantity: true,
            created_at: new Date().toISOString(),
            sent_at: null,
            rejection_reason: null,
            send_at: null,
            theme_color: null,
            secure_id: crypto.randomUUID(), // Generem un UUID segur per a nous pressupostos
            items: [{
                description: '',
                quantity: 1,
                unit_price: 0,
                product_id: null,
                total: 0,
                user_id: user.id,
            }]
        };

        return (
            <QuoteEditorClient
                initialQuote={initialQuote as InitialQuoteType}
                contacts={contactsRes.data || []}
                products={productsRes.data || []}
                companyProfile={teamRes.data}
                initialOpportunities={[]}
                userId={user.id}
                locale={locale}
            />
        );
    }

    // --- LÒGICA PER A EDITAR UN PRESSUPOST EXISTENT ---
    const [contactsRes, productsRes, teamRes, quoteDetailsRes] = await Promise.all([
        supabase.from('contacts').select('*'),
        supabase.from('products').select('*').eq('is_active', true),
        supabase.from('teams').select('*').eq('id', activeTeamId).single(),
        supabase.rpc('get_quote_details', { p_quote_id: Number(quoteId) }).single<QuoteDetailsResponse>()
    ]);

    if (contactsRes.error || productsRes.error || teamRes.error || quoteDetailsRes.error) {
        console.error("Error en carregar les dades d'un pressupost existent:", {
            contacts: contactsRes.error,
            products: productsRes.error,
            team: teamRes.error,
            quoteDetails: quoteDetailsRes.error,
        });
        return <div>Error en carregar les dades de l'editor.</div>;
    }

    const quoteDetails = quoteDetailsRes.data;

    if (!quoteDetails?.quote) {
        redirect(`/${locale}/crm/quotes`);
    }

    return (
        <QuoteEditorClient
            initialQuote={quoteDetails.quote}
            contacts={contactsRes.data || []}
            products={productsRes.data || []}
            companyProfile={teamRes.data}
            initialOpportunities={quoteDetails.opportunities || []}
            userId={user.id}
            locale={locale}
        />
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/quotes/[id]/_components/QuoteEditorSkeleton.tsx ===================

"use client";



/**
 * @summary Mostra un esquelet de càrrega per a la pàgina de l'Editor de Pressupostos.
 */
export function QuoteEditorSkeleton() {
  return (
    <div className="animate-pulse h-full">
      {/* Esquelet de la Capçalera */}
      <header className="flex justify-between items-center mb-6 flex-shrink-0">
        <div className="h-9 w-36 bg-gray-700/50 rounded-md"></div>
        <div className="flex items-center gap-2">
          <div className="h-10 w-10 bg-gray-700/50 rounded-md"></div>
          <div className="h-10 w-10 bg-gray-700/50 rounded-md"></div>
          <div className="h-10 w-32 bg-gray-700/50 rounded-md"></div>
        </div>
      </header>

      {/* Esquelet del Contingut Principal */}
      <main className="grid grid-cols-1 lg:grid-cols-2 gap-8 min-h-0">
        {/* Columna Esquerra (Formulari) */}
        <section className="flex flex-col gap-6 overflow-y-auto">
          <div className="glass-card p-6 h-48"></div>
          <div className="glass-card p-6 h-96"></div>
          <div className="glass-card p-6 h-32"></div>
        </section>
        {/* Columna Dreta (Previsualització) */}
        <aside className="hidden lg:block glass-card p-4 h-[80vh]"></aside>
      </main>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/crm/quotes/[id]/_components/QuoteItems.tsx ===================

// /app/[locale]/(app)/crm/quotes/[id]/_components/QuoteItems.tsx (Refactoritzat i Complet)
"use client";

import React from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from "@/components/ui/command";
import { Plus, Trash2, BookPlus, Save, Loader2 } from 'lucide-react';
import TextareaAutosize from 'react-textarea-autosize';
import { useTranslations } from 'next-intl';
import { type Database } from '@/types/supabase';
import { useQuoteItems } from '../_hooks/useQuoteItems';

// --- Tipus Derivats de la Base de Dades ---
type QuoteItem = Database['public']['Tables']['quote_items']['Row'];
type Product = Database['public']['Tables']['products']['Row'];

interface QuoteItemsProps {
    items: Partial<QuoteItem>[]; // Els ítems poden no tenir 'id' si són nous.
    onItemsChange: (newItems: Partial<QuoteItem>[]) => void;
    products: Product[];
    userId: string;
}

export const QuoteItems: React.FC<QuoteItemsProps> = (props) => {
    const t = useTranslations('QuoteEditor.items');

    const {
        isSavingProduct, isCreating, setIsCreating,
        newProduct, setNewProduct, isPopoverOpen, setIsPopoverOpen,
        handleItemChange, handleAddProduct, handleRemoveItem,
        handleSaveNewProduct, handleManualItem
    } = useQuoteItems({ ...props, t });

    return (
        <div className="p-4">
            <h3 className="font-semibold text-lg mb-4">{t('title')}</h3>
            <div className="space-y-2">
                {props.items.length === 0 && (
                    <div className="text-center text-sm text-muted-foreground py-4 border border-dashed rounded-lg">
                        {t('empty')}
                    </div>
                )}
                {props.items.map((item, index) => (
                    <div key={index} className="flex items-start gap-2">
                        <TextareaAutosize
                            placeholder={t('placeholderDescription')}
                            value={item.description || ''}
                            onChange={(e) => handleItemChange(index, 'description', e.target.value)}
                            minRows={1}
                            className="flex w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 min-w-[300px]"
                        />
                        <Input type="number" value={item.quantity ?? 1} onChange={(e) => handleItemChange(index, 'quantity', parseFloat(e.target.value) || 1)} className="w-20" />
                        <Input type="number" value={item.unit_price ?? 0} onChange={(e) => handleItemChange(index, 'unit_price', parseFloat(e.target.value) || 0)} className="w-24" />
                        <div className="w-24 text-right font-mono pt-2">€{((item.quantity || 0) * (item.unit_price || 0)).toFixed(2)}</div>
                        <Button variant="ghost" size="icon" onClick={() => handleRemoveItem(index)}><Trash2 className="w-4 h-4 text-destructive" /></Button>
                    </div>
                ))}
            </div>

            <Popover open={isPopoverOpen} onOpenChange={setIsPopoverOpen}>
                <PopoverTrigger asChild>
                    <Button variant="outline" size="sm" className="mt-4"><BookPlus className="w-4 h-4 mr-2" />{t('addButton')}</Button>
                </PopoverTrigger>
                <PopoverContent className="w-[400px] p-0">
                    {isCreating ? (
                        <div className="p-4 space-y-2">
                            <p className="font-medium text-sm">{t('newProductTitle')}</p>
                            <Input placeholder={t('newProductNamePlaceholder')} value={newProduct.name} onChange={(e) => setNewProduct(p => ({ ...p, name: e.target.value }))} />
                            <Input type="number" placeholder={t('newProductPricePlaceholder')} value={newProduct.price} onChange={(e) => setNewProduct(p => ({ ...p, price: e.target.value }))} />
                            <div className="flex justify-end gap-2 pt-2">
                                <Button variant="ghost" size="sm" onClick={() => setIsCreating(false)}>{t('cancelButton')}</Button>
                                <Button size="sm" onClick={handleSaveNewProduct} disabled={isSavingProduct}>
                                    {isSavingProduct && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                                    {t('saveAndAddButton')}
                                </Button>
                            </div>
                        </div>
                    ) : (
                        <Command>
                            <CommandInput placeholder={t('searchPlaceholder')} />
                            <CommandList>
                                <CommandEmpty>{t('emptySearch')}</CommandEmpty>
                                <CommandGroup>
                                    <CommandItem onSelect={handleManualItem}>
                                        <Plus className="mr-2 h-4 w-4" />
                                        <span>{t('addManualItem')}</span>
                                    </CommandItem>
                                    <CommandItem onSelect={() => setIsCreating(true)}>
                                        <Save className="mr-2 h-4 w-4" />
                                        <span>{t('createNewItem')}</span>
                                    </CommandItem>
                                    {props.products.map((product) => (
                                        <CommandItem key={product.id} value={product.name} onSelect={() => handleAddProduct(product)}>
                                            <div className="flex justify-between w-full">
                                                <span>{product.name}</span>
                                                <span className="text-muted-foreground">€{product.price}</span>
                                            </div>
                                        </CommandItem>
                                    ))}
                                </CommandGroup>
                            </CommandList>
                        </Command>
                    )}
                </PopoverContent>
            </Popover>
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/quotes/[id]/_components/QuoteMeta.tsx ===================

// /app/[locale]/(app)/crm/quotes/[id]/_components/QuoteMeta.tsx (Refactoritzat per al Disseny)
"use client";

import React from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from "@/components/ui/command";
import { Check, ChevronsUpDown } from 'lucide-react';
import { cn } from '@/lib/utils/utils';
import { useTranslations } from 'next-intl';
import type { Database } from '@/types/supabase';
import type { EditableQuote } from '../_hooks/useQuoteEditor';

// --- Tipus Derivats de la Base de Dades ---
type ContactSelection = Pick<Database['public']['Tables']['contacts']['Row'], 'id' | 'nom' | 'empresa'>;

/**
 * Component per gestionar les metadades d'un pressupost.
 */

interface QuoteMetaProps {
    contact_id: string | null;
    quote_number: string;
    issue_date: string;
    expiry_date: string | null;
    onMetaChange: <K extends keyof EditableQuote>(field: K, value: EditableQuote[K]) => void;
    contacts: ContactSelection[];
}

export const QuoteMeta = ({
    contact_id,
    quote_number,
    issue_date,
    expiry_date,
    onMetaChange,
    contacts
}: QuoteMetaProps) => {

    const selectedContact = contacts.find(c => c.id === (contact_id !== null ? Number(contact_id) : null));
    const t = useTranslations('QuoteEditor.meta');

    const formatDateForInput = (dateString: string | null) => {
        if (!dateString) return '';
        try {
            return dateString.split('T')[0];
        } catch {
            return '';
        }
    };

    return (
        // ❌ Eliminem el 'glass-card p-2' ja que s'ha mogut a la Card pare
        <div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <Label>{t('clientLabel')}</Label>
                    <Popover>
                        <PopoverTrigger asChild>
                            {/* ✅ CORRECCIÓ: Afegim 'text-foreground' (negre/fosc) al botó per visibilitat */}
                            <Button variant="outline" role="combobox" className="w-full justify-between search-input text-left font-normal mt-1 text-foreground">
                                {selectedContact ? (
                                    // ✅ Ús de text-foreground per al text principal.
                                    <span className="text-foreground">
                                        {`${selectedContact.nom} `}
                                        <span className="text-muted-foreground text-xs">
                                            ({selectedContact.empresa || ''})
                                        </span>
                                    </span>
                                ) : t('selectClientPlaceholder')}
                                <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                            </Button>
                        </PopoverTrigger>
                        <PopoverContent className="w-[--radix-popover-trigger-width] p-0 glass-effect">
                            <Command>
                                <CommandInput placeholder={t('searchClientPlaceholder')} />
                                <CommandList>
                                    <CommandEmpty>{t('noClientFound')}</CommandEmpty>
                                    <CommandGroup>
                                        {contacts.map(c => (
                                            <CommandItem 
                                                key={c.id} 
                                                value={`${c.nom} ${c.empresa}`} 
                                                // ⚠️ Convertim l'ID a string o 'new' abans de passar-lo,
                                                // tot i que en el context del form es tracta com a Number | null.
                                                // onMetaChange('contact_id', c.id) és correcte segons la definició de EditableQuote
                                                // que utilitza Number (el hook ho gestiona)
                                                onSelect={() => onMetaChange('contact_id', c.id)} 
                                            >
                                                <Check className={cn("mr-2 h-4 w-4", contact_id !== null && Number(contact_id) === c.id ? "opacity-100" : "opacity-0")} />
                                                {/* ✅ Ajustem el text per contrast a la ComandItem */}
                                                <span className="text-foreground">{c.nom}</span> 
                                                <span className="text-xs text-muted-foreground ml-2">{c.empresa}</span>
                                            </CommandItem>
                                        ))}
                                    </CommandGroup>
                                </CommandList>
                            </Command>
                        </PopoverContent>
                    </Popover>
                </div>
                <div className="flex flex-col">
                    <Label htmlFor="quote_number" className="mb-1">{t('quoteNumberLabel')}</Label>
                    <Input
                        id="quote_number"
                        type="text"
                        value={quote_number || ''}
                        onChange={(e) => onMetaChange('quote_number', e.target.value)}
                    />
                </div>
                <div className="flex flex-col">
                    <Label htmlFor="issue_date" className="mb-1">{t('issueDateLabel')}</Label>
                    <Input
                        id="issue_date"
                        type="date"
                        value={formatDateForInput(issue_date)}
                        onChange={(e) => onMetaChange('issue_date', e.target.value)}
                    />
                </div>
                <div className="flex flex-col">
                    <Label htmlFor="expiry_date" className="mb-1">{t('expiryDateLabel')}</Label>
                    <Input
                        id="expiry_date"
                        type="date"
                        value={formatDateForInput(expiry_date)}
                        onChange={(e) => onMetaChange('expiry_date', e.target.value || null)}
                    />
                </div>
            </div>
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/quotes/[id]/_components/QuotePreview.tsx ===================

// /app/[locale]/(app)/crm/quotes/[id]/_components/QuotePreview.tsx (Refactoritzat)
"use client";

import React from 'react';
import { useTranslations } from 'next-intl';
// ✅ 1. Importem els tipus correctes des de la BD i el hook.
import { type Database } from '@/types/supabase';
import { type EditableQuote } from '../_hooks/useQuoteEditor';

// ✅ 2. Definim els tipus locals a partir de la BD.
type Contact = Database['public']['Tables']['contacts']['Row'];
type Team = Database['public']['Tables']['teams']['Row'];

interface QuotePreviewProps {
    quote: EditableQuote;
    contacts: Contact[];
    companyProfile: Team | null; // <-- Ara és de tipus 'Team'
    subtotal: number;
    discountAmount: number;
    tax: number;
    total: number;
}

export const QuotePreview = ({
    quote,
    contacts,
    companyProfile, // <-- Ja no es diu 'displayProfile', rep el 'team' directament
    subtotal,
    discountAmount,
    tax,
    total
}: QuotePreviewProps) => {
    const contact = contacts.find(c => c.id === quote.contact_id);
    const base = subtotal - discountAmount;
    const t = useTranslations('QuoteEditor');

    // ⛔ La funció 'mapTeamDataToProfile' i el tipus 'CompanyProfile' ja no són necessaris.

    return (
        <aside className="hidden lg:block glass-card overflow-y-auto">
            <div id="quote-preview-for-pdf">
                <div className="bg-white text-gray-900 px-8 py-2 font-sans text-sm">
                    <header className="flex justify-between items-center border-b-2 border-gray-200">
                        {companyProfile?.logo_url ? (
                            // eslint-disable-next-line @next/next/no-img-element
                            <img
                                src={companyProfile.logo_url}
                                alt="Logo"
                                style={{ maxWidth: '100px', height: '70px', objectFit: 'contain' }}
                                crossOrigin="anonymous"
                            />
                        ) : (
                            <div className="h-12 w-28 flex items-center justify-center bg-gray-100 text-gray-400 text-xs rounded">
                                {t('preview.logoPlaceholder')}
                            </div>
                        )}
                        <div className="text-right ml-2">
                            {/* ✅ 3. Accedim a les propietats del tipus 'Team'. */}
                            <p className="font-bold text-lg">{companyProfile?.name || t('preview.yourCompany')}</p>
                            <p className="text-gray-500 text-base mt-0"># {quote.quote_number || t('preview.pending')}</p>
                        </div>
                    </header>

                    <section className="grid grid-cols-2 gap-8 my-4">
                        <div>
                            <p className="font-semibold">{companyProfile?.name || t('preview.yourCompany')}</p>
                            <p className="text-gray-600">{companyProfile?.address}</p>
                            <p className="text-gray-600">{companyProfile?.tax_id}</p>
                            <p className="text-gray-600">{companyProfile?.email}</p>
                        </div>
                        <div className="text-right">
                            <p className="font-semibold">{contact?.nom || t('preview.unselectedClient')}</p>
                            <p className="text-gray-600">{contact?.empresa}</p>
                            <p className="text-gray-600">{contact?.email}</p>
                        </div>
                    </section>

                    {/* ---------------- DATES ---------------- */}
                    <section className="grid grid-cols-2 gap-8 my-6">
                        <div>
                            <p className="text-xs text-gray-500 font-bold">{t('preview.issueDate')}</p>
                            <p>
                                {quote.issue_date
                                    ? new Date(quote.issue_date).toLocaleDateString('ca-ES', { timeZone: 'UTC' })
                                    : ''}
                            </p>
                        </div>

                        <div className="text-right">
                            <p className="text-xs text-gray-500 font-bold">{t('preview.expiryDate')}</p>
                            <p>
                                {quote.expiry_date
                                    ? new Date(quote.expiry_date).toLocaleDateString('ca-ES', { timeZone: 'UTC' })
                                    : 'N/A'}
                            </p>
                        </div>
                    </section>

                    {/* ---------------- TAULA D'ITEMS ---------------- */}
                    {/* ---------------- TAULA D'ITEMS (AMB LÒGICA CONDICIONAL) ---------------- */}
                    <section>
                        <table className="w-full">
                            <thead className="bg-gray-100">
                                <tr>
                                    <th className="p-2 text-left font-bold text-xs uppercase w-[60%]">
                                        {t('preview.itemHeader')}
                                    </th>

                                    {/* ✅ Mostrem/amaguem les columnes segons la preferència */}
                                    {(quote.show_quantity ?? true) && (
                                        <>
                                            <th className="p-2 text-center font-bold text-xs uppercase">
                                                {t('preview.quantityHeader')}
                                            </th>
                                            <th className="p-2 text-right font-bold text-xs uppercase">
                                                {t('preview.priceHeader')}
                                            </th>
                                        </>
                                    )}

                                    <th className="p-2 text-right font-bold text-xs uppercase">
                                        {t('preview.totalHeader')}
                                    </th>
                                </tr>
                            </thead>

                            <tbody>
                                {quote.items?.map((item, index) => (
                                    <tr key={index} className="border-b border-gray-200">
                                        <td className="p-2 pr-2">
                                            {/* ✅ CORRECCIÓ 2: El 'p' amb la quantitat extra s'ha eliminat. */}
                                            {item.description}
                                        </td>
                                        
                                        {/* Mostrem/amaguem les cel·les corresponents */}
                                        {(quote.show_quantity ?? true) && (
                                            <>
                                                <td className="text-center p-2">{item.quantity}</td>
                                                <td className="text-right p-2">{item.unit_price?.toFixed(2)} €</td>
                                            </>
                                        )}

                                        <td className="text-right p-2 font-medium">
                                            {((item.quantity || 0) * (item.unit_price || 0)).toFixed(2)} €
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </section>

                    {/* ---------------- TOTALS ---------------- */}
                    <section className="flex justify-end mt-6">
                        <div className="w-full max-w-xs space-y-2">

                            {/* Subtotal */}
                            <div className="flex justify-between">
                                <p className="text-gray-600">{t('totals.subtotal')}:</p>
                                <p>{subtotal.toFixed(2)} €</p>
                            </div>

                            {/* Descompte */}
                            {quote.discount && quote.discount > 0 && (
                                <div className="flex justify-between text-green-600">
                                    <p>{t('preview.discountLine')} ({quote.discount}%)</p>
                                    <p>-{discountAmount.toFixed(2)} €</p>
                                </div>
                            )}

                            {/* Base imposable */}
                            <div className="flex justify-between">
                                <p className="text-gray-600">{t('totals.taxableBase')}:</p>
                                <p>{base.toFixed(2)} €</p>
                            </div>

                            {/* IVA */}
                            <div className="flex justify-between">
                                <p className="text-gray-600">
                                    {t('preview.taxesLine')} ({quote.tax_percent ?? 21}%)
                                </p>
                                <p>{tax.toFixed(2)} €</p>
                            </div>

                            {/* TOTAL FINAL */}
                            <div className="flex justify-between font-bold text-xl mt-2 pt-2 border-t-2 border-gray-800">
                                <p>{t('preview.totalHeader')}:</p>
                                <p>{total.toFixed(2)} €</p>
                            </div>
                        </div>
                    </section>

                    {/* ---------------- NOTES I CONDICIONS ---------------- */}
                    <footer className="mt-10 pt-6 border-t border-gray-200">
                        <h3 className="font-bold mb-2">{t('preview.notesAndTerms')}</h3>
                        {/* ✅ CANVI: Hem canviat 'text-xs' per 'text-sm' i 'text-gray-500' per 'text-gray-600' */}
                        <p className="text-sm text-gray-600 whitespace-pre-wrap">
                            {quote.notes}
                        </p>
                    </footer>

                </div>
            </div>
        </aside>
    );
};


// =================== FILE: src/app/[locale]/(app)/crm/quotes/[id]/_components/QuoteTotals.tsx ===================

"use client";

import React from 'react';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { useTranslations } from 'next-intl';

interface QuoteTotalsProps {
    subtotal: number;
    discount: number | null;
    setDiscount: (discount: number) => void;
    discountAmount: number;
    tax: number;
    total: number;
    tax_percent: number | null;
    setTaxPercent: (value: number) => void;
}

export const QuoteTotals: React.FC<QuoteTotalsProps> = ({ 
    subtotal, 
    discount, 
    setDiscount, 
    discountAmount, 
    tax, 
    total,
    tax_percent,
    setTaxPercent
}) => {
    const t = useTranslations('QuoteEditor.totals');
    
    return (
        <div className="mt-6 ml-auto w-full max-w-sm space-y-2 px-4 py-2">
            <div className="flex justify-between">
                <span className="text-muted-foreground">{t('subtotal')}</span>
                <span className="font-medium">€{subtotal.toFixed(2)}</span>
            </div>
            
            <div className="flex justify-between items-center">
                <Label htmlFor="discount" className="text-muted-foreground">{t('discount')}</Label>
                <div className="flex items-center gap-1">
                    <Input 
                        id="discount"
                        type="number" 
                        value={discount ?? 0} 
                        onChange={(e) => setDiscount(parseFloat(e.target.value) || 0)} 
                        className="w-16 h-8 text-right bg-transparent" 
                        placeholder="0" 
                    />
                    <span className="text-muted-foreground">%</span>
                </div>
            </div>

            {discountAmount > 0 && (
                <div className="flex justify-between text-muted-foreground">
                    <span>{t('discountAmount')}</span>
                    <span>-€{discountAmount.toFixed(2)}</span>
                </div>
            )}

            <div className="flex justify-between">
                <span className="text-muted-foreground">{t('taxableBase')}</span>
                <span>€{(subtotal - discountAmount).toFixed(2)}</span>
            </div>
            
            {/* ✅ AQUESTA ÉS LA LÒGICA COMPLETADA PER A L'IVA */}
            <div className="flex justify-between items-center">
                <Label htmlFor="tax_percent" className="text-muted-foreground">{t('taxes')}</Label>
                <div className="flex items-center gap-1">
                    <Input
                        id="tax_percent"
                        type="number"
                        value={tax_percent ?? 21}
                        onChange={(e) => setTaxPercent(parseFloat(e.target.value) || 0)}
                        className="w-16 h-8 text-right bg-transparent"
                    />
                    <span className="text-muted-foreground">%</span>
                </div>
                <span className="font-medium">€{tax.toFixed(2)}</span>
            </div>

            <div className="flex justify-between text-lg font-bold border-t border-border pt-2">
                <span>{t('total')}</span>
                <span>€{total.toFixed(2)}</span>
            </div>
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/quotes/[id]/_components/StatCardsGrid.tsx ===================

// /app/[locale]/(app)/dashboard/_components/StatCardsGrid.tsx (Refactoritzat i Complet)
"use client";

import React, { memo } from "react";
import { useTranslations } from "next-intl";
import { StatCard } from "@/components/shared/StatCard";
import { Users, Target, Euro, BadgePercent } from "lucide-react";

/**
 * @file StatCardsGrid.tsx
 * @description Mostra la graella de targetes de KPI principals del Dashboard.
 */

// ✅ 1. Definim una interfície clara per a les mètriques que aquest component espera.
// Aquesta estructura és explícita i fàcil de verificar a l'hora de passar les props.
interface DashboardStats {
    totalContacts: number;
    opportunities: number;
    invoiced: number;
    pending: number;
}

interface StatCardsGridProps {
    stats: DashboardStats;
}

/**
 * ✅ Component memoitzat per evitar re-render innecessaris.
 * S’encarrega només de representar les targetes de mètriques principals.
 */
export const StatCardsGrid = memo(({ stats }: StatCardsGridProps) => {
    const t = useTranslations("DashboardClient");

    return (
        <div className="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-6">
            <StatCard
                href="/crm/contactes"
                icon={Users}
                title={t("totalContacts")}
                value={stats.totalContacts.toLocaleString()}
                color="bg-[#2d7ef7]"
                openText={t("openLink")}
            />
            <StatCard
                href="/crm/pipeline"
                icon={Target}
                title={t("activeOpportunities")}
                value={stats.opportunities.toLocaleString()}
                color="bg-[#12a150]"
                openText={t("openLink")}
            />
            <StatCard
                href="/finances/facturacio"
                icon={Euro}
                title={t("monthlyInvoicing")}
                value={`€${stats.invoiced.toLocaleString()}`}
                color="bg-[#8a3ffc]"
                openText={t("openLink")}
            />
            <StatCard
                href="/finances/facturacio"
                icon={BadgePercent}
                title={t("pendingVAT")}
                value={`€${stats.pending.toLocaleString()}`}
                color="bg-[#f27917]"
                openText={t("openLink")}
            />
        </div>
    );
});

// ✅ 2. Afegim un displayName per a una millor depuració amb les React DevTools.
StatCardsGrid.displayName = "StatCardsGrid";

// =================== FILE: src/app/[locale]/(app)/crm/quotes/[id]/_hooks/useQuoteEditor.ts ===================

// /app/crm/quotes/[id]/_hooks/useQuoteEditor.ts (COMPLET I CORREGIT)
"use client";

import { useReducer, useCallback, useMemo, useTransition, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from "sonner";
import { createClient } from '@/lib/supabase/client';
import { saveQuoteAction, deleteQuoteAction, sendQuoteAction } from '../actions';
import { type Database } from '@/types/supabase';
// ✅ 1. CORRECCIÓ: Importem 'useTranslations' com a valor.
import { useTranslations } from 'next-intl';

// Definicions de tipus basades en la BD
type Quote = Database['public']['Tables']['quotes']['Row'];
type Opportunity = Database['public']['Tables']['opportunities']['Row'];
type QuoteItem = Database['public']['Tables']['quote_items']['Row'];
type Team = Database['public']['Tables']['teams']['Row'];

// Aquest tipus representa un pressupost que pot ser nou ('id: "new"') o existent ('id: number')
export type EditableQuote = Omit<Quote, 'id'> & { 
    id: 'new' | number;
    items: Partial<QuoteItem>[]; 
};

// Props que espera el hook
interface UseQuoteEditorProps {
    initialQuote: EditableQuote;
    initialOpportunities: Opportunity[];
    companyProfile: Team | null;
    userId: string;
}

// ... (Estat i accions per al Reducer es mantenen igual)
type EditorState = {
    quote: EditableQuote;
    currentTeamData: Team | null;
    contactOpportunities: Opportunity[];
    isDeleteDialogOpen: boolean;
    isProfileDialogOpen: boolean;
    sendingStatus: 'idle' | 'generating' | 'uploading' | 'sending';
};

type EditorAction =
    | { type: 'SET_QUOTE'; payload: EditableQuote }
    | { type: 'UPDATE_QUOTE_FIELD'; payload: { field: keyof EditableQuote; value: EditableQuote[keyof EditableQuote] } }
    | { type: 'SET_TEAM_DATA'; payload: Team | null }
    | { type: 'SET_OPPORTUNITIES'; payload: Opportunity[] }
    | { type: 'SET_DELETE_DIALOG'; payload: boolean }
    | { type: 'SET_PROFILE_DIALOG'; payload: boolean }
    | { type: 'SET_SENDING_STATUS'; payload: EditorState['sendingStatus'] };
    
function editorReducer(state: EditorState, action: EditorAction): EditorState {
    switch (action.type) {
        case 'SET_QUOTE':
            return { ...state, quote: action.payload };
        case 'UPDATE_QUOTE_FIELD':
            return { ...state, quote: { ...state.quote, [action.payload.field]: action.payload.value } };
        case 'SET_TEAM_DATA':
            return { ...state, currentTeamData: action.payload };
        case 'SET_OPPORTUNITIES':
            return { ...state, contactOpportunities: action.payload };
        case 'SET_DELETE_DIALOG':
            return { ...state, isDeleteDialogOpen: action.payload };
        case 'SET_PROFILE_DIALOG':
            return { ...state, isProfileDialogOpen: action.payload };
        case 'SET_SENDING_STATUS':
            return { ...state, sendingStatus: action.payload };
        default:
            throw new Error('Unhandled action type');
    }
}

export function useQuoteEditor({
    initialQuote,
    initialOpportunities,
    companyProfile,
    userId
}: UseQuoteEditorProps) {
    const router = useRouter();
    const supabase = createClient();
    const t = useTranslations('QuoteEditor');

    const initialState: EditorState = {
        quote: initialQuote,
        currentTeamData: companyProfile,
        contactOpportunities: initialOpportunities,
        isDeleteDialogOpen: false,
        isProfileDialogOpen: false,
        sendingStatus: 'idle',
    };

    const [state, dispatch] = useReducer(editorReducer, initialState);
    const [isSaving, startSaveTransition] = useTransition();
    const [isSending, startSendTransition] = useTransition();

    const { subtotal, discountAmount, tax, total } = useMemo(() => {
        const { items, discount, tax_percent } = state.quote;
        const sub = items.reduce((acc, item) => acc + (item.quantity || 0) * (item.unit_price || 0), 0);
        const calculatedDiscountAmount = sub * ((discount || 0) / 100);
        const subAfterDiscount = sub - calculatedDiscountAmount;
        const taxAmount = subAfterDiscount * ((tax_percent ?? 21) / 100);
        return { subtotal: sub, discountAmount: calculatedDiscountAmount, tax: taxAmount, total: subAfterDiscount + taxAmount };
    }, [state.quote]);

    const onQuoteChange = useCallback(<K extends keyof EditableQuote>(field: K, value: EditableQuote[K]) => {
        dispatch({ type: 'UPDATE_QUOTE_FIELD', payload: { field, value } });
    }, []);

    const onItemsChange = useCallback((items: Partial<QuoteItem>[]) => {
        dispatch({ type: 'UPDATE_QUOTE_FIELD', payload: { field: 'items', value: items } });
    }, []);

    const handleSave = useCallback(() => {
        startSaveTransition(async () => {
            // ✅ 2. L'objecte que passem ara és compatible amb el tipus 'QuotePayload' de l'acció.
            const result = await saveQuoteAction({ ...state.quote, subtotal, tax, total });
            if (result.success && typeof result.data === 'number') {
                toast.success(result.message);
                if (state.quote.id === 'new') {
                    router.replace(`/crm/quotes/${result.data}`);
                }
            } else {
                toast.error(t('toast.errorTitle'), { description: result.message });
            }
        });
    }, [state.quote, subtotal, tax, total, router, t]);

    const handleDelete = useCallback(() => {
        // ✅ 3. GUARD: Aquesta comprovació assegura que només passem un 'number' a l'acció.
        if (typeof state.quote.id !== 'number') return;
        startSaveTransition(async () => {
            if (typeof state.quote.id !== 'number') return;
            const result = await deleteQuoteAction(state.quote.id);
            if (result.success) {
                toast.success(result.message);
                router.push('/crm/quotes');
            } else {
                toast.error(t('toast.errorTitle'), { description: result.message });
            }
        });
    }, [state.quote.id, router, t]);

    const handleSend = useCallback(() => {
        // ✅ 4. GUARD: Mateixa comprovació per a l'acció d'enviament.
        if (typeof state.quote.id !== 'number') {
            toast.error(t('toast.errorTitle'), { description: t('toast.saveFirst') });
            return;
        }

        startSendTransition(async () => {
            const element = document.getElementById('quote-preview-for-pdf');
            if (!element) return;

            try {
                dispatch({ type: 'SET_SENDING_STATUS', payload: 'generating' });
                toast.info(t('quoteEditor.generatingPDF'));

                const { default: html2pdf } = await import('html2pdf.js');
                // ✅ 5. CORRECCIÓ DE TIPUS: Definim explícitament l'orientació.
                const PDF_OPTIONS = {
                    margin: 10,
                    filename: `pressupost-${state.quote.quote_number || 'esborrany'}.pdf`,
                    image: { type: 'jpeg', quality: 0.98 } as const,
                    html2canvas: { scale: 3, useCORS: true },
                    jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' as const },
                    pagebreak: { mode: 'css' as const, before: '.page-break-before' }
                };

                const pdfBlob = await html2pdf().from(element).set(PDF_OPTIONS).output('blob');
                
                dispatch({ type: 'SET_SENDING_STATUS', payload: 'uploading' });
                const filePath = `${userId}/${state.quote.id}.pdf`;
                const { error: uploadError } = await supabase.storage.from('quotes').upload(filePath, pdfBlob, { upsert: true });
                if (uploadError) throw uploadError;

                dispatch({ type: 'SET_SENDING_STATUS', payload: 'sending' });
                const result = await sendQuoteAction(state.quote.id as number);
                if (!result.success) throw new Error(result.message);

                dispatch({ type: 'UPDATE_QUOTE_FIELD', payload: { field: 'status', value: 'Sent' } });
                dispatch({ type: 'UPDATE_QUOTE_FIELD', payload: { field: 'sent_at', value: new Date().toISOString() } });
                
                toast.success("Èxit!", { description: result.message });
            } catch (error) {
                const e = error instanceof Error ? error : new Error(t('toast.sendError'));
                toast.error(t('toast.errorTitle'), { description: e.message });
            } finally {
                dispatch({ type: 'SET_SENDING_STATUS', payload: 'idle' });
            }
        });
    }, [state.quote, userId, supabase, t]);

    useEffect(() => {
        dispatch({ type: 'SET_QUOTE', payload: initialQuote });
    }, [initialQuote]);

    useEffect(() => {
        const fetchOpportunities = async () => {
            if (!state.quote.contact_id) {
                dispatch({ type: 'SET_OPPORTUNITIES', payload: [] });
                return;
            }
            const { data } = await supabase.from('opportunities').select('*').eq('contact_id', state.quote.contact_id);
            dispatch({ type: 'SET_OPPORTUNITIES', payload: data || [] });
        };
        fetchOpportunities();
    }, [state.quote.contact_id, supabase]);

    return {
        state,
        quote: state.quote,
        dispatch,
        onQuoteChange,
        onItemsChange,
        setQuote: (newQuote: EditableQuote) => dispatch({ type: 'SET_QUOTE', payload: newQuote }),
        setIsDeleteDialogOpen: (isOpen: boolean) => dispatch({ type: 'SET_DELETE_DIALOG', payload: isOpen }),
        setIsProfileDialogOpen: (isOpen: boolean) => dispatch({ type: 'SET_PROFILE_DIALOG', payload: isOpen }),
        setCurrentTeamData: (data: Team | null) => dispatch({ type: 'SET_TEAM_DATA', payload: data }),
        subtotal, discountAmount, tax, total,
        handleSave, handleDelete, handleSend,
        isSaving, isSending,
        t
    };
}

// =================== FILE: src/app/[locale]/(app)/crm/quotes/[id]/_hooks/useQuoteItems.ts ===================

// /app/[locale]/(app)/crm/quotes/[id]/_hooks/useQuoteItems.ts (CORREGIT)
"use client";

import { useState, useTransition, useCallback } from "react";
import { toast } from 'sonner';
import { createProductAction } from '../actions';
import { type Database } from '@/types/supabase';

// Definim els tipus a partir de la BD.
type QuoteItem = Database['public']['Tables']['quote_items']['Row'];
type Product = Database['public']['Tables']['products']['Row'];

interface UseQuoteItemsProps {
    items: Partial<QuoteItem>[];
    onItemsChange: (newItems: Partial<QuoteItem>[]) => void;
    userId: string;
    t: (key: string) => string;
};

export function useQuoteItems({ items, onItemsChange, userId, t }: UseQuoteItemsProps) {
    const [isSavingProduct, startSaveProductTransition] = useTransition();
    const [isCreating, setIsCreating] = useState(false);
    const [newProduct, setNewProduct] = useState({ name: '', price: '' });
    const [isPopoverOpen, setIsPopoverOpen] = useState(false);

    const handleItemChange = useCallback(<K extends keyof QuoteItem>(index: number, field: K, value: QuoteItem[K]) => {
        const newItems = [...items];
        newItems[index] = { ...newItems[index], [field]: value };
        onItemsChange(newItems);
    }, [items, onItemsChange]);

    const handleAddProduct = useCallback((product: Product) => {
        const newItem: Partial<QuoteItem> = {
            description: product.name || product.description || '',
            quantity: 1,
            unit_price: product.price || 0,
            product_id: product.id,
            user_id: userId,
            // La propietat 'total' es calcula a partir de quantity i unit_price.
            total: product.price || 0 
            // ⛔ SOLUCIÓ: La propietat 'tax_rate' s'ha eliminat perquè no existeix a la taula 'quote_items'.
        };
        onItemsChange([...items, newItem]);
        setIsPopoverOpen(false);
    }, [items, onItemsChange, userId]);

    const handleRemoveItem = useCallback((index: number) => {
        onItemsChange(items.filter((_, i) => i !== index));
    }, [items, onItemsChange]);
    
    const handleManualItem = useCallback(() => {
        const newItem: Partial<QuoteItem> = {
            product_id: null,
            description: '',
            quantity: 1,
            unit_price: 0,
            user_id: userId,
            total: 0
            // ⛔ 'tax_rate' eliminat.
        };
        onItemsChange([...items, newItem]);
        setIsPopoverOpen(false);
    }, [items, onItemsChange, userId]);

    const handleSaveNewProduct = useCallback(() => {
        if (!newProduct.name || !newProduct.price) {
            toast.error(t('toast.requiredFields'), { description: t('toast.requiredFieldsDesc') });
            return;
        }
        startSaveProductTransition(async () => {
            const result = await createProductAction({ name: newProduct.name, price: parseFloat(newProduct.price) });
            if (result.success && result.data) {
                toast.success(t('toast.productCreated'), { description: t('toast.productCreatedDesc') });
                handleAddProduct(result.data as Product);
                setNewProduct({ name: '', price: '' });
                setIsCreating(false);
            } else {
                toast.error("Error", { description: result.message });
            }
        });
    }, [newProduct, t, handleAddProduct]);

    return {
        isSavingProduct, isCreating, setIsCreating, newProduct, setNewProduct,
        isPopoverOpen, setIsPopoverOpen, handleItemChange, handleAddProduct,
        handleRemoveItem, handleSaveNewProduct, handleManualItem,
    };
}

// =================== FILE: src/app/[locale]/(app)/crm/quotes/_components/QuotesClient.tsx ===================

// /app/[locale]/(app)/crm/quotes/_components/QuotesClient.tsx
"use client";

import React from 'react';
import { motion } from 'framer-motion';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { Loader2, Trash2, Edit, ArrowUpDown, Plus } from 'lucide-react'; 
import type { QuoteWithContact } from '../page';
import { useTranslations, useLocale } from 'next-intl';
import { QUOTE_STATUS_MAP } from '@/types/crm';
import { cn } from '@/lib/utils/utils';
import { useQuotes } from '../_hooks/useQuotes'; 

// MAPA DE CLASSES D'ESTAT MILLORAT PER AL CONTRAST
const TEXT_CONTRAST_MAP: Record<string, string> = {
    'bg-gray-100': 'text-gray-800',
    'bg-yellow-100': 'text-yellow-800',
    'bg-blue-100': 'text-blue-800',
    'bg-green-600': 'text-white',
    'bg-red-600': 'text-white',
};

export function QuotesClient({ initialQuotes }: { initialQuotes: QuoteWithContact[] }) {
    const t = useTranslations('QuotesPage');
    const locale = useLocale();

    const {
        isPending,
        quotes, 
        quoteToDelete,
        setQuoteToDelete,
        handleSort,
        handleDelete,
        searchParams,
    } = useQuotes({ initialQuotes, t });

    // Component intern per a les capçaleres ordenables, ara utilitza 'searchParams' del hook.
    const SortableHeader = ({ column, label }: { column: string, label: string }) => {
        const order = searchParams.get(`sortBy-${column}`);
        return (
            <TableHead onClick={() => handleSort(column)} className="cursor-pointer hover:bg-muted/50 transition-colors">
                <div className="flex items-center gap-2">
                    {label}
                    {order ? (
                        <span className="text-foreground text-xs">{order === 'asc' ? '▲' : '▼'}</span>
                    ) : (
                        <ArrowUpDown className="w-4 h-4 text-muted-foreground/30" />
                    )}
                </div>
            </TableHead>
        );
    };

    return (
        <>
            {/* Capçalera (Títol i Botó) */}
            <div className="flex justify-between items-center mb-8">
                <h1 className="text-3xl font-bold">Pressupostos</h1>
                <Button asChild>
                    <Link href={`/${locale}/crm/quotes/new`}>
                        <Plus className="w-4 h-4 mr-2" /> {t('newQuoteButton')} 
                    </Link>
                </Button>
            </div>
            
            <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className={cn("relative", isPending && "opacity-50 pointer-events-none")}>
                {isPending && (<div className="absolute inset-0 flex items-center justify-center bg-background/50 z-10"><Loader2 className="w-8 h-8 animate-spin" /></div>)}
                
                {/* Taula amb estil sòlid */}
                <div className="bg-card rounded-xl shadow-lg border border-border"> 
                    <Table>
                        <TableHeader>
                            <TableRow>
                                {/* Les capçaleres per defecte ja tenen padding ajustat */}
                                <SortableHeader column="quote_number" label={t('table.number')} />
                                <SortableHeader column="contacts.nom" label={t('table.client')} />
                                <SortableHeader column="issue_date" label={t('table.issueDate')} />
                                <SortableHeader column="total" label={t('table.total')} />
                                <SortableHeader column="status" label={t('table.status')} />
                                <TableHead className="text-right">{t('table.actions')}</TableHead>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            {quotes.length > 0 ? quotes.map(quote => {
                                const statusInfo = QUOTE_STATUS_MAP.find(s => s.dbValue === quote.status) || { key: 'unknown', colorClass: 'bg-gray-100' };
                                const textClass = TEXT_CONTRAST_MAP[statusInfo.colorClass] || 'text-white';

                                // ✅ CLASSE base per a totes les cel·les: reduïm 'py-4' per defecte a 'py-1'
                                const BASE_CELL_CLASS = "py-1";

                                return (
                                    <TableRow key={quote.id}>
                                        {/* Reducció de padding vertical a 'py-2' */}
                                        <TableCell className={cn("font-medium", BASE_CELL_CLASS)}>{quote.quote_number || `PRE-${String(quote.id).substring(0, 6)}`}</TableCell>
                                        <TableCell className={BASE_CELL_CLASS}>{quote.contacts?.nom || t('noClient')}</TableCell>
                                        <TableCell className={BASE_CELL_CLASS}>{new Date(quote.issue_date).toLocaleDateString(locale)}</TableCell>
                                        <TableCell className={BASE_CELL_CLASS}>€{quote.total?.toLocaleString(locale, { minimumFractionDigits: 2 }) || '0,00'}</TableCell>
                                        
                                        {/* Cel·la d'Estat: també amb padding reduït */}
                                        <TableCell className={BASE_CELL_CLASS}>
                                            <span className={cn(
                                                "px-2 py-1 text-xs font-medium rounded-full",
                                                statusInfo.colorClass,
                                                textClass,
                                                "min-w-[70px] inline-flex justify-center" 
                                            )}>
                                                {t(`status.${statusInfo.key}`)}
                                            </span>
                                        </TableCell>
                                        
                                        {/* Cel·la d'Accions: alineació a la dreta i padding reduït */}
                                        <TableCell className={cn("text-right", BASE_CELL_CLASS)}>
                                            <Link href={`/${locale}/crm/quotes/${quote.id}`} className="inline-flex items-center justify-center h-8 w-8" title={t('actions.edit')}>
                                                <Edit className="w-4 h-4" />
                                            </Link>
                                            <Button variant="ghost" size="icon" title={t('actions.delete')} onClick={() => setQuoteToDelete(quote)}>
                                                <Trash2 className="w-4 h-4 text-red-500" />
                                            </Button>
                                        </TableCell>
                                    </TableRow>
                                );
                            }) : (
                                <TableRow>
                                    <TableCell colSpan={6} className="text-center h-24">{t('emptyState')}</TableCell>
                                </TableRow>
                            )}
                        </TableBody>
                    </Table>
                </div>
            </motion.div>

            {/* AlertDialog (sense canvis) */}
            <AlertDialog open={!!quoteToDelete} onOpenChange={() => setQuoteToDelete(null)}>
                <AlertDialogContent>
                    <AlertDialogHeader>
                        <AlertDialogTitle>{t('deleteDialog.title')}</AlertDialogTitle>
                        <AlertDialogDescription>
                            {t('deleteDialog.description1')} <span className="font-bold">{quoteToDelete?.quote_number}</span>.
                        </AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                        <AlertDialogCancel disabled={isPending}>{t('deleteDialog.cancelButton')}</AlertDialogCancel>
                        <AlertDialogAction onClick={handleDelete} className="bg-destructive hover:bg-destructive/90" disabled={isPending}>
                            {isPending && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                            {isPending ? t('deleteDialog.deleting') : t('deleteDialog.confirmButton')}
                        </AlertDialogAction>
                    </AlertDialogFooter>
                </AlertDialogContent>
            </AlertDialog>
        </>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/quotes/_components/QuotesData.tsx ===================

import { QuotesClient } from './QuotesClient';
import { validatePageSession } from "@/lib/supabase/session";
import type { Database } from '@/types/supabase';

// ✅ 1. Definim els tipus necessaris localment, eliminant la dependència amb 'page.tsx'.
type Quote = Database['public']['Tables']['quotes']['Row'];
type Contact = Database['public']['Tables']['contacts']['Row'];

type QuoteWithContact = Quote & {
  contacts: Pick<Contact, 'nom' | 'empresa'> | null;
};

// Aquest és el tipus de dades que la pàgina realment passa després de validar amb Zod.
// És més segur i explícit.
interface QuotesDataProps {
  searchParams: {
    page: string;
    limit: string;
    query?: string;
    status?: string;
    // Podries afegir aquí altres filtres si els necessites, com dates o sortBy
    // issue_date_from?: string;
    // sortBy?: string;
  };
}

/**
 * Component Server-Side que carrega les dades dels pressupostos.
 */
export async function QuotesData({ searchParams }: QuotesDataProps) {
  try {
    const { supabase, activeTeamId } = await validatePageSession();
    
    // Comencem la consulta base.
    let query = supabase
      .from('quotes')
      .select('*, contacts(nom, empresa)')
      .eq('team_id', activeTeamId);

    // ✅ 2. Apliquem filtres de manera segura i directa.
    if (searchParams.status) {
      const allowedStatuses = ["Draft", "Sent", "Accepted", "Declined", "Invoiced"] as const;
      type Status = typeof allowedStatuses[number];
      const status = allowedStatuses.find(s => s === searchParams.status) as Status | undefined;
      if (status) {
        query = query.eq('status', status);
      }
    }

    if (searchParams.query) {
      // Busca en múltiples camps si és necessari (exemple)
      query = query.or(
        `quote_number.ilike.%${searchParams.query}%,` +
        `contacts.nom.ilike.%${searchParams.query}%`
      );
    }
    
    // Ordenació per defecte (pots fer-la dinàmica si afegeixes sortBy a les props)
    query = query.order('issue_date', { ascending: false });

    // Paginació
    const page = parseInt(searchParams.page, 10);
    const limit = parseInt(searchParams.limit, 10);
    const offset = (page - 1) * limit;
    query = query.range(offset, offset + limit - 1);
    
    // ✅ 3. Executem la consulta amb el tipus de retorn esperat.
    const { data: quotes, error } = await query.returns<QuoteWithContact[]>();
    
    if (error) throw error;
    
    // Passem les dades al component client.
    return <QuotesClient initialQuotes={quotes || []} />;

  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : "Unknown error";
    console.error("Error loading quotes:", errorMessage);
    return <div className="p-8 text-center text-destructive">Error loading quotes.</div>;
  }
}

// =================== FILE: src/app/[locale]/(app)/crm/quotes/_components/QuotesSkeleton.tsx ===================

"use client";


import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";


/**
 * @summary Mostra un esquelet de càrrega per a la pàgina de llista de Pressupostos.
 */
export function QuotesSkeleton() {
  return (
    <div className="animate-pulse">
      {/* Esquelet de la capçalera */}
      <div className="flex justify-between items-center mb-8">
        <div className="h-9 w-48 bg-gray-700/50 rounded-md"></div>
        <div className="h-10 w-40 bg-gray-700/50 rounded-md"></div>
      </div>

      {/* Esquelet de la taula */}
      <div className="glass-card">
        <Table>
          <TableHeader>
            <TableRow>
              {[...Array(6)].map((_, i) => (
                <TableHead key={i}><div className="h-5 w-24 bg-gray-700/50 rounded-md"></div></TableHead>
              ))}
            </TableRow>
          </TableHeader>
          <TableBody>
            {[...Array(5)].map((_, i) => (
              <TableRow key={i} className="border-b-transparent">
                {[...Array(6)].map((_, j) => (
                  <TableCell key={j}><div className="h-6 bg-gray-700/50 rounded-md"></div></TableCell>
                ))}
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/crm/quotes/_hooks/useQuotes.ts ===================

// /app/[locale]/(app)/crm/quotes/_hooks/useQuotes.ts
"use client";

import { useState, useEffect, useTransition, useCallback } from 'react';
import { useRouter, usePathname, useSearchParams } from 'next/navigation';
import { toast } from 'sonner';
// ✅ Importem el tipus QuoteWithContact des del Server Component.
import type { QuoteWithContact } from '../page';
import { deleteQuoteAction } from '../actions';
// ⚠️ Nota: L'ID hauria de ser de tipus number (bigint) o string (uuid) segons la DB.
// El tipus 'id' del tipus QuoteWithContact serà la font de veritat aquí.

type UseQuotesProps = {
    initialQuotes: QuoteWithContact[];
    t: (key: string) => string;
};

export function useQuotes({ initialQuotes, t }: UseQuotesProps) {
    const router = useRouter();
    const pathname = usePathname();
    const searchParams = useSearchParams();
    const [isPending, startTransition] = useTransition();

    const [quotes, setQuotes] = useState(initialQuotes);
    const [quoteToDelete, setQuoteToDelete] = useState<QuoteWithContact | null>(null);

    useEffect(() => {
        setQuotes(initialQuotes);
    }, [initialQuotes]);

    const handleSort = (column: string) => {
        const params = new URLSearchParams(searchParams.toString());
        const currentOrder = params.get(`sortBy-${column}`);
        
        params.forEach((_, key) => {
            if (key.startsWith('sortBy-')) {
                params.delete(key);
            }
        });

        const newOrder = currentOrder === 'desc' ? 'asc' : 'desc';
        params.set(`sortBy-${column}`, newOrder);

        startTransition(() => {
            router.push(`${pathname}?${params.toString()}`);
        });
    };

    const handleDelete = useCallback(() => {
        if (!quoteToDelete) return;
        
        const originalQuotes = quotes;
        setQuotes(currentQuotes => currentQuotes.filter(q => q.id !== quoteToDelete.id));
        setQuoteToDelete(null);

        startTransition(async () => {
            // ✅ Passem el 'id' directament.
            // La tipologia correcta de 'id' (number o string) és vital per a l'acció
            // del servidor. Assumim que 'id' és de tipus 'number' pel context de bigint
            // com a ID principal en el codi de l'acció.
            const result = await deleteQuoteAction(quoteToDelete.id);
            if (result.success) {
                toast.success(t('toast.successTitle'), { description: result.message });
                router.refresh();
            } else {
                toast.error(t('toast.errorTitle'), { description: result.message });
                setQuotes(originalQuotes); // Revertim en cas d'error
            }
        });
    }, [quoteToDelete, t, quotes, router]); // ✅ Afegim 'quotes' a les dependències. La dependència estava ja correcte.

    return {
        isPending,
        quotes,
        quoteToDelete,
        setQuoteToDelete,
        handleSort,
        handleDelete,
        searchParams,
    };
}

// =================== FILE: src/app/[locale]/(app)/dashboard/actions.ts ===================

'use server';

import { createClient } from "@/lib/supabase/server";
import { validateUserSession } from "@/lib/supabase/session";
import { revalidatePath } from "next/cache";
import { NewTaskPayload } from "@/types/dashboard/types"; // ✅ Importem el nostre tipus centralitzat   
import { Tables } from "@/types/supabase";

export async function addTask(taskData: NewTaskPayload) {
  const supabase = createClient();

  const { data: { user } } = await supabase.auth.getUser();
  if (!user) {
    return { error: { message: "Not authenticated" } };
  }

  const session = await validateUserSession();
  if ('error' in session) return { error: session.error };
  const { activeTeamId } = session;

  const { error } = await supabase
    .from('tasks')
    .insert([{ 
        ...taskData,
        user_id: user.id,
        team_id: activeTeamId,
    }]);

  if (error) {
    console.error('Error creating task:', error);
    return { error };
  }

  revalidatePath('/dashboard');
  return { error: null };
}

// ✅ NOVA ACCIÓ: Afegeix aquesta funció per eliminar una tasca
export async function deleteTask(taskId: number) {
  const supabase = createClient();

  const { data: { user } } = await supabase.auth.getUser();
  if (!user) {
    return { error: { message: "No autenticat" } };
  }

  // La política RLS ja s'encarrega de verificar que l'usuari
  // només pot eliminar tasques del seu equip.
  const { error } = await supabase
    .from('tasks')
    .delete()
    .eq('id', taskId);

  if (error) {
    console.error('Error en eliminar la tasca:', error);
    return { error };
  }

  revalidatePath('/dashboard'); // Refresquem les dades del servidor
  return { error: null };
}

// ✅ NOVA ACCIÓ: Afegeix aquesta funció per crear un departament
export async function addDepartment(name: string) {
  const supabase = createClient();

  const session = await validateUserSession();
  if ('error' in session) return { error: session.error };
  const { activeTeamId } = session;

  // Intentem inserir el nou departament i retornem la fila creada
  const { data, error } = await supabase
    .from('departments')
    .insert({ name, team_id: activeTeamId })
    .select()
    .single(); // .single() és clau per obtenir l'objecte creat

  if (error) {
    console.error('Error en crear el departament:', error);
    // Gestionem errors de duplicitat d'una manera més amigable
    if (error.code === '23505') {
      return { error: { message: `El departament "${name}" ja existeix.` } };
    }
    return { error };
  }

  revalidatePath('/dashboard'); // Assegurem que les dades del servidor es refresquin
  return { data };
}

// ✅ NOVA ACCIÓ PER ACTUALITZAR UNA TASCA
export async function updateTaskAction(taskId: number, updatedData: Partial<Tables<'tasks'>>) {
    const session = await validateUserSession();
    if ('error' in session) return { error: session.error };
    const { supabase } = session;

    const { error } = await supabase
        .from('tasks')
        .update(updatedData)
        .eq('id', taskId);

    if (error) return { error };

    revalidatePath('/dashboard');
    return { error: null };
}

// =================== FILE: src/app/[locale]/(app)/dashboard/dashboard-client.tsx ===================

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useTranslations } from "next-intl";

import { DashboardCard } from "./_components/DashboardCard";
import { SalesPerformance } from "./_components/SalesPerformance";
import { RecentActivities } from "./_components/RecentActivities";
import { Radar } from "./_components/Radar";
import { TaskDialogManager, EnrichedTask } from '@/components/features/tasks/TaskDialogManager';
import { toast } from "sonner";
import { startTransition } from "react";
import { BarChart2, Activity, ListChecks, Radar as RadarIcon, Plus, Calendar } from "lucide-react";
import { Agenda, TaskFilterStatus } from "./_components/agenda/Agenda";
import { updateSimpleTask } from '@/app/actions/tasks/actions';
import Link from 'next/link';

import { Tables } from "@/types/supabase";
import { Button } from "@/components/ui/button";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import { ServerActivityItem } from "@/lib/data/dashboard";

const MONTHLY_GOAL = 50_000;

interface DashboardClientProps {
  initialData: {
    stats: {
      totalContacts: number;
      activeClients: number;
      opportunities: number;
      invoiced: number;
      pending: number;
      expenses: number;
      invoicedChange: string;
      expensesChange: string;
      invoicedIsPositive: boolean;
      expensesIsPositive: boolean;
    };
    tasks: EnrichedTask[];
    departments: Tables<'departments'>[];
    contacts: Tables<'contacts'>[];
    overdueInvoices: (Tables<'invoices'> & { contacts: { nom: string } | null })[];
    attentionContacts: Tables<'contacts'>[];
    notifications: Tables<'notifications'>[];
    recentActivities: ServerActivityItem[]; // ✅ Correcció aplicada aquí
  };
  teamMembers: Tables<'team_members_with_profiles'>[];
  children: React.ReactNode;
  userId: string;
}

export function DashboardClient({
  initialData,
  teamMembers,
  children,
  userId
}: DashboardClientProps) {
  const t = useTranslations('DashboardClient');
  const router = useRouter();

  const [tasks, setTasks] = useState(initialData.tasks);
  const [taskToManage, setTaskToManage] = useState<EnrichedTask | null>(null);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [taskFilter, setTaskFilter] = useState<TaskFilterStatus>('pendents');
  const [departmentFilter, setDepartmentFilter] = useState<number | 'all'>('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [showAllTeamTasks, setShowAllTeamTasks] = useState(false);

  useEffect(() => {
    setTasks(initialData.tasks);
  }, [initialData.tasks]);

  const pendingCount = useMemo(() => tasks.filter(t => !t.is_completed && !t.user_asign_id).length, [tasks]);
  
  const assignedCount = useMemo(() => {
    const baseFilter = (t: EnrichedTask) => t.user_asign_id !== null && !t.is_completed;
    if (showAllTeamTasks) return tasks.filter(baseFilter).length;
    return tasks.filter(t => baseFilter(t) && t.user_asign_id === userId).length;
  }, [tasks, userId, showAllTeamTasks]);

  const completedCount = useMemo(() => {
    const baseFilter = (t: EnrichedTask) => t.is_completed;
    if (showAllTeamTasks) return tasks.filter(baseFilter).length;
    return tasks.filter(t => baseFilter(t) && t.user_asign_id === userId).length;
  }, [tasks, userId, showAllTeamTasks]);

  const handleToggleTask = useCallback((taskId: number, currentStatus: boolean) => {
    const previousTasks = tasks;
    setTasks(prev => prev.map(t => t.id === taskId ? { ...t, is_completed: !currentStatus } : t));

    startTransition(async () => {
      const { error } = await updateSimpleTask(taskId, { is_completed: !currentStatus });
      if (error) {
        toast.error("No s'ha pogut actualitzar l'estat de la tasca.");
        setTasks(previousTasks);
      }
    });
  }, [tasks]);

  const filteredTasks = useMemo(() => {
    let result = tasks;

    if (taskFilter === 'pendents') {
      result = result.filter(t => !t.is_completed && !t.user_asign_id);
    } else if (taskFilter === 'assignades') {
      result = result.filter(t => t.user_asign_id !== null && !t.is_completed);
      if (!showAllTeamTasks) {
        result = result.filter(t => t.user_asign_id === userId);
      }
    } else {
      result = result.filter(t => t.is_completed);
      if (!showAllTeamTasks) {
        result = result.filter(t => t.user_asign_id === userId);
      }
    }

    if (departmentFilter !== 'all') {
      result = result.filter(t => t.department_id === departmentFilter);
    }

    if (searchTerm.trim() !== '') {
      result = result.filter(t =>
        t.title.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    return result;
  }, [tasks, taskFilter, departmentFilter, searchTerm, userId, showAllTeamTasks]);

  const handleTaskMutation = useCallback((options: { closeDialog?: boolean } = {}) => {
    const { closeDialog = true } = options;
    router.refresh();
    if (closeDialog) {
      setIsDialogOpen(false);
    }
  }, [router]);


  const openNewTaskDialog = () => {
    setTaskToManage(null);
    setIsDialogOpen(true);
  };

  const openViewTaskDialog = (task: EnrichedTask) => {
    setTaskToManage(task);
    setIsDialogOpen(true);
  };

  return (
    <div className="relative space-y-6">
      <div className="absolute inset-0 -z-10 bg-background bg-[radial-gradient(#2e2e2e_1px,transparent_1px)] [background-size:16px_16px]" />

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <DashboardCard title={t('salesPerformance')} icon={BarChart2} className="lg:col-span-2">
          <SalesPerformance stats={initialData.stats} percentGoal={Math.round((initialData.stats.invoiced / MONTHLY_GOAL) * 100)} monthlyGoal={MONTHLY_GOAL} />
        </DashboardCard>
        <DashboardCard title={t('recentActivities')} icon={Activity}>
          <RecentActivities activities={initialData.recentActivities} />
        </DashboardCard>
      </div>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <DashboardCard
          title={t('agenda.title')}
          icon={ListChecks}
          className="lg:col-span-2 h-full flex flex-col"
          actions={
            <div className="flex items-center space-x-4">
              <Button asChild variant="outline" size="icon" className="flex-shrink-0">
                <Link href="/crm/calendari" aria-label={"Calendar"}>
                  <Calendar className="h-5 w-5" />
                </Link>
              </Button>
              <div className="flex items-center space-x-2">
                <Switch id="show-all-tasks" checked={showAllTeamTasks} onCheckedChange={setShowAllTeamTasks} aria-label={t('agenda.viewAll')} />
                <Label htmlFor="show-all-tasks" className="text-xs font-normal cursor-pointer">{t('agenda.viewAll')}</Label>
              </div>
              <Button variant="ghost" size="sm" onClick={openNewTaskDialog}>
                <Plus className="w-4 h-4 mr-2" />
                {t('agenda.newTask')}
              </Button>
            </div>
          }
        >
          <Agenda
            tasks={filteredTasks}
            activeFilter={taskFilter}
            onFilterChange={setTaskFilter}
            departmentFilter={departmentFilter}
            onDepartmentFilterChange={setDepartmentFilter}
            onViewTask={openViewTaskDialog}
            pendingCount={pendingCount}
            assignedCount={assignedCount}
            completedCount={completedCount}
            departments={initialData.departments}
            searchTerm={searchTerm}
            onSearchChange={setSearchTerm}
            onToggleTask={handleToggleTask}
          />
        </DashboardCard>
        <div className="space-y-6">
          <DashboardCard title={t('radar')} icon={RadarIcon}>
       
            <Radar attentionContacts={initialData.attentionContacts} overdueInvoices={initialData.overdueInvoices} notifications={initialData.notifications} />
          </DashboardCard>
          {children}
        </div>
      </div>

      <TaskDialogManager
        task={taskToManage}
        open={isDialogOpen}
        onOpenChange={setIsDialogOpen}
        contacts={initialData.contacts}
        departments={initialData.departments}
        teamMembers={teamMembers
          .filter(m => m.user_id)
          .map(m => ({ id: m.user_id!, full_name: m.full_name }))
        }
        onTaskMutation={handleTaskMutation}
      />
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/dashboard/page.tsx ===================

import { Suspense } from 'react';
import type { Metadata } from 'next';
import { DashboardData } from './_components/DashboardData';
import { DashboardSkeleton } from './_components/DashboardSkeleton';
import { AIOracleSkeleton } from './_components/AIOracleSkeleton';


export const metadata: Metadata = {
  title: 'Tauler Principal | Ribot',
};



/**
 * @summary La pàgina principal del Dashboard.
 */
export default function DashboardPage() {
  return (
    <Suspense fallback={<DashboardSkeleton />}>
      {/* ✅ CORRECCIÓ: Passem l'Oracle com a fill (children) de DashboardData */}
      <DashboardData>
        <Suspense fallback={<AIOracleSkeleton />}>
          {/* <AIOracle /> */}
        </Suspense>
      </DashboardData>
    </Suspense>
  );
}


// =================== FILE: src/app/[locale]/(app)/dashboard/_components/agenda/Agenda.tsx ===================

"use client";

import React from 'react';
import { useTranslations } from 'next-intl';
import { LayoutGrid, Search } from 'lucide-react'; // Importem la icona de cerca
import { ToggleGroup, ToggleGroupItem } from "@/components/ui/toggle-group";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Input } from '@/components/ui/input'; // Importem el component Input
import { TaskCard } from './TaskCard';
import { EnrichedTask } from '@/components/features/tasks/TaskDialogManager';
import { Tables } from '@/types/supabase';

// Definim el nou tipus per al filtre actiu
export type TaskFilterStatus = 'pendents' | 'assignades' | 'completes';

interface AgendaProps {
  tasks: EnrichedTask[];
  activeFilter: TaskFilterStatus; // ✅ Canviat al nou tipus
  onFilterChange: (filter: TaskFilterStatus) => void;
  onViewTask: (task: EnrichedTask) => void;
  pendingCount: number;
  assignedCount: number; // ✅ Nou comptador per a les tasques assignades
  completedCount: number;
  departments: Tables<'departments'>[];
  departmentFilter: number | 'all';
  onDepartmentFilterChange: (filter: number | 'all') => void;
  searchTerm: string; // ✅ Nova prop per al terme de cerca
  onSearchChange: (term: string) => void; // ✅ Nova prop per a gestionar canvis a la cerca
  onToggleTask: (taskId: number, currentStatus: boolean) => void; // ✅ Afegeix aquesta prop

}

export function Agenda({
  tasks,
  activeFilter,
  onFilterChange,
  onViewTask,
  pendingCount,
  assignedCount, // Nou
  completedCount,
  departments,
  departmentFilter,
  onDepartmentFilterChange,
  searchTerm, // Nou
  onSearchChange, // Nou
  onToggleTask
}: AgendaProps) {
  const t = useTranslations('DashboardClient.agenda');

  return (
    <div>
      {/* Grup de botons de filtre */}
      <div className="flex gap-2 mb-4 flex-shrink-0">

        <ToggleGroup
          type="single"
          value={activeFilter}
          onValueChange={(value) => { if (value) onFilterChange(value as TaskFilterStatus); }}
          className="grid grid-cols-3 flex-grow" // ✅ Canviat a 3 columnes
        >
          <ToggleGroupItem value="pendents" aria-label={t('filter.pendingAria')}>
            {t('pending')} <span className="ml-2 text-xs text-muted-foreground">({pendingCount})</span>
          </ToggleGroupItem>

          {/* ✅ NOU BOTÓ "ASSIGNADES" */}
          <ToggleGroupItem value="assignades" aria-label={t('filter.assignedAria')}>
            {t('assigned')} <span className="ml-2 text-xs text-muted-foreground">({assignedCount})</span>
          </ToggleGroupItem>

          <ToggleGroupItem value="completes" aria-label={t('filter.completedAria')}>
            {t('completed')} <span className="ml-2 text-xs text-muted-foreground">({completedCount})</span>
          </ToggleGroupItem>
        </ToggleGroup>
        <Select
          value={String(departmentFilter)}
          onValueChange={(value) => onDepartmentFilterChange(value === 'all' ? 'all' : Number(value))}
        >
          <SelectTrigger className="w-auto sm:w-[180px]">
            <LayoutGrid className="w-4 h-4 mr-2 text-muted-foreground hidden sm:block" />
            <SelectValue placeholder={t('filter.departmentPlaceholder')} />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">{t('filter.allDepartments')}</SelectItem>
            {departments.map(dep => (
              <SelectItem key={dep.id} value={String(dep.id)}>{dep.name}</SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>

      {/* ✅ NOU CAMP DE CERCA */}
      <div className="relative mb-4">
        <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
        <Input
          type="search"
          placeholder={t('searchPlaceholder')}
          value={searchTerm}
          onChange={(e) => onSearchChange(e.target.value)}
          className="pl-10 w-full"
        />
      </div>

      {/* Llista de tasques (la lògica no canvia) */}
      <div className="flex-1 space-y-3 overflow-y-auto pr-2 min-h-0">
        {tasks.length > 0 ? (
          tasks.map((task) => (
            <TaskCard
              key={task.id}
              task={task}
              onViewTask={onViewTask}
              onToggleTask={onToggleTask} // ✅ Passa la funció a la TaskCard

            />
          ))
        ) : (
          <div className="flex items-center justify-center h-48">
            <p className="text-sm text-muted-foreground text-center">
              {t('noTasksFound')}
            </p>
          </div>
        )}
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/dashboard/_components/agenda/TaskCard.tsx ===================

"use client";

import { useState, useEffect } from "react"; // ✅ 1. Importem useState i useEffect
import { Checkbox } from "@/components/ui/checkbox";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { cn, sanitizeHtml } from "@/lib/utils/utils";
import { format, isPast, isToday } from "date-fns";
import { es } from "date-fns/locale";
import { Calendar, Contact as ContactIcon, User as UserIcon, Clock, Building } from "lucide-react";
import { EnrichedTask } from '@/components/features/tasks/TaskDialogManager';
import { priorityStyles, TaskPriority } from '@/config/styles/task';

interface TaskCardProps {
  task: EnrichedTask;
  onViewTask: (task: EnrichedTask) => void;
  onToggleTask: (taskId: number, currentStatus: boolean) => void;
}

const generateHslColorFromString = (str: string | null | undefined) => {
    if (!str) return null;
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
        hash = str.charCodeAt(i) + ((hash << 5) - hash);
    }
    const h = hash % 220;
    return { h, s: 60, l: 75 };
};

function MetaItem({ icon: Icon, text, className }: { icon: React.ElementType, text: React.ReactNode, className?: string }) {
    if (!text) return null;
    return (
        <div className={cn("flex items-center gap-1.5", className)}>
            <Icon className="w-3.5 h-3.5 flex-shrink-0" />
            <span className="truncate">{text}</span>
        </div>
    );
}

export function TaskCard({ task, onViewTask, onToggleTask }: TaskCardProps) {
  const dueDate = task.due_date ? new Date(task.due_date) : null;
  const isOverdue = dueDate && isPast(dueDate) && !isToday(dueDate);

  const dueDateColor = cn({
    "text-red-500 dark:text-red-400 font-semibold": isOverdue,
    "text-orange-500 dark:text-orange-400 font-semibold": dueDate && isToday(dueDate),
  });

  const userColor = generateHslColorFromString(task.user_asign_id);
  const cardStyle = userColor
    ? {
        backgroundColor: `hsla(${userColor.h}, ${userColor.s}%, ${userColor.l}%, 0.15)`,
        borderColor: `hsla(${userColor.h}, ${userColor.s}%, ${userColor.l}%, 0.4)`,
      }
    : {};
  
  // ✅ 2. Creem un estat per a la descripció, inicialitzat a buit
  const [plainTextDescription, setPlainTextDescription] = useState('');

  // ✅ 3. Utilitzem useEffect per processar l'HTML només al client
  useEffect(() => {
    // Aquesta funció només s'executarà al navegador, després del primer render
    setPlainTextDescription(sanitizeHtml(task.description));
  }, [task.description]); // Es tornarà a executar si la descripció de la tasca canvia

  return (
    <div 
      className="flex items-start gap-3 p-3 rounded-lg border bg-card text-card-foreground shadow-sm transition-colors group hover:bg-muted/50"
      style={cardStyle}
    >
      
      <div className="pt-1">
          <Checkbox
            id={`task-${task.id}`}
            checked={task.is_completed}
            onCheckedChange={() => onToggleTask(task.id, task.is_completed)}
            onClick={(e) => e.stopPropagation()}
          />
      </div>

      <div className="flex-1 min-w-0 cursor-pointer space-y-2" onClick={() => onViewTask(task)}>
        
        <div className="flex justify-between items-start gap-2">
            <p className={cn("font-semibold leading-tight break-words pr-2", task.is_completed && "line-through text-muted-foreground")}>
              {task.title}
            </p>
            <div className="flex items-center gap-2 flex-shrink-0 ml-auto">
                {task.priority && (
                  <Badge variant="outline" className={cn("text-xs py-0.5 px-2", priorityStyles[task.priority as TaskPriority].badgeClasses)}>
                    {task.priority}
                  </Badge>
                )}
                <TooltipProvider delayDuration={150}>
                    <Tooltip>
                        <TooltipTrigger>
                            <Avatar className="w-6 h-6 border">
                                <AvatarImage src={task.profiles?.avatar_url || undefined} />
                                <AvatarFallback className="text-xs">
                                    {task.profiles ? task.profiles.full_name?.charAt(0) : <UserIcon className="w-3 h-3" />}
                                </AvatarFallback>
                            </Avatar>
                        </TooltipTrigger>
                        <TooltipContent>
                            <p>{task.profiles ? `Assignat a ${task.profiles.full_name}` : 'Sense assignar'}</p>
                        </TooltipContent>
                    </Tooltip>
                </TooltipProvider>
            </div>
        </div>

        <div className="space-y-2 text-muted-foreground">
            {/* ✅ 4. Mostrem la descripció des de l'estat */}
            {plainTextDescription && (
              <p className="text-sm truncate">
                {plainTextDescription}
              </p>
            )}
            <div className="flex items-center flex-wrap gap-x-4 gap-y-1.5 text-xs">
                {task.departments && <MetaItem icon={Building} text={task.departments.name} />}
                {dueDate && <MetaItem icon={Calendar} text={format(dueDate, "d MMM yyyy", { locale: es })} className={dueDateColor} />}
                {task.contacts && <MetaItem icon={ContactIcon} text={task.contacts.nom} />}
                {task.duration && task.duration > 0 && <MetaItem icon={Clock} text={`${task.duration} min`} />}
            </div>
        </div>
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/dashboard/_components/AIOracle.tsx ===================

/**
 * @file AIOracle.tsx
 * @summary Component de servidor aïllat que carrega i mostra les dades de la IA,
 * ara amb disseny adaptable i traduccions.
 */
import { createClient } from '@/lib/supabase/server';
import { Button } from '@/components/ui/button';
import { getTranslations } from 'next-intl/server'; // ✅ Importem la funció de traducció del servidor

export async function AIOracle() {
  // ✅ Obtenim les traduccions per a aquest component
  const t = await getTranslations('DashboardClient.aiOracle');
  const supabase = createClient()
;

  try {
    const { data: aiInsights, error } = await supabase.functions.invoke('generate-ai-summary');

    if (error) throw error;

    const summary = aiInsights?.summary || t('noSummary');
    const suggestion = aiInsights?.suggestion || t('noSuggestion');

    return (
      // ✅ CORRECCIÓ: Usem 'bg-card' i 'ring-border' per adaptar-se al tema.
      <div className="rounded-2xl p-6 ring-1 ring-border bg-card">
        <h2 className="text-xl font-bold text-foreground mb-3">{t('title')}</h2>
        <div className="space-y-3">
          {/* ✅ CORRECCIÓ: Usem 'bg-muted' i colors de text semàntics. */}
          <div className="p-3 rounded-lg bg-muted ring-1 ring-border">
            <p className="text-sm font-semibold text-foreground mb-1">{t('summary')}</p>
            <p className="text-sm text-muted-foreground">{summary}</p>
          </div>
          <div className="p-3 rounded-lg bg-muted ring-1 ring-border">
            <p className="text-sm font-semibold text-foreground mb-1">{t('suggestion')}</p>
            <p className="text-sm text-muted-foreground">{suggestion}</p>
          </div>
          <Button variant="outline" className="w-full">{t('button')}</Button>
        </div>
      </div>
    );
  } catch (error) {
    console.error("Error al invocar la funció de IA:", error);
    
    return (
      // ✅ CORRECCIÓ: Usem colors de 'destructive' per a l'estat d'error.
      <div className="rounded-2xl p-6 ring-1 ring-destructive/30 bg-destructive/10">
        <h2 className="text-xl font-bold text-destructive-foreground mb-3">{t('title')}</h2>
        <div className="p-3 rounded-lg bg-destructive/10">
          <p className="text-sm font-semibold text-destructive-foreground mb-1">{t('errorTitle')}</p>
          <p className="text-sm text-destructive-foreground/80">{t('loadError')}</p>
        </div>
      </div>
    );
  }
}

// =================== FILE: src/app/[locale]/(app)/dashboard/_components/AIOracleSkeleton.tsx ===================

"use client";
import { Button } from '@/components/ui/button';

/**
 * @summary Esquelet de càrrega per a l'Oracle d'IA.
 */
export function AIOracleSkeleton() {
  return (
    <div className="rounded-2xl p-6 ring-1 ring-white/10 bg-gradient-to-br from-white/10 to-white/5 animate-pulse">
      <h2 className="text-xl font-bold text-white mb-3">Oracle d’IA</h2>
      <div className="space-y-3">
        <div className="p-3 rounded-lg bg-white/5 ring-1 ring-white/10">
          <p className="text-sm font-semibold text-white/90 mb-1">Resum</p>
          <div className="h-4 w-3/4 rounded bg-white/10"></div>
        </div>
        <div className="p-3 rounded-lg bg-white/5 ring-1 ring-white/10">
          <p className="text-sm font-semibold text-white/90 mb-1">Suggeriment</p>
          <div className="h-4 w-full rounded bg-white/10 mb-1"></div>
          <div className="h-4 w-1/2 rounded bg-white/10"></div>
        </div>
        <Button variant="outline" className="w-full" disabled>Parlar amb l’assistent</Button>
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/dashboard/_components/DashboardBottomGrid.tsx ===================

"use client";

import React, { memo } from "react";
import { Agenda, type TaskFilterStatus } from "./agenda/Agenda"; // ✅ 1. Importem el nou tipus de filtre
import { Radar } from "./Radar";
import { Tables } from "@/types/supabase";
// ✅ 2. Importem el tipus de tasca més complet
import { type EnrichedTask } from "@/components/features/tasks/TaskDialogManager";

interface DashboardBottomGridProps {
  tasks: EnrichedTask[]; // ✅ 3. Canviem al tipus EnrichedTask[]
  activeFilter: TaskFilterStatus; // ✅ 4. Usem el tipus de filtre correcte
  onFilterChange: (filter: TaskFilterStatus) => void; // ✅ 5. Usem el tipus de filtre correcte
  onOpenNewTask: () => void;
  onToggleTask: (taskId: number, currentStatus: boolean) => void;
  onViewTask: (task: EnrichedTask) => void; // ✅ 6. Canviem al tipus EnrichedTask
  pendingCount: number;
  completedCount: number;
  attentionContacts: Tables<"contacts">[];
  overdueInvoices: (Tables<'invoices'> & { contacts: { nom: string } | null })[];
  notifications: Tables<"notifications">[];
  children: React.ReactNode;
  departments: Tables<'departments'>[];
  departmentFilter: number | 'all';
  onDepartmentFilterChange: (filter: number | 'all') => void;
  
  // ✅ 7. Afegim les props que falten per a la cerca i el comptador d'assignades
  assignedCount: number;
  searchTerm: string;
  onSearchChange: (term: string) => void;
}

export const DashboardBottomGrid = memo(
  ({
    tasks,
    activeFilter,
    onFilterChange,
    onToggleTask,

  onViewTask,
    pendingCount,
    completedCount,
    attentionContacts,
    overdueInvoices,
    notifications,
    children,
    departments,
    departmentFilter,
    onDepartmentFilterChange,
    // ✅ 8. Rebem les noves props
    assignedCount,
    searchTerm,
    onSearchChange,
  }: DashboardBottomGridProps) => {
    return (
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* 🗓️ Agenda de tasques */}
        <Agenda
          tasks={tasks}
          activeFilter={activeFilter}
          onFilterChange={onFilterChange}
          onToggleTask={onToggleTask}
          // onOpenNewTask={onOpenNewTask} // Aquesta prop no l'espera Agenda, però no fa mal
          onViewTask={onViewTask}
          pendingCount={pendingCount}
          completedCount={completedCount}
          departments={departments}
          departmentFilter={departmentFilter}
          onDepartmentFilterChange={onDepartmentFilterChange}
          // ✅ 9. Passem les noves props al component Agenda
          assignedCount={assignedCount}
          searchTerm={searchTerm}
          onSearchChange={onSearchChange}
        />

        {/* 🎯 Radar + Oracle IA */}
        <div className="space-y-6">
          <Radar
            attentionContacts={attentionContacts}
            overdueInvoices={overdueInvoices}
            notifications={notifications}
          />
          {/* 🧠 Oracle d’IA (streaming des del servidor) */}
          {children}
        </div>
      </div>
    );
  }
);

DashboardBottomGrid.displayName = "DashboardBottomGrid";

// =================== FILE: src/app/[locale]/(app)/dashboard/_components/DashboardCard.tsx ===================

"use client";

import * as React from "react";
import { ChevronUp, ChevronDown } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";
import { cn } from "@/lib/utils/utils";

interface DashboardCardProps {
  title: string;
  icon: React.ElementType;
  children: React.ReactNode;
  className?: string;
  defaultOpen?: boolean;
  actions?: React.ReactNode; // ✅ 1. Afegim la nova prop opcional
}

export function DashboardCard({
  title,
  icon: Icon,
  children,
  className,
  defaultOpen = true,
  actions, // ✅ 2. La rebem aquí
}: DashboardCardProps) {
  const [isOpen, setIsOpen] = React.useState(defaultOpen);

  return (
    <Collapsible
      open={isOpen}
      onOpenChange={setIsOpen}
      className={cn("rounded-xl border bg-card text-card-foreground shadow-sm", className)}
    >
      <div className="flex items-center justify-between p-4">
        <div className="flex items-center gap-3">
          <Icon className="w-5 h-5 text-muted-foreground" />
          <h2 className="text-lg font-semibold text-foreground">{title}</h2>
        </div>
        {/* ✅ 3. Creem un contenidor per a les accions i el botó de col·lapse */}
        <div className="flex items-center gap-1">
          {actions}
          <CollapsibleTrigger asChild>
            <Button variant="ghost" size="icon" className="text-muted-foreground">
              {isOpen ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
              <span className="sr-only">Toggle</span>
            </Button>
          </CollapsibleTrigger>
        </div>
      </div>
      <CollapsibleContent>
        <div className="p-6 pt-0">
            {children}
        </div>
      </CollapsibleContent>
    </Collapsible>
  );
}

// =================== FILE: src/app/[locale]/(app)/dashboard/_components/DashboardData.tsx ===================

// src/app/[locale]/(app)/dashboard/DashboardData.tsx

import React from 'react';
import { validatePageSession } from '@/lib/supabase/session';
import { getActiveTeam } from '@/lib/supabase/teams';
import { SupabaseClient } from '@supabase/supabase-js';
import { Database, Tables } from '@/types/supabase';
import { DashboardClient } from '../dashboard-client';

// ✅ CORRECCIÓ: Hem eliminat la importació de 'EnrichedTask' perquè ja no es necessita aquí.
// El tipus s'infereix correctament de la funció getTasks.

import {
    getStats,
    getTasks,
    getOverdueInvoices,
    getRecentContacts,
    getRecentActivities,
} from '@/lib/data/dashboard';

const calculatePercentageChange = (current: number, previous: number): string => {
    if (previous === 0) return current > 0 ? '+100%' : '0%';
    const change = ((current - previous) / previous) * 100;
    return `${change >= 0 ? '+' : ''}${change.toFixed(0)}% vs mes anterior`;
};

export async function DashboardData({ children }: { children: React.ReactNode }) {
    const { supabase, user } = await validatePageSession();
    const team = await getActiveTeam();

    if (!team) {
        return <div>No s'ha trobat un equip actiu.</div>;
    }

    const typedSupabase = supabase as SupabaseClient<Database>;
    const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString();

    const [statsData, tasksData, overdueInvoicesData, contactsData, notificationsData, departmentsData, teamMembersData] = await Promise.all([
        getStats(typedSupabase),
        getTasks(typedSupabase, team.id),
        getOverdueInvoices(typedSupabase),
        getRecentContacts(typedSupabase, team.id),
        typedSupabase.from('notifications').select('*').eq('user_id', user.id).eq('is_read', false).then(res => res.data ?? []),
        typedSupabase.from('departments').select('*').eq('team_id', team.id).then(res => res.data ?? []),
        typedSupabase.from('team_members_with_profiles').select('*').eq('team_id', team.id).then(res => res.data ?? []),
    ]);
    
    const recentActivities = getRecentActivities(overdueInvoicesData, tasksData, contactsData);

    const initialData = {
        stats: {
            totalContacts: statsData.total_contacts,
            activeClients: statsData.active_clients,
            opportunities: statsData.opportunities,
            invoiced: statsData.invoiced_current_month,
            pending: statsData.pending_total,
            expenses: statsData.expenses_current_month,
            invoicedChange: calculatePercentageChange(statsData.invoiced_current_month, statsData.invoiced_previous_month),
            expensesChange: calculatePercentageChange(statsData.expenses_current_month, statsData.expenses_previous_month),
            invoicedIsPositive: statsData.invoiced_current_month >= statsData.invoiced_previous_month,
            expensesIsPositive: statsData.expenses_current_month <= statsData.expenses_previous_month,
        },
        tasks: tasksData,
        departments: departmentsData,
        contacts: contactsData,
        overdueInvoices: overdueInvoicesData,
        attentionContacts: contactsData.filter((c) => c.last_interaction_at && new Date(c.last_interaction_at).toISOString() < sevenDaysAgo).slice(0, 5),
        notifications: notificationsData,
        recentActivities: recentActivities,
    };

    return (
        <DashboardClient
            initialData={initialData}
            teamMembers={teamMembersData as Tables<'team_members_with_profiles'>[]}
            userId={user.id}
        >
            {children}
        </DashboardClient>
    );
}

// =================== FILE: src/app/[locale]/(app)/dashboard/_components/DashboardMainGrid.tsx ===================

"use client";

import React, { memo } from "react";
import { SalesPerformance } from "./SalesPerformance";
import { RecentActivities } from "./RecentActivities";
import { Tables } from "@/types/supabase";
// ✅ 1. Importem la funció que ja sap com transformar les dades.
import { getRecentActivities } from '@/lib/data/dashboard'; 
// ✅ 2. Importem el tipus de tasca correcte que retorna la funció getTasks.
import { EnrichedTask } from '@/components/features/tasks/TaskDialogManager';

interface DashboardMainGridProps {
  stats: {
    invoiced: number;
    expenses: number;
    invoicedChange: string;
    expensesChange: string;
    invoicedIsPositive: boolean;
    expensesIsPositive: boolean;
  };
  percentGoal: number;
  monthlyGoal: number;
  overdueInvoices: (Tables<'invoices'> & { contacts: { nom: string } | null })[];
  // ✅ 3. Assegurem que el tipus de 'tasks' sigui el correcte.
  tasks: EnrichedTask[];
  contacts: Tables<'contacts'>[];
}

export const DashboardMainGrid = memo(
  ({
    stats,
    percentGoal,
    monthlyGoal,
    overdueInvoices,
    tasks,
    contacts,
  }: DashboardMainGridProps) => {

    // ✅ 4. Utilitzem la funció importada per generar l'array d'activitats.
    // Aquesta funció ja gestiona correctament els tipus, noms de propietats i valors nuls.
    const activities = getRecentActivities(overdueInvoices, tasks, contacts);

    return (
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* 🧭 Rendiment de vendes */}
        <SalesPerformance
          stats={stats}
          percentGoal={percentGoal}
          monthlyGoal={monthlyGoal}
        />

        {/* 🕒 Activitats recents */}
        {/* ✅ 5. Passem l'array 'activities' ja formatat i correctament tipat. */}
        <RecentActivities activities={activities} />
      </div>
    );
  }
);

DashboardMainGrid.displayName = "DashboardMainGrid";

// =================== FILE: src/app/[locale]/(app)/dashboard/_components/DashboardSkeleton.tsx ===================

"use client";

/**
 * @summary Mostra un esquelet de càrrega per a la pàgina principal del Dashboard.
 */
export function DashboardSkeleton() {
  const SkeletonCard = () => <div className="h-28 bg-card rounded-2xl ring-1 ring-border"></div>;
  
  return (
    <div className="space-y-8 animate-pulse">
      <div className="absolute inset-0 -z-10 h-full w-full bg-background bg-[radial-gradient(#2e2e2e_1px,transparent_1px)] [background-size:16px_16px]" />
      
      {/* Esquelet de KPIs */}
      <div className="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-6">
        <SkeletonCard />
        <SkeletonCard />
        <SkeletonCard />
        <SkeletonCard />
      </div>

      {/* Esquelet del cos principal */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 h-72 bg-card rounded-2xl ring-1 ring-border"></div>
        <div className="h-72 bg-card rounded-2xl ring-1 ring-border"></div>
      </div>
      
      {/* Esquelet d'accés ràpid */}
      <div className="h-32 bg-card rounded-2xl ring-1 ring-border"></div>

      {/* Esquelet de seccions finals */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="h-96 bg-card rounded-2xl ring-1 ring-border"></div>
        <div className="space-y-6">
            <div className="h-48 bg-card rounded-2xl ring-1 ring-border"></div>
            <div className="h-48 bg-card rounded-2xl ring-1 ring-border"></div>
        </div>
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/dashboard/_components/QuickAccess.tsx ===================

/**
 * @file QuickAccess.tsx
 * @summary Renderitza la secció d'accés ràpid amb scroll horitzontal.
 */
"use client";

import React, { useRef, useState, useEffect, FC, ElementType } from 'react';
import Link from 'next/link';
import { useTranslations } from 'next-intl';
import { Button } from '@/components/ui/button';
import { Sparkles, Users, Workflow, FileText, FolderOpen, Mail, BookOpen, ChevronLeft, ChevronRight } from 'lucide-react';

/**
 * @summary Targeta petita per a un enllaç d'accés ràpid.
 */
const QuickTile: FC<{ href: string; icon: ElementType; label: string; desc: string; }> = ({ href, icon: Icon, label, desc }) => (
  <Link href={href} className="group flex-shrink-0 w-1/2 sm:w-1/3 md:w-1/4 lg:w-1/6">
    {/* ✅ CORRECCIÓ: Usem 'bg-muted/50' y 'hover:bg-muted' que funcionen en ambos temas */}
    <div className="rounded-2xl px-4 py-5 bg-muted/50 hover:bg-muted transition ring-1 ring-border h-full">
      <div className="flex items-center gap-3">
        <div className="rounded-xl bg-gradient-to-br from-primary/20 to-transparent p-2.5">
          <Icon className="w-5 h-5 text-primary" />
        </div>
        <div>
          <div className="font-semibold text-card-foreground">{label}</div>
          <div className="text-xs text-muted-foreground">{desc}</div>
        </div>
      </div>
    </div>
  </Link>
);

export function QuickAccess() {
  const t = useTranslations('DashboardClient');
  const scrollContainerRef = useRef<HTMLDivElement>(null);
  const [canScrollLeft, setCanScrollLeft] = useState(false);
  const [canScrollRight, setCanScrollRight] = useState(true);

  const checkScrollability = () => {
    const el = scrollContainerRef.current;
    if (el) {
      setCanScrollLeft(el.scrollLeft > 5);
      setCanScrollRight(el.scrollLeft < el.scrollWidth - el.clientWidth - 5);
    }
  };

  const handleScroll = (direction: 'left' | 'right') => {
    const el = scrollContainerRef.current;
    if (el) {
      const scrollAmount = el.clientWidth * 0.8;
      el.scrollBy({ left: direction === 'left' ? -scrollAmount : scrollAmount, behavior: 'smooth' });
    }
  };

  useEffect(() => {
    const el = scrollContainerRef.current;
    if (el) {
      checkScrollability();
      el.addEventListener('scroll', checkScrollability);
      window.addEventListener('resize', checkScrollability);
      return () => {
        el.removeEventListener('scroll', checkScrollability);
        window.removeEventListener('resize', checkScrollability);
      };
    }
  }, []);
  
  return (
    <div className="rounded-2xl p-6 ring-1 ring-border bg-card">
    <div className="flex items-center justify-between gap-2 mb-4">
      <div className='flex items-center gap-2'>
        <Sparkles className="w-5 h-5 text-pink-400" />
        <h2 className="text-xl font-bold text-foreground">{t('quickAccess')}</h2>
      </div>
        <div className="hidden md:flex items-center gap-2">
          <Button variant="ghost" size="icon" onClick={() => handleScroll('left')} disabled={!canScrollLeft} className="h-8 w-8 rounded-full disabled:opacity-30"><ChevronLeft className="w-5 h-5" /></Button>
          <Button variant="ghost" size="icon" onClick={() => handleScroll('right')} disabled={!canScrollRight} className="h-8 w-8 rounded-full disabled:opacity-30"><ChevronRight className="w-5 h-5" /></Button>
        </div>
      </div>
      <div ref={scrollContainerRef} className="flex gap-4 overflow-x-auto pb-4 -mb-4 scroll-smooth [scrollbar-width:none] [-ms-overflow-style:none] [&::-webkit-scrollbar]:hidden">
        <QuickTile href="/crm/contactes" icon={Users} label={t('contacts')} desc={t('crm')} />
        <QuickTile href="/crm/pipeline" icon={Workflow} label={t('pipeline')} desc={t('opportunities')} />
        <QuickTile href="/finances/facturacio" icon={FileText} label={t('invoicing')} desc={t('invoices')} />
        <QuickTile href="/finances/despeses" icon={FolderOpen} label={t('expenses')} desc={t('costs')} />
        <QuickTile href="/comunicacio/inbox" icon={Mail} label={t('inbox')} desc={t('communication')} />
        <QuickTile href="/crm/quotes" icon={BookOpen} label={t('quotes')} desc={t('quotes')} />
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/dashboard/_components/Radar.tsx ===================

"use client";

import React from 'react';
import { useTranslations } from 'next-intl';
import { FileWarning, MessageSquare, Send, AlertTriangle } from 'lucide-react';
import { ActivityItem } from '@/components/shared/ActivityItem';
import { Tables } from "@/types/supabase";

interface RadarProps {
  attentionContacts: Tables<"contacts">[];
  overdueInvoices: (Tables<'invoices'> & { contacts: { nom: string } | null })[];
  notifications: Tables<"notifications">[];
}

type TranslationFunction = (key: string, values?: Record<string, string | number>) => string;

function formatRelativeTime(dateString: string | null, t: TranslationFunction): string {
  if (!dateString) return '';
  const date = new Date(dateString);
  const now = new Date();
  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);

  if (diffInSeconds < 60) return t('time.now');
  const diffInMinutes = Math.floor(diffInSeconds / 60);
  if (diffInMinutes < 60) return t('time.minutesAgo', { count: diffInMinutes });
  const diffInHours = Math.floor(diffInMinutes / 60);
  if (diffInHours < 24) return t('time.hoursAgo', { count: diffInHours });
  const diffInDays = Math.floor(diffInHours / 24);
  if (diffInDays === 1) return t('time.yesterday');
  if (diffInDays < 7) return t('time.daysAgo', { count: diffInDays });
  return date.toLocaleDateString();
}

export function Radar({ attentionContacts, overdueInvoices, notifications }: RadarProps) {
  const t = useTranslations('DashboardClient');
  
  const allItems = [
    ...notifications.map(item => ({ ...item, itemType: 'notification', date: new Date(item.created_at) })),
    ...overdueInvoices.map(item => ({ ...item, itemType: 'invoice', date: new Date(item.due_date ?? 0) })),
    ...attentionContacts.map(item => ({ ...item, itemType: 'contact', date: new Date(item.last_interaction_at || 0) }))
  ];

  allItems.sort((a, b) => b.date.getTime() - a.date.getTime());
  
  // ✅ CORRECCIÓ: Eliminem la línia que tallava la llista.
  // const visibleItems = allItems.slice(0, 6); 
  
  const hasItems = allItems.length > 0;

  return (
    <div className="space-y-3 -mr-2 pr-2 overflow-y-auto max-h-[480px]">
      {!hasItems ? (
        <div className="flex items-center justify-center h-48">
          <p className="text-sm text-muted-foreground text-center">{t('allInOrder')}</p>
        </div>
      ) : (
        // ✅ CORRECCIÓ: Iterem sobre la llista COMPLETA ('allItems').
        allItems.map((item) => {
          if (item.itemType === 'notification') {
            const notif = item as Tables<"notifications">;
            const isError = notif.type === 'post_failed' || notif.type === 'integration_expired';
            return (
              <ActivityItem 
                key={`notif-${notif.id}`} 
                href={notif.type?.includes('integration') ? "/settings/integrations" : "/comunicacio/planificador"}
                icon={isError ? AlertTriangle : Send} 
                tone={isError ? {bg: 'bg-destructive/10', text: 'text-destructive'} : {bg: 'bg-success/10', text: 'text-success'}} 
                title={notif.message} 
                meta={formatRelativeTime(notif.created_at, t as TranslationFunction)}
              />
            );
          }
          if (item.itemType === 'invoice') {
            const inv = item as Tables<'invoices'> & { contacts: { nom: string } | null };
            return (
              <ActivityItem 
                key={`inv-${inv.id}`} 
                href="/finances/facturacio" 
                icon={FileWarning} 
                tone={{bg: 'bg-destructive/10', text: 'text-destructive'}} 
                title={t('overdueInvoice', { clientName: inv.contacts?.nom ?? 'client' })} 
                meta={t('dueDate', { dueDate: inv.due_date ? new Date(inv.due_date).toLocaleDateString() : t('unknownDueDate') })}
              />
            );
          }
          if (item.itemType === 'contact') {
            const c = item as Tables<"contacts">;
            return (
              <ActivityItem 
                key={`contact-${c.id}`} 
                href="/crm/contactes" 
                icon={MessageSquare} 
                tone={{bg: 'bg-primary/10', text: 'text-primary'}} 
                title={t('coolingContact', { contactName: c.nom })}
                meta={t('noInteraction7Days')}
              />
            );
          }
          return null;
        })
      )}
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/dashboard/_components/RecentActivities.tsx ===================

// src/app/[locale]/(app)/dashboard/_components/RecentActivities.tsx

"use client";

import React from 'react';
import { useTranslations } from 'next-intl';
import { ActivityItem } from '@/components/shared/ActivityItem';
import { ServerActivityItem, ServerActivityIcon } from '@/lib/data/dashboard';
import { FileWarning, CheckCircle2, Clock3, Users, LucideIcon } from 'lucide-react';

const iconMap: Record<ServerActivityIcon, LucideIcon> = {
  fileWarning: FileWarning,
  checkCircle: CheckCircle2,
  clock: Clock3,
  users: Users,
};

interface RecentActivitiesProps {
  activities: ServerActivityItem[];
}

export function RecentActivities({ activities }: RecentActivitiesProps) {
  const t = useTranslations('DashboardClient');

  return (
    // ✅ CORRECCIÓ: Apliquem una alçada màxima i activem l'overflow per al scroll.
    // Els valors de padding (pr) i marge (mr) negatiu són per amagar la barra de scroll
    // i que només aparegui en fer hover, un truc visual comú.
    <div className="space-y-4 max-h-[380px] overflow-y-auto pr-2 -mr-2">
      {activities.length > 0
        ? activities.map((act, idx) => {
            const IconComponent = iconMap[act.icon];
            return <ActivityItem key={idx} {...act} icon={IconComponent} />;
          })
        : <p className="text-sm text-muted-foreground">{t('noActivities')}</p>
      }
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/dashboard/_components/SalesPerformance.tsx ===================

"use client";

import { useTranslations } from 'next-intl';
import { cn } from '@/lib/utils/utils'; // ✅ AFEGEIX AQUESTA LÍNIA

interface SalesPerformanceProps {
  stats: {
    invoiced: number;
    expenses: number;
    invoicedChange: string;
    expensesChange: string;
    invoicedIsPositive: boolean;
    expensesIsPositive: boolean;
  };
  percentGoal: number;
  monthlyGoal: number;
}

export function SalesPerformance({ stats, percentGoal, monthlyGoal }: SalesPerformanceProps) {
  const t = useTranslations('DashboardClient');

  // ✅ CORRECCIÓ: Embolcallem tot en un sol 'div'. Això permetrà que el Collapsible funcioni.
  return (
    <div className="flex flex-col gap-6">
      {/* Barra de Progrés */}
      <div>
        <div className="w-full h-2.5 rounded-full bg-muted overflow-hidden">
          <div className="h-full bg-primary" style={{ width: `${percentGoal}%` }} />
        </div>
        <div className="mt-2 flex items-center justify-between text-sm text-muted-foreground">
          <span><strong className="text-foreground">{percentGoal}%</strong> {t('goalCompleted')}</span>
          <span><strong className="text-foreground">€{stats.invoiced?.toLocaleString()}</strong> / €{monthlyGoal.toLocaleString()}</span>
        </div>
      </div>


      {/* Mini-Cards de mètriques */}
      <div className="mt-6 grid grid-cols-1 sm:grid-cols-3 gap-4">
        {/* Card Facturació */}
        <div className="rounded-lg p-4 bg-background border">
          <div className="text-xs text-muted-foreground">{t('invoicedMonth')}</div>
          <div className="text-xl font-bold text-foreground mt-1">€{stats.invoiced?.toLocaleString()}</div>
          <div className={cn(
              "text-xs font-medium mt-1",
              stats.invoicedIsPositive ? 'text-green-600' : 'text-red-600'
          )}>
            {stats.invoicedChange}
          </div>
        </div>
        {/* Card Despeses */}
        <div className="rounded-lg p-4 bg-background border">
          <div className="text-xs text-muted-foreground">{t('expensesMonth')}</div>
          <div className="text-xl font-bold text-foreground mt-1">€{stats.expenses?.toLocaleString()}</div>
          <div className={cn(
              "text-xs font-medium mt-1",
              stats.expensesIsPositive ? 'text-green-600' : 'text-red-600' // Per a despeses, potser vols invertir la lògica
          )}>
            {stats.expensesChange}
          </div>
        </div>
        {/* Card Benefici Net */}
        <div className="rounded-lg p-4 bg-background border">
          <div className="text-xs text-muted-foreground">{t('netProfit')}</div>
          <div className="text-xl font-bold text-green-600 mt-1">
            €{(stats.invoiced - stats.expenses).toLocaleString()}
          </div>
          <div className="text-xs text-muted-foreground mt-1 invisible">_</div>
        </div>
      </div>
      
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/dashboard/_components/StatCardsGrid.tsx ===================

"use client";

import React, { memo } from "react";
import { useTranslations } from "next-intl";
import { StatCard } from "@/components/shared/StatCard";
import { Users, Target, Euro, BadgePercent } from "lucide-react";

interface StatCardsGridProps {
  stats: {
    totalContacts: number;
    opportunities: number;
    invoiced: number;
    pending: number;
  };
}

export const StatCardsGrid = memo(({ stats }: StatCardsGridProps) => {
  const t = useTranslations("DashboardClient");

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-6">
      <StatCard
        href="/crm/contactes"
        icon={Users}
        title={t("totalContacts")}
        value={stats.totalContacts.toLocaleString()}
        // ✅ CANVI: Passem classes de text
        color="text-blue-500"
        openText={t("openLink")}
      />
      <StatCard
        href="/crm/pipeline"
        icon={Target}
        title={t("activeOpportunities")}
        value={stats.opportunities.toLocaleString()}
        color="text-green-500"
        openText={t("openLink")}
      />
      <StatCard
        href="/finances/facturacio"
        icon={Euro}
        title={t("monthlyInvoicing")}
        value={`€${stats.invoiced.toLocaleString()}`}
        color="text-violet-500"
        openText={t("openLink")}
      />
      <StatCard
        href="/finances/facturacio"
        icon={BadgePercent}
        title={t("pendingVAT")}
        value={`€${stats.pending.toLocaleString()}`}
        color="text-orange-500"
        openText={t("openLink")}
      />
    </div>
  );
});

StatCardsGrid.displayName = "StatCardsGrid";

// =================== FILE: src/app/[locale]/(app)/excel/actions.ts ===================

"use server";
import { SupabaseClient } from "@supabase/supabase-js";
import { validateUserSession } from "@/lib/supabase/session";
import ExcelJS from 'exceljs';
import { getTranslations } from 'next-intl/server';

// --- TIPUS COMPARTITS ---
export interface ColumnInfo {
  column_name: string;
  data_type: string;
}

export interface TableDataResult<T> {
  success: true;
  columns: ColumnInfo[];
  rows: T[];
}

export interface ErrorResponse {
  success: false;
  message: string;
}

// Defineix el tipus que representa una fila completa per a la inserció
type RowToInsert<T extends Record<string, unknown>> = T & {
  team_id: string;
  user_id: string;
};

/**
 * Funció per obtenir les metadades de les columnes d'una taula de Supabase.
 * Retorna l'array de columnes i el `selectString` per a la consulta.
 */
async function getTableColumns(supabase: SupabaseClient, tableName: string): Promise<{ columns: ColumnInfo[], selectString: string }> {
  const { data: columnInfo, error: columnError } = await supabase.rpc(
    "get_table_columns_info",
    { p_table_name: tableName }
  );

  if (columnError) {
    throw new Error(`Error obtenint columnes: ${columnError.message}`);
  }

  const columns = (columnInfo ?? []) as ColumnInfo[];
  const selectString = columns.map(c => c.column_name).join(",");

  return { columns, selectString };
}

/**
 * Funció per consultar dades d'una taula de Supabase, amb l'opció de no tornar-ne cap.
 */
async function getTableRecords<T>(supabase: SupabaseClient, tableName: string, activeTeamId: string, selectString: string, withData: boolean): Promise<T[]> {
  // Si withData és fals, retornem un array buit directament
  if (!withData) {
    return [];
  }

  const { data, error } = await supabase
    .from(tableName)
    .select(selectString)
    .eq('team_id', activeTeamId)
    .order("created_at", { ascending: false })
    .limit(1000);

  if (error) {
    throw new Error(`Error obtenint dades: ${error.message}`);
  }

  return (data ?? []) as T[];
}

// Tipus genèric per a la funció principal
export async function exportToExcel<T extends Record<string, unknown>>(tableName: string, withData: boolean) {
  try {
    const t = await getTranslations('excel');
    // 1. Validació de la sessió per obtenir l'usuari i l'equip actiu
    const session = await validateUserSession();
    if ('error' in session) {
      return { success: false, message: session.error.message };
    }
    const { supabase, activeTeamId } = session;

    // 2. Cridem a la funció per obtenir les columnes
    const { columns, selectString } = await getTableColumns(supabase, tableName);

    // 3. Cridem a la funció per obtenir els registres (o un array buit)
    const records = await getTableRecords<T>(supabase, tableName, activeTeamId, selectString, withData);

    // 4. Creem un nou llibre d'Excel i una pestanya
    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet(tableName);

    // 5. Definim les columnes de l'Excel a partir de la informació obtinguda
    const excelColumns = columns.map(col => ({
      header: col.column_name.charAt(0) + col.column_name.slice(1),
      key: col.column_name,
      width: 20,
    }));
    worksheet.columns = excelColumns;

    // 6. Afegim les dades a les files (pot ser un array buit si `withData` és `false`)
    if (records.length > 0) {
      worksheet.addRows(records);
    }

    // 7. Generem el fitxer Excel en memòria
    const buffer = await workbook.xlsx.writeBuffer();

    // 8. Retornem el buffer i el nom del fitxer
    const now = new Date();
    const pad = (num: number) => num.toString().padStart(2, '0');
    let fileName = "";
    if (withData) {
      fileName = `${tableName}_${now.getFullYear().toString().slice(-2)}${pad(now.getMonth() + 1)}${pad(now.getDate())}${pad(now.getHours())}${pad(now.getMinutes())}${pad(now.getSeconds())}.xlsx`;
    } else {
      fileName = `${t('template')}_${tableName}_${now.getFullYear().toString().slice(-2)}${pad(now.getMonth() + 1)}${pad(now.getDate())}${pad(now.getHours())}${pad(now.getMinutes())}${pad(now.getSeconds())}.xlsx`;
    }


    return {
      success: true,
      fileBuffer: Buffer.from(buffer).toString('base64'),
      fileName,
    };
  } catch (error) {
    console.error("Error en exportar a Excel:", error);
    const message = error instanceof Error ? error.message : "Error desconegut";
    return { success: false, message };
  }
}

// --- FUNCIONS PER IMPORTAR A EXCEL ---
export async function validateColumns(excelColumns: string[], dbColumns: ColumnInfo[]) {
  // Convertim els noms de les columnes de la BDD a minúscules per a la comparació
  const dbColumnNamesLower = dbColumns.map(c => c.column_name.toLowerCase());

  // Convertim els noms de les columnes de l'Excel a minúscules per a la comparació
  const excelColumnNamesLower = excelColumns.map(c => c.toLowerCase());

  // 1. Validar que la quantitat de columnes sigui la mateixa
  if (excelColumnNamesLower.length !== dbColumnNamesLower.length) {
    console.error(`La quantitat de columnes no coincideix. La BDD té ${dbColumnNamesLower.length} camps, mentre que l'arxiu té ${excelColumnNamesLower.length}.`);
    console.error("Camps BDD --> " + dbColumnNamesLower.join(", "));
    console.error("Camps fitxer --> " + excelColumnNamesLower.join(", "));
    return false;
  }

  // 2. Comprovar que cada columna de l'Excel coincideix amb la seva homòloga a la BD, respectant l'ordre i sense distinció de majúscules/minúscules
  for (let i = 0; i < excelColumnNamesLower.length; i++) {
    const dbColumnName = dbColumnNamesLower[i];
    const excelColumnName = excelColumnNamesLower[i];

    if (dbColumnName !== excelColumnName) {
      console.error("L'ordre o els noms de les columnes no coincideixen, o no s'han escrit de la mateixa manera (ignorant majúscules/minúscules).");
      console.error("Camps BDD --> " + dbColumnNamesLower.join(", "));
      console.error("Camps fitxer --> " + excelColumnNamesLower.join(", "));
      return false;
    }
  }

  // Si arriba aquí, vol dir que tot és correcte
  return true;
}

export async function importFromExcel<T extends Record<string, unknown>>(tableName: string, formData: FormData) {
  try {
    // 1. Validació de la sessió per obtenir l'usuari i l'equip actiu
    const session = await validateUserSession();
    if ('error' in session) {
      return { success: false, message: session.error.message };
    }
    const { supabase, user, activeTeamId } = session;

    // 2. Cridem a la funció per obtenir les columnes
    const { columns } = await getTableColumns(supabase, tableName);

    // 3. Obtenim el fitxer de FormData
    const file = formData.get('file');
    if (!file || typeof file === 'string' || !(file instanceof File)) {
      return { success: false, message: "No s'ha trobat el fitxer Excel." };
    }

    // 4. Convertim el ReadableStream a Buffer per a ExcelJS
    const buffer = await file.arrayBuffer();

    // 5. Llegim el fitxer Excel amb ExcelJS
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.load(buffer);
    const worksheet = workbook.getWorksheet(1);
    if (!worksheet) {
      return { success: false, message: "No s'ha pogut llegir el full de càlcul." };
    }

    // 6. Obtenim les capçaleres de l'Excel i validem contra les columnes de la BD
    const excelHeaders = worksheet.getRow(1)?.values as string[];
    if (!excelHeaders || excelHeaders.length === 0) {
      return { success: false, message: "El full de càlcul no té capçaleres." };
    }
    excelHeaders.shift();

    if (!validateColumns(excelHeaders, columns)) {
      return { success: false, message: "Les columnes de l'arxiu Excel no coincideixen amb les de la base de dades." };
    }

    // 7. Processar les dades i preparar-les per a la inserció
    const dataToInsert: RowToInsert<T>[] = [];
    worksheet.eachRow((row, rowNumber) => {
      if (rowNumber === 1) return;
      const rowData: Partial<T> = {};
      row.eachCell((cell, colNumber) => {
        const header = excelHeaders[colNumber - 1];
        if (header) {
          rowData[header as keyof Partial<T>] = cell.value as T[keyof T];
        }
      });

      // ✅ Creem un objecte que compleix amb el tipus RowToInsert
      const completeRow: RowToInsert<T> = {
        ...rowData,
        team_id: activeTeamId,
        user_id: user.id
      } as RowToInsert<T>; // Utilitzem l'asserció amb el tipus correcte

      dataToInsert.push(completeRow);
    });

    // 8. Inserir les dades a Supabase en lots
    const batchSize = 1000;
    let recordsInserted = 0;
    for (let i = 0; i < dataToInsert.length; i += batchSize) {
      const batch = dataToInsert.slice(i, i + batchSize);
      const { error } = await supabase.from(tableName).insert(batch);
      if (error) {
        console.error("Error en la inserció del lot:", error);
        return { success: false, message: `Error en la inserció de dades: ${error.message}` };
      }
      recordsInserted += batch.length;
    }

    return { success: true, message: `S'han importat ${recordsInserted} registres correctament.` };
  } catch (error) {
    console.error("Error en importar a Excel:", error);
    const message = error instanceof Error ? error.message : "Error desconegut";
    return { success: false, message };
  }
}


// =================== FILE: src/app/[locale]/(app)/excel/ExcelDropdownButton.tsx ===================

import React, { useState, useRef, useEffect } from 'react';
import { FileSpreadsheet } from 'lucide-react';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';

/**
 * Defineix la forma d'una opció del desplegable.
 * Ara inclou una icona i un 'label' que actuarà com a tooltip.
 */
export interface DropdownOption {
  value: string;
  label: string;
  icon: React.ElementType;
}

/**
 * Defineix les propietats (props) que rep el component DropdownButton.
 */
interface DropdownButtonProps {
  /** Un array d'opcions per mostrar al menú desplegable. */
  options: DropdownOption[];
  /** Funció que s'executa quan l'usuari selecciona una opció. */
  onSelect: (selectedOption: DropdownOption) => void;

  disabled?: boolean; // ⬅️ AFEGEIX AQUESTA LÍNIA

}

/**
 * Un component de UI per a un botó desplegable que mostra una llista d'opcions.
 */
const DropdownButton: React.FC<DropdownButtonProps> = ({ options, onSelect }) => {
  // Estat per controlar si el menú està obert o tancat.
  const [isOpen, setIsOpen] = useState(false);

  // Ref per al contenidor principal del desplegable.
  const dropdownRef = useRef<HTMLDivElement>(null);

  /**
   * Canvia l'estat d'obertura del menú.
   */
  const toggleDropdown = () => {
    setIsOpen(prevIsOpen => !prevIsOpen);
  };

  /**
   * Gestiona el clic en una de les opcions.
   * Crida la funció onSelect i tanca el menú.
   */
  const handleOptionClick = (option: DropdownOption) => {
    onSelect(option);
    setIsOpen(false);
  };

  // Efecte per tancar el menú si l'usuari fa clic fora del component.
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    // Afegim l'event listener quan el component es munta.
    document.addEventListener('mousedown', handleClickOutside);

    // Netegem l'event listener quan el component es desmunta.
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []); // L'array buit assegura que l'efecte només s'executa un cop.

  return (
    <div className="relative inline-block font-sans" ref={dropdownRef}>
      <button
        onClick={toggleDropdown} // Canviem l'estil per a que sigui un botó d'icona
        className="flex items-center justify-center h-9 px-3 bg-green-700 text-white rounded-md hover:bg-green-800 transition-colors focus:outline-none focus:ring-2 focus:ring-green-500"
        aria-label="Opcions d'Excel"
      >
        <FileSpreadsheet className="h-6 w-6" />
      </button>
      {isOpen && (
        <ul className="absolute block list-none p-1 m-0 mt-2 bg-green-700/25 backdrop-blur-sm border border-green-600 rounded-md shadow-lg z-10">
          <TooltipProvider delayDuration={100}>
            {options.map((option) => (
              <Tooltip key={option.value}>
                <TooltipTrigger asChild>
                  <li
                    className="p-2 rounded-md cursor-pointer hover:bg-white/20"
                    onClick={() => handleOptionClick(option)}
                  >
                    <option.icon className="h-5 w-5 text-white" />
                  </li>
                </TooltipTrigger>
                <TooltipContent side="right" className="bg-green-900/70 text-zinc-50 border-zinc-800">
                  <p>{option.label}</p>
                </TooltipContent>
              </Tooltip>
            ))}
          </TooltipProvider>
        </ul>
      )}
    </div>
  );
};

export default DropdownButton;


// =================== FILE: src/app/[locale]/(app)/finances/expenses/actions.ts ===================

"use server";


import {
    type ExpenseWithContact,
    type ExpenseStatus 
} from "@/types/finances/expenses";
import { type ActionResult } from "@/types/shared/index";
import { validateUserSession } from "@/lib/supabase/session";
import { type Expense } from "@/types/finances/expenses";
import { revalidatePath } from "next/cache";
export interface ExpenseFilters {
    searchTerm?: string;
    category?: string;
    sortBy?: string;
    sortOrder?: 'asc' | 'desc';
    status?: string; 
    limit?: number; 
    offset?: number; 
}

export interface PaginatedExpensesResponse {
    data: ExpenseWithContact[];
    count: number;
}

type RpcSearchResult = {
    id: number;
    invoice_number: string | null;
    expense_date: string;
    total_amount: number;
    category: string | null;
    description: string;
    supplier_id: string | null;
    supplier_nom: string | null;
    status: ExpenseStatus;
    payment_date: string | null;
    is_billable: boolean;
    project_id: string | null;
};

/**
 * Obté les dades i el recompte total per a la taula de despeses.
 */
export async function fetchPaginatedExpenses(filters: ExpenseFilters): Promise<PaginatedExpensesResponse> {
    const session = await validateUserSession();
    if ("error" in session) {
        console.error("Session error in fetchPaginatedExpenses:", session.error);
        return { data: [], count: 0 };
    }
    const { supabase, activeTeamId } = session;

    // --- 1. Consulta de Dades (RPC) ---
    const { data: rpcData, error: rpcError } = await supabase.rpc('search_expenses', {
        p_team_id: activeTeamId,
        p_search_term: filters.searchTerm || null,
        p_category: filters.category || null,
        p_status: filters.status || null, 
        p_sort_by: filters.sortBy || 'expense_date',
        p_sort_order: filters.sortOrder || 'desc',
        p_limit: filters.limit ?? 50,
        p_offset: filters.offset ?? 0,
    });

    if (rpcError) {
        console.error("Error calling RPC search_expenses:", rpcError.message);
        throw new Error("Error en carregar les dades de despeses.");
    }

    const formattedData = (rpcData || []).map((item: RpcSearchResult) => ({
        ...item,
        suppliers: item.supplier_id ? {
            id: item.supplier_id,
            nom: item.supplier_nom,
        } : null,
    }));

    // --- 2. Consulta de Recompte Total ---
    let countQuery = supabase
        .from('expenses')
        .select('id', { count: 'exact', head: true })
        .eq('team_id', activeTeamId);

    if (filters.status && filters.status !== 'all') {
        countQuery = countQuery.eq('status', filters.status);
    }
    if (filters.category && filters.category !== 'all') {
        countQuery = countQuery.eq('category', filters.category);
    }
    if (filters.searchTerm) {
        countQuery = countQuery.or(
            `description.ilike.%${filters.searchTerm}%,invoice_number.ilike.%${filters.searchTerm}%`
        );
    }

    const { count, error: countError } = await countQuery;

    if (countError) {
        console.error("Error fetching expenses count:", countError.message);
        throw new Error("Error en obtenir el recompte de despeses.");
    }

    return { 
        data: formattedData as unknown as ExpenseWithContact[], 
        count: count ?? 0 
    };
}

/**
 * Acció per processar un OCR (ex: pujar factura per analitzar).
 */
export async function processOcrAction(formData: FormData): Promise<ActionResult<Record<string, unknown>>> {
    const session = await validateUserSession();
    if ("error" in session) return { success: false, message: session.error.message };
    const { supabase } = session;

    const file = formData.get("file") as File | null;
    if (!file) return { success: false, message: "No s'ha proporcionat cap fitxer." };

    // Això és un exemple, ajusta-ho a la teva Edge Function
    const { data, error } = await supabase.functions.invoke("process-ocr", { body: { file_name: file.name, file_type: file.type } });

    if (error) {
        return { success: false, message: error.message };
    }
    return { success: true, message: "Document processat amb èxit.", data };
}

/**
 * ✅ NOVA FUNCIÓ
 * Obté les despeses associades a un proveïdor específic.
 */
export async function fetchExpensesForSupplier(supplierId: string) {
  const session = await validateUserSession();
  if ("error" in session) return [];
  const { supabase, activeTeamId } = session;

  const { data, error } = await supabase
    .from('expenses')
    .select('id, expense_date, description, total_amount, status') // Camps bàsics
    .eq('supplier_id', supplierId)
    .eq('team_id', activeTeamId)
    .order('expense_date', { ascending: false })
    .limit(50); // Limitem per rendiment

  if (error) {
    console.error("Error fetching expenses for supplier:", error.message);
    return [];
  }
  return data;
}

// Tipus per a la resposta (opcional)
export type ExpenseForSupplier = Awaited<ReturnType<typeof fetchExpensesForSupplier>>[0];

/**
 * Cerca despeses que NO estan vinculades a cap proveïdor.
 */
export async function searchExpensesForLinking(
  searchTerm: string
): Promise<Pick<Expense, 'id' | 'description' | 'expense_date' | 'total_amount'>[]> {
  const session = await validateUserSession();
  if ("error" in session) return [];
  const { supabase, activeTeamId } = session;

  let query = supabase
    .from('expenses')
    .select('id, description, expense_date, total_amount')
    .eq('team_id', activeTeamId)
    .is('supplier_id', null) // ✅ Clau: Només despeses no vinculades
    .order('expense_date', { ascending: false }) // Ordenem per data recent
    .limit(10);

  if (searchTerm) {
    // Cerca per descripció o número de factura (si el tens)
    query = query.ilike('description', `%${searchTerm}%`);
    // Si tens 'invoice_number', afegeix-lo a la cerca:
    // query = query.or(`description.ilike.%${searchTerm}%,invoice_number.ilike.%${searchTerm}%`);
  }

  const { data, error } = await query;

  if (error) {
    console.error("Error searching expenses for linking:", error.message);
    return [];
  }
  return data || [];
}

/**
 * Vincula una despesa existent a un proveïdor.
 */
export async function linkExpenseToSupplier(
  expenseId: number, // Les IDs de despesa són números
  supplierId: string
): Promise<ActionResult<Expense>> { // Retorna la despesa actualitzada
  const session = await validateUserSession();
  if ("error" in session) return { success: false, message: session.error.message };
  const { supabase, activeTeamId } = session;

  // Actualitzem la despesa
  const { data, error } = await supabase
    .from('expenses')
    .update({ supplier_id: supplierId })
    .eq('id', expenseId)
    .eq('team_id', activeTeamId) // Seguretat
    .select()
    .single();

  if (error) {
    console.error("Error linking expense:", error);
    return { success: false, message: `Error en vincular la despesa: ${error.message}` };
  }

  // Revalidem les pàgines afectades
  revalidatePath(`/finances/suppliers/${supplierId}`);
  revalidatePath(`/finances/expenses/${expenseId}`);

  return { success: true, message: "Despesa vinculada.", data: data as Expense };
}

/**
 * Desvincula una despesa d'un proveïdor.
 */
export async function unlinkExpenseFromSupplier(
  expenseId: number,
  supplierId: string // Per revalidar
): Promise<ActionResult> {
  const session = await validateUserSession();
  if ("error" in session) return { success: false, message: session.error.message };
  const { supabase, activeTeamId } = session;

  // Posem 'supplier_id' a null.
  const { error } = await supabase
    .from('expenses')
    .update({ supplier_id: null })
    .eq('id', expenseId)
    .eq('team_id', activeTeamId); // Seguretat

  if (error) {
    console.error("Error unlinking expense:", error);
    return { success: false, message: `Error en desvincular la despesa: ${error.message}` };
  }

  // Revalidem les pàgines afectades
  revalidatePath(`/finances/suppliers/${supplierId}`);
  revalidatePath(`/finances/expenses/${expenseId}`);

  return { success: true, message: "Despesa desvinculada." };
}



// =================== FILE: src/app/[locale]/(app)/finances/expenses/page.tsx ===================

// src/app/[locale]/(app)/finances/despeses/page.tsx
import { Suspense } from 'react';
import { ExpensesData } from './_components/ExpensesData';
import { ExpensesSkeleton } from './_components/ExpensesSkeleton';

/**
 * Pàgina principal (Server Component) per a la gestió de despeses.
 * * ✅ ARQUITECTURA CORRECTA:
 * 1. La Pàgina (page.tsx) no ha de contenir lògica de dades.
 * 2. Utilitzem <Suspense> per gestionar l'estat de càrrega.
 * 3. <ExpensesData> és el Server Component que s'encarrega de l'autenticació
 * i de la càrrega de dades inicial (les primeres 50).
 * 4. <ExpensesSkeleton> es mostra mentre <ExpensesData> està carregant.
 */
export default async function ExpensesPage() {
    return (
        <Suspense fallback={<ExpensesSkeleton />}>
            <ExpensesData />
        </Suspense>
    );
}

// =================== FILE: src/app/[locale]/(app)/finances/expenses/[expenseId]/actions.ts ===================

"use server";

import { revalidatePath } from "next/cache";
import {
  type Expense,
  type ExpenseItem,
  type ExpenseDetail,
  type ExpenseFormDataForAction,
  type ExpenseAttachment, // ✅ Assegura't que aquest tipus existeix
} from "@/types/finances/expenses";
import { type ActionResult } from "@/types/shared/index";
import { validateUserSession } from "@/lib/supabase/session";
import { createClient as createServerActionClient } from "@/lib/supabase/server";
import { type SupabaseClient, type User } from "@supabase/supabase-js";
import { createAdminClient } from "@/lib/supabase/admin"; // ✅ Importat per a esborrar/signar

// --- Helpers Interns (Corregits) ---

async function upsertExpenseDetails(
  supabase: SupabaseClient,
  expenseData: Omit<Expense, "id" | "created_at" | "user_id" | "team_id" | 'expense_attachments' | 'suppliers' | 'expense_items'>,
  expenseId: string | number | null,
  userId: string,
  teamId: string
): Promise<ActionResult<{ id: number }>> {
  if (expenseData.expense_date) {
    try {
      expenseData.expense_date = new Date(expenseData.expense_date).toISOString().split('T')[0];
    } catch (e) {
      console.error("Error al formatar la data:", e);
      return { success: false, message: "Format de data invàlid." };
    }
  }

  expenseData.supplier_id = expenseData.supplier_id || null;
  expenseData.project_id = expenseData.project_id || null;

  console.log("Data being sent to upsertExpenseDetails:", JSON.stringify(expenseData, null, 2));

  const query = expenseId
    ? supabase.from("expenses").update(expenseData).eq("id", expenseId)
    : supabase.from("expenses").insert({ ...expenseData, user_id: userId, team_id: teamId });

  // ✅ Important: .select('id').single() retorna l'ID tant a INSERT com a UPDATE.
  const { data, error } = await query.select('id').single();

  if (error) {
    console.error("Error upserting expense:", error);
    console.error("Supabase error details:", { code: error.code, message: error.message, details: error.details, hint: error.hint });
    return { success: false, message: `Error en desar la despesa: ${error.message}` };
  }
  if (!data || typeof data.id !== 'number') {
    console.error("Error upserting expense: ID not returned.");
    return { success: false, message: "Error en desar: ID no retornat." };
  }

  // ✅ Sempre retornem l'ID obtingut (sigui nou o existent)
  return { success: true, message: "Despesa desada (ID obtingut).", data: { id: data.id } };
}

async function syncExpenseItems(
  supabase: SupabaseClient,
  expenseId: number,
  items: ExpenseItem[] | undefined,
  user: User,
  teamId: string
): Promise<ActionResult> {
  if (!items || items.length === 0) {
    const { error: deleteError } = await supabase.from('expense_items').delete().eq('expense_id', expenseId);
    if (deleteError) {
      return { success: false, message: `Error netejant conceptes antics: ${deleteError.message}` };
    }
    return { success: true, message: "No hi ha conceptes per sincronitzar." };
  }

  const existingItemIds = items.map(item => item.id).filter(id => typeof id === 'number' && id > 0);

  let deleteQuery = supabase
    .from('expense_items')
    .delete()
    .eq('expense_id', expenseId);

  if (existingItemIds.length > 0) {
    deleteQuery = deleteQuery.not('id', 'in', `(${existingItemIds.join(',')})`);
  }

  const { error: deleteError } = await deleteQuery;

  if (deleteError) {
    return { success: false, message: `Error esborrant conceptes: ${deleteError.message}` };
  }

  const itemsToUpsert = items.map(item => ({
    // Si l'ID és invàlid o temporal (p.ex. un string 'new-item-...') el posem a undefined
    id: (typeof item.id === 'number' && item.id > 0) ? item.id : undefined,
    description: item.description,
    quantity: item.quantity,
    unit_price: item.unit_price,
    total: item.total,
    // Assegura't que la resta de camps són correctes
    expense_id: expenseId,
    user_id: user.id,
    team_id: teamId,
  }));
  

  const { error: upsertError } = await supabase
    .from("expense_items")
    .upsert(itemsToUpsert, { onConflict: 'id', ignoreDuplicates: false });

  if (upsertError) {
    console.error("Error upserting items:", upsertError);
    return { success: false, message: `Error actualitzant conceptes: ${upsertError.message}` };
  }

  return { success: true, message: "Conceptes sincronitzats correctament." };
}

// --- Server Actions Públiques ---

export async function fetchExpenseDetail(expenseId: number): Promise<ExpenseDetail | null> {
  const supabase = createServerActionClient();

  const { data, error } = await supabase
    .from('expenses')
    .select(`
      *,
      suppliers (id, nom, nif),
      expense_items (*),
      expense_attachments (*)
    `)
    .eq('id', expenseId)
    .single();

  if (error) {
    console.error("Error fetching expense detail:", error.message);
    return null;
  }

  console.log("Data received from fetchExpenseDetail:", data);
  
  // Assegura't que el tipus ExpenseDetail inclou expense_attachments com un array
  return data as unknown as ExpenseDetail;
}

export async function saveExpenseAction(
  expenseData: ExpenseFormDataForAction,
  expenseId: string | number | null // Aquest expenseId és l'ID de la URL ('new' o un número)
): Promise<ActionResult<{ id: number }>> { // ✅ Sempre retornarem un ID
  const session = await validateUserSession();
  if ("error" in session) return { success: false, message: session.error.message };
  const { supabase, user, activeTeamId } = session;

  const { expense_items, id: formId, ...dataToUpsert } = expenseData;
  
  delete (dataToUpsert as Record<string, unknown>).suppliers;
  delete (dataToUpsert as Record<string, unknown>).expense_attachments;
  
  // Determina l'ID real (pot ser null si és 'new')
  const currentId: number | null = (typeof expenseId === 'number') 
    ? expenseId 
    : (typeof formId === 'number' && formId > 0 ? formId : null);

  const expenseResult = await upsertExpenseDetails(supabase, dataToUpsert, currentId, user.id, activeTeamId);
  
  if (!expenseResult.success || !expenseResult.data?.id) {
    // Si falla el upsert principal, retornem l'error
    return { success: false, message: expenseResult.message || "Error desconegut en desar." };
  }

  // ✅ BUG CORREGIT: Obtenim l'ID del resultat de l'upsert.
  // Això funciona tant per a INSERT (retorna el nou ID) com per a UPDATE (retorna l'ID existent).
  const resultingExpenseId = expenseResult.data.id;

  // Ara sincronitzem els ítems utilitzant l'ID correcte (sigui nou o existent)
  const itemsResult = await syncExpenseItems(supabase, resultingExpenseId, expense_items, user, activeTeamId);
  
  if (!itemsResult.success) {
    // Si fallen els ítems, retornem l'error, però l'ID de la despesa
    return { success: false, message: itemsResult.message, data: { id: resultingExpenseId } };
  }

  // Revalidem la pàgina específica (ara funciona per a 'new' també)
  revalidatePath(`/finances/expenses/${resultingExpenseId}`);
  // Revalidem el llistat general
  revalidatePath("/finances/expenses"); 

  // Retornem èxit, amb l'ID resultant
  return { success: true, message: "Despesa desada.", data: { id: resultingExpenseId } };
}

export async function uploadAttachmentAction(expenseId: string | number, formData: FormData): Promise<ActionResult<{ newAttachment: ExpenseAttachment }>> {
  const session = await validateUserSession();
  if ("error" in session) return { success: false, message: session.error.message };
  const { supabase, user, activeTeamId } = session;

  const file = formData.get("file") as File | null;
  if (!file) return { success: false, message: "No s'ha proporcionat cap fitxer." };

  const filePath = `${activeTeamId}/${expenseId}/${Date.now()}-${file.name}`;
  
  // 1. Pujar a Storage
  const { error: uploadError } = await supabase.storage
    .from("despeses-adjunts")
    .upload(filePath, file);
    
  if (uploadError) {
    console.error("Storage upload error:", uploadError);
    return { success: false, message: `Error de Storage: ${uploadError.message}` };
  }

  // 2. Desar a la Base de Dades
  const attachmentData = {
    expense_id: expenseId as number,
    user_id: user.id,
    team_id: activeTeamId,
    file_path: filePath,
    filename: file.name,
    mime_type: file.type,
  };

  const { data: dbData, error: dbError } = await supabase
    .from("expense_attachments")
    .insert(attachmentData)
    .select() // ✅ Retornem la fila inserida
    .single();
    
  if (dbError) {
    console.error("DB insert error after upload:", dbError);
    // Intentem esborrar el fitxer de storage si la BD falla (compensació)
    await supabase.storage.from("despeses-adjunts").remove([filePath]);
    return { success: false, message: `Error de BD: ${dbError.message}` };
  }

  revalidatePath(`/finances/expenses/${expenseId}`);
  
  // ✅ Retornem el nou adjunt perquè el client l'afegeixi a l'estat
  return { 
    success: true, 
    message: "Adjunt pujat correctament.", 
    data: { newAttachment: dbData as ExpenseAttachment } 
  };
}

export async function deleteExpense(expenseId: number): Promise<ActionResult> {
  const session = await validateUserSession();
  if ("error" in session) return { success: false, message: session.error.message };
  const { supabase } = session;

  // TODO: Hauríem d'esborrar també els adjunts de Storage aquí?
  // 1. Obtenir adjunts (opcional, però recomanat)
  // 2. Esborrar despesa (s'hauria d'esborrar en cascada 'expense_items' i 'expense_attachments')
  // 3. Esborrar fitxers de Storage

  const { error } = await supabase
    .from('expenses')
    .delete()
    .eq('id', expenseId);

  if (error) {
    console.error("Error deleting expense:", error.message);
    return { success: false, message: `Error al eliminar la despesa: ${error.message}` };
  }

  revalidatePath("/finances/expenses");
  // Hauríem de redirigir l'usuari si estava a la pàgina de detall?
  // Això es gestiona millor al client després de rebre l'èxit.
  return { success: true, message: `Despesa eliminada correctament.` };
}

export async function getAttachmentSignedUrl(filePath: string): Promise<ActionResult<{ signedUrl: string }>> {
  const session = await validateUserSession();
  if ("error" in session) return { success: false, message: session.error.message };

  const userTeamId = session.activeTeamId;
  const fileTeamId = filePath.split('/')[0];
  
  if (userTeamId !== fileTeamId) {
    return { success: false, message: "Accés denegat." };
  }

  const supabaseAdmin = createAdminClient();
  const { data, error } = await supabaseAdmin.storage
    .from('despeses-adjunts')
    .createSignedUrl(filePath, 60 * 5); // ✅ URL vàlida per 5 minuts

  if (error) {
    return { success: false, message: error.message };
  }
  return { success: true, message: "URL signada generada.", data: { signedUrl: data.signedUrl } };
}

export async function deleteAttachmentAction(
  attachmentId: string, // L'ID de la taula expense_attachments (UUID)
  filePath: string
): Promise<ActionResult> {
  const session = await validateUserSession();
  if ("error" in session) return { success: false, message: session.error.message };
  
  const { supabase, activeTeamId } = session;

  // 1. Esborrar de la Base de Dades (amb comprovació de team_id)
  const { error: dbError } = await supabase
    .from('expense_attachments')
    .delete()
    .eq('id', attachmentId)
    .eq('team_id', activeTeamId);

  if (dbError) {
    console.error("Error deleting attachment from DB:", dbError);
    return { success: false, message: `Error esborrant adjunt de la BD: ${dbError.message}` };
  }

  // 2. Esborrar de Storage (amb Admin Client per seguretat)
  const supabaseAdmin = createAdminClient();
  const { error: storageError } = await supabaseAdmin.storage
    .from('despeses-adjunts')
    .remove([filePath]);

  if (storageError) {
    console.error("Error deleting attachment from Storage:", storageError);
    // No retornem error fatal, ja que la BD és la font de veritat
    // Però avisem
    return { success: false, message: `Error esborrant fitxer de Storage: ${storageError.message}` };
  }

  // No cal revalidatePath aquí. El client que crida aquesta acció
  // (ExpenseDetailClient) hauria d'actualitzar el seu propi estat o refrescar.
  
  return { success: true, message: "Adjunt eliminat correctament." };
}

// =================== FILE: src/app/[locale]/(app)/finances/expenses/[expenseId]/page.tsx ===================

import { Suspense } from 'react';
import { ExpenseDetailData } from './_components/ExpenseDetailData';
import { ExpenseDetailSkeleton } from './_components/ExpenseDetailSkeleton';

// -------------------------------------------------------------------
// ✅ CORRECCIÓ: Definim la interfície localment amb 'params' com a Promise
//    en lloc d'importar un tipus genèric que causa conflictes.
// -------------------------------------------------------------------
interface ExpenseDetailPageProps {
  params: Promise<{
    locale: string;
    expenseId: string;
  }>;
}

/**
 * Component de la pàgina de detall d'una despesa.
 */
// -------------------------------------------------------------------
// ✅ CORRECCIÓ: El component esdevé 'async' i espera 'props.params'
// -------------------------------------------------------------------
export default async function ExpenseDetailPage(props: ExpenseDetailPageProps) {
  
  // Resolem la promesa per obtenir els paràmetres
  const { expenseId } = await props.params;

  return (
    <Suspense fallback={<ExpenseDetailSkeleton />}>
      {/* Passem l'ID ja resolt al component de dades.
        No cal embolcallar-ho en un objecte { params: ... } si el component fill
        només espera l'ID directament. Això fa el codi més net.
        (He ajustat <ExpenseDetailData> per reflectir això)
      */}
      <ExpenseDetailData expenseId={expenseId} />
    </Suspense>
  );
}

// =================== FILE: src/app/[locale]/(app)/finances/expenses/[expenseId]/_components/AttachmentUploader.tsx ===================

import { useRef, useTransition } from 'react';
import { uploadAttachmentAction } from '../actions'; // La teva acció de pujada
import { toast } from 'sonner';
import { useTranslations } from 'next-intl';

export default function AttachmentUploader({ expenseId }: { expenseId: number | string }) {
    const fileInputRef = useRef<HTMLInputElement>(null);
    const [isUploading, startTransition] = useTransition();
    const t = useTranslations('ExpenseDetail.attachments'); // O el context correcte

    const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (!file) return;

        // Reset input per poder pujar el mateix fitxer de nou
        if (fileInputRef.current) {
            fileInputRef.current.value = '';
        }

        startTransition(async () => {
            const formData = new FormData();
            formData.append('file', file);

            // Cridem l'acció de pujada
            const result = await uploadAttachmentAction(String(expenseId), formData);

            if (result.success) {
                toast.success(result.message || t('uploadSuccess'));
                // Aquí hauries de refrescar les dades o actualitzar l'estat local
                // router.refresh(); // O una manera més optimitzada
            } else {
                toast.error(result.message || t('uploadError'));
            }
        });
    };

    const triggerFileInput = () => {
        fileInputRef.current?.click();
    };

    return (
        <div>
            {/* Input ocult */}
            <input
                type="file"
                ref={fileInputRef}
                onChange={handleFileSelect}
                style={{ display: 'none' }}
                disabled={isUploading}
            />

            {/* Àrea clicable */}
            <div 
                className="border-2 border-dashed p-4 text-center rounded-lg cursor-pointer hover:border-primary"
                onClick={triggerFileInput} // <-- Activa l'input en fer clic
            >
                {isUploading ? (
                    <p>{t('uploading')}</p> 
                ) : (
                    <p className="text-sm text-muted-foreground">{t('upload.dragAndDrop')}</p>
                )}
            </div>
            
            {/* Llista d'adjunts existents (ExpenseAttachmentCard) */}
            {/* ... */}
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/finances/expenses/[expenseId]/_components/ExpenseAttachmentCard.tsx ===================

"use client";

import { type ExpenseAttachment } from '@/types/finances/expenses';
import { Button } from '@/components/ui/button';
import { Download, Trash2, FileText, Loader2 } from 'lucide-react'; // 'AlertTriangle' no s'utilitza aquí, es pot treure
import { useTransition } from 'react';
import { toast } from 'sonner';
import { getAttachmentSignedUrl, deleteAttachmentAction } from '../actions';

// ✅ CORRECCIÓ: La importació ha de ser 'alert-dialog'
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog"; // <-- Ruta corregida

interface ExpenseAttachmentCardProps {
  attachment: ExpenseAttachment;
  onDeleteSuccess: (attachmentId: string) => void; 
}

export function ExpenseAttachmentCard({ attachment, onDeleteSuccess }: ExpenseAttachmentCardProps) {
  const [isDownloading, startDownloadTransition] = useTransition();
  const [isDeleting, startDeleteTransition] = useTransition();
  
  const handleDownload = () => {
    startDownloadTransition(async () => {
      const result = await getAttachmentSignedUrl(attachment.file_path);
      
      if (result.success && result.data?.signedUrl) {
        // Obrim la URL signada en una nova pestanya
        window.open(result.data.signedUrl, '_blank');
      } else {
        toast.error(result.message || "Error en obtenir l'enllaç de descàrrega.");
      }
    });
  };

  const handleDelete = () => {
    startDeleteTransition(async () => {
      const result = await deleteAttachmentAction(attachment.id, attachment.file_path);
      
      if (result.success) {
        toast.success("Adjunt eliminat correctament.");
        onDeleteSuccess(attachment.id); // Notifiquem al pare
      } else {
        toast.error(result.message || "Error eliminant l'adjunt.");
      }
    });
  };

  return (
    <div className="flex items-center justify-between p-3 border rounded-md bg-muted/50">
      <div className="flex items-center gap-3 overflow-hidden">
        <FileText className="h-6 w-6 text-muted-foreground flex-shrink-0" />
        <div className="flex flex-col overflow-hidden">
          <span className="text-sm font-medium truncate" title={attachment.filename}>
            {attachment.filename}
          </span>
          <span className="text-xs text-muted-foreground">
            {attachment.mime_type}
          </span>
        </div>
      </div>
      <div className="flex items-center gap-2 flex-shrink-0">
        {/* Botó de Descàrrega (amb Server Action) */}
        <Button
          variant="ghost"
          size="icon"
          className="h-8 w-8"
          onClick={handleDownload}
          disabled={isDownloading}
          aria-label={`Descarregar ${attachment.filename}`}
        >
          {isDownloading ? <Loader2 className="h-4 w-4 animate-spin" /> : <Download className="h-4 w-4" />}
        </Button>
        
        {/* Botó d'Esborrar (amb Diàleg de Confirmació) */}
        <AlertDialog>
          <AlertDialogTrigger asChild>
            <Button
              variant="ghost"
              size="icon"
              className="h-8 w-8 text-destructive hover:text-destructive"
              disabled={isDeleting}
              aria-label={`Esborrar ${attachment.filename}`}
            >
              {isDeleting ? <Loader2 className="h-4 w-4 animate-spin" /> : <Trash2 className="h-4 w-4" />}
            </Button>
          </AlertDialogTrigger>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>Estàs segur?</AlertDialogTitle>
              <AlertDialogDescription>
                Aquesta acció no es pot desfer. S'esborrarà permanentment
                el fitxer <span className="font-medium">{attachment.filename}</span>.
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel>Cancel·lar</AlertDialogCancel>
              {/* ✅ Assegurem que el botó d'esborrar té l'estil correcte */}
              <AlertDialogAction 
                onClick={handleDelete} 
                className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
              >
                Esborrar
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>

      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/finances/expenses/[expenseId]/_components/ExpenseAttachmentUploader.tsx ===================

"use client";

// ✅ 'useState' ja no és necessari si no guardem els fitxers a l'estat
import { useTransition } from 'react'; 
import { useDropzone } from 'react-dropzone';
import { Loader2, UploadCloud } from 'lucide-react'; // 'X' no s'utilitzava
// import { Button } from '@/components/ui/button'; // 'Button' no s'utilitzava (estava al codi comentat)
import { toast } from 'sonner';
import { uploadAttachmentAction } from '../actions';
import { type ExpenseAttachment } from '@/types/finances/expenses';

interface ExpenseAttachmentUploaderProps {
  expenseId: number; // L'ID de la despesa (ha d'existir)
  onUploadSuccess: (newAttachment: ExpenseAttachment) => void;
}

export function ExpenseAttachmentUploader({
  expenseId,
  onUploadSuccess,
}: ExpenseAttachmentUploaderProps) {
  // ✅ Eliminem l'estat 'files', ja que no el llegim enlloc.
  // const [files, setFiles] = useState<File[]>([]);
  const [isUploading, startUploadTransition] = useTransition();

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    // ✅ Quan s'accepten fitxers (que ja serà de tipus 'File[]' després d'instal·lar),
    // els passem directament a la funció de pujada.
    onDrop: (acceptedFiles: File[]) => { // Podem tipar-ho explícitament o deixar que ho infereixi
      // setFiles(acceptedFiles); // <-- Eliminat
      handleUpload(acceptedFiles);
    },
    multiple: true,
  });

  const handleUpload = (filesToUpload: File[]) => {
    if (filesToUpload.length === 0) {
      toast.error("Selecciona almenys un fitxer.");
      return;
    }

    startUploadTransition(async () => {
      let successCount = 0;

      for (const file of filesToUpload) {
        const formData = new FormData();
        formData.append('file', file);

        const result = await uploadAttachmentAction(expenseId, formData);

        if (result.success && result.data?.newAttachment) {
          onUploadSuccess(result.data.newAttachment); // Notifica al pare
          successCount++;
        } else {
          toast.error(`Error pujant ${file.name}: ${result.message}`);
        }
      }

      if (successCount > 0) {
        toast.success(`${successCount} fitxer(s) pujats correctament.`);
      }
      // ✅ Eliminem la neteja de l'estat, ja que no existeix.
      // if (errorCount === 0) {
      //   setFiles([]); 
      // }
    });
  };

  return (
    <div className="space-y-3">
      <div
        {...getRootProps()}
        className={`border-2 border-dashed p-6 text-center rounded-lg cursor-pointer
          ${isDragActive ? 'border-primary bg-primary/10' : 'border-muted-foreground/50'}
          ${isUploading ? 'opacity-50 pointer-events-none' : ''}`}
      >
        <input {...getInputProps()} />
        {isUploading ? (
          <div className="flex flex-col items-center gap-2">
            <Loader2 className="w-8 h-8 animate-spin text-primary" />
            <p className="text-sm text-muted-foreground">Pujant fitxers...</p>
          </div>
        ) : (
          <div className="flex flex-col items-center gap-2">
            <UploadCloud className="w-8 h-8 text-muted-foreground" />
            <p className="text-sm text-muted-foreground">
              {isDragActive
                ? "Deixa anar els fitxers aquí"
                : "Arrossega fitxers aquí, o fes clic per seleccionar"}
            </p>
          </div>
        )}
      </div>

      {/* Si en el futur vols activar aquesta vista prèvia, 
        hauràs de tornar a afegir el 'useState<File[]>' 
        i el 'setFiles(acceptedFiles)' al 'onDrop'. 
        En fer-ho, l'error 'ts(6133)' desapareixerà sol.
      */}
      {/* {files.length > 0 && !isUploading && (
         <div className="space-y-2">
           {files.map(file => (
             <div key={file.name} className="...">...</div>
           ))}
           <Button onClick={() => handleUpload(files)} disabled={isUploading}>
             {isUploading ? 'Pujant...' : `Pujar ${files.length} fitxer(s)`}
           </Button>
         </div>
       )}
      */}
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/finances/expenses/[expenseId]/_components/ExpenseDetailClient.tsx ===================

"use client";

import React, { useState } from 'react';
import { useSearchParams, useRouter } from 'next/navigation'; // ✅ Importem hooks
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Loader2, Plus, Save, FileText, AlertTriangle, ArrowLeft } from 'lucide-react'; // ✅ Afegim ArrowLeft
import { type ExpenseDetail, type ExpenseAttachment } from '@/types/finances/expenses';
import { useExpenseDetail } from '../_hooks/useExpenseDetail';
import { ExpenseItemsEditor } from './ExpenseItemsEditor';
import { ExpenseAttachmentCard } from './ExpenseAttachmentCard';
import { formatCurrency, formatDate } from '@/lib/utils/formatters';
import { SupplierCombobox } from '@/components/shared/SupplierCombobox';
import { ExpenseAttachmentUploader } from './ExpenseAttachmentUploader';
import { AlertDialog, AlertDialogDescription, AlertDialogTitle } from "@/components/ui/alert-dialog";

interface ExpenseDetailClientProps {
    initialData: ExpenseDetail | null;
    isNew: boolean;
}

export function ExpenseDetailClient({ initialData, isNew }: ExpenseDetailClientProps) {
    const router = useRouter(); // ✅ Hook router
    const searchParams = useSearchParams(); // ✅ Hook searchParams
    const fromUrl = searchParams.get('from'); // ✅ Llegim el paràmetre 'from'

    const {
        isPending,
        formData,
        handleFieldChange,
        handleSubmit,
        handleItemChange,
        handleAddItem,
        handleRemoveItem,
        t,
    } = useExpenseDetail({ initialData, isNew });

    const [attachments, setAttachments] = useState<ExpenseAttachment[]>(
        initialData?.expense_attachments || []
    );

    const isSaving = isPending;
    const expenseTitle = isNew
        ? t('title.new')
        : formData.invoice_number || `Despesa #${initialData?.id}`;

    const locale = 'ca'; 

    const handleUploadSuccess = (newAttachment: ExpenseAttachment) => {
        setAttachments((prev) => [...prev, newAttachment]);
    };

    const handleDeleteSuccess = (attachmentId: string) => {
        setAttachments((prev) => prev.filter(att => att.id !== attachmentId));
    };

    // ✅ Nova funció per gestionar el botó de Tornar/Cancel·lar
    const handleBackOrCancel = () => {
        // En aquest formulari, "Cancel·lar" simplement significa "Tornar"
        if (fromUrl) {
            router.push(fromUrl); // Si venim de 'from', tornem allà
        } else {
            router.push('/finances/expenses'); // Altrament, tornem al llistat general
        }
    };

    return (
        <form onSubmit={handleSubmit} className="space-y-8">
            {/* Capçalera: Títol i Accions */}
            <div className="flex justify-between items-center">
                {/* ✅ Botó de Tornar/Cancel·lar actualitzat */}
                <div className="flex items-center gap-4">
                     <Button
                        type="button" // Important que no sigui submit
                        variant="outline"
                        size="icon"
                        onClick={handleBackOrCancel}
                        disabled={isSaving}
                        aria-label={"Tornar"}
                    >
                       <ArrowLeft className="h-4 w-4" />
                    </Button>
                    <h1 className="text-3xl font-bold">{expenseTitle}</h1>
                </div>

                <div className="flex space-x-3">
                    <Button type="submit" disabled={isSaving}>
                        {isSaving ? <Loader2 className="w-4 h-4 mr-2 animate-spin" /> : <Save className="w-4 h-4 mr-2" />}
                        {isSaving ? t('button.saving') : t('button.save')}
                    </Button>
                    {/* ❌ Eliminem el botó de Cancel·lar antic, ja tenim el botó <ArrowLeft /> */}
                </div>
            </div>

            {/* Contingut Principal: Grid (2/3 + 1/3) */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                {/* ... resta del component (sense canvis) ... */}
                 {/* Columna Esquerra (Formulari Principal) - 2/3 */}
                 <div className="lg:col-span-2 space-y-3">
                    {/* Targeta 1: Detalls Bàsics */}
                    <Card>
                        <CardHeader><CardTitle>{t('card.generalDetails')}</CardTitle></CardHeader>
                        <CardContent className="space-y-4">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> {/* Gap augmentat */}
                            {/* Proveïdor (Selector) */}
                            <div className="space-y-2">
                            <Label htmlFor="supplier_id">{t('field.supplier')}</Label>
                            <SupplierCombobox
                                value={formData.supplier_id}
                                onChange={(value) => handleFieldChange('supplier_id', value)}
                                initialSupplier={initialData?.suppliers ? { id: initialData.suppliers.id, nom: initialData.suppliers.nom } : null}
                                disabled={isSaving}
                            />
                            </div>
                            {/* Data de la Despesa */}
                            <div className="space-y-2">
                            <Label htmlFor="expense_date">{t('field.expenseDate')}</Label>
                            <Input
                                id="expense_date"
                                type="date"
                                value={formData.expense_date}
                                onChange={(e) => handleFieldChange('expense_date', e.target.value)}
                                disabled={isSaving}
                            />
                            </div>
                        </div>

                        {/* Número de Factura */}
                        <div className="space-y-2">
                            <Label htmlFor="invoice_number">{t('field.invoiceNumber')}</Label>
                            <Input
                            id="invoice_number"
                            value={formData.invoice_number || ''}
                            onChange={(e) => handleFieldChange('invoice_number', e.target.value)}
                            disabled={isSaving}
                            placeholder={t('placeholder.invoiceNumber')}
                            />
                        </div>

                        {/* Descripció (General) */}
                        <div className="space-y-2">
                            <Label htmlFor="description">{t('field.description')}</Label>
                            <Textarea
                            id="description"
                            value={formData.description}
                            onChange={(e) => handleFieldChange('description', e.target.value)}
                            disabled={isSaving}
                            rows={3}
                            placeholder={t('placeholder.description')}
                            />
                        </div>
                        </CardContent>
                    </Card>

                    {/* Targeta 2: Conceptes/Línies d'Article */}
                    <Card>
                        <CardHeader className='flex-row justify-between items-center'>
                        <CardTitle>{t('card.expenseItems')}</CardTitle>
                        <Button type="button" size="sm" variant="outline" onClick={handleAddItem} disabled={isSaving}>
                            <Plus className="w-4 h-4 mr-2" /> {t('button.addItem')}
                        </Button>
                        </CardHeader>
                        <CardContent>
                        <ExpenseItemsEditor
                            items={formData.expense_items || []}
                            onItemChange={handleItemChange}
                            onRemoveItem={handleRemoveItem}
                            isSaving={isSaving}
                        />
                        </CardContent>
                    </Card>

                    {/* Targeta 3: Notes Adicionals */}
                    <Card>
                        <CardHeader><CardTitle>{t('card.notes')}</CardTitle></CardHeader>
                        <CardContent>
                        <Textarea
                            id="notes"
                            value={formData.notes || ''}
                            onChange={(e) => handleFieldChange('notes', e.target.value)}
                            disabled={isSaving}
                            rows={4}
                            placeholder={t('placeholder.notes')}
                        />
                        </CardContent>
                    </Card>
                    </div>

                    {/* Columna Dreta (Metadades i Totals) - 1/3 */}
                    <div className="lg:col-span-1 space-y-3">
                    {/* Targeta 4: Totals i Impostos */}
                    <Card>
                        <CardHeader><CardTitle>{t('card.totals')}</CardTitle></CardHeader>
                        <CardContent className="space-y-3">
                        {/* Subtotal */}
                        <div className="flex justify-between items-center">
                            <Label>{t('label.subtotal')}</Label>
                            <span className="font-medium">{formatCurrency(formData.subtotal, 'EUR', locale)}</span>
                        </div>

                        {/* Descompte */}
                        <div className="space-y-1">
                            <Label htmlFor="discount_amount">{t('field.discount')}</Label>
                            <Input
                            id="discount_amount"
                            type="number"
                            value={formData.discount_amount || 0}
                            onChange={(e) => handleFieldChange('discount_amount', parseFloat(e.target.value) || 0)}
                            disabled={isSaving}
                            step="0.01"
                            />
                        </div>

                        {/* Impostos (Tax Rate) */}
                        <div className="space-y-1">
                            <Label htmlFor="tax_rate">{t('field.taxRate')}</Label>
                            <div className="flex items-center space-x-2">
                            <Input
                                id="tax_rate"
                                type="number"
                                value={formData.tax_rate || 0}
                                onChange={(e) => handleFieldChange('tax_rate', parseFloat(e.target.value) || 0)}
                                disabled={isSaving}
                                step="0.01"
                            />
                            <span className='font-mono text-sm text-muted-foreground'>({formatCurrency(formData.tax_amount, 'EUR', locale)})</span>
                            </div>
                        </div>

                        {/* Total Final */}
                        <div className="pt-2 border-t mt-4 flex justify-between items-center">
                            <Label className="text-lg font-bold">{t('label.total')}</Label>
                            <span className="text-xl font-extrabold text-primary">{formatCurrency(formData.total_amount, 'EUR', locale)}</span>
                        </div>
                        </CardContent>
                    </Card>

                    {/* Targeta 5: Adjunts (Documents) */}
                    <Card>
                        <CardHeader><CardTitle className="flex items-center gap-2"><FileText className="w-5 h-5" />{t('card.attachments')}</CardTitle></CardHeader>
                        <CardContent className="space-y-3">
                        {/* Llista d'adjunts existents (des de l'estat local) */}
                        {attachments.length > 0 ? (
                            attachments.map(attachment => (
                            <ExpenseAttachmentCard
                                key={attachment.id}
                                attachment={attachment}
                                // ✅ Passem la funció per actualitzar l'estat local
                                onDeleteSuccess={handleDeleteSuccess}
                            />
                            ))
                        ) : (
                            !isNew && <p className="text-sm text-muted-foreground">No hi ha adjunts.</p>
                        )}
                        
                        {/* Àrea de pujada */}
                        {isNew ? (
                            <AlertDialog> {/*Canviat Alert a AlertDialog per ferlo com la resta */}
                                <AlertTriangle className="h-4 w-4" />
                                <AlertDialogTitle>Desa la despesa</AlertDialogTitle>
                                <AlertDialogDescription>
                                    Primer has de desar la despesa abans de poder pujar adjunts.
                                </AlertDialogDescription>
                            </AlertDialog>
                        ) : (
                            <ExpenseAttachmentUploader
                            expenseId={initialData!.id} // Si no és 'isNew', initialData.id existeix
                            onUploadSuccess={handleUploadSuccess}
                            />
                        )}
                        </CardContent>
                    </Card>

                    {/* Targeta 6: Informació de Creació (Solo mode Edició) */}
                    {!isNew && initialData && (
                        <Card>
                        <CardHeader><CardTitle>{t('card.metadata')}</CardTitle></CardHeader>
                        <CardContent className="space-y-2 text-sm text-muted-foreground">
                            <p><strong>{t('metadata.id')}:</strong> {initialData.id}</p>
                            <p><strong>{t('metadata.createdBy')}:</strong> {initialData.user_id}</p>
                            <p><strong>{t('metadata.createdAt')}:</strong> {formatDate(initialData.created_at, locale)}</p>
                        </CardContent>
                        </Card>
                    )}
                    </div>
            </div>
        </form>
    );
}

// =================== FILE: src/app/[locale]/(app)/finances/expenses/[expenseId]/_components/ExpenseDetailData.tsx ===================

import { notFound } from 'next/navigation';
import { fetchExpenseDetail } from '../actions';
import { ExpenseDetailClient } from './ExpenseDetailClient';
// Asumim que els tipus de dades (com 'ExpenseWithRelations') s'importen des d'un altre lloc si cal
// import type { ExpenseWithRelations } from '@/types/finances';

interface ExpenseDetailDataProps {
  expenseId: string;
}

export async function ExpenseDetailData({ expenseId: expenseIdProp }: ExpenseDetailDataProps) {
  // ✅ CORRECCI- 1: Renombrem la prop a l'entrada per evitar conflictes.
  //    'expenseIdProp' serà sempre el string ('new' o '123').
  
  const isNew = expenseIdProp === 'new';

  let expenseData = null;
  
  // Només executem la lògica de càrrega si NO és una nova despesa.
  if (!isNew) {
    // ✅ CORRECCIÓ 2: Creem una nova variable per a la versió numèrica.
    const numericExpenseId = parseInt(expenseIdProp, 10);

    // ✅ CORRECCIÓ 3: La validació ara és simple i segura, sense 'as number'.
    if (isNaN(numericExpenseId)) {
      console.error("Invalid expense ID:", expenseIdProp);
      notFound();
    }

    // Fem la crida a la base de dades amb l'ID numèric validat.
    expenseData = await fetchExpenseDetail(numericExpenseId);

    // Si no trobem la despesa, mostrem un 404.
    if (!expenseData) {
      notFound();
    }
  }

  // Passem les dades inicials (que poden ser 'null' si és 'new')
  // i l'indicador 'isNew' al component client.
  return (
    <ExpenseDetailClient
      initialData={expenseData}
      isNew={isNew}
    />
  );
}

// =================== FILE: src/app/[locale]/(app)/finances/expenses/[expenseId]/_components/ExpenseDetailSkeleton.tsx ===================

import { Skeleton } from "@/components/ui/skeleton";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";

/**
 * Esquelet de càrrega professional per a la vista de detall de Despesa.
 * * ✅ El Per Què: Simula l'estructura visual del formulari d'edició/creació,
 * orientant l'usuari sobre on es carregarà el contingut.
 */
export function ExpenseDetailSkeleton() {
    return (
        <div className="space-y-8 p-4">
            {/* Capçalera - Títol i Accions */}
            <div className="flex justify-between items-center mb-8">
                <Skeleton className="h-8 w-64" />
                <div className="flex space-x-2">
                    <Skeleton className="h-10 w-24" />
                    <Skeleton className="h-10 w-24" />
                </div>
            </div>

            {/* Contingut Principal (Grid de 3 columnes típic d'editor/detall) */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                {/* Columna Esquerra (Formulari Principal) - 2/3 */}
                <div className="lg:col-span-2 space-y-8">
                    
                    {/* Targeta 1: Detalls Bàsics */}
                    <Card>
                        <CardHeader><Skeleton className="h-6 w-40" /></CardHeader>
                        <CardContent className="space-y-4">
                            <div className="grid grid-cols-2 gap-4">
                                {/* Camps de selecció (Proveïdor, Data) */}
                                <div className="space-y-2"><Skeleton className="h-4 w-1/3" /><Skeleton className="h-10 w-full" /></div>
                                <div className="space-y-2"><Skeleton className="h-4 w-1/3" /><Skeleton className="h-10 w-full" /></div>
                            </div>
                            {/* Camp de text (Descripció/Número de factura) */}
                            <div className="space-y-2"><Skeleton className="h-4 w-1/4" /><Skeleton className="h-10 w-full" /></div>
                        </CardContent>
                    </Card>

                    {/* Targeta 2: Conceptes/Línies d'Article */}
                    <Card>
                        <CardHeader><Skeleton className="h-6 w-52" /></CardHeader>
                        <CardContent className="space-y-4">
                            {/* Línia d'Article de capçalera (simulada) */}
                            <div className="flex space-x-4 border-b pb-2">
                                <Skeleton className="h-4 w-1/2" />
                                <Skeleton className="h-4 w-1/4" />
                                <Skeleton className="h-4 w-1/4" />
                            </div>
                            {/* Línies d'article */}
                            {Array.from({ length: 3 }).map((_, i) => (
                                <div key={i} className="flex space-x-4">
                                    <Skeleton className="h-10 w-1/2" />
                                    <Skeleton className="h-10 w-1/4" />
                                    <Skeleton className="h-10 w-1/4" />
                                    <Skeleton className="h-10 w-10 rounded-full" />
                                </div>
                            ))}
                        </CardContent>
                    </Card>
                </div>

                {/* Columna Dreta (Metadades) - 1/3 */}
                <div className="lg:col-span-1 space-y-8">
                    {/* Targeta 3: Sumari i Totals */}
                    <Card>
                        <CardHeader><Skeleton className="h-6 w-32" /></CardHeader>
                        <CardContent className="space-y-3">
                            <div className="flex justify-between"><Skeleton className="h-4 w-1/3" /><Skeleton className="h-4 w-1/4" /></div>
                            <div className="flex justify-between"><Skeleton className="h-4 w-1/3" /><Skeleton className="h-4 w-1/4" /></div>
                            <Separator />
                            <div className="flex justify-between"><Skeleton className="h-6 w-1/2" /><Skeleton className="h-6 w-1/3" /></div>
                        </CardContent>
                    </Card>

                    {/* Targeta 4: Adjunts */}
                    <Card>
                        <CardHeader><Skeleton className="h-6 w-32" /></CardHeader>
                        <CardContent className="space-y-3">
                            <Skeleton className="h-12 w-full" />
                            <Skeleton className="h-8 w-24 rounded-lg" />
                        </CardContent>
                    </Card>
                </div>
            </div>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/finances/expenses/[expenseId]/_components/ExpenseItemsEditor.tsx ===================

// src/app/[locale]/(app)/finances/despeses/[expenseId]/_components/ExpenseItemsEditor.tsx
import React from 'react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Trash2 } from 'lucide-react';
import { ExpenseItem } from '@/types/finances/expenses';
import { useTranslations } from 'next-intl';

interface ExpenseItemsEditorProps {
    items: ExpenseItem[];
    onItemChange: (index: number, field: keyof ExpenseItem, value: string | number) => void;
    onRemoveItem: (index: number) => void;
    isSaving: boolean;
}

export function ExpenseItemsEditor({ items, onItemChange, onRemoveItem, isSaving }: ExpenseItemsEditorProps) {
    const t = useTranslations('ExpenseDetailPage.items');
    return (
        <div className="space-y-4">
            {/* Header de la Taula */}
            <div className="grid grid-cols-12 gap-2 text-sm font-medium text-muted-foreground border-b pb-2">
                <span className="col-span-6">{t('description')}</span>
                <span className="col-span-2 text-right">{t('quantity')}</span>
                <span className="col-span-2 text-right">{t('unitPrice')}</span>
                <span className="col-span-2 px-10 text-right">{t('total')}</span>
                <span className="w-8"></span> {/* Columna buida per al botó d'esborrar */}
            </div>

            {items.map((item, index) => (
                <div key={item.id || index} className="grid grid-cols-12 gap-2 items-center">
                    {/* Descripció */}
                    <div className="col-span-6">
                        <Input
                            placeholder={t('placeholder.description')}
                            value={item.description}
                            onChange={(e) => onItemChange(index, 'description', e.target.value)}
                            disabled={isSaving}
                        />
                    </div>

                    {/* Quantitat */}
                    <div className="col-span-2">
                        <Input
                            type="number"
                            placeholder="0"
                            value={item.quantity || 0}
                            onChange={(e) => onItemChange(index, 'quantity', parseFloat(e.target.value) || 0)}
                            disabled={isSaving}
                            className="text-right"
                            step="any"
                        />
                    </div>

                    {/* Preu Unitari */}
                    <div className="col-span-2">
                        <Input
                            type="number"
                            placeholder="0.00"
                            value={item.unit_price || 0}
                            onChange={(e) => onItemChange(index, 'unit_price', parseFloat(e.target.value) || 0)}
                            disabled={isSaving}
                            className="text-right"
                            step="0.01"
                        />
                    </div>

                    {/* Total (Lectura) */}
                    <div className="col-span-2 text-right font-medium">
                        {item.total ? item.total.toFixed(2) : '0.00'}              
                         <Button
                            type="button"
                            variant="ghost"
                            size="icon"
                            onClick={() => onRemoveItem(index)}
                            disabled={isSaving}
                            className="w-8 h-8 text-red-500 hover:bg-red-50"
                        >
                            <Trash2 className="w-4 h-4" />
                        </Button>
                    </div>

                </div>
            ))}

            {items.length === 0 && (
                <p className="text-center text-muted-foreground py-4">{t('emptyState')}</p>
            )}
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/finances/expenses/[expenseId]/_components/SupplierCombobox.tsx ===================

"use client";

import * as React from "react";
import { Check, ChevronsUpDown } from "lucide-react";
import { cn } from "@/lib/utils/utils";
import { Button } from "@/components/ui/button";
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from "@/components/ui/command";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { type Supplier } from '@/types/finances/suppliers';
import { useTranslations } from "next-intl";
import { searchSuppliers } from "@/app/[locale]/(app)/finances/suppliers/actions"; // <-- ✅ Ara funciona

interface SupplierComboboxProps {
    value: string | null;
    onChange: (value: string | null) => void;
    initialSupplier: Pick<Supplier, 'id' | 'nom'> | null;
    disabled?: boolean;
}

export function SupplierCombobox({ value, onChange, initialSupplier, disabled }: SupplierComboboxProps) {
    const t = useTranslations('ExpenseDetailPage');
    const [open, setOpen] = React.useState(false);
    
    // Llista de proveïdors trobats en la cerca
    const [suppliers, setSuppliers] = React.useState<Pick<Supplier, 'id' | 'nom'>[]>(
        initialSupplier ? [initialSupplier] : []
    );
    
    // El proveïdor seleccionat (objecte)
    const selectedSupplier = suppliers.find(s => s.id === value) || null;
    
    const [searchTerm, setSearchTerm] = React.useState("");

    // Cerca asíncrona
    React.useEffect(() => {
        if (!open) return;

        const fetchSuppliers = async () => {
            // Crida a la Server Action
            const results = await searchSuppliers(searchTerm); // ✅ Aquesta acció ara existeix
            
            // Assegurem que el proveïdor inicial (si està seleccionat) es mantingui a la llista
            // per si la cerca nova no el retorna.
            if (initialSupplier && !results.find(s => s.id === initialSupplier.id)) {
                 setSuppliers([initialSupplier, ...results]);
            } else {
                 setSuppliers(results);
            }
        };
        
        // Un petit debounce
        const timer = setTimeout(fetchSuppliers, 300);
        return () => clearTimeout(timer);

    }, [searchTerm, open, initialSupplier]);

    return (
        <Popover open={open} onOpenChange={setOpen}>
            <PopoverTrigger asChild>
                <Button
                    variant="outline"
                    role="combobox"
                    aria-expanded={open}
                    className="w-full justify-between"
                    disabled={disabled}
                >
                    {selectedSupplier
                        ? selectedSupplier.nom
                        : t('select.selectSupplier')}
                    <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                </Button>
            </PopoverTrigger>
            <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
                <Command>
                    <CommandInput 
                        placeholder={t('select.searchSupplier')}
                        onValueChange={setSearchTerm}
                    />
                    <CommandList>
                        <CommandEmpty>{t('select.noSupplierFound')}</CommandEmpty>
                        <CommandGroup>
                            {/* Opció per netejar */}
                            <CommandItem
                                onSelect={() => {
                                    onChange(null);
                                    setOpen(false);
                                }}
                            >
                                {t('select.noSupplier')}
                            </CommandItem>
                            
                            {suppliers.map((supplier) => (
                                <CommandItem
                                    key={supplier.id}
                                    value={supplier.nom} // Cerquem per nom
                                    onSelect={() => {
                                        // ✅ Canvi: .toString() eliminat. 'supplier.id' ja és string (uuid)
                                        onChange(supplier.id);
                                        setOpen(false);
                                    }}
                                >
                                    <Check
                                        className={cn(
                                            "mr-2 h-4 w-4",
                                            value === supplier.id ? "opacity-100" : "opacity-0"
                                        )}
                                    />
                                    {supplier.nom}
                                </CommandItem>
                            ))}
                        </CommandGroup>
                    </CommandList>
                </Command>
            </PopoverContent>
        </Popover>
    );
}

// =================== FILE: src/app/[locale]/(app)/finances/expenses/[expenseId]/_hooks/useExpenseDetail.ts ===================

import { useState, useEffect, useTransition } from 'react';
import { useTranslations } from 'next-intl';
import { toast } from 'sonner';
import { useRouter } from 'next/navigation';

import { type ExpenseDetail, type ExpenseFormDataForAction, type ExpenseItem } from '@/types/finances/expenses';
// ❌ 'Supplier' ja no és necessari aquí
import { saveExpenseAction } from '../actions';

interface UseExpenseDetailProps {
    initialData: ExpenseDetail | null;
    isNew: boolean;
    // ❌ 'allSuppliers' eliminat, és redundant.
    // La informació del proveïdor inicial ja ve a 'initialData.suppliers'.
}

// ✅ Hem afegit tots els camps que falten segons l'esquema de la BD
const defaultInitialData: Omit<ExpenseFormDataForAction, 'status'> = {
    id: 'new',
    description: '',
    total_amount: 0,
    expense_date: new Date().toISOString().split('T')[0],
    category: null,
    invoice_number: null,
    tax_amount: 0,
    subtotal: 0,
    discount_amount: 0,
    notes: null,
    tax_rate: 21,
    supplier_id: null,
    // ✅ CAMPS AFEGITS PER CORREGIR L'ERROR DE TIPATGE
    payment_method: null,
    payment_date: null,
    is_billable: false,
    project_id: null,
    is_reimbursable: false,
    // ---
    expense_items: [],
};

// ❌ 'allSuppliers' eliminat de la desestructuració
export function useExpenseDetail({ initialData, isNew }: UseExpenseDetailProps) {
    const t = useTranslations('ExpenseDetailPage');
    const router = useRouter();
    const [isPending, startTransition] = useTransition();

    // El 'as ExpenseFormDataForAction' és necessari perquè TypeScript sap que a defaultInitialData li falta 'status',
    // però confiem que la resta de la nostra lògica ja no el fa servir.
    const [formData, setFormData] = useState<ExpenseFormDataForAction>(
        initialData ? { ...initialData, id: initialData.id.toString() } : defaultInitialData as ExpenseFormDataForAction
    );

    const calculateTotals = (items: ExpenseItem[], discount: number, taxRate: number) => {
        const subtotal = items.reduce((acc, item) => acc + (item.quantity * item.unit_price), 0);
        const effectiveSubtotal = subtotal - discount;
        const taxAmount = effectiveSubtotal > 0 ? effectiveSubtotal * (taxRate / 100) : 0;
        const totalAmount = effectiveSubtotal + taxAmount;
        return { subtotal, taxAmount, totalAmount };
    };

    useEffect(() => {
        const { subtotal, taxAmount, totalAmount } = calculateTotals(
            formData.expense_items || [],
            formData.discount_amount || 0,
            formData.tax_rate || 0
        );
        setFormData(prev => ({
            ...prev,
            subtotal,
            tax_amount: taxAmount,
            total_amount: totalAmount
        }));
    }, [formData.expense_items, formData.discount_amount, formData.tax_rate]);

    const handleFieldChange = <K extends keyof ExpenseFormDataForAction>(field: K, value: ExpenseFormDataForAction[K]) => {
        setFormData(prev => ({ ...prev, [field]: value }));
    };

    const handleItemChange = <K extends keyof ExpenseItem>(index: number, field: K, value: ExpenseItem[K]) => {
        const newItems = [...(formData.expense_items || [])];
        if (!newItems[index]) return;
        newItems[index] = { ...newItems[index], [field]: value };
        if (field === 'quantity' || field === 'unit_price') {
            newItems[index].total = (Number(newItems[index].quantity) || 0) * (Number(newItems[index].unit_price) || 0);
        }
        setFormData(prev => ({ ...prev, expense_items: newItems }));
    };

    const handleAddItem = () => {
        const newItem: ExpenseItem = {
            id: Date.now(),
            expense_id: typeof formData.id === 'string' && formData.id !== 'new' ? Number(formData.id) : 0,
            description: '',
            quantity: 1,
            unit_price: 0,
            total: 0,
        };
        setFormData(prev => ({ ...prev, expense_items: [...(prev.expense_items || []), newItem] }));
    };

    const handleRemoveItem = (index: number) => {
        const newItems = [...(formData.expense_items || [])];
        newItems.splice(index, 1);
        setFormData(prev => ({ ...prev, expense_items: newItems }));
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        startTransition(async () => {
            const result = await saveExpenseAction(formData, isNew ? null : (formData.id ?? null));
            if (result.success) {
                toast.success(t('toast.saveSuccess'));
                router.push('/finances/expenses'); // <-- Canviat a /expenses (despeses)
                router.refresh();
            } else {
                toast.error(result.message || t('toast.saveError'));
            }
        });
    };

    return {
        isPending,
        formData,
        handleFieldChange,
        handleSubmit,
        handleItemChange,
        handleAddItem,
        handleRemoveItem,
        t,
        // ❌ 'allSuppliers' eliminat del return
    };
}

// =================== FILE: src/app/[locale]/(app)/finances/expenses/_components/ExpenseFilters.tsx ===================

// src/app/[locale]/(app)/finances/despeses/_components/ExpenseFilters.tsx
'use client';

import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

import { useTranslations } from 'next-intl';
interface ExpenseFiltersProps {
  searchTerm: string;
  onSearchChange: (value: string) => void;
  category: string;
  onCategoryChange: (value: string) => void;
  status: string;
  onStatusChange: (value: string) => void;
}

export function ExpenseFilters({
  searchTerm,
  onSearchChange,
  status,
  onStatusChange,
}: ExpenseFiltersProps) {
  // Aquesta llista de categories podria venir com a prop des del servidor
  const t = useTranslations('ExpensesPage');
  const statuses = ['pending', 'paid', 'overdue', 'cancelled'];

  return (
    <div className="mb-4 flex items-center space-x-4">
      <Input
        placeholder="Busca per descripció o proveïdor..."
        value={searchTerm}
        onChange={(e) => onSearchChange(e.target.value)}
        className="max-w-sm"
      />
      {/* ✅ NOU: Select per a l'estat */}
      <Select value={status} onValueChange={onStatusChange}>
        <SelectTrigger className="w-[180px]">
          <SelectValue placeholder={t('filter.allStatuses')} />
        </SelectTrigger>
        <SelectContent>
          <SelectItem value="all">{t('filter.allStatuses')}</SelectItem>
          {statuses.map(s => (
            <SelectItem key={s} value={s}>{t(`status.${s}`)}</SelectItem>
          ))}
        </SelectContent>
      </Select>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/finances/expenses/_components/ExpensesClient.tsx ===================

// src/app/[locale]/(app)/finances/despeses/_components/expenses-client.tsx
"use client";

import { useMemo } from 'react';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Plus, Edit } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { useLocale, useTranslations } from 'next-intl';

// ❌ Pas 1: Eliminem les importacions de paginació
// import {
//   Pagination,
//   PaginationContent,
//   PaginationEllipsis,
//   PaginationItem,
//   PaginationLink,
//   PaginationNext,
//   PaginationPrevious,
// } from "@/components/ui/pagination";

import { type ExpenseWithContact } from '@/types/finances/expenses';
import { GenericDataTable, type ColumnDef } from '@/components/shared/GenericDataTable';
import { ColumnToggleButton } from '@/components/shared/ColumnToggleButton';
import { useExpenses } from '../_hooks/useExpenses';
import { formatCurrency, formatLocalizedDate } from '@/lib/utils/formatters';
import { ExpenseFilters } from './ExpenseFilters';
import { type PaginatedExpensesResponse } from '../actions';

export function ExpensesClient({ initialData }: { initialData: PaginatedExpensesResponse }) {
  const locale = useLocale();
  const t = useTranslations('ExpensesPage');
  const tShared = useTranslations('Shared');

  // ... (useMemo d'allColumns no canvia)
    const allColumns = useMemo<ColumnDef<ExpenseWithContact>[]>(() => [
        {
            accessorKey: "invoice_number",
            header: t('table.number'),
            enableSorting: true,
            cell: (row) => row.invoice_number || `EXP-${String(row.id).substring(0, 6)}`,
        },
        {
            accessorKey: "suppliers.nom",
            header: t('table.supplier'),
            enableSorting: true,
            cell: (row) => row.suppliers?.nom || t('noSupplier'),
        },
        {
            accessorKey: "description",
            header: t('table.description'),
            enableSorting: false,
            cell: (row) => <span className="max-w-[150px] truncate">{row.description}</span>,
        },
        {
            accessorKey: "expense_date",
            header: t('table.date'),
            enableSorting: true,
            cell: (row) => formatLocalizedDate(row.expense_date, "PPP", locale),
        },
        {
            accessorKey: "total_amount",
            header: t('table.total'),
            enableSorting: true,
            cell: (row) => formatCurrency(row.total_amount),
        },
        {
            accessorKey: "category",
            header: t('table.category'),
            enableSorting: true,
            cell: (row) => row.category || t('noCategory'),
        },
        {
            accessorKey: 'status',
            header: t('table.status'),
            enableSorting: true,
            cell: (row) => (
                <Badge variant={row.status === 'paid' ? 'success' :
                    row.status === 'overdue' ? 'destructive' :
                        'secondary'} className={undefined}>
                    {t(`status.${row.status}`)}
                </Badge>
            )
        },
        {
            accessorKey: "actions_edit",
            header: "",
            enableSorting: false,
            cell: (row) => (
                <Link href={`/${locale}/finances/expenses/${row.id}`} title={tShared('actions.edit')}>
                    <Button variant="ghost" size="icon"><Edit className="w-4 h-4" /></Button>
                </Link>
            ),
        }
    ], [locale, t, tShared]);

  const {
    isPending,
    expenses,
    expenseToDelete,
    setExpenseToDelete,
    handleDelete,
    handleSort,
    currentSortColumn,
    currentSortOrder,
    searchTerm,
    filters,
    handleSearchChange,
    handleCategoryChange,
    columnVisibility,
    toggleColumnVisibility,
    handleStatusChange,
    page,
    totalPages,
    handlePageChange,
  } = useExpenses({ initialData, allColumns });

  const visibleColumns = useMemo(
    () => allColumns.filter(col => columnVisibility[col.accessorKey.toString()] ?? true),
    [allColumns, columnVisibility]
  );

  const deleteDescription = (
    <>
      {tShared('deleteDialog.description1')} <span className="font-bold">{expenseToDelete?.invoice_number || expenseToDelete?.id}</span>.
      <br />
      {tShared('deleteDialog.description2')}
    </>
  );

  return (
    <div className="h-full flex flex-col"> 
      {/* ... (Header i Filtres sense canvis) ... */}
      <div className="flex justify-between items-center mb-4">
        <h1 className="text-3xl font-bold">{t('title')}</h1>
        <Button asChild>
          <Link href={`/${locale}/finances/expenses/new`}>
            <Plus className="w-4 h-4 " /> {t('newExpenseButton')}
          </Link>
        </Button>
      </div>

      <div className="flex justify-between items-center ">
        <ExpenseFilters
          searchTerm={searchTerm}
          onSearchChange={handleSearchChange}
          category={filters.category}
          onCategoryChange={handleCategoryChange}
          status={filters.status}
          onStatusChange={handleStatusChange}
        />
        <ColumnToggleButton
          allColumns={allColumns}
          columnVisibility={columnVisibility}
          toggleColumnVisibility={toggleColumnVisibility}
        />
      </div>

      {/* ✅ Pas 3: Passem les propietats de paginació a GenericDataTable */}
      <GenericDataTable
        className="flex-grow overflow-hidden" 
        data={expenses}
        columns={visibleColumns}
        onSort={handleSort}
        currentSortColumn={currentSortColumn}
        currentSortOrder={currentSortOrder as 'asc' | 'desc' | null}
        isPending={isPending}
        onDelete={handleDelete}
        deleteItem={expenseToDelete}
        setDeleteItem={setExpenseToDelete}
        deleteTitleKey='deleteDialog.title'
        deleteDescription={deleteDescription}
        emptyStateMessage={t('emptyState')}
        
        // Propietats de paginació
        page={page}
        totalPages={totalPages}
        onPageChange={handlePageChange}
      />


    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/finances/expenses/_components/ExpensesData.tsx ===================

// src/app/[locale]/(app)/finances/despeses/_components/ExpensesData.tsx
import { redirect } from 'next/navigation';
import { ExpensesClient } from './ExpensesClient';
// ✅ Importem la nova funció
import { fetchPaginatedExpenses } from '../actions';
import { getTranslations } from 'next-intl/server';
import { createClient as createServerActionClient } from '@/lib/supabase/server'; 

export async function ExpensesData() {
    const supabase = createServerActionClient();
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
        redirect('/login'); 
    }
    
    const t = await getTranslations('ExpensesPage');
    
    try {
        // ✅ Cridem la nova funció de paginació
        const initialData = await fetchPaginatedExpenses({
            searchTerm: '',
            category: 'all',
            status: 'all', // Assegura't de passar el filtre d'estat
            sortBy: 'expense_date',
            sortOrder: 'desc',
            limit: 50,
            offset: 0,
        });

        // ✅ Passem les dades inicials completes al client
        return <ExpensesClient initialData={initialData} />;
        
    } catch (error) {
        console.error("Error durant la càrrega de ExpensesData:", error);
        throw new Error(t('errors.loadDataFailed') || "No s'han pogut carregar les dades de la pàgina de despeses. Si us plau, intenta-ho de nou més tard.");
    }
}

// =================== FILE: src/app/[locale]/(app)/finances/expenses/_components/ExpensesSkeleton.tsx ===================

import { Skeleton } from "@/components/ui/skeleton";
import { Card, CardContent } from "@/components/ui/card";

const SKELETON_ROWS = 8;

/**
 * Esquelet de càrrega professional per a la llista de Despeses.
 * * ✅ El Per Què: Assegura un Time To Interactive (TTI) ràpid mostrant 
 * una previsualització de la interfície mentre el Server Component obté les dades.
 */
export function ExpensesSkeleton() {
    return (
        <div className="space-y-8 p-4">
            {/* Capçalera - Títol i Botó de Creació */}
            <div className="flex justify-between items-center mb-8">
                <Skeleton className="h-10 w-48" />
                <Skeleton className="h-10 w-32 rounded-lg" />
            </div>

            <Card className="shadow-lg border border-border overflow-hidden">
                <CardContent className="p-0">
                    {/* Fila d'Header (simulació de TableHeader) */}
                    <div className="flex items-center bg-muted/50 p-4 border-b">
                        <Skeleton className="h-4 w-[10%]" /> {/* Número */}
                        <Skeleton className="h-4 w-[20%] ml-4" /> {/* Proveïdor */}
                        <Skeleton className="h-4 w-[30%] ml-4" /> {/* Descripció */}
                        <Skeleton className="h-4 w-[10%] ml-4" /> {/* Data */}
                        <Skeleton className="h-4 w-[10%] ml-4" /> {/* Total */}
                        <Skeleton className="h-4 w-[10%] ml-4" /> {/* Estatus */}
                        <Skeleton className="h-4 w-[5%] ml-4" /> {/* Accions */}
                    </div>

                    {/* Fila de Dades (Simulació de TableRow) */}
                    {Array.from({ length: SKELETON_ROWS }).map((_, index) => (
                        <div key={index} className="flex items-center p-4 border-b last:border-b-0 min-h-[58px]">
                            {/* Número de factura */}
                            <div className="w-[10%]"><Skeleton className="h-4 w-[70px]" /></div>
                            {/* Proveïdor */}
                            <div className="w-[20%] ml-4"><Skeleton className="h-4 w-[120px]" /></div>
                            {/* Descripció */}
                            <div className="w-[30%] ml-4"><Skeleton className="h-4 w-[95%]" /></div>
                            {/* Data */}
                            <div className="w-[10%] ml-4"><Skeleton className="h-4 w-[80px]" /></div>
                            {/* Total */}
                            <div className="w-[10%] ml-4"><Skeleton className="h-4 w-[70px]" /></div>
                            {/* Estatus */}
                            <div className="w-[10%] ml-4"><Skeleton className="h-6 w-[70px] rounded-full" /></div>
                            {/* Accions */}
                            <div className="w-[5%] flex justify-end gap-2 ml-4">
                                <Skeleton className="h-8 w-8 rounded-full" />
                            </div>
                        </div>
                    ))}
                </CardContent>
            </Card>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/finances/expenses/_components/StatCard.tsx ===================



// =================== FILE: src/app/[locale]/(app)/finances/expenses/_hooks/useExpenses.ts ===================

// src/app/[locale]/(app)/finances/despeses/_hooks/useExpenses.ts
import { useState, useEffect, useTransition, useRef } from 'react'; 
import { useDebounce } from 'use-debounce';
// ✅ Importem la nova funció i tipus
import { fetchPaginatedExpenses, type ExpenseFilters, type PaginatedExpensesResponse} from '../actions';
import { deleteExpense } from '../[expenseId]/actions';
import { type ExpenseWithContact } from '@/types/finances/expenses';
import { useTranslations } from 'next-intl';
import { toast } from 'sonner';
import { type ColumnDef } from '@/components/shared/GenericDataTable'; 

interface UseExpensesProps {
  // ✅ Rebem les dades inicials paginades
  initialData: PaginatedExpensesResponse;
  allColumns: ColumnDef<ExpenseWithContact>[];
}
const PAGE_LIMIT = 15;

export function useExpenses({ initialData, allColumns }: UseExpensesProps) {
  const t = useTranslations('ExpensesPage');
  const tShared = useTranslations('Shared');
  const [isPending, startTransition] = useTransition();

  // ✅ Estats per la paginació
  const [expenses, setExpenses] = useState<ExpenseWithContact[]>(initialData.data);
  const [page, setPage] = useState(1);
  const [totalPages, setTotalPages] = useState(
    Math.ceil(initialData.count / PAGE_LIMIT)
  );

  const [searchTerm, setSearchTerm] = useState('');
  const [filters, setFilters] = useState({ category: 'all', status: 'all' });
  const [sorting, setSorting] = useState({ column: 'expense_date', order: 'desc' });
  const [debouncedSearchTerm] = useDebounce(searchTerm, 500);
  
  // Ref per evitar la recàrrega inicial (ja tenim initialData)
  const isInitialMount = useRef(true);

  // Gestió de visibilitat de columnes (sense canvis)
  const [columnVisibility, setColumnVisibility] = useState<Record<string, boolean>>(() => {
      const initialState: Record<string, boolean> = {};
      allColumns.forEach(col => {
        initialState[col.accessorKey.toString()] = true;
      });
      return initialState;
  });

  const toggleColumnVisibility = (columnKey: string) => {
      setColumnVisibility(prev => ({
        ...prev,
        [columnKey]: !prev[columnKey],
      }));
  };

  // ✅ useEffect per Canvis de Filtre/Ordre (reseteja la paginació)
  // Quan un filtre canvia, forcem anar a la pàgina 1
  useEffect(() => {
      if (isInitialMount.current) return;
      setPage(1);
  }, [debouncedSearchTerm, filters.category, filters.status, sorting]); 

  // ✅ useEffect per Càrrega de Dades (quan la pàgina o filtres canvien)
  // Aquest és l'únic lloc que crida a la Server Action
  useEffect(() => {
      // Evitem el 'fetch' inicial perquè ja tenim 'initialData'
      if (isInitialMount.current) {
          isInitialMount.current = false;
          return;
      }

      startTransition(async () => {
          const offset = (page - 1) * PAGE_LIMIT;

          const serverFilters: ExpenseFilters = {
              searchTerm: debouncedSearchTerm,
              category: filters.category,
              status: filters.status, 
              sortBy: sorting.column,
              sortOrder: sorting.order as 'asc' | 'desc',
              limit: PAGE_LIMIT,
              offset: offset,
          };
          
          const result = await fetchPaginatedExpenses(serverFilters);

          // ✅ Ja no afegim, substituïm
          setExpenses(result.data);
          // ✅ Actualitzem el total de pàgines
          setTotalPages(Math.ceil(result.count / PAGE_LIMIT));
      });
  // Afegim 'page' a les dependències
  }, [page, debouncedSearchTerm, filters, sorting]); 

  
  // Gestors de canvi (sense canvis)
  const handleStatusChange = (value: string) => {
      setFilters(prev => ({ ...prev, status: value }));
  };
  
  const handleSort = (columnKey: string) => {
      setSorting(prev => {
          const isSameColumn = prev.column === columnKey;
          const newOrder = isSameColumn && prev.order === 'asc' ? 'desc' : 'asc';
          return { column: columnKey, order: newOrder };
      });
  };

  const handleSearchChange = (value: string) => {
      setSearchTerm(value);
  };

  const handleCategoryChange = (value: string) => {
      setFilters(prev => ({ ...prev, category: value }));
  };

  // ✅ NOU: Gestor de canvi de pàgina
  const handlePageChange = (newPage: number) => {
      if (newPage > 0 && newPage <= totalPages) {
          setPage(newPage);
          window.scrollTo(0, 0); // Opcional: puja a dalt de tot
      }
  };
  
  // Gestió d'eliminació
  const [expenseToDelete, setExpenseToDelete] = useState<ExpenseWithContact | null>(null);

  const handleDelete = () => {
      if (!expenseToDelete) return;

      startTransition(async () => {
          const result = await deleteExpense(expenseToDelete.id as number);
          if (result.success) {
              toast.success(result.message);
              setExpenseToDelete(null);

              // ✅ Recàrrega de dades
              // Forcem un 'refetch' de la pàgina actual
              // Si la pàgina actual queda buida, hauríem d'anar a l'anterior
              if (expenses.length === 1 && page > 1) {
                  setPage(prev => prev - 1);
              } else {
                  // Re-executem l'efecte de càrrega
                  isInitialMount.current = false;
                  // Creem una nova instància de filtres per forçar el 'useEffect'
                  setFilters(f => ({...f})); 
              }

          } else {
              toast.error(result.message);
          }
      });
  };

  return {
      isPending,
      expenses,
      searchTerm,
      filters,
      handleSearchChange,
      handleCategoryChange,
      handleStatusChange,
      handleSort,
      currentSortColumn: sorting.column,
      currentSortOrder: sorting.order,
      expenseToDelete,
      setExpenseToDelete,
      handleDelete,
      t,
      tShared,
      columnVisibility,
      toggleColumnVisibility,
      
      // ✅ Propietats de paginació
      page,
      totalPages,
      handlePageChange,
  };
}

// =================== FILE: src/app/[locale]/(app)/finances/invoices/actions.ts ===================

"use server";

import { validateUserSession } from "@/lib/supabase/session";
import {
  type PaginatedInvoicesResponse,
  type InvoiceFilters,
  type InvoiceListRow,
  type InvoiceStatus,
} from '@/types/finances/invoices';

// ✅ Definició de tipus per a la resposta de la funció RPC
// Això reflecteix exactament el 'RETURNS TABLE' de la nostra funció SQL.
interface RpcInvoiceRow {
  id: number;
  invoice_number: string; // o text
  issue_date: string; // o date
  due_date: string | null; // o date
  total_amount: number; // o numeric
  status: InvoiceStatus; // o public.invoice_status
  client_name: string; // o text
  contact_id: number | null;
  contact_nom: string | null; // Columna del JOIN
  total_count: number; // o bigint
}

/**
 * Obté factures paginades usant una funció RPC de Supabase per a cerca avançada.
 */
export async function fetchPaginatedInvoices(
  filters: InvoiceFilters
): Promise<PaginatedInvoicesResponse> {
  const session = await validateUserSession();
  if ("error" in session) return { data: [], count: 0 };
  const { supabase, activeTeamId } = session;

  const {
    searchTerm, status, contactId,
    sortBy = 'issue_date', sortOrder = 'desc',
    limit = 10, offset = 0
  } = filters;

  const params = {
    team_id_param: activeTeamId,
    search_term_param: searchTerm || null,
    status_param: (status === 'all' || !status) ? null : status,
    contact_id_param: (contactId === 'all' || !contactId) ? 0 : Number(contactId),
    sort_by_param: sortBy,
    sort_order_param: sortOrder,
    limit_param: limit,
    offset_param: offset,
  };

  // Crida a la funció RPC
  // ✅ CORRECCIÓ: Tipem la resposta esperada de .rpc()
  const { data, error } = await supabase
    .rpc('search_paginated_invoices', params)
    .returns<RpcInvoiceRow[]>(); // 👈 Especifiquem el tipus de retorn

  if (error) {
    console.error(
      "Error calling search_paginated_invoices RPC:", 
      error, 
      "Amb paràmetres:", 
      params
    );
    return { data: [], count: 0 };
  }

  // ✅ 'data' ara és 'RpcInvoiceRow[] | null | { Error: ... }'
  if (!Array.isArray(data) || data.length === 0) {
    return { data: [], count: 0 };
  }

  // El recompte total ve a cada fila, l'agafem de la primera
  const totalCount = data[0].total_count ?? 0;

  // ✅ CORRECCIÓ: Eliminem 'any'. 'row' ara és del tipus 'RpcInvoiceRow'
  const mappedData: InvoiceListRow[] = data.map((row: RpcInvoiceRow): InvoiceListRow => {
    return {
      id: row.id,
      invoice_number: row.invoice_number,
      issue_date: row.issue_date,
      due_date: row.due_date,
      total_amount: row.total_amount,
      status: row.status, // El tipus ja coincideix
      client_name: row.client_name,
      contact_id: row.contact_id,
      contacts: row.contact_id ? { nom: row.contact_nom || null } : null,
    };
  });

  return {
    data: mappedData,
    count: totalCount
  };
}

// =================== FILE: src/app/[locale]/(app)/finances/invoices/page.tsx ===================

import { Suspense } from 'react';
import { InvoicesData } from './_components/InvoicesData';
import { InvoicesSkeleton } from './_components/InvoicesSkeleton';
import { z } from 'zod';

// (Opcional però recomanat) Zod schema per validar i netejar els paràmetres de cerca
const searchParamsSchema = z.object({
  page: z.string().optional().default('1'),
  pageSize: z.string().optional().default('10'),
  search: z.string().optional(),
  status: z.string().optional(),
  contactId: z.string().optional(),
  sortBy: z.string().optional(),
  sortOrder: z.string().optional(),
});

// -------------------------------------------------------------------
// ✅ CORRECCIÓ: Definim el tipus de les props amb 'searchParams' com a Promise
// -------------------------------------------------------------------
interface InvoicesPageProps {
  searchParams: Promise<{
    page?: string;
    pageSize?: string;
    search?: string;
    status?: string;
    contactId?: string;
    sortBy?: string;
    sortOrder?: string;
  }>;
}

/**
 * Component de pàgina per a la llista de factures.
 */
export default async function InvoicesListPage(props: InvoicesPageProps) {
  
  // ✅ Resolem la promesa per obtenir els paràmetres de cerca
  const resolvedSearchParams = await props.searchParams;

  // ✅ (Recomanat) Validem els paràmetres amb Zod
  const validatedSearchParams = searchParamsSchema.parse(resolvedSearchParams);

  // Creem una 'key' única per a Suspense per assegurar que es refresca en canviar els filtres
  const suspenseKey = JSON.stringify(validatedSearchParams);

  return (
    <Suspense key={suspenseKey} fallback={<InvoicesSkeleton />}>
      {/* ✅ Passem l'objecte de paràmetres sencer, ja resolt i validat.
          Això és més net que passar cada propietat individualment. */}
      <InvoicesData searchParams={validatedSearchParams} />
    </Suspense>
  );
}

// =================== FILE: src/app/[locale]/(app)/finances/invoices/[invoiceId]/actions.ts ===================

// src/app/[locale]/(app)/finances/invoices/invoiceDetailActions.ts
"use server";

import { revalidatePath } from "next/cache";
import { createAdminClient } from "@/lib/supabase/admin";
import { validateUserSession } from "@/lib/supabase/session";
import { type ActionResult } from "@/types/shared/index";
import {
    type InvoiceDetail,
    type InvoiceItem,
    type InvoiceAttachment,
    type InvoiceFormDataForAction,
    type InvoiceRow,
    type InvoiceAttachmentRow // ✅ Importem explícitament InvoiceAttachmentRow
} from '@/types/finances/invoices';
import { type SupabaseClient } from "@supabase/supabase-js";

// ... (fetchInvoiceDetail, upsertInvoice, syncInvoiceItems, updateInvoiceTotals, saveInvoiceAction, deleteInvoiceAction sense canvis) ...
export async function fetchInvoiceDetail(invoiceId: number): Promise<InvoiceDetail | null> {
    // ... codi existent ...
     const session = await validateUserSession();
    if ("error" in session) return null;
    const { supabase, activeTeamId } = session;

    const { data, error } = await supabase
        .from('invoices')
        .select(`
          *,
          invoice_items (*),
          invoice_attachments (*),
          contacts (*)
        `)
        .eq('id', invoiceId)
        .eq('team_id', activeTeamId)
        .single();

    if (error) {
        console.error("Error fetching invoice detail:", error.message);
        return null;
    }
    const resultData = data as InvoiceDetail;
    return {
        ...resultData,
        // Assegurem que els IDs són string (UUIDs)
        invoice_items: resultData.invoice_items?.map(item => ({...item, id: String(item.id)})) ?? [],
        invoice_attachments: resultData.invoice_attachments?.map(att => ({...att, id: String(att.id)})) ?? [],
        // project_id també és string (UUID)
        project_id: resultData.project_id ?? null,
    } as InvoiceDetail;
}


async function upsertInvoice(
    supabase: SupabaseClient,
    invoiceData: InvoiceFormDataForAction,
    invoiceId: number | null,
    userId: string,
    teamId: string
): Promise<ActionResult<{ id: number }>> {
    const dataToUpsert: Partial<InvoiceRow> = {
        contact_id: invoiceData.contact_id || null,
        budget_id: invoiceData.budget_id || null,
        quote_id: invoiceData.quote_id || null,
        project_id: invoiceData.project_id || null, // UUID string or null
        invoice_number: invoiceData.invoice_number,
        issue_date: invoiceData.issue_date ? new Date(invoiceData.issue_date).toISOString().split('T')[0] : undefined,
        due_date: invoiceData.due_date ? new Date(invoiceData.due_date).toISOString().split('T')[0] : null,
        status: invoiceData.status,
        notes: invoiceData.notes,
        terms: invoiceData.terms,
        payment_details: invoiceData.payment_details,
        client_reference: invoiceData.client_reference,
        currency: invoiceData.currency || 'EUR',
        language: invoiceData.language || 'ca',
        discount_amount: Number(invoiceData.discount_amount) || 0,
        tax_rate: Number(invoiceData.tax_rate) || 0,
        shipping_cost: Number(invoiceData.shipping_cost) || 0,
        extra_data: invoiceData.extra_data,
        // company_logo_url: invoiceData.company_logo_url, // From settings?
    };

    let query;
    if (invoiceId) {
        query = supabase.from('invoices').update(dataToUpsert).eq('id', invoiceId).eq('team_id', teamId);
    } else {
        query = supabase.from('invoices').insert({
            ...dataToUpsert,
            user_id: userId,
            team_id: teamId,
        });
    }

    const { data, error } = await query.select('id').single();

    if (error) {
        console.error("Error upserting invoice header:", error);
        return { success: false, message: `Error desant capçalera: ${error.message ?? 'Error desconegut'}` };
    }
    if (!data?.id) {
         return { success: false, message: "No s'ha pogut obtenir l'ID de la factura." };
    }
    // L'ID retornat és bigint (number)
    return { success: true, message: "Capçalera desada.", data: { id: data.id } };
}


async function syncInvoiceItems(
    supabase: SupabaseClient,
    invoiceId: number, // bigint
    items: InvoiceItem[],
    userId: string, // uuid
    teamId: string  // uuid
): Promise<ActionResult<{ calculatedSubtotal: number; calculatedTotalLineDiscount: number }>> {
    let calculatedSubtotal = 0;
    let calculatedTotalLineDiscount = 0;

    const { data: existingDbItems, error: fetchError } = await supabase
        .from('invoice_items')
        .select('id') // id is uuid (string)
        .eq('invoice_id', invoiceId)
        .returns<{ id: string }[]>();

    if (fetchError) return { success: false, message: `Error obtenint items antics: ${fetchError.message}` };

    const existingDbItemIds = existingDbItems ? existingDbItems.map(item => item.id) : [];

    const itemsToUpsert = items.map(item => {
        const quantity = Number(item.quantity) || 0;
        const unit_price = Number(item.unit_price) || 0;
        const lineTotal = quantity * unit_price;
        calculatedSubtotal += lineTotal;

        let lineDiscount = 0;
        const discountPercentage = Number(item.discount_percentage) || 0;
        const discountAmount = Number(item.discount_amount) || 0;
        if (discountAmount > 0) {
            lineDiscount = discountAmount;
        } else if (discountPercentage > 0) {
            lineDiscount = lineTotal * (discountPercentage / 100);
        }
        calculatedTotalLineDiscount += lineDiscount;

        // Make sure item.invoice_id type matches DB (bigint -> number)
        // Make sure product_id type matches DB (bigint -> number | null)
        return {
           id: typeof item.id === 'string' && item.id.startsWith('temp-') ? undefined : item.id, // uuid string or undefined
           invoice_id: invoiceId, // bigint (number)
           user_id: userId, // uuid string
           team_id: teamId, // uuid string
           product_id: item.product_id ? Number(item.product_id) : null, // bigint (number | null)
           description: item.description,
           quantity: quantity,
           unit_price: unit_price,
           total: lineTotal - lineDiscount,
           tax_rate: Number(item.tax_rate) || null,
           discount_percentage: discountPercentage > 0 ? discountPercentage : null,
           discount_amount: discountAmount > 0 ? discountAmount : null,
           reference_sku: item.reference_sku || null,
       };
    });

    const currentFormItemIds = items
        .map(item => item.id)
        .filter((id): id is string => typeof id === 'string' && !id.startsWith('temp-'));

    const itemsToDeleteIds = existingDbItemIds.filter(dbId => !currentFormItemIds.includes(dbId));

    if (itemsToUpsert.length > 0) {
        const { error: upsertError } = await supabase.from('invoice_items').upsert(itemsToUpsert, { onConflict: 'id' });
        if (upsertError) {
             console.error("Error upserting invoice items:", upsertError);
            return { success: false, message: `Error actualitzant línies: ${upsertError.message}` };
        }
    }

    if (itemsToDeleteIds.length > 0) {
        const { error: deleteError } = await supabase.from('invoice_items').delete().in('id', itemsToDeleteIds); // id is uuid (string)
        if (deleteError) {
            console.error("Error deleting old invoice items:", deleteError);
            return { success: false, message: `Error esborrant línies antigues: ${deleteError.message}` };
        }
    }
    return {
        success: true,
        message: "Línies sincronitzades.",
        data: { calculatedSubtotal, calculatedTotalLineDiscount }
    };
}


async function updateInvoiceTotals(
    supabase: SupabaseClient,
    invoiceId: number, // bigint
    subtotal: number,
    totalLineDiscount: number,
    generalDiscount: number,
    taxRate: number,
    shippingCost: number
): Promise<ActionResult> {
   const subtotalAfterLineDiscounts = subtotal - totalLineDiscount;
   const effectiveSubtotal = subtotalAfterLineDiscounts - generalDiscount;
   const calculatedTaxRate = taxRate || 0;
   const taxAmount = effectiveSubtotal > 0 ? effectiveSubtotal * (calculatedTaxRate / 100) : 0;
   const totalAmount = effectiveSubtotal + taxAmount + shippingCost;

   const { error } = await supabase
       .from('invoices')
       .update({
           subtotal: subtotal, // Store raw subtotal before discounts
           tax_amount: taxAmount,
           total_amount: totalAmount,
           shipping_cost: shippingCost,
           // general discount (discount_amount) is already saved in upsertInvoice
        })
       .eq('id', invoiceId); // id is bigint

   if (error) {
       console.error("Error updating invoice totals:", error);
       return { success: false, message: `Error actualitzant totals: ${error.message}` };
    }
   return { success: true, message: "Totals actualitzats." };
}

export async function saveInvoiceAction(
  formData: InvoiceFormDataForAction & { invoice_items?: InvoiceItem[] },
  invoiceId: number | null // bigint
): Promise<ActionResult<{ id: number }>> { // Returns bigint id
  const session = await validateUserSession();
  if ("error" in session) return { success: false, message: session.error.message };
  const { supabase, user, activeTeamId } = session;

  const { invoice_items, ...invoiceData } = formData;

  const invoiceResult = await upsertInvoice(supabase, invoiceData, invoiceId, user.id, activeTeamId);

  if (!invoiceResult.success || !invoiceResult.data?.id) {
    return { success: false, message: invoiceResult.message || "Error desant la capçalera." };
  }
  const resultingInvoiceId = invoiceResult.data.id; // bigint (number)

  const itemsResult = await syncInvoiceItems(supabase, resultingInvoiceId, invoice_items || [], user.id, activeTeamId);

  if (!itemsResult.success) {
    return { success: false, message: itemsResult.message, data: { id: resultingInvoiceId } };
  }
  const calculatedSubtotal = itemsResult.data?.calculatedSubtotal ?? 0;
  const calculatedTotalLineDiscount = itemsResult.data?.calculatedTotalLineDiscount ?? 0;

  const totalsResult = await updateInvoiceTotals(
      supabase,
      resultingInvoiceId,
      calculatedSubtotal,
      calculatedTotalLineDiscount,
      Number(invoiceData.discount_amount), // General discount
      Number(invoiceData.tax_rate), // General tax rate
      Number(invoiceData.shipping_cost) // Shipping cost
  );

   if (!totalsResult.success) {
       console.warn(`Factura ${resultingInvoiceId} desada, però error actualitzant totals: ${totalsResult.message}`);
   }

  revalidatePath('/finances/invoices');
  revalidatePath(`/finances/invoices/${resultingInvoiceId}`);

  return { success: true, message: "Factura desada correctament.", data: { id: resultingInvoiceId } };
}

export async function deleteInvoiceAction(invoiceId: number): Promise<ActionResult> {
    const session = await validateUserSession();
    if ("error" in session) return { success: false, message: session.error.message };
    const { supabase, activeTeamId } = session;
    const supabaseAdmin = createAdminClient();

    const { data: attachments, error: attachError } = await supabase
        .from('invoice_attachments')
        .select('id, file_path') // id is uuid (string)
        .eq('invoice_id', invoiceId); // invoice_id is bigint

    if (attachError) console.error("Error obtenint adjunts per esborrar:", attachError.message);

    if (attachments && attachments.length > 0) {
         const filePaths = attachments.map(a => a.file_path).filter((p): p is string => p !== null);
         const attachmentIds = attachments.map(a=> a.id); // uuid strings

         if (filePaths.length > 0) {
             const { error: storageError } = await supabaseAdmin.storage.from('factures-adjunts').remove(filePaths);
             if (storageError) console.warn("Error esborrant adjunts de Storage:", storageError.message);
         }
         const { error: dbAttachError } = await supabase.from('invoice_attachments').delete().in('id', attachmentIds); // id is uuid string
          if (dbAttachError) console.error("Error esborrant adjunts de BD:", dbAttachError.message);
    }

    const { error: deleteError } = await supabase
      .from('invoices')
      .delete()
      .eq('id', invoiceId) // id is bigint
      .eq('team_id', activeTeamId);

    if (deleteError) {
        console.error("Error deleting invoice:", deleteError);
        return { success: false, message: `Error esborrant factura: ${deleteError.message}` };
      }

    revalidatePath('/finances/invoices');
    return { success: true, message: "Factura esborrada." };
}


// --- Accions per a Adjunts ---

export async function uploadInvoiceAttachmentAction(
    invoiceId: number, // bigint
    formData: FormData
): Promise<ActionResult<{ newAttachment: InvoiceAttachment }>> {
    const session = await validateUserSession();
    if ("error" in session) return { success: false, message: session.error.message };
    const { supabase, activeTeamId } = session;

    const file = formData.get("file") as File | null;
    if (!file) return { success: false, message: "No s'ha proporcionat cap fitxer." };

    // ✅ CORRECCIÓ: Comprovem el resultat de la consulta, no supabase.data
    const { data: invoiceCheckData, error: invoiceCheckError } = await supabase
        .from('invoices')
        .select('id')
        .eq('id', invoiceId)
        .eq('team_id', activeTeamId)
        .maybeSingle(); // Use maybeSingle to get null if not found

    // Si hi ha error O si no hi ha error però no s'ha trobat cap dada
    if(invoiceCheckError || !invoiceCheckData) {
         console.error("Invoice check failed:", invoiceCheckError);
         return { success: false, message: "Factura no trobada o accés denegat." };
    }


    const filePath = `${activeTeamId}/invoices/${invoiceId}/${Date.now()}-${file.name}`;

    const { error: uploadError } = await supabase.storage.from("factures-adjunts").upload(filePath, file);
    if (uploadError) {
        console.error("Storage upload error:", uploadError);
        return { success: false, message: `Error pujant a Storage: ${uploadError.message}` };
    }

    // ✅ CORRECCIÓ: Usem InvoiceAttachmentRow importat
    const attachmentData: Partial<InvoiceAttachmentRow> = {
        invoice_id: invoiceId, // bigint
        file_path: filePath,
        filename: file.name,
        mime_type: file.type,
        // Nota: user_id y team_id no son propiedades de invoice_attachments según el esquema de Supabase
    };

    const { data: dbData, error: dbError } = await supabase
        .from("invoice_attachments")
        .insert(attachmentData)
        .select()
        .single();

    if (dbError) {
        console.error("DB insert error for attachment:", dbError);
        await supabase.storage.from("factures-adjunts").remove([filePath]);
        return { success: false, message: `Error desant adjunt a BD: ${dbError.message}` };
    }

    revalidatePath(`/finances/invoices/${invoiceId}`);
    // dbData.id és UUID (string)
    return {
        success: true,
        message: "Adjunt pujat correctament.",
        // El tipus InvoiceAttachment ja espera 'id' com a string
        data: { newAttachment: dbData as InvoiceAttachment }
    };
}

export async function getInvoiceAttachmentSignedUrl(filePath: string): Promise<ActionResult<{ signedUrl: string }>> {
    const session = await validateUserSession();
    if ("error" in session) return { success: false, message: session.error.message };
    const { activeTeamId } = session;

    if (!filePath || typeof filePath !== 'string' || !filePath.startsWith(`${activeTeamId}/`)) {
       return { success: false, message: "Ruta de fitxer invàlida o accés denegat." };
    }

    const supabaseAdmin = createAdminClient();
    const { data, error } = await supabaseAdmin.storage
        .from('factures-adjunts')
        .createSignedUrl(filePath, 300);

    if (error) {
         console.error("Error creating signed URL:", error);
        return { success: false, message: `Error generant URL signada: ${error.message}` };
    }
    if (!data?.signedUrl) {
         return { success: false, message: "No s'ha pogut generar la URL signada." };
    }

    return { success: true, message: "URL signada generada.", data: { signedUrl: data.signedUrl } };
}

export async function deleteInvoiceAttachmentAction(
    attachmentId: string, // uuid string
    filePath: string | null
): Promise<ActionResult> {
    const session = await validateUserSession();
    if ("error" in session) return { success: false, message: session.error.message };
    const { supabase, activeTeamId } = session;

     if (!attachmentId) return { success: false, message: "Falta l'ID de l'adjunt."};

    const { data: attachment, error: fetchError } = await supabase
        .from('invoice_attachments')
        .select('id, file_path, team_id, invoice_id') // invoice_id is bigint
        .eq('id', attachmentId) // id is uuid string
        .single();

     if (fetchError || !attachment) {
         console.error("Error fetching attachment to delete:", fetchError);
         return { success: false, message: "Adjunt no trobat." };
     }
     if (attachment.team_id !== activeTeamId) {
          return { success: false, message: "Accés denegat." };
     }

     const finalFilePath = filePath || attachment.file_path;

    const { error: dbError } = await supabase.from('invoice_attachments').delete().eq('id', attachmentId);
    if (dbError) {
        console.error("Error deleting attachment from DB:", dbError);
        return { success: false, message: `Error esborrant adjunt de BD: ${dbError.message}` };
    }

    if (finalFilePath) {
      const supabaseAdmin = createAdminClient();
      const { error: storageError } = await supabaseAdmin.storage.from('factures-adjunts').remove([finalFilePath]);
      if (storageError) {
          console.warn(`Adjunt ${attachmentId} esborrat de BD, però error esborrant de Storage (${finalFilePath}): ${storageError.message}`);
      }
    } else {
         console.warn(`Adjunt ${attachmentId} esborrat de BD, però no s'ha trobat file_path per esborrar de Storage.`);
    }

    if (attachment.invoice_id) {
        revalidatePath(`/finances/invoices/${attachment.invoice_id}`);
    } else {
         revalidatePath('/finances/invoices');
    }

    return { success: true, message: "Adjunt eliminat correctament." };
}

// =================== FILE: src/app/[locale]/(app)/finances/invoices/[invoiceId]/page.tsx ===================

import { Suspense } from 'react';
import { InvoiceDetailData } from './_components/InvoiceDetailData';
import { InvoiceDetailSkeleton } from './_components/InvoiceDetailSkeleton';

// ❌ Eliminem la importació del tipus genèric que causa el conflicte.
// import { type PageProps } from '@/types/shared/next-page-props';

// ✅ Definim la interfície localment amb 'params' com a Promise.
interface InvoiceDetailPageProps {
  params: Promise<{
    locale: string;
    invoiceId: string;
  }>;
}

/**
 * Component de pàgina per al detall d'una factura.
 */
export default async function InvoiceDetailPage(props: InvoiceDetailPageProps) {
  
  // ✅ Resolem la promesa per obtenir l'ID.
  const { invoiceId } = await props.params;

  return (
    <Suspense fallback={<InvoiceDetailSkeleton />}>
      {/* ✅ Simplifiquem: Passem només l'string 'invoiceId' com a prop.
          La 'key' aquí és una bona pràctica per forçar el re-renderitzat. */}
      <InvoiceDetailData key={invoiceId} invoiceId={invoiceId} />
    </Suspense>
  );
}

// =================== FILE: src/app/[locale]/(app)/finances/invoices/[invoiceId]/_components/InvoiceDetailClient.tsx ===================

"use client";

import React, { useState } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Loader2, Save, Plus, Settings2, Eye, ArrowLeft } from 'lucide-react';
import { type InvoiceDetail, type InvoiceStatus } from '@/types/finances/invoices';
import { useInvoiceDetail } from '../_hooks/useInvoiceDetail';
import { InvoiceItemsEditor } from './InvoiceItemsEditor';
import { formatCurrency } from '@/lib/utils/formatters';
// import { CustomerCombobox } from '@/components/shared/CustomerCombobox';
// import { DatePicker } from '@/components/ui/datepicker';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { INVOICE_STATUS_MAP } from '@/types/finances/invoices';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import {
  Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger,
  DialogFooter, DialogClose
} from "@/components/ui/dialog";
// ✅ Importem ScrollArea
import { ScrollArea } from '@/components/ui/scroll-area';
import { InvoicePreview } from './InvoicePreview';


interface InvoiceDetailClientProps {
  initialData: InvoiceDetail | null;
  isNew: boolean;
  title: string;
  description: string;

}

export function InvoiceDetailClient({
  initialData,
  isNew,
  title,
  description,

}: InvoiceDetailClientProps) {

  const router = useRouter();
  const searchParams = useSearchParams();
  const fromUrl = searchParams.get('from');

  const {
    formData,
    isPending,
    handleFieldChange, // ✅ Assegurem que està aquí
    handleItemChange,
    handleAddItem,
    handleRemoveItem,
    handleSubmit,
    t,
  } = useInvoiceDetail({ initialData, isNew });

  const isSaving = isPending;
  const [isPreviewOpen, setIsPreviewOpen] = useState(false);

  const handleBack = () => {
    if (fromUrl) {
      router.push(fromUrl);
    } else {
      router.push('/finances/invoices');
    }
  };


  return (
    <div className="px-6">
      <form onSubmit={handleSubmit} className="space-y-6">
        {/* --- Barra d'Accions Sticky --- */}
        <div className="flex justify-between items-center gap-4 sticky top-[--header-height] bg-background py-3 z-10 border-b mb-6 px-4 md:px-0 -mx-4 md:-mx-0 sm:-mx-6 ">
          {/* Part Esquerra */}
          <div className="flex items-center gap-3">
            <Button
              type="button"
              variant="outline"
              size="icon"
              onClick={handleBack}
              aria-label={t('button.goBack')}
            >
              <ArrowLeft className="h-4 w-4" />
            </Button>
            <div>
              <h1 className="text-xl md:text-2xl font-semibold leading-tight">{title}</h1>
              {description && <p className="text-sm text-muted-foreground hidden md:block">{description}</p>}
            </div>
          </div>
          {/* Part Dreta */}
          <div className="flex items-center gap-2">
            <Popover>
              <PopoverTrigger asChild>
                <Button variant="outline" size="icon" disabled={isSaving}>
                  <Settings2 className="h-4 w-4" />
                  <span className="sr-only">{t('button.options')}</span>
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-60 p-4 space-y-4">
                {/* Opcions Moneda i Idioma */}
                <div className="space-y-2">
                  <Label htmlFor="currency">{t('field.currency')}</Label>
                  <Input
                    id="currency"
                    value={formData.currency || 'EUR'}
                    // ✅ Assegurem que handleFieldChange existeix
                    onChange={(e) => handleFieldChange('currency', e.target.value.toUpperCase())}
                    disabled={isSaving}
                    maxLength={3}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="language">{t('field.language')}</Label>
                  <Input
                    id="language"
                    value={formData.language || 'ca'}
                    // ✅ Assegurem que handleFieldChange existeix
                    onChange={(e) => handleFieldChange('language', e.target.value)}
                    disabled={isSaving}
                    maxLength={5}
                  />
                </div>
              </PopoverContent>
            </Popover>

            <Dialog open={isPreviewOpen} onOpenChange={setIsPreviewOpen}>
              <DialogTrigger asChild>
                <Button type="button" variant="outline" disabled={isSaving}>
                  <Eye className="w-4 h-4 mr-2" />
                  {t('button.preview')}
                </Button>
              </DialogTrigger>
              <DialogContent className="max-w-4xl h-[90vh] flex flex-col">
                <DialogHeader>
                  <DialogTitle>{t('preview.title')}</DialogTitle>
                </DialogHeader>
                {/* ✅ ScrollArea ja està importat */}
                <ScrollArea className="flex-grow py-4 pr-6 -mr-6">
                  <InvoicePreview formData={formData} /* companyProfile={companyData} */ />
                </ScrollArea>
                <DialogFooter className="mt-4">
                  <DialogClose asChild>
                    <Button type="button" variant="outline">{t('button.close')}</Button>
                  </DialogClose>
                </DialogFooter>
              </DialogContent>
            </Dialog>

            <Button type="submit" disabled={isSaving}>
              {isSaving ? <Loader2 className="w-4 h-4 mr-2 animate-spin" /> : <Save className="w-4 h-4 mr-2" />}
              {isSaving ? t('button.saving') : t('button.save')}
            </Button>
          </div>
        </div>

        {/* --- Contingut Principal (Grid) --- */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 lg:gap-8 px-4 md:px-0">
          {/* Columna Principal */}
          {/* --- Columna Principal (Client i Línies) --- */}
          {/* ✅ AQUEST DIV CONTÉ ARA Client, Meta (si edites) i Línies */}
          <div className="md:col-span-2 space-y-6">
            {/* --- Targeta Client --- */}
            <Card>
              <CardHeader><CardTitle>{t('card.customerDetails')}</CardTitle></CardHeader>
              <CardContent className="space-y-4">
                {/* ... camps del client ... */}
                <div className="space-y-2">
                  <Label htmlFor="contact_id">{t('field.customer')}</Label>
                  <Input
                    id="contact_id"
                    value={formData.contact_id?.toString() ?? ''}
                    onChange={(e) => handleFieldChange('contact_id', e.target.value ? parseInt(e.target.value) : null)}
                    placeholder="ID Client (Temporal - Usa Combobox)"
                    disabled={isSaving}
                  />
                </div>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="client_reference">{t('field.clientReference')}</Label>
                    <Input
                      id="client_reference"
                      value={formData.client_reference || ''}
                      onChange={(e) => handleFieldChange('client_reference', e.target.value)}
                      placeholder={t('placeholder.clientReference')}
                      disabled={isSaving}
                    />
                  </div>
                </div>
                {/* ✅✅✅ Targeta Metadades MOVIDA AQUÍ ✅✅✅ */}
                {/* Meta Data (ID, etc.) si no és nova */}
                {!isNew && initialData && (
                  <Card>
                    <CardHeader><CardTitle>{t('card.metadata')}</CardTitle></CardHeader>
                    <CardContent className="space-y-2 text-sm text-muted-foreground">
                      <p><strong>ID:</strong> {initialData.id}</p>
                      {/* Pots afegir created_at, updated_at... */}
                    </CardContent>
                  </Card>
                )}
              </CardContent>
            </Card>


            <Card>
              <CardHeader className='flex-row justify-between items-center'>
                <CardTitle>{t('card.invoiceItems')}</CardTitle>
                <Button type="button" size="sm" variant="outline" onClick={handleAddItem} disabled={isSaving}>
                  <Plus className="w-4 h-4 mr-2" /> {t('button.addItem')}
                </Button>
              </CardHeader>
              <CardContent>
                <InvoiceItemsEditor
                  items={formData.invoice_items || []}
                  onItemChange={handleItemChange}
                  onRemoveItem={handleRemoveItem}
                  isSaving={isSaving}
                  currency={formData.currency || 'EUR'}
                  locale={formData.language || 'ca'}
                />
              </CardContent>
            </Card>
            <Card>
              <CardHeader><CardTitle>{t('card.paymentTerms')}</CardTitle></CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="terms">{t('field.terms')}</Label>
                  <Textarea
                    id="terms"
                    value={formData.terms || ''}
                    // ✅ Assegurem que handleFieldChange existeix
                    onChange={(e) => handleFieldChange('terms', e.target.value)}
                    placeholder={t('placeholder.terms')}
                    rows={3}
                    disabled={isSaving}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="payment_details">{t('field.paymentDetails')}</Label>
                  <Textarea
                    id="payment_details"
                    value={formData.payment_details || ''}
                    // ✅ Assegurem que handleFieldChange existeix
                    onChange={(e) => handleFieldChange('payment_details', e.target.value)}
                    placeholder={t('placeholder.paymentDetails')}
                    rows={3}
                    disabled={isSaving}
                  />
                </div>
              </CardContent>
            </Card>
          </div>
          {/* Columna Lateral */}
          <div className="md:col-span-1 space-y-6">
            <Card>
              <CardHeader><CardTitle>{t('card.invoiceMeta')}</CardTitle></CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="invoice_number">{t('field.invoiceNumber')}</Label>
                  <Input id="invoice_number" value={formData.invoice_number || ''} disabled placeholder={t('placeholder.autoGenerated')} />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="issue_date">{t('field.invoiceDate')}</Label>
                  <Input
                    type="date"
                    id="issue_date"
                    value={formData.issue_date || ''}
                    // ✅ Assegurem que handleFieldChange existeix
                    onChange={(e) => handleFieldChange('issue_date', e.target.value)}
                    disabled={isSaving}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="due_date">{t('field.dueDate')}</Label>
                  <Input
                    type="date"
                    id="due_date"
                    value={formData.due_date || ''}
                    // ✅ Assegurem que handleFieldChange existeix
                    onChange={(e) => handleFieldChange('due_date', e.target.value)}
                    disabled={isSaving}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="status">{t('field.status')}</Label>
                  <Select value={formData.status} onValueChange={(v) => handleFieldChange('status', v as InvoiceStatus)} disabled={isSaving}>
                    <SelectTrigger id="status">
                      <SelectValue placeholder={t('placeholder.selectStatus')} />
                    </SelectTrigger>
                    <SelectContent>
                      {INVOICE_STATUS_MAP.map(s => (
                        <SelectItem key={s.dbValue} value={s.dbValue}>
                          {t(`status.${s.key}`)}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardHeader><CardTitle>{t('card.notes')}</CardTitle></CardHeader>
              <CardContent>
                <Textarea
                  id="notes"
                  value={formData.notes || ''}
                  // ✅ Assegurem que handleFieldChange existeix
                  onChange={(e) => handleFieldChange('notes', e.target.value)}
                  disabled={isSaving}
                  rows={4}
                  placeholder={t('placeholder.notes')}
                />
              </CardContent>
            </Card>
            <Card>
              <CardHeader><CardTitle>{t('card.totals')}</CardTitle></CardHeader>
              <CardContent className="space-y-3">
                <div className="flex justify-between items-center">
                  <Label htmlFor="discount_amount">{t('label.discount')}</Label>
                  <Input
                    id="discount_amount"
                    type="number"
                    value={formData.discount_amount ?? 0}
                    // ✅ Assegurem que handleFieldChange existeix
                    onChange={(e) => handleFieldChange('discount_amount', parseFloat(e.target.value) || 0)}
                    className="w-24 text-right"
                    step="0.01"
                    min="0"
                    disabled={isSaving}
                  />
                </div>
                <div className="flex justify-between items-center">
                  <Label htmlFor="tax_rate">{t('label.taxRate')} (%)</Label>
                  <Input
                    id="tax_rate"
                    type="number"
                    value={formData.tax_rate ?? 0}
                    // ✅ Assegurem que handleFieldChange existeix
                    onChange={(e) => handleFieldChange('tax_rate', parseFloat(e.target.value) || 0)}
                    className="w-20 text-right"
                    step="any"
                    min="0"
                    disabled={isSaving}
                  />
                </div>
                <div className="flex justify-between items-center">
                  <Label htmlFor="shipping_cost">{t('label.shipping')}</Label>
                  <Input
                    id="shipping_cost"
                    type="number"
                    value={formData.shipping_cost ?? 0}
                    // ✅ Assegurem que handleFieldChange existeix
                    onChange={(e) => handleFieldChange('shipping_cost', parseFloat(e.target.value) || 0)}
                    className="w-24 text-right"
                    step="0.01"
                    min="0"
                    disabled={isSaving}
                  />
                </div>
                <hr className="my-3" />
                <div className="flex justify-between text-sm"><p>{t('label.subtotal')}</p><p>{formatCurrency(formData.subtotal, formData.currency, formData.language)}</p></div>
                {(formData.discount_amount ?? 0) > 0 && (
                  <div className="flex justify-between text-sm text-muted-foreground"><p>{t('label.discountApplied')}</p><p>-{formatCurrency(formData.discount_amount ?? 0, formData.currency, formData.language)}</p></div>
                )}
                <div className="flex justify-between text-sm"><p>{t('label.tax')} ({formData.tax_rate ?? 0}%)</p><p>{formatCurrency(formData.tax_amount, formData.currency, formData.language)}</p></div>
                {(formData.shipping_cost ?? 0) > 0 && (
                  <div className="flex justify-between text-sm"><p>{t('label.shippingApplied')}</p><p>{formatCurrency(formData.shipping_cost ?? 0, formData.currency, formData.language)}</p></div>
                )}
                <div className="flex justify-between font-bold text-lg border-t pt-3 mt-3"><p>{t('label.total')}</p><p>{formatCurrency(formData.total_amount, formData.currency, formData.language)}</p></div>
              </CardContent>
            </Card>
          </div>
        </div>
      </form>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/finances/invoices/[invoiceId]/_components/InvoiceDetailData.tsx ===================

import { notFound } from 'next/navigation';
import { fetchInvoiceDetail } from '../actions';
import { InvoiceDetailClient } from './InvoiceDetailClient';
import { getTranslations } from 'next-intl/server';

// ✅ ISP: Rep només la prop que necessita: l'ID com a string.
interface InvoiceDetailDataProps {
  invoiceId: string;
}

/**
 * Component responsable de carregar les dades de la factura.
 */
export async function InvoiceDetailData({ invoiceId: invoiceIdProp }: InvoiceDetailDataProps) {
  // ✅ Renombrem la prop a l'entrada ('invoiceIdProp') per evitar conflictes de nom.
  
  const isNew = invoiceIdProp === 'new';

  let invoiceData = null;

  // Lògica de càrrega només si NO és una nova factura.
  if (!isNew) {
    const numericInvoiceId = parseInt(invoiceIdProp, 10);

    // Validació segura de l'ID numèric.
    if (isNaN(numericInvoiceId)) {
      console.error("Invalid invoice ID:", invoiceIdProp);
      notFound();
    }

    invoiceData = await fetchInvoiceDetail(numericInvoiceId);

    if (!invoiceData) {
      notFound();
    }
  }

  const t = await getTranslations('InvoiceDetailPage');

  // Calculem títol i descripció per passar-los al client.
  const title = isNew
    ? t('createTitle')
    : t('editTitle', { number: invoiceData?.invoice_number ?? invoiceIdProp });
  const description = isNew ? t('createDescription') : t('editDescription');

  return (
    <InvoiceDetailClient
      initialData={invoiceData}
      isNew={isNew}
      title={title}
      description={description}
      // Passa altres dades necessàries aquí...
    />
  );
}

// =================== FILE: src/app/[locale]/(app)/finances/invoices/[invoiceId]/_components/InvoiceDetailSkeleton.tsx ===================

// src/app/[locale]/(app)/finances/invoices/[invoiceId]/_components/InvoiceDetailSkeleton.tsx
import { Skeleton } from "@/components/ui/skeleton";
import { Card, CardContent, CardHeader } from "@/components/ui/card";

export function InvoiceDetailSkeleton() {
  return (
    <div className="flex flex-col gap-6">
      {/* Skeleton del PageHeader */}
      <div className="flex items-center justify-between">
        <div className="space-y-2">
          <Skeleton className="h-8 w-48" />
          <Skeleton className="h-4 w-64" />
        </div>
        <Skeleton className="h-10 w-24" /> {/* Botó Desa */}
      </div>

      {/* Skeleton del Formulari (Grid) */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Columna Esquerra */}
        <div className="lg:col-span-2 space-y-6">
          <Card>
            <CardHeader><Skeleton className="h-6 w-1/4" /></CardHeader>
            <CardContent><Skeleton className="h-10 w-full" /></CardContent>
          </Card>
          <Card>
            <CardHeader><Skeleton className="h-6 w-1/3" /></CardHeader>
            <CardContent className="space-y-2">
              <Skeleton className="h-8 w-full" />
              <Skeleton className="h-8 w-full" />
            </CardContent>
          </Card>
        </div>
        {/* Columna Dreta */}
        <div className="lg:col-span-1 space-y-6">
          <Card>
             <CardHeader><Skeleton className="h-6 w-1/2" /></CardHeader>
             <CardContent className="space-y-4">
               <Skeleton className="h-10 w-full" />
               <Skeleton className="h-10 w-full" />
               <Skeleton className="h-10 w-full" />
             </CardContent>
          </Card>
           <Card>
             <CardHeader><Skeleton className="h-6 w-1/3" /></CardHeader>
             <CardContent>
               <Skeleton className="h-20 w-full" />
             </CardContent>
          </Card>
          <Card>
             <CardHeader><Skeleton className="h-6 w-1/4" /></CardHeader>
             <CardContent className="space-y-2">
               <Skeleton className="h-6 w-full" />
                <Skeleton className="h-6 w-full" />
                <Skeleton className="h-8 w-full mt-4 border-t pt-2" />
             </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/finances/invoices/[invoiceId]/_components/InvoiceItemsEditor.tsx ===================

// src/app/[locale]/(app)/finances/invoices/[invoiceId]/_components/InvoiceItemsEditor.tsx
"use client";

import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Trash2 } from 'lucide-react';
import { type InvoiceItem } from '@/types/finances/invoices'; // Ajusta la ruta
import { formatCurrency } from '@/lib/utils/formatters'; // Per mostrar totals
// Opcional: Si vols un selector de productes
// import { ProductCombobox } from '@/components/shared/ProductCombobox';

interface InvoiceItemsEditorProps {
    items: InvoiceItem[];
    onItemChange: <K extends keyof InvoiceItem>(index: number, field: K, value: InvoiceItem[K]) => void;
    onRemoveItem: (index: number) => void;
    isSaving: boolean;
    // Opcional: Passa productes si tens un selector
    // products: { id: number | string; name: string; price: number }[];
    currency?: string;
    locale?: string;
}

export function InvoiceItemsEditor({
    items,
    onItemChange,
    onRemoveItem,
    isSaving,
    // products,
    currency = 'EUR',
    locale = 'ca',
}: InvoiceItemsEditorProps) {

    // Funció auxiliar per gestionar canvis numèrics
    const handleNumericChange = (index: number, field: 'quantity' | 'unit_price', value: string) => {
        const numericValue = parseFloat(value);
        // Permetem 0 però no NaN o negatius (ajusta segons necessitats)
        if (!isNaN(numericValue) && numericValue >= 0) {
            onItemChange(index, field, numericValue);
        } else if (value === '') {
             onItemChange(index, field, 0); // O null si prefereixes
        }
        // Si no és vàlid, no fem res (mantenim valor anterior)
    };

    return (
        <div className="overflow-x-auto">
            <Table>
                <TableHeader>
                    <TableRow>
                        {/* Opcional: Capçalera per a selector de Producte */}
                        {/* <TableHead className="w-[200px]">Producte</TableHead> */}
                        <TableHead>Descripció</TableHead>
                        <TableHead className="w-[100px] text-right">Quantitat</TableHead>
                        <TableHead className="w-[120px] text-right">Preu Unitari</TableHead>
                        <TableHead className="w-[120px] text-right">Total</TableHead>
                        <TableHead className="w-[50px]"><span className="sr-only">Esborrar</span></TableHead>
                    </TableRow>
                </TableHeader>
                <TableBody>
                    {items.map((item, index) => (
                        <TableRow key={item.id}> {/* Usa l'ID (temporal o real) com a key */}
                            {/* Opcional: Cel·la per a selector de Producte */}
                            {/* <TableCell>
                                <ProductCombobox
                                    value={item.product_id}
                                    onChange={(productId, product) => {
                                        // Omple automàticament descripció i preu
                                        onItemChange(index, 'product_id', productId);
                                        onItemChange(index, 'description', product?.name || item.description);
                                        onItemChange(index, 'unit_price', product?.price || item.unit_price);
                                    }}
                                    products={products}
                                    disabled={isSaving}
                                />
                            </TableCell> */}
                            <TableCell>
                                <Input
                                    value={item.description || ''}
                                    onChange={(e) => onItemChange(index, 'description', e.target.value)}
                                    placeholder="Descripció del servei o producte"
                                    disabled={isSaving}
                                    className="min-w-[200px]" // Amplada mínima per a descripció
                                />
                            </TableCell>
                            <TableCell className="text-right">
                                <Input
                                    type="number"
                                    value={item.quantity}
                                    onChange={(e) => handleNumericChange(index, 'quantity', e.target.value)}
                                    disabled={isSaving}
                                    className="text-right"
                                    step="any" // Permet decimals si cal
                                    min="0"
                                />
                            </TableCell>
                            <TableCell className="text-right">
                                <Input
                                    type="number"
                                    value={item.unit_price}
                                    onChange={(e) => handleNumericChange(index, 'unit_price', e.target.value)}
                                    disabled={isSaving}
                                    className="text-right"
                                    step="0.01" // Precisió de cèntims
                                    min="0"
                                />
                            </TableCell>
                            <TableCell className="text-right font-medium">
                                {formatCurrency(item.quantity * item.unit_price, currency, locale)}
                            </TableCell>
                            <TableCell>
                                <Button
                                    type="button"
                                    variant="ghost"
                                    size="icon"
                                    onClick={() => onRemoveItem(index)}
                                    disabled={isSaving}
                                    className="text-muted-foreground hover:text-destructive h-8 w-8"
                                >
                                    <Trash2 className="h-4 w-4" />
                                    <span className="sr-only">Esborrar línia</span>
                                </Button>
                            </TableCell>
                        </TableRow>
                    ))}
                </TableBody>
            </Table>
            {items.length === 0 && (
                 <p className="text-center text-sm text-muted-foreground py-4">
                    No hi ha cap línia afegida. Fes clic a "+ Afegir Línia" per començar.
                 </p>
            )}
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/finances/invoices/[invoiceId]/_components/InvoicePreview.tsx ===================

"use client";

import React from 'react';
import Image from 'next/image'; // ✅ 1. Importa Image
import { useTranslations } from 'next-intl';
import { type InvoiceFormData } from '@/types/finances/invoices';
import { formatCurrency, formatDate } from '@/lib/utils/formatters';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Separator } from '@/components/ui/separator';

interface InvoicePreviewProps {
    formData: InvoiceFormData;
    companyProfile?: {
        name: string | null;
        tax_id: string | null;
        address: string | null;
        email: string | null;
        logo_url?: string | null;
    } | null;
}

export function InvoicePreview({ formData, companyProfile }: InvoicePreviewProps) {
    const t = useTranslations('InvoiceDetailPage');

    const company = companyProfile ?? {
        name: formData.company_name,
        tax_id: formData.company_tax_id,
        address: formData.company_address,
        email: formData.company_email,
        logo_url: formData.company_logo_url,
    };

    const client = {
        name: formData.client_name,
        tax_id: formData.client_tax_id,
        address: formData.client_address,
        email: formData.client_email,
    };

    const currency = formData.currency || 'EUR';
    const locale = formData.language || 'ca';

    return (
        <div className="bg-white p-6 sm:p-8 rounded-lg shadow-lg max-w-4xl mx-auto border print:shadow-none print:border-none text-sm">
            {/* Capçalera */}
            <header className="flex flex-col sm:flex-row justify-between items-start mb-6 gap-4">
                {/* Dades Empresa */}
                <div className="flex-1">
                    {company.logo_url && (
                        // ✅ 2. Substitueix img per Image i afegeix width/height
                        <Image
                            src={company.logo_url}
                            alt="Logo Empresa"
                            width={150} // 👈 3. Afegeix ample (ajusta segons necessitis)
                            height={64} // 👈 3. Afegeix alçada (ajusta per mantenir relació aspecte)
                            className="h-12 sm:h-16 w-auto mb-3 object-contain" // Manté alçada visual i evita deformació
                        />
                    )}
                    <h1 className="text-xl sm:text-2xl font-bold mb-1">{company.name || t('preview.defaultCompanyName')}</h1>
                    {company.address && <p className="text-xs text-gray-600 whitespace-pre-line">{company.address}</p>}
                    {company.tax_id && <p className="text-xs text-gray-600">NIF: {company.tax_id}</p>}
                    {company.email && <p className="text-xs text-gray-600">{company.email}</p>}
                </div>
                {/* ... resta del component ... */}
                 {/* Dades Factura */}
                <div className="text-left sm:text-right w-full sm:w-auto mt-4 sm:mt-0">
                    <h2 className="text-2xl sm:text-3xl font-bold uppercase text-gray-700 mb-2">{t('preview.invoiceTitle')}</h2>
                    <p><strong className="font-semibold">{t('field.invoiceNumber')}:</strong> {formData.invoice_number || t('preview.pending')}</p>
                    <p><strong className="font-semibold">{t('field.invoiceDate')}:</strong> {formData.issue_date ? formatDate(new Date(formData.issue_date), locale) : ''}</p>
                    <p><strong className="font-semibold">{t('field.dueDate')}:</strong> {formData.due_date ? formatDate(new Date(formData.due_date), locale) : t('preview.notApplicable')}</p>
                    <p><strong className="font-semibold">{t('field.status')}:</strong> {t(`status.${formData.status.toLowerCase()}`)}</p>
                </div>
            </header>

            <Separator className="my-4" />

            {/* Dades del Client */}
            <section className="mb-6">
                <h3 className="text-xs font-semibold uppercase text-gray-500 mb-1">{t('preview.billTo')}</h3>
                <p className="font-semibold">{client.name || t('preview.noClient')}</p>
                {client.address && <p className="text-xs text-gray-600 whitespace-pre-line">{client.address}</p>}
                {client.tax_id && <p className="text-xs text-gray-600">NIF: {client.tax_id}</p>}
                {client.email && <p className="text-xs text-gray-600">{client.email}</p>}
            </section>

            {/* Taula de Línies */}
            <section className="mb-6">
                <Table>
                    <TableHeader className="bg-gray-50 text-xs uppercase">
                        <TableRow>
                            <TableHead className="w-[50%] px-2 py-2">{t('preview.itemDescription')}</TableHead>
                            <TableHead className="text-right px-2 py-2">{t('preview.itemQuantity')}</TableHead>
                            <TableHead className="text-right px-2 py-2">{t('preview.itemUnitPrice')}</TableHead>
                            {formData.invoice_items?.some(it => (it.discount_percentage ?? 0) > 0 || (it.discount_amount ?? 0) > 0) && (
                                <TableHead className="text-right px-2 py-2">{t('preview.itemDiscount')}</TableHead>
                            )}
                            <TableHead className="text-right px-2 py-2">{t('preview.itemTotal')}</TableHead>
                        </TableRow>
                    </TableHeader>
                    <TableBody className="text-sm">
                        {(formData.invoice_items || []).map((item, index) => {
                             const quantity = Number(item.quantity) || 0;
                             const unitPrice = Number(item.unit_price) || 0;
                             const lineTotalBeforeDiscount = quantity * unitPrice;
                             let lineDiscountDisplay = "-";
                             let lineDiscountAmount = 0;
                             const discountAmount = Number(item.discount_amount) || 0;
                             const discountPercentage = Number(item.discount_percentage) || 0;
                             if (discountAmount > 0) {
                                 lineDiscountAmount = discountAmount;
                                 lineDiscountDisplay = formatCurrency(lineDiscountAmount, currency, locale);
                             } else if (discountPercentage > 0) {
                                 lineDiscountAmount = lineTotalBeforeDiscount * (discountPercentage / 100);
                                 lineDiscountDisplay = `${discountPercentage}%`;
                             }
                             const lineTotalAfterDiscount = lineTotalBeforeDiscount - lineDiscountAmount;

                             return (
                                <TableRow key={item.id ?? index} className="border-b">
                                    <TableCell className="font-medium py-1.5 px-2">{item.description || '(Sense descripció)'}</TableCell>
                                    <TableCell className="text-right py-1.5 px-2">{quantity}</TableCell>
                                    <TableCell className="text-right py-1.5 px-2">{formatCurrency(unitPrice, currency, locale)}</TableCell>
                                    {formData.invoice_items?.some(it => (it.discount_percentage ?? 0) > 0 || (it.discount_amount ?? 0) > 0) && (
                                        <TableCell className="text-right py-1.5 px-2 text-muted-foreground">{lineDiscountDisplay}</TableCell>
                                    )}
                                    <TableCell className="text-right py-1.5 px-2">{formatCurrency(lineTotalAfterDiscount, currency, locale)}</TableCell>
                                </TableRow>
                             );
                        })}
                         {formData.invoice_items.length === 0 && (
                             <TableRow>
                                 <TableCell colSpan={formData.invoice_items?.some(it => (it.discount_percentage ?? 0) > 0 || (it.discount_amount ?? 0) > 0) ? 5 : 4} className="text-center text-gray-500 py-4">{t('preview.noItems')}</TableCell>
                             </TableRow>
                         )}
                    </TableBody>
                </Table>
            </section>

            {/* Totals i Peu */}
            <section className="flex flex-col sm:flex-row justify-between items-start gap-6 mb-6">
                 <div className="flex-1 text-xs text-gray-600 space-y-3">
                     {formData.terms && (
                         <div>
                             <h4 className="font-semibold mb-1 uppercase text-gray-500">{t('field.terms')}:</h4>
                             <p className="whitespace-pre-line">{formData.terms}</p>
                         </div>
                     )}
                     {formData.payment_details && (
                          <div>
                              <h4 className="font-semibold mb-1 uppercase text-gray-500">{t('field.paymentDetails')}:</h4>
                              <p className="whitespace-pre-line">{formData.payment_details}</p>
                          </div>
                     )}
                 </div>
                <div className="w-full sm:w-auto sm:max-w-xs space-y-1 text-sm self-end">
                    <div className="flex justify-between">
                        <span className="text-gray-600">{t('label.subtotal')}:</span>
                        <span className="font-medium text-right">{formatCurrency(formData.subtotal, currency, locale)}</span>
                    </div>
                    {(formData.discount_amount ?? 0) > 0 && (
                        <div className="flex justify-between">
                            <span className="text-gray-600">{t('label.discountApplied')}:</span>
                            <span className="font-medium text-right">-{formatCurrency(formData.discount_amount ?? 0, currency, locale)}</span>
                        </div>
                    )}
                    <div className="flex justify-between">
                        <span className="text-gray-600">{t('label.tax')} ({formData.tax_rate ?? 0}%):</span>
                        <span className="font-medium text-right">{formatCurrency(formData.tax_amount, currency, locale)}</span>
                    </div>
                    {(formData.shipping_cost ?? 0) > 0 && (
                        <div className="flex justify-between">
                            <span className="text-gray-600">{t('label.shippingApplied')}:</span>
                            <span className="font-medium text-right">{formatCurrency(formData.shipping_cost ?? 0, currency, locale)}</span>
                        </div>
                    )}
                    <Separator className="my-1.5" />
                    <div className="flex justify-between font-bold text-base">
                        <span>{t('label.total')}:</span>
                        <span className="text-right">{formatCurrency(formData.total_amount, currency, locale)}</span>
                    </div>
                </div>
            </section>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/finances/invoices/[invoiceId]/_hooks/useInvoiceDetail.ts ===================

"use client";

import { useState, useEffect, useTransition, useCallback } from 'react';
import { useTranslations } from 'next-intl';
import { toast } from 'sonner';
import { useRouter } from 'next/navigation';

import {
    type InvoiceDetail,
    type InvoiceFormData,
    type InvoiceFormDataForAction,
    type InvoiceItem,
    type InvoiceStatus
} from '@/types/finances/invoices';

import { saveInvoiceAction } from '../actions';
import { formatDate } from '@/lib/utils/formatters'; // Import formatDate

interface UseInvoiceDetailProps {
    initialData: InvoiceDetail | null;
    isNew: boolean;
    // clients?: { id: number; nom: string | null }[];
    // products?: { id: number; name: string | null; price: number | null }[];
    // projects?: { id: number; name: string | null }[];
}

// Valors per defecte actualitzats
const defaultInitialData: InvoiceFormData = {
    contact_id: null,
    invoice_number: null,
    issue_date: formatDate(new Date()), // YYYY-MM-DD
    due_date: null,
    status: 'Draft',
    notes: null,
    terms: null, // Afegit
    payment_details: null, // Afegit
    client_reference: null, // Afegit
    currency: 'EUR', // Afegit
    language: 'ca', // Afegit
    project_id: null, // Afegit
    budget_id: null,
    quote_id: null,
    tax: null,
    discount: null,
    extra_data: null,
    id: undefined,
    invoice_items: [],
    subtotal: 0,
    discount_amount: 0, // Descompte general
    tax_rate: 21, // Taxa general
    tax_amount: 0, // Impost general
    shipping_cost: 0, // Afegit
    total_amount: 0,
    // Camps denormalitzats o només lectura
    client_name: null,
    client_tax_id: null,
    client_address: null,
    client_email: null,
    company_name: null,
    company_tax_id: null,
    company_address: null,
    company_email: null,
    company_logo_url: null, // Afegit
};


export function useInvoiceDetail({
    initialData,
    isNew,
}: UseInvoiceDetailProps) {
    const t = useTranslations('InvoiceDetailPage');
    const router = useRouter();
    const [isPending, startTransition] = useTransition();

    const [formData, setFormData] = useState<InvoiceFormData>(() => {
        if (initialData) {
            // Mapeig explícit incloent nous camps
            const mappedData: InvoiceFormData = {
                id: initialData.id,
                contact_id: initialData.contact_id ?? null,
                invoice_number: initialData.invoice_number ?? null,
                issue_date: initialData.issue_date ? formatDate(new Date(initialData.issue_date)) : '', // YYYY-MM-DD
                due_date: initialData.due_date ? formatDate(new Date(initialData.due_date)) : null, // YYYY-MM-DD
                status: initialData.status as InvoiceStatus, // status a la BD és 'text', però el tractem com a enum aquí
                notes: initialData.notes ?? null,
                terms: initialData.terms ?? null, // Nou
                payment_details: initialData.payment_details ?? null, // Nou
                client_reference: initialData.client_reference ?? null, // Nou
                currency: initialData.currency ?? 'EUR', // Nou
                language: initialData.language ?? 'ca', // Nou
                project_id: initialData.project_id ?? null, // Nou
                budget_id: initialData.budget_id ?? null,
                quote_id: initialData.quote_id ?? null,
                tax: initialData.tax ?? null,
                discount: initialData.discount ?? null,
                extra_data: initialData.extra_data ?? null,
                client_name: initialData.client_name ?? null,
                client_tax_id: initialData.client_tax_id ?? null,
                client_address: initialData.client_address ?? null,
                client_email: initialData.client_email ?? null,
                company_name: initialData.company_name ?? null,
                company_tax_id: initialData.company_tax_id ?? null,
                company_address: initialData.company_address ?? null,
                company_email: initialData.company_email ?? null,
                company_logo_url: initialData.company_logo_url ?? null, // Nou
                invoice_items: initialData.invoice_items?.map(item => ({
                    ...item,
                    id: String(item.id), // L'ID de item és UUID (string)
                    // Assegurem tipus numèrics per als nous camps d'item si són nulls
                    discount_percentage: item.discount_percentage ?? null,
                    discount_amount: item.discount_amount ?? null,
                })) || [],
                subtotal: initialData.subtotal ?? 0,
                discount_amount: initialData.discount_amount ?? 0, // Descompte general
                tax_rate: initialData.tax_rate ?? 21, // Taxa general
                tax_amount: initialData.tax_amount ?? 0, // Impost general
                shipping_cost: initialData.shipping_cost ?? 0, // Nou
                total_amount: initialData.total_amount ?? 0,
            };
            return mappedData;
        }
        return defaultInitialData;
    });

    // --- Càlcul de Totals ---
    // Ara inclou el cost d'enviament i considera descomptes per línia si vols
    const calculateTotals = useCallback((
        items: InvoiceItem[],
        generalDiscountAmount: number = 0,
        generalTaxRate: number = 0,
        shippingCost: number = 0
    ) => {
        let subtotalBeforeLineDiscounts = 0;
        let totalLineDiscountAmount = 0;

        items.forEach(item => {
            const quantity = Number(item.quantity) || 0;
            const unitPrice = Number(item.unit_price) || 0;
            const lineTotal = quantity * unitPrice;
            subtotalBeforeLineDiscounts += lineTotal;

            // Calcula descompte per línia (prioritza amount si existeix, sinó percentage)
            let lineDiscount = 0;
            if (item.discount_amount && item.discount_amount > 0) {
                lineDiscount = Number(item.discount_amount);
            } else if (item.discount_percentage && item.discount_percentage > 0) {
                lineDiscount = lineTotal * (Number(item.discount_percentage) / 100);
            }
            totalLineDiscountAmount += lineDiscount;
        });

        const subtotalAfterLineDiscounts = subtotalBeforeLineDiscounts - totalLineDiscountAmount;
        // Aplica descompte general DESPRÉS dels descomptes de línia
        const effectiveSubtotal = subtotalAfterLineDiscounts - generalDiscountAmount;

        const taxAmount = effectiveSubtotal > 0 ? effectiveSubtotal * (generalTaxRate / 100) : 0;
        // Suma l'enviament DESPRÉS d'impostos
        const totalAmount = effectiveSubtotal + taxAmount + shippingCost;

        return {
            subtotal: subtotalBeforeLineDiscounts, // Subtotal abans de cap descompte
            taxAmount, // Impost calculat sobre subtotal efectiu
            totalAmount, // Total final
            // Podries retornar més valors si els necessites mostrar (totalLineDiscountAmount, etc.)
        };
    }, []);

    useEffect(() => {
        const currentGeneralDiscount = Number(formData.discount_amount) || 0;
        const currentGeneralTaxRate = Number(formData.tax_rate) || 0;
        const currentShippingCost = Number(formData.shipping_cost) || 0;

        const { subtotal, taxAmount, totalAmount } = calculateTotals(
            formData.invoice_items || [],
            currentGeneralDiscount,
            currentGeneralTaxRate,
            currentShippingCost
        );

        if (subtotal !== formData.subtotal || taxAmount !== formData.tax_amount || totalAmount !== formData.total_amount) {
            setFormData(prev => ({
                ...prev,
                subtotal, // Actualitza subtotal (abans de descomptes)
                tax_amount: taxAmount,
                total_amount: totalAmount,
                // discount_amount i shipping_cost ja estan a l'estat, no cal actualitzar-los aquí
            }));
        }
        // Incloem shipping_cost a les dependències
    }, [formData.invoice_items, formData.discount_amount, formData.tax_rate, formData.shipping_cost, formData.subtotal, formData.tax_amount, formData.total_amount, calculateTotals]);


    // --- Handlers (handleFieldChange no canvia) ---
    const handleFieldChange = useCallback(<K extends keyof InvoiceFormData>(
        field: K,
        value: InvoiceFormData[K]
    ) => {
        setFormData(prev => ({ ...prev, [field]: value }));
    }, []);


    // --- Handler per a Línies (Gestiona nous camps) ---
    const handleItemChange = useCallback(<K extends keyof InvoiceItem>(
        index: number,
        field: K,
        value: InvoiceItem[K]
    ) => {
        setFormData(prev => {
            const currentItems = Array.isArray(prev.invoice_items) ? [...prev.invoice_items] : [];
            if (!currentItems[index]) return prev;

            const updatedItem = { ...currentItems[index], [field]: value };

            // Recalcular total i possiblement descompte si canvien camps rellevants
            if (field === 'quantity' || field === 'unit_price' || field === 'discount_percentage' || field === 'discount_amount') {
                const quantity = Number(updatedItem.quantity) || 0;
                const unitPrice = Number(updatedItem.unit_price) || 0;
                const lineTotal = quantity * unitPrice;
                updatedItem.total = lineTotal; // Total base de la línia

                // ✅✅✅ CORRECCIÓ COMPARACIÓ ✅✅✅
                // Comprovem si NO és null ABANS de comparar amb 0
                const numericValue = Number(value); // Convertim a número per comparar

                if (field === 'discount_percentage' && value !== null && numericValue > 0) {
                    updatedItem.discount_amount = null;
                } else if (field === 'discount_amount' && value !== null && numericValue > 0) {
                    updatedItem.discount_percentage = null;
                }
            }

            currentItems[index] = updatedItem;
            return { ...prev, invoice_items: currentItems };
        });
    }, []);


    // --- Afegir Item (Inclou nous camps per defecte) ---
    const handleAddItem = useCallback(() => {
        const newItem: InvoiceItem = {
            id: `temp-${Date.now()}-${Math.random()}`,
            invoice_id: typeof formData.id === 'number' ? formData.id : 0,
            description: '',
            quantity: 1,
            unit_price: 0,
            total: 0,
            created_at: new Date().toISOString(),
            tax_rate: null, // Taxa per línia (si la implementes)
            user_id: '',
            team_id: '',
            product_id: null,
            // Nous camps
            discount_percentage: null, // O 0
            discount_amount: null, // O 0
            reference_sku: null,
        };
        setFormData(prev => ({
            ...prev,
            invoice_items: [...(prev.invoice_items || []), newItem]
        }));
    }, [formData.id]);

    // --- Esborrar Item (sense canvis) ---
    const handleRemoveItem = useCallback((index: number) => {
        setFormData(prev => {
            const newItems = [...(prev.invoice_items || [])];
            if (index >= 0 && index < newItems.length) {
                newItems.splice(index, 1);
                return { ...prev, invoice_items: newItems };
            }
            return prev;
        });
    }, []);


    // --- Submit Handler (Inclou nous camps a enviar) ---
    const handleSubmit = useCallback(async (e: React.FormEvent) => {
        e.preventDefault();
        // Validation...

        const {
            invoice_items,
            ...invoiceData // La resta queda aquí
        } = formData;

        const itemsForAction = (invoice_items || []).map(item => {
            // Excloem camps interns o no editables de l'item
            const { ...restOfItem } = item;
            return {
                ...restOfItem,
                id: typeof item.id === 'string' && item.id.startsWith('temp-') ? undefined : item.id,
                quantity: Number(item.quantity) || 0,
                unit_price: Number(item.unit_price) || 0,
                tax_rate: item.tax_rate ? Number(item.tax_rate) : null,
                product_id: item.product_id ? Number(item.product_id) : null,
                // Assegurem tipus per als nous camps
                discount_percentage: item.discount_percentage ? Number(item.discount_percentage) : null,
                discount_amount: item.discount_amount ? Number(item.discount_amount) : null,
                reference_sku: item.reference_sku || null,
                // El 'total' de la línia es recalcularà al servidor amb els descomptes/impostos correctes
            }
        });

        // Construïm l'objecte final per a l'acció
        // Construïm l'objecte final per a l'acció
        const dataForAction: InvoiceFormDataForAction & { invoice_items?: InvoiceItem[] } = {
            // Usem directament invoiceData (després d'excloure items/id)
            // Fem un cast per assegurar que compleix amb InvoiceFormDataForAction
            ...(invoiceData as InvoiceFormDataForAction),
            // Assegurem tipus per als camps clau que s'envien
            contact_id: invoiceData.contact_id ? Number(invoiceData.contact_id) : null,
            budget_id: invoiceData.budget_id ? Number(invoiceData.budget_id) : null,
            quote_id: invoiceData.quote_id ? Number(invoiceData.quote_id) : null,
            // ✅✅✅ CORRECCIÓ project_id ✅✅✅
            project_id: invoiceData.project_id || null, // Ja és string | null, només assegurem null si és buit
            discount_amount: Number(invoiceData.discount_amount) || 0,
            tax_rate: Number(invoiceData.tax_rate) ?? 0,
            shipping_cost: Number(invoiceData.shipping_cost) || 0,
            tax: invoiceData.tax ? Number(invoiceData.tax) : null,
            discount: invoiceData.discount ? Number(invoiceData.discount) : null,
            currency: invoiceData.currency || 'EUR',
            language: invoiceData.language || 'ca',
            // Afegim els items
            invoice_items: itemsForAction as InvoiceItem[],
        };

        startTransition(async () => {
            const currentInvoiceId = typeof formData.id === 'number' ? formData.id : null;
            const result = await saveInvoiceAction(dataForAction, currentInvoiceId);

            if (result.success && result.data?.id) {
                toast.success(result.message || t('toast.saveSuccess'));
                if (isNew || !currentInvoiceId) {
                    router.replace(`/finances/invoices/${result.data.id}`);
                } else {
                    router.refresh(); // Refresca dades si era edició
                }
            } else {
                toast.error(result.message || t('toast.saveError'));
            }
        });
    }, [formData, isNew, router, t, startTransition]);

    return {
        formData,
        isPending,
        handleFieldChange,
        handleItemChange,
        handleAddItem,
        handleRemoveItem,
        handleSubmit,
        t,
    };
}

// =================== FILE: src/app/[locale]/(app)/finances/invoices/_components/InvoiceClient.tsx ===================

// src/app/[locale]/(app)/finances/invoices/_components/InvoicesClient.tsx
"use client";

import { useTranslations } from 'next-intl';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { PlusCircle } from 'lucide-react';
import { type PaginatedInvoicesResponse, type InvoiceListRow, type InvoiceStatus } from '@/types/finances/invoices';
import { useInvoices } from '../_hooks/useInvoices';
import { useMemo } from 'react'; // Ja estava importat

// Components UI
import { PageHeader } from '@/components/shared/PageHeader';
import { Button } from '@/components/ui/button';
import { InvoiceFilters } from './InvoicesFilters';
import { GenericDataTable, type ColumnDef } from '@/components/shared/GenericDataTable';
import { formatDate, formatCurrency } from '@/lib/utils/formatters';
import { StatusBadge } from '@/components/shared/StatusBadge';
import { ColumnToggleButton } from '@/components/shared/ColumnToggleButton';
// Podries crear InvoiceFilters.tsx similar a ExpenseFilters.tsx
// import { InvoiceFilters } from './InvoiceFilters';

interface InvoicesClientProps {
  initialData: PaginatedInvoicesResponse;
}

export function InvoicesClient({ initialData }: InvoicesClientProps) {
  const t = useTranslations('InvoicesPage');
  const tShared = useTranslations('Shared');
  const router = useRouter();

  const {
    page, pageSize, searchTerm, handleSearchChange,
    handlePageChange, handleSortChange, sortBy, sortOrder,
    deleteItem, setDeleteItem, handleDelete, isPending,
    statusFilter, handleStatusChange, // <-- Ja els tenim del hook
    columnVisibility, toggleColumnVisibility, // <-- Ja els tenim del hook
  } = useInvoices();

  const { data: invoices, count: totalCount } = initialData;
  const totalPages = Math.ceil(totalCount / pageSize);

  // ✅ Definim les columnes AMB la lògica 'cell' dins del useMemo
  const definedColumns = useMemo<ColumnDef<InvoiceListRow>[]>(() => [
    {
      accessorKey: 'invoice_number',
      header: t('table.number'),
      enableSorting: true,
      cell: (invoice) => ( // Rep InvoiceListRow directament
        <Button
          variant="link"
          className="p-0 h-auto font-medium"
          onClick={() => router.push(`/finances/invoices/${invoice.id}`)}
        >
          {invoice.invoice_number || `INV-${invoice.id}`}
        </Button>
      ),
    },
    {
      accessorKey: 'client_name', // O 'contacts.nom' si prefereixes i funciona l'ordenació
      id: 'client_name',
      header: t('table.client'),
      enableSorting: true,
      cell: (invoice) => {
        const clientDisplayName = invoice.client_name ?? invoice.contacts?.nom ?? '-';
        if (invoice.contact_id) {
          return (
            <Link href={`/crm/contactes/${invoice.contact_id}`} className="text-blue-600 hover:underline">
              {clientDisplayName}
            </Link>
          );
        }
        return clientDisplayName;
      },
    },
    {
      accessorKey: 'issue_date',
      header: t('table.invoiceDate'),
      enableSorting: true,
      cell: (invoice) => formatDate(invoice.issue_date),
    },
    {
      accessorKey: 'due_date',
      header: t('table.dueDate'),
      enableSorting: true,
      // ✅ CORRECCIÓ: Gestionem el valor null abans de formatar
      cell: (invoice) => invoice.due_date ? formatDate(invoice.due_date) : '-',
    },
    {
      accessorKey: 'total_amount',
      header: t('table.total'),
      enableSorting: true,
      cell: (invoice) => <div className="text-right font-medium">{formatCurrency(invoice.total_amount)}</div>,
      meta: { className: 'text-right font-medium' } // opcional segons GenericDataTable

    },
    {
      accessorKey: 'status',
      header: t('table.status'),
      enableSorting: true,
      cell: (invoice) => (
        <StatusBadge status={invoice.status as InvoiceStatus} />
      ),
    },
  ], [t, router]); // Eliminem tShared si no s'usa a les columnes

  // Filtrem les columnes visibles
  const visibleColumns = useMemo(
    () => definedColumns.filter((col) => {
      // Obtenim la clau d'accés o l'ID
      const key =
        (col as ColumnDef<InvoiceListRow>).accessorKey?.toString() ??
        (col as ColumnDef<InvoiceListRow> & { id?: string }).id?.toString();
      // Permetem que columnes sense clau (com accions) siguin visibles per defecte
      return key ? (columnVisibility[key] ?? true) : true;
    }),
    [definedColumns, columnVisibility]
  );

  const deleteDescription = (
    <>
      {tShared('deleteDialog.description1')}{' '}
      <span className="font-bold">{deleteItem?.invoice_number || `INV-${deleteItem?.id}`}</span>.
      <br />
      {tShared('deleteDialog.description2')}
    </>
  );

  return (
    <div className="flex flex-col gap-6">
      <PageHeader title={t('title')} description={t('description')}>
        <Button onClick={() => router.push('/finances/invoices/new')}>
          <PlusCircle className="mr-2 h-4 w-4" /> {t('newButton')}
        </Button>
      </PageHeader>

      {/* Barra de Filtres / Accions */}
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        {/* ✅ Utilitzem InvoiceFilters */}
        <InvoiceFilters
          searchTerm={searchTerm}
          onSearchChange={handleSearchChange}
          status={statusFilter}
          onStatusChange={handleStatusChange}
        // Passa clients si tens filtre per client
        // clientId={clientFilter}
        // onClientChange={handleClientChange}
        // clients={clientsData}
        />
        {/* Botó per mostrar/ocultar columnes */}
        <ColumnToggleButton
          allColumns={definedColumns} // Use definedColumns to match expected type
          columnVisibility={columnVisibility}
          toggleColumnVisibility={toggleColumnVisibility}
        />
      </div>

      <GenericDataTable<InvoiceListRow>
        columns={visibleColumns}
        data={invoices}
        isPending={isPending}
        onSort={handleSortChange}
        currentSortColumn={sortBy}
        currentSortOrder={sortOrder as 'asc' | 'desc' | null}
        page={page}
        totalPages={totalPages}
        onPageChange={handlePageChange}
        deleteItem={deleteItem}
        setDeleteItem={setDeleteItem}
        onDelete={handleDelete}
        deleteTitleKey="InvoicesPage.deleteDialog.title"
        deleteDescription={deleteDescription}
        emptyStateMessage={t('emptyState')}
      />
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/finances/invoices/_components/InvoicesData.tsx ===================

import { fetchPaginatedInvoices } from '../actions';
import { InvoicesClient } from './InvoiceClient';
import { type InvoiceStatus, type InvoiceFilters } from '@/types/finances/invoices';

// -------------------------------------------------------------------
// ✅ CORRECCIÓ: La interfície ara espera un sol objecte 'searchParams'
// -------------------------------------------------------------------
interface InvoicesDataProps {
  searchParams: {
    page: string;
    pageSize: string;
    search?: string;
    status?: string;
    contactId?: string;
    sortBy?: string;
    sortOrder?: string;
  };
}

/**
 * Component ASYNC que carrega les dades de les factures basant-se
 * en els paràmetres de cerca rebuts.
 */
export async function InvoicesData({ searchParams }: InvoicesDataProps) {
  // ✅ Desestructurem els paràmetres des de l'objecte 'searchParams'
  const {
    page: pageProp,
    pageSize: pageSizeProp,
    search,
    status: statusProp,
    contactId: contactIdProp,
    sortBy: sortByProp,
    sortOrder: sortOrderProp,
  } = searchParams;

  // --- El codi de validació i parseig es manté pràcticament igual ---
  const page = parseInt(pageProp, 10);
  const pageSize = parseInt(pageSizeProp, 10);
  const status = (statusProp as InvoiceStatus | undefined) ?? 'all';
  const contactId = contactIdProp ?? 'all';

  // Validació del camp per ordenar
  const allowedSortBy = ['issue_date', 'due_date', 'total_amount', 'status', 'invoice_number', 'client_name', 'contacts.nom'] as const;
  type AllowedSortBy = typeof allowedSortBy[number];
  const sortBy = (allowedSortBy.includes(sortByProp as AllowedSortBy) ? sortByProp : 'issue_date') as AllowedSortBy;
  
  const sortOrder = (sortOrderProp === 'asc' ? 'asc' : 'desc') as 'asc' | 'desc';

  // Construcció de l'objecte de filtres per a la consulta
  const filters: InvoiceFilters = {
    searchTerm: search || undefined,
    status: status === 'all' ? undefined : status,
    contactId: contactId === 'all' ? 'all' : parseInt(contactId, 10),
    sortBy,
    sortOrder,
    limit: pageSize,
    offset: (page - 1) * pageSize,
  };

  // Crida a l'acció del servidor per obtenir les dades
  const initialData = await fetchPaginatedInvoices(filters);

  // Passem les dades al component client per a la seva renderització
  return (
    <InvoicesClient initialData={initialData} />
  );
}

// =================== FILE: src/app/[locale]/(app)/finances/invoices/_components/InvoicesFilters.tsx ===================

// src/app/[locale]/(app)/finances/invoices/_components/InvoiceFilters.tsx
"use client";

import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { useTranslations } from "next-intl";
// Importa el mapa d'estats per omplir el selector
import { INVOICE_STATUS_MAP, type InvoiceStatus } from "@/types/finances/invoices";

interface InvoiceFiltersProps {
  searchTerm: string;
  onSearchChange: (value: string) => void;
  status: InvoiceStatus | 'all';
  onStatusChange: (value: string) => void; // El Select retorna string
  // Podries afegir filtre per client aquí
  // clientId: string | 'all';
  // onClientChange: (value: string) => void;
  // clients: { id: number; nom: string | null }[]; // Llista de clients
}

export function InvoiceFilters({
  searchTerm,
  onSearchChange,
  status,
  onStatusChange,
  // clientId,
  // onClientChange,
  // clients
}: InvoiceFiltersProps) {
  const t = useTranslations('InvoicesPage.filters'); // Namespace per a traduccions de filtres

  return (
    <div className="flex flex-col md:flex-row items-end gap-4">
      {/* Cerca General */}
      <div className="w-full md:w-auto">
        <Label className="py-2" htmlFor="search-invoice">{t('searchLabel')} </Label>
        <Input
          id="search-invoice"
          placeholder={t('searchPlaceholder')}
          value={searchTerm}
          onChange={(e) => onSearchChange(e.target.value)}
          className="max-w-xs" // Ajusta amplada si cal
        />
      </div>

      {/* Filtre per Estat */}
      <div className="w-full md:w-auto">
        <Label className="py-2" htmlFor="status-filter">{t('statusLabel')}</Label>
        <Select value={status} onValueChange={onStatusChange}>
          <SelectTrigger id="status-filter" className="w-full md:w-[180px]">
            <SelectValue placeholder={t('statusPlaceholder')} />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">{t('allStatuses')}</SelectItem>
            {INVOICE_STATUS_MAP.map((s) => (
              <SelectItem key={s.dbValue} value={s.dbValue}>
                {/* Hauràs d'afegir traduccions per a cada estat, ex: t(`status.${s.key}`) */}
                {s.dbValue}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>

       {/* TODO: Filtre per Client (si cal) */}
       {/* <div className="w-full md:w-auto">
         <Label htmlFor="client-filter">{t('clientLabel')}</Label>
         <Select value={clientId} onValueChange={onClientChange}> ... </Select>
       </div> */}

    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/finances/invoices/_components/InvoicesSkeleton.tsx ===================

/**
 * @file FacturacioSkeleton.tsx
 * @summary Muestra un esqueleto de carga para la página de Facturación.
 */
"use client";

import React from 'react';
import { Skeleton } from '@/components/ui/skeleton';

export const InvoicesSkeleton: React.FC = () => (
    <div className="space-y-8 animate-pulse">
        <div className="flex justify-between items-center">
            <Skeleton className="h-9 w-1/3" />
            <Skeleton className="h-10 w-40" />
        </div>
        <div className="space-y-2">
            <Skeleton className="h-12 w-full" />
            <Skeleton className="h-16 w-full" />
            <Skeleton className="h-16 w-full" />
            <Skeleton className="h-16 w-full" />
            <Skeleton className="h-16 w-full" />
        </div>
    </div>
);

// =================== FILE: src/app/[locale]/(app)/finances/invoices/_hooks/useInvoices.ts ===================

"use client";

import { useState, useTransition, useCallback, useEffect, useMemo } from 'react';
import { usePathname, useRouter, useSearchParams } from 'next/navigation';
import { useDebouncedCallback } from 'use-debounce';
import { toast } from 'sonner';
import { useTranslations } from 'next-intl';

import { type InvoiceListRow, type InvoiceStatus } from '@/types/finances/invoices';
// ✅ CORRECCIÓ: Importem des del nou fitxer d'accions de detall
import { deleteInvoiceAction } from '../[invoiceId]/actions';

const DEFAULT_PAGE_SIZE = 10;
type ColumnVisibilityState = Record<string, boolean>;
type BasicColumnInfo = { key: string; header: string; defaultVisible?: boolean };

export function useInvoices() {
  const router = useRouter();
  const pathname = usePathname();
  const searchParams = useSearchParams();
  const t = useTranslations('InvoicesPage');
  const [isPending, startTransition] = useTransition();

  // --- Estats inicials ---
  const initialPage = parseInt(searchParams.get('page') || '1', 10);
  const initialPageSize = parseInt(searchParams.get('pageSize') || DEFAULT_PAGE_SIZE.toString(), 10);
  const initialSearch = searchParams.get('search') || '';
  const initialSortBy = searchParams.get('sortBy') || 'issue_date';
  const initialSortOrder = (searchParams.get('sortOrder') || 'desc') as 'asc' | 'desc';
  const initialStatus = (searchParams.get('status') || 'all') as InvoiceStatus | 'all';
  const initialClientId = searchParams.get('contactId') || 'all';

  // --- Estats interns ---
  const [page, setPage] = useState(initialPage);
  const [pageSize, setPageSize] = useState(initialPageSize);
  const [searchTerm, setSearchTerm] = useState(initialSearch);
  const [sortBy, setSortBy] = useState(initialSortBy);
  const [sortOrder, setSortOrder] = useState(initialSortOrder);
  const [statusFilter, setStatusFilter] = useState(initialStatus);
  const [clientFilter, setClientFilter] = useState(initialClientId);
  const [deleteItem, setDeleteItem] = useState<InvoiceListRow | null>(null);

  const allColumns = useMemo<BasicColumnInfo[]>(() => [
    { key: 'invoice_number', header: t('table.number'), defaultVisible: true },
    // ✅ CORRECCIÓ: La clau per ordenar és 'client_name', coincideix amb el RPC
    { key: 'client_name', header: t('table.client'), defaultVisible: true }, 
    { key: 'issue_date', header: t('table.invoiceDate'), defaultVisible: true },
    { key: 'due_date', header: t('table.dueDate'), defaultVisible: false },
    { key: 'total_amount', header: t('table.total'), defaultVisible: true },
    { key: 'status', header: t('table.status'), defaultVisible: true },
  ], [t]);

  const [columnVisibility, setColumnVisibility] = useState<ColumnVisibilityState>(() =>
    allColumns.reduce((acc, col) => {
      acc[col.key] = col.defaultVisible ?? true;
      return acc;
    }, {} as ColumnVisibilityState)
  );

  const toggleColumnVisibility = useCallback((columnKey: string) => {
    setColumnVisibility(prev => {
        const currentVisibility = prev[columnKey];
        const defaultVisibility = allColumns.find(c => c.key === columnKey)?.defaultVisible ?? true;
        const nextVisibility = currentVisibility === undefined ? !defaultVisibility : !currentVisibility;
        return { ...prev, [columnKey]: nextVisibility };
    });
  }, [allColumns]);


  const updateQueryParams = useCallback(
    (newParams: Record<string, string | number | undefined | null>) => {
        const current = new URLSearchParams(searchParams.toString());
        let changed = false;

        Object.entries(newParams).forEach(([key, value]) => {
          const stringValue = value !== undefined && value !== null ? String(value) : '';
          const isDefault = (
              (key === 'page' && stringValue === '1') ||
              (key === 'status' && stringValue === 'all') ||
              (key === 'contactId' && stringValue === 'all') ||
              (key === 'pageSize' && stringValue === DEFAULT_PAGE_SIZE.toString()) ||
              (key === 'sortBy' && stringValue === 'issue_date') ||
              (key === 'sortOrder' && stringValue === 'desc')
          );

          if (stringValue === '' || isDefault) {
             if (current.has(key)) {
                current.delete(key);
                changed = true;
             }
          } else if (current.get(key) !== stringValue) {
             current.set(key, stringValue);
             changed = true;
          }
        });

        const shouldResetPage = newParams.search !== undefined || newParams.status !== undefined || newParams.contactId !== undefined || newParams.sortBy !== undefined || newParams.sortOrder !== undefined || newParams.pageSize !== undefined;

        if (shouldResetPage) {
          if (current.get('page')) {
             current.delete('page');
             changed = true;
          }
        }

        if (changed) {
            startTransition(() => {
                if (shouldResetPage && page !== 1) {
                    setPage(1);
                }
                router.push(`${pathname}?${current.toString()}`);
            });
        }
      }, [searchParams, router, pathname, startTransition, page]);

  // --- Handlers ---
  const handleSearchChangeInternal = useDebouncedCallback((term: string) => {
    updateQueryParams({ search: term || undefined });
  }, 300);

  const handleSearchChange = useCallback((term: string) => {
      setSearchTerm(term);
      handleSearchChangeInternal(term);
  },[handleSearchChangeInternal]);

  const handlePageChange = useCallback((newPage: number) => {
    setPage(newPage);
    updateQueryParams({ page: newPage });
  }, [updateQueryParams]);

  const handleSortChange = useCallback((newSortBy: string) => {
    // ✅ Assegurem que 'contacts.nom' es gestiona com 'client_name'
    const sortKey = newSortBy === 'contacts.nom' ? 'client_name' : newSortBy;
    const newSortOrder = sortBy === sortKey && sortOrder === 'asc' ? 'desc' : 'asc';
    setSortBy(sortKey);
    setSortOrder(newSortOrder);
    updateQueryParams({ sortBy: sortKey, sortOrder: newSortOrder });
  }, [sortBy, sortOrder, updateQueryParams]);

  const handleStatusChange = useCallback((newStatus: string) => {
      const validStatus = newStatus as InvoiceStatus | 'all';
      setStatusFilter(validStatus);
      updateQueryParams({ status: validStatus });
  }, [updateQueryParams]);

  const handleClientChange = useCallback((newClientId: string) => {
      setClientFilter(newClientId);
      updateQueryParams({ contactId: newClientId });
  }, [updateQueryParams]);

  const handleDelete = useCallback(() => {
    if (!deleteItem) return;
    const itemToDeleteId = deleteItem.id;
    if (typeof itemToDeleteId !== 'number') return;

    startTransition(async () => {
      // ✅ Aquesta funció ara s'importa de 'invoiceDetailActions.ts'
      const result = await deleteInvoiceAction(itemToDeleteId);
      if (result.success) {
        toast.success(result.message || t('toast.deleteSuccess'));
        setDeleteItem(null);
        // Podríem afegir router.refresh() si fos necessari,
        // però el revalidatePath ho hauria de gestionar.
      } else {
        toast.error(result.message || t('toast.deleteError'));
      }
    });
  }, [deleteItem, setDeleteItem, t, startTransition]);

  // Sincronitza estats interns si l'URL canvia externament
  useEffect(() => {
      setPage(initialPage);
      setPageSize(initialPageSize);
      setSearchTerm(initialSearch);
      setSortBy(initialSortBy);
      setSortOrder(initialSortOrder);
      setStatusFilter(initialStatus);
      setClientFilter(initialClientId);
  }, [initialPage, initialPageSize, initialSearch, initialSortBy, initialSortOrder, initialStatus, initialClientId]);


  return {
    // Estats
    page,
    pageSize,
    searchTerm,
    sortBy,
    sortOrder,
    statusFilter,
    clientFilter,
    isPending,
    deleteItem,
    // Visibilitat Columnes
    allColumns,
    columnVisibility,
    toggleColumnVisibility,

    // Handlers
    handleSearchChange,
    handlePageChange,
    handleSortChange,
    handleStatusChange,
    handleClientChange,
    setDeleteItem,
    handleDelete,
  };
}

// =================== FILE: src/app/[locale]/(app)/finances/suppliers/actions.ts ===================

"use server";

import { revalidatePath } from "next/cache";
import { createClient as createServerActionClient } from "@/lib/supabase/server";
import { validateUserSession } from "@/lib/supabase/session";
import { type Supplier } from "@/types/finances/suppliers";
import { type Database } from "@/types/supabase";
import { type ActionResult } from "@/types/shared/index";

// --- Tipus Específics ---
type SupplierRow = Database['public']['Tables']['suppliers']['Row'];
export type SupplierFormData = Omit<SupplierRow, 'id' | 'created_at' | 'user_id' | 'team_id'>;

export interface PaginatedSuppliersResponse {
    data: Supplier[];
    count: number;
}


// ✅ Tornem a necessitar aquest tipus com a argument
export interface SupplierFilters {
    searchTerm?: string;
    sortBy?: string;
    sortOrder?: 'asc' | 'desc';
    limit?: number;
    offset?: number;
}
// --- Funcions Públiques (Server Actions) ---

/**
 * Obté la llista paginada de proveïdors.
 * ✅ REVERTIT: Ara accepta l'objecte 'filters' un altre cop.
 */
export async function fetchPaginatedSuppliers(
    filters: SupplierFilters // <-- Accepta 'filters'
): Promise<PaginatedSuppliersResponse> {
    const session = await validateUserSession();
    if ("error" in session) { /* ... gestió error ... */ return { data: [], count: 0 }; }
    const { supabase, activeTeamId } = session;

    // ✅ Llegim els valors des de l'objecte 'filters'
    const {
        searchTerm,
        sortBy = 'nom',
        sortOrder = 'asc',
        limit = 10, // Pren valor per defecte si no ve a filters
        offset = 0  // Pren valor per defecte si no ve a filters
    } = filters;

    console.log('fetchPaginatedSuppliers - Received Filters:', filters);

    // --- Consulta de Dades (la lògica aquí es queda igual) ---
    let query = supabase
        .from('suppliers')
        .select('*', { count: 'exact' })
        .eq('team_id', activeTeamId)
        .order(sortBy, { ascending: sortOrder === 'asc' })
        .range(offset, offset + limit - 1); // offset + limit - 1 és correcte

    if (searchTerm) {
        query = query.or(`nom.ilike.%${searchTerm}%,nif.ilike.%${searchTerm}%,email.ilike.%${searchTerm}%`);
    }

    const { data, error, count } = await query;

    if (error) { /* ... gestió error ... */ return { data: [], count: 0 }; }

    return {
        data: data || [],
        count: count ?? 0
    };
}
// ... (fetchSupplierDetail, saveSupplierAction, deleteSupplierAction, fetchSuppliers, searchSuppliers es queden igual) ...

/**
 * Obté el detall d'un únic proveïdor.
 */
export async function fetchSupplierDetail(id: string): Promise<Supplier | null> {
    const session = await validateUserSession();
    if ("error" in session) return null;
    const { supabase, activeTeamId } = session;

    const { data, error } = await supabase
        .from('suppliers')
        .select('*')
        .eq('id', id)
        .eq('team_id', activeTeamId)
        .single();

    if (error) {
        console.error("Error fetching supplier detail:", error.message);
        return null;
    }
    return data;
}

/**
 * Desa (crea o actualitza) un proveïdor.
 */
export async function saveSupplierAction(
    formData: SupplierFormData,
    supplierId: string | null
): Promise<ActionResult<Supplier>> {
    const session = await validateUserSession();
    if ("error" in session) return { success: false, message: session.error.message };
    const { supabase, user, activeTeamId } = session;
    const isNew = supplierId === null || supplierId === 'new';

    try {
        if (isNew) {
            const { data, error } = await supabase.from('suppliers').insert({ ...formData, user_id: user.id, team_id: activeTeamId }).select().single();
            if (error) throw error;
            revalidatePath('/finances/suppliers');
            return { success: true, message: "Proveïdor creat amb èxit.", data: data as Supplier };
        } else {
            const { data, error } = await supabase.from('suppliers').update(formData).eq('id', supplierId).eq('team_id', activeTeamId).select().single();
            if (error) throw error;
            revalidatePath('/finances/suppliers');
            revalidatePath(`/finances/suppliers/${supplierId}`);
            return { success: true, message: "Proveïdor actualitzat amb èxit.", data: data as Supplier };
        }
    } catch (e) {
        const error = e as Error;
        console.error("Unexpected error saving supplier:", error);
        return { success: false, message: `Un error inesperat ha ocorregut: ${error.message}` };
    }
}

/**
 * Esborra un proveïdor.
 */
export async function deleteSupplierAction(supplierId: string): Promise<ActionResult> {
    const session = await validateUserSession();
    if ("error" in session) return { success: false, message: session.error.message };
    const { supabase, activeTeamId } = session;
    const { error } = await supabase.from('suppliers').delete().eq('id', supplierId).eq('team_id', activeTeamId);
    if (error) {
        console.error("Error deleting supplier:", error);
        return { success: false, message: `Error esborrant proveïdor: ${error.message}` };
    }
    revalidatePath('/finances/suppliers');
    return { success: true, message: "Proveïdor esborrat amb èxit." };
}

/**
 * Obté la llista completa de proveïdors (per a selectors, etc.).
 */
export async function fetchSuppliers(): Promise<Pick<Supplier, 'id' | 'nom'>[]> {
    const supabase = createServerActionClient();
    const { data, error } = await supabase.from('suppliers').select('id, nom').order('nom', { ascending: true });
    if (error) throw new Error("No s'han pogut carregar els proveïdors.");
    return data || [];
}

/**
 * Cerca proveïdors per nom per al combobox asíncron.
 */
export async function searchSuppliers(searchTerm: string): Promise<Pick<Supplier, 'id' | 'nom'>[]> {
    const supabase = createServerActionClient();
    let query = supabase.from('suppliers').select('id, nom').order('nom', { ascending: true }).limit(20);
    if (searchTerm) query = query.ilike('nom', `%${searchTerm}%`);
    const { data, error } = await query;
    if (error) { console.error("Error en cercar proveïdors:", error.message); return []; }
    return data || [];
}

// =================== FILE: src/app/[locale]/(app)/finances/suppliers/page.tsx ===================

import { Suspense } from 'react';
import { Skeleton } from '@/components/ui/skeleton';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { SuppliersData } from './_components/SuppliersData';
import { z } from 'zod'; // Recomanat per a validació

// (Opcional però recomanat) Zod schema per validar els paràmetres
const searchParamsSchema = z.object({
  page: z.string().optional().default('1'),
  pageSize: z.string().optional().default('10'),
  search: z.string().optional(),
  sortBy: z.string().optional(),
  sortOrder: z.string().optional(),
});

// -------------------------------------------------------------------
// ✅ CORRECCIÓ: Definim el tipus de les props amb 'searchParams' com a Promise
// -------------------------------------------------------------------
interface SuppliersPageProps {
  searchParams: Promise<{
    page?: string;
    pageSize?: string;
    search?: string;
    sortBy?: string;
    sortOrder?: string;
  }>;
}

/**
 * Component de pàgina per a la llista de proveïdors.
 */
export default async function SuppliersListPage(props: SuppliersPageProps) {
  
  // ✅ Resolem la promesa per obtenir els paràmetres de cerca
  const resolvedSearchParams = await props.searchParams;

  // ✅ (Recomanat) Validem els paràmetres amb Zod
  const validatedSearchParams = searchParamsSchema.parse(resolvedSearchParams);
  
  // La 'key' única és crucial per al bon funcionament de Suspense
  const suspenseKey = JSON.stringify(validatedSearchParams);

  return (
    <Suspense fallback={<SuppliersListSkeleton />}>
      {/* Passem l'objecte de paràmetres sencer, ja resolt i validat */}
      <SuppliersData key={suspenseKey} searchParams={validatedSearchParams} />
    </Suspense>
  );
}

// El Skeleton es queda igual, no cal fer-hi canvis
function SuppliersListSkeleton() {
  return (
    <div className="flex flex-col gap-6">
      {/* Skeleton del PageHeader */}
      <div className="flex items-center justify-between">
        <div className="space-y-2">
          <Skeleton className="h-8 w-48" />
          <Skeleton className="h-4 w-64" />
        </div>
        <Skeleton className="h-10 w-32" />
      </div>
      
      {/* Skeleton de la Taula */}
      <Card>
        <CardHeader>
          <Skeleton className="h-8 w-1/4" />
        </CardHeader>
        <CardContent className="space-y-4">
          <Skeleton className="h-10 w-full" />
          <Skeleton className="h-10 w-full" />
          <Skeleton className="h-10 w-full" />
        </CardContent>
      </Card>
    </div>
  )
}

// =================== FILE: src/app/[locale]/(app)/finances/suppliers/schemas.ts ===================

import { z } from 'zod';

// Esquema de validació per al formulari de proveïdors
export const supplierFormSchema = z.object({
  nom: z.string().min(2, { message: "El nom ha de tenir almenys 2 caràcters." }),
  nif: z.string().optional().nullable(),
  email: z.string().email({ message: "Introdueix un email vàlid." }).optional().nullable(),
  telefon: z.string().optional().nullable(),
  // Pots afegir més camps aquí (adreça, compte bancari, etc.)
  // address: z.string().optional().nullable(),
  // bank_iban: z.string().optional().nullable(),
});

// Tipus inferit de l'esquema
export type SupplierFormValues = z.infer<typeof supplierFormSchema>;

// =================== FILE: src/app/[locale]/(app)/finances/suppliers/[supplierId]/page.tsx ===================

import { Suspense } from 'react';
import { Skeleton } from '@/components/ui/skeleton';
import { SupplierDetailData } from './_components/SupplierDetailData';

// ✅ Definim la interfície localment amb 'params' com a Promise.
interface SupplierDetailPageProps {
  params: Promise<{
    locale: string;
    supplierId: string;
  }>;
}

/**
 * Component de pàgina per al detall d'un proveïdor.
 */
export default async function SupplierDetailPage(props: SupplierDetailPageProps) {
  
  // ✅ Resolem la promesa per obtenir l'ID del proveïdor.
  const { supplierId } = await props.params;

  return (
    <Suspense fallback={<SupplierDetailSkeleton />}>
      {/* ✅ Simplifiquem: Passem només l'string 'supplierId' com a prop. */}
      <SupplierDetailData key={supplierId} supplierId={supplierId} />
    </Suspense>
  );
}

// El Skeleton es queda igual, no cal tocar-lo.
function SupplierDetailSkeleton() {
  return (
    <div className="space-y-6 p-4 bg-card rounded-lg border">
      <div className="space-y-2"><Skeleton className="h-4 w-1/6" /><Skeleton className="h-10 w-1/2" /></div>
      <div className="space-y-2"><Skeleton className="h-4 w-1/6" /><Skeleton className="h-10 w-1/2" /></div>
      <div className="space-y-2"><Skeleton className="h-4 w-1/6" /><Skeleton className="h-10 w-1/3" /></div>
      <Skeleton className="h-10 w-24" />
    </div>
  )
}

// =================== FILE: src/app/[locale]/(app)/finances/suppliers/[supplierId]/_components/LinkContactDialog.tsx ===================

"use client";

import { useState, useTransition } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter
} from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Loader2, UserPlus, Search } from 'lucide-react';
import { useDebouncedCallback } from 'use-debounce';
import { toast } from 'sonner';

import { 
  searchContactsForLinking, 
  linkContactToSupplier 
} from '@/app/[locale]/(app)/crm/contactes/actions';
import { type Contact } from '@/types/crm/contacts'; 

type SearchResult = Pick<Contact, 'id' | 'nom' | 'email'>;

interface LinkContactDialogProps {
  supplierId: string;
  isOpen: boolean;
  onOpenChange: (open: boolean) => void;
  onLinkSuccess: (newlyLinkedContact: Contact) => void;
  t: (key: string) => string;
}

export function LinkContactDialog({
  supplierId,
  isOpen,
  onOpenChange,
  onLinkSuccess,
  t
}: LinkContactDialogProps) {
  const [searchTerm, setSearchTerm] = useState('');
  const [results, setResults] = useState<SearchResult[]>([]);
  const [isSearching, startSearchTransition] = useTransition();
  const [isLinking, startLinkTransition] = useTransition();

  const handleSearch = useDebouncedCallback((term: string) => {
    if (term.length < 2) {
      setResults([]);
      return;
    }
    startSearchTransition(async () => {
      const data = await searchContactsForLinking(term);
      setResults(data);
    });
  }, 300);

  const handleLinkClick = (contactId: string) => {
    startLinkTransition(async () => {
      const result = await linkContactToSupplier(contactId, supplierId);
      if (result.success && result.data) {
        toast.success(t('contactsCard.linkDialog.toastSuccess'));
        onLinkSuccess(result.data); 
        onOpenChange(false); 
        setSearchTerm('');
        setResults([]);
      } else {
        toast.error(result.message || t('contactsCard.linkDialog.toastError'));
      }
    });
  };
  
  // Reseteja l'estat en tancar el diàleg
  const handleOpenChange = (open: boolean) => {
    if (!open) {
      setSearchTerm('');
      setResults([]);
    }
    onOpenChange(open);
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleOpenChange}>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle>{t('contactsCard.linkDialog.title')}</DialogTitle>
          <DialogDescription>
            {t('contactsCard.linkDialog.description')}
          </DialogDescription>
        </DialogHeader>
        
        <div className="relative">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder={t('contactsCard.linkDialog.searchPlaceholder')}
            className="pl-9"
            value={searchTerm}
            onChange={(e) => {
              setSearchTerm(e.target.value);
              handleSearch(e.target.value);
            }}
          />
        </div>

        <div className="mt-4 space-y-2 max-h-[300px] overflow-y-auto">
          {isSearching && (
            <div className="flex justify-center items-center py-4">
              <Loader2 className="h-5 w-5 animate-spin" />
            </div>
          )}
          {!isSearching && results.length === 0 && searchTerm.length > 1 && (
            <p className="text-sm text-center text-muted-foreground">
              {t('contactsCard.linkDialog.noResults')}
            </p>
          )}
          {results.map((contact) => (
            <div
              key={contact.id}
              className="flex items-center justify-between p-2 border rounded-md"
            >
              <div>
                <p className="font-medium">{contact.nom}</p>
                <p className="text-sm text-muted-foreground">{contact.email}</p>
              </div>
              <Button
                size="sm"
                variant="outline"
                onClick={() => handleLinkClick(contact.id)}
                disabled={isLinking}
              >
                <UserPlus className="h-4 w-4 mr-2" />
                {t('contactsCard.linkDialog.linkButton')}
              </Button>
            </div>
          ))}
        </div>
        
        <DialogFooter>
          <Button variant="ghost" onClick={() => handleOpenChange(false)}>
            {t('contactsCard.linkDialog.cancelButton')}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

// =================== FILE: src/app/[locale]/(app)/finances/suppliers/[supplierId]/_components/LinkExpenseDialog.tsx ===================

// src/app/[locale]/(app)/finances/suppliers/[supplierId]/_components/LinkExpenseDialog.tsx
"use client";

import { useState, useTransition } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter
} from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Loader2, Link2 as LinkIcon, Search, CreditCard } from 'lucide-react'; // Canviat nom Link2
import { useDebouncedCallback } from 'use-debounce';
import { toast } from 'sonner';

// Importa les noves accions i tipus
import {
  searchExpensesForLinking,
  linkExpenseToSupplier
} from '@/app/[locale]/(app)/finances/expenses/actions';
import { type Expense } from '@/types/finances/expenses'; // Ajusta la ruta/tipus si cal
import { formatDate, formatCurrency } from '@/lib/utils/formatters';

// Tipus per als resultats de la cerca
type SearchResult = Pick<Expense, 'id' | 'description' | 'expense_date' | 'total_amount'>;

interface LinkExpenseDialogProps {
  supplierId: string;
  isOpen: boolean;
  onOpenChange: (open: boolean) => void;
  // Funció per notificar al pare (ExpensesTabContent) que s'ha vinculat una despesa
  onLinkSuccess: (newlyLinkedExpense: Expense) => void;
  t: (key: string) => string;
}

export function LinkExpenseDialog({
  supplierId,
  isOpen,
  onOpenChange,
  onLinkSuccess,
  t
}: LinkExpenseDialogProps) {
  const [searchTerm, setSearchTerm] = useState('');
  const [results, setResults] = useState<SearchResult[]>([]);
  const [isSearching, startSearchTransition] = useTransition();
  const [isLinking, startLinkTransition] = useTransition();

  const handleSearch = useDebouncedCallback((term: string) => {
    if (term.length < 2) {
      setResults([]);
      return;
    }
    startSearchTransition(async () => {
      const data = await searchExpensesForLinking(term);
      setResults(data);
    });
  }, 300);

  const handleLinkClick = (expenseId: number) => {
    startLinkTransition(async () => {
      const result = await linkExpenseToSupplier(expenseId, supplierId);
      if (result.success && result.data) {
        toast.success(t('expensesCard.linkDialog.toastSuccess'));
        onLinkSuccess(result.data); // Notifica al pare
        onOpenChange(false); // Tanca el diàleg
        setSearchTerm('');
        setResults([]);
      } else {
        toast.error(result.message || t('expensesCard.linkDialog.toastError'));
      }
    });
  };

  // Reseteja l'estat en tancar el diàleg
  const handleOpenChange = (open: boolean) => {
    if (!open) {
      setSearchTerm('');
      setResults([]);
    }
    onOpenChange(open);
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleOpenChange}>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle>{t('expensesCard.linkDialog.title')}</DialogTitle>
          <DialogDescription>
            {t('expensesCard.linkDialog.description')}
          </DialogDescription>
        </DialogHeader>

        <div className="relative">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder={t('expensesCard.linkDialog.searchPlaceholder')}
            className="pl-9"
            value={searchTerm}
            onChange={(e) => {
              setSearchTerm(e.target.value);
              handleSearch(e.target.value);
            }}
          />
        </div>

        <div className="mt-4 space-y-2 max-h-[300px] overflow-y-auto">
          {isSearching && (
            <div className="flex justify-center items-center py-4">
              <Loader2 className="h-5 w-5 animate-spin" />
            </div>
          )}
          {!isSearching && results.length === 0 && searchTerm.length >= 2 && (
            <p className="text-sm text-center text-muted-foreground">
              {t('expensesCard.linkDialog.noResults')}
            </p>
          )}
          {results.map((expense) => (
            <div
              key={expense.id}
              className="flex items-center justify-between p-2 border rounded-md"
            >
              <div className="flex items-center gap-2">
                 <CreditCard className="h-4 w-4 text-muted-foreground flex-shrink-0" />
                 <div className="flex flex-col">
                    <p className="text-sm font-medium truncate" title={expense.description || ''}>
                      {expense.description || "Sense descripció"}
                    </p>
                    <p className="text-xs text-muted-foreground">
                      {formatDate(expense.expense_date)} - {formatCurrency(expense.total_amount)}
                    </p>
                 </div>
              </div>
              <Button
                size="sm"
                variant="outline"
                onClick={() => handleLinkClick(expense.id)}
                disabled={isLinking}
              >
                <LinkIcon className="h-4 w-4 mr-2" />
                {t('expensesCard.linkDialog.linkButton')}
              </Button>
            </div>
          ))}
        </div>

        <DialogFooter>
          <Button variant="ghost" onClick={() => handleOpenChange(false)}>
            {t('expensesCard.linkDialog.cancelButton')}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

// =================== FILE: src/app/[locale]/(app)/finances/suppliers/[supplierId]/_components/SupplierDetailClient.tsx ===================

"use client";

// Import tipus
import { type Supplier } from '@/types/finances/suppliers';
import { type ContactForSupplier } from '@/app/[locale]/(app)/crm/contactes/actions';
import { type ExpenseForSupplier } from '@/app/[locale]/(app)/finances/expenses/actions';
import { type TicketForSupplier } from '@/app/[locale]/(app)/comunicacio/inbox/actions';

// Import hooks i components
import { useSupplierForm } from '../_hooks/useSupplierForm';
import { SupplierForm } from './SupplierForm'; // Nou component
import { RelatedDataTabs } from './tabs/RelateDataTabs'; // Nou component

// Props que rep del Server Component (SupplierDetailData)
interface SupplierDetailClientProps {
  initialData: Supplier | null;
  supplierId: string | null;
  contacts: ContactForSupplier[];
  expenses: ExpenseForSupplier[];
  tickets: TicketForSupplier[];
}

export function SupplierDetailClient({ 
  initialData, 
  supplierId, 
  contacts, 
  expenses, 
  tickets 
}: SupplierDetailClientProps) {
  
  // Hook per al formulari principal
  const formProps = useSupplierForm({ initialData, supplierId });
  const isNew = supplierId === null;

  return (
    <div className="flex flex-col gap-6">
      {/* Component dedicat al formulari */}
      <SupplierForm {...formProps} />

      {/* Component dedicat a les pestanyes (només si no és nou) */}
      {!isNew && (
        <RelatedDataTabs 
          contacts={contacts}
          expenses={expenses}
          tickets={tickets}
          supplierId={supplierId} // Passa l'ID per als botons "Nou"
          supplierEmail={formProps.formData.email} // Passa l'email per al botó "Cercar Inbox"
          t={formProps.t} // Passa la funció de traducció
        />
      )}
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/finances/suppliers/[supplierId]/_components/SupplierDetailData.tsx ===================

import { notFound } from 'next/navigation';
import { fetchSupplierDetail } from '../../actions';
import { SupplierDetailClient } from './SupplierDetailClient';
import { fetchContactsForSupplier } from '@/app/[locale]/(app)/crm/contactes/actions';
import { fetchExpensesForSupplier } from '@/app/[locale]/(app)/finances/expenses/actions';
import { fetchTicketsForSupplierContacts } from '@/app/[locale]/(app)/comunicacio/inbox/actions';
import { PageHeader } from '@/components/shared/PageHeader';
import { getTranslations } from 'next-intl/server';

interface SupplierDetailDataProps {
  supplierId: string;
}

export async function SupplierDetailData({ supplierId }: SupplierDetailDataProps) {
  const isNew = supplierId === 'new';

  const t = await getTranslations('SupplierDetailPage');
  const title = isNew ? t('createTitle') : t('editTitle');
  const description = isNew ? t('createDescription') : t('editDescription');

  if (isNew) {
    return (
      <div className="flex flex-col gap-6">
        <PageHeader
          title={title}
          description={description}
          showBackButton={true}
        />
        <SupplierDetailClient
          initialData={null}
          supplierId={null}
          contacts={[]}
          expenses={[]}
          tickets={[]}
        />
      </div>
    );
  }

  const [
    supplierData,
    contactsData,
    expensesData,
    ticketsData
  ] = await Promise.all([
    fetchSupplierDetail(supplierId),
    fetchContactsForSupplier(supplierId),
    fetchExpensesForSupplier(supplierId),
    fetchTicketsForSupplierContacts(supplierId)
  ]);

  if (!supplierData) {
    notFound();
  }

  return (
    <div className="flex flex-col gap-6">
      <PageHeader
        title={title}
        description={description}
        showBackButton={true}
      />
      {/* ✅ CORRECCIÓ: Passem les dades directament sense 'map'. */}
      {/* La funció 'fetchTicketsForSupplierContacts' ja retorna el tipus correcte. */}
      <SupplierDetailClient
        initialData={supplierData}
        supplierId={supplierId}
        contacts={contactsData || []}
        expenses={expensesData || []}
        tickets={ticketsData || []}
      />
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/finances/suppliers/[supplierId]/_components/SupplierForm.tsx ===================

"use client";

import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { type useSupplierForm } from '../_hooks/useSupplierForm';

// Tipus per a les props que rep del hook
type SupplierFormProps = ReturnType<typeof useSupplierForm>;

export function SupplierForm({
  isPending,
  formData,
  errors,
  handleFieldChange,
  handleSubmit,
  t // Funció de traducció
}: SupplierFormProps) {

  // ❌ Eliminem la variable 'isNew' que no s'utilitzava
  // const isNew = !('id' in formData) || !formData.id;

  return (
    <form onSubmit={handleSubmit}>
      <Card>
        <CardHeader>
           {/* ✅ Eliminem el segon argument (fallback string) */}
           {/* Assegura't que 'detailsCardTitle' existeix a SupplierDetailPage */}
           <CardTitle>{t('detailsCardTitle')}</CardTitle>
           {/* Assegura't que 'detailsCardDescription' existeix a SupplierDetailPage */}
           <CardDescription>{t('detailsCardDescription')}</CardDescription>
        </CardHeader>
        <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="space-y-2">
            <Label htmlFor="nom">{t('form.name')}</Label>
            <Input id="nom" value={formData.nom || ''} onChange={(e) => handleFieldChange('nom', e.target.value)} disabled={isPending}/>
            {errors.nom && <p className="text-sm text-red-500">{errors.nom}</p>}
          </div>
          <div className="space-y-2">
            <Label htmlFor="nif">{t('form.nif')}</Label>
            <Input id="nif" value={formData.nif || ''} onChange={(e) => handleFieldChange('nif', e.target.value)} disabled={isPending}/>
          </div>
          <div className="space-y-2">
            <Label htmlFor="email">{t('form.email')}</Label>
            <Input id="email" type="email" value={formData.email || ''} onChange={(e) => handleFieldChange('email', e.target.value)} disabled={isPending}/>
          </div>
          <div className="space-y-2">
            <Label htmlFor="telefon">{t('form.phone')}</Label>
            <Input id="telefon" value={formData.telefon || ''} onChange={(e) => handleFieldChange('telefon', e.target.value)} disabled={isPending}/>
          </div>
          <div className="md:col-span-2 flex justify-end">
            <Button type="submit" disabled={isPending}>
              {isPending ? t('form.saving') : t('form.save')}
            </Button>
          </div>
        </CardContent>
      </Card>
    </form>
  );
}

// =================== FILE: src/app/[locale]/(app)/finances/suppliers/[supplierId]/_components/tabs/ContactsTabContent.tsx ===================

"use client";

import { useState, useTransition } from 'react'; // ✅ Afegim useTransition
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import {
  PlusCircle, Users, Mail, Phone, Link2,
  Trash2, Loader2 // ✅ Afegim icones
} from 'lucide-react';
import {
  type ContactForSupplier,
  unlinkContactFromSupplier // ✅ Importem la nova acció
} from '@/app/[locale]/(app)/crm/contactes/actions';
import { LinkContactDialog } from '../LinkContactDialog';
import { type Contact } from '@/types/crm/contacts';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog"; // ✅ Importem Alert Dialog
import { toast } from 'sonner';

interface ContactsTabContentProps {
  contacts: ContactForSupplier[];
  supplierId: string;
  t: (key: string) => string;
}

export function ContactsTabContent({ contacts: initialContactsProp, supplierId, t }: ContactsTabContentProps) {
  const router = useRouter();

  const [contacts, setContacts] = useState(initialContactsProp || []);
  const [isLinkDialogOpen, setIsLinkDialogOpen] = useState(false);
  const [isUnlinking, startUnlinkTransition] = useTransition();

  const handleLinkSuccess = (newlyLinkedContact: Contact) => {
    setContacts(prevContacts => [
      ...prevContacts,
      {
        id: newlyLinkedContact.id,
        nom: newlyLinkedContact.nom,
        job_title: newlyLinkedContact.job_title || null,
        email: newlyLinkedContact.email || null,
        telefon: newlyLinkedContact.telefon || null,
      } as ContactForSupplier
    ]);
  };

  // ✅ Nova funció per gestionar la desvinculació
  const handleUnlink = (contactId: string) => {
    startUnlinkTransition(async () => {
      const result = await unlinkContactFromSupplier(contactId, supplierId);
      if (result.success) {
        toast.success(result.message);
        // Actualitzem l'estat local per eliminar el contacte de la UI
        setContacts(prev => prev.filter(c => c.id !== contactId));
      } else {
        toast.error(result.message || "Error en desvincular.");
      }
    });
  };

  return (
    <>
      <Card>
        <CardHeader className="flex flex-row items-center justify-between">
          <div>
            <CardTitle className="flex items-center gap-2"><Users className="h-5 w-5" />{t('contactsCard.title')}</CardTitle>
            <CardDescription>{t('contactsCard.description')}</CardDescription>
          </div>
          <div className="flex gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setIsLinkDialogOpen(true)}
            >
              <Link2 className="h-4 w-4 mr-2" />
              {t('contactsCard.linkButton')}
            </Button>

            <Button
              variant="default"
              size="sm"
              onClick={() => router.push(`/crm/contactes/new?supplierId=${supplierId}`)}
            >
              <PlusCircle className="h-4 w-4 mr-2" />
              {t('contactsCard.newButton')}
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          {contacts.length > 0 ? (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>{t('contactsCard.table.name')}</TableHead>
                  <TableHead>{t('contactsCard.table.email')}</TableHead>
                  <TableHead>{t('contactsCard.table.phone')}</TableHead>
                  <TableHead className="w-[50px]">
                    <span className="sr-only">Accions</span>
                  </TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {contacts.map((contact) => (
                  <TableRow key={contact.id}>
                    <TableCell>
                      {/* ✅ MILLORA NAVEGACIÓ: Afegim el paràmetre 'from' */}
                      <Link
                        href={`/crm/contactes/${contact.id}?from=/finances/suppliers/${supplierId}`}
                        className="font-medium text-blue-600 hover:underline"
                      >
                        {contact.nom}
                      </Link>
                      {contact.job_title && (<span className="block text-xs text-muted-foreground">{contact.job_title}</span>)}
                    </TableCell>
                    <TableCell>{contact.email ? (<a href={`mailto:${contact.email}`} className="flex items-center gap-2 hover:underline"><Mail className="h-3 w-3" /> {contact.email}</a>) : '-'}</TableCell>
                    <TableCell>{contact.telefon ? (<a href={`tel:${contact.telefon}`} className="flex items-center gap-2 hover:underline"><Phone className="h-3 w-3" /> {contact.telefon}</a>) : '-'}</TableCell>

                    {/* ✅ NOU: Cel·la d'accions (Desvincular) */}
                    <TableCell>
                      <AlertDialog>
                        <AlertDialogTrigger asChild>
                          <Button
                            variant="ghost"
                            size="icon"
                            className="h-8 w-8 text-muted-foreground hover:text-destructive"
                            disabled={isUnlinking}
                          >
                            <span className="sr-only">Desvincular contacte</span>
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </AlertDialogTrigger>
                        <AlertDialogContent>
                          <AlertDialogHeader>
                            <AlertDialogTitle>{t('contactsCard.unlinkDialog.title')}</AlertDialogTitle>
                            <AlertDialogDescription>
                              {/* 👇 AQUESTA ÉS LA LÍNIA CLAU 👇 */}
                              {t('contactsCard.unlinkDialog.description')}
                            </AlertDialogDescription>
                          </AlertDialogHeader>
                          <AlertDialogFooter>
                            <AlertDialogCancel>Cancel·lar</AlertDialogCancel>
                            <AlertDialogAction
                              className="bg-destructive hover:bg-destructive/90"
                              onClick={() => handleUnlink(contact.id)}
                              disabled={isUnlinking}
                            >
                              {isUnlinking ? <Loader2 className="h-4 w-4 animate-spin" /> : "Desvincular"}
                            </AlertDialogAction>
                          </AlertDialogFooter>
                        </AlertDialogContent>
                      </AlertDialog>
                    </TableCell>

                  </TableRow>
                ))}
              </TableBody>
            </Table>
          ) : (
            <p className="text-sm text-muted-foreground">{t('contactsCard.empty')}</p>
          )}
        </CardContent>
      </Card>

      <LinkContactDialog
        supplierId={supplierId}
        isOpen={isLinkDialogOpen}
        onOpenChange={setIsLinkDialogOpen}
        t={t}
        onLinkSuccess={handleLinkSuccess}
      />
    </>
  );
}

// =================== FILE: src/app/[locale]/(app)/finances/suppliers/[supplierId]/_components/tabs/ExpensesTabContent.tsx ===================

// src/app/[locale]/(app)/finances/suppliers/[supplierId]/_components/tabs/ExpensesTabContent.tsx
"use client";

import { useState, useTransition } from 'react'; // ✅ Afegim useState i useTransition
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Expense } from '@/types/finances';
import {
  PlusCircle, CreditCard, Link2 as LinkIcon, // ✅ Canviem nom Link2
  Trash2, Loader2 // ✅ Afegim icones
} from 'lucide-react';
import {
  type ExpenseForSupplier,
  unlinkExpenseFromSupplier, // ✅ Importem unlink
  // Si has creat el tipus Expense complet, importa'l també

} from '@/app/[locale]/(app)/finances/expenses/actions';

import { formatDate, formatCurrency } from '@/lib/utils/formatters';
import { StatusBadge } from '@/components/shared/StatusBadge';
import { LinkExpenseDialog } from '../LinkExpenseDialog'; // ✅ Importem el nou diàleg
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog"; // ✅ Importem Alert Dialog
import { toast } from 'sonner';

interface ExpensesTabContentProps {
  expenses: ExpenseForSupplier[];
  supplierId: string;
  t: (key: string) => string;
}

export function ExpensesTabContent({ expenses: initialExpensesProp, supplierId, t }: ExpensesTabContentProps) {
  const router = useRouter();

  // ✅ Gestionem l'estat localment
  const [expenses, setExpenses] = useState(initialExpensesProp || []);
  const [isLinkDialogOpen, setIsLinkDialogOpen] = useState(false);
  const [isUnlinking, startUnlinkTransition] = useTransition();

  // ✅ Funció per afegir una despesa vinculada a l'estat
  const handleLinkSuccess = (newlyLinkedExpense: Expense) => {
    // Adaptem el tipus complet 'Expense' al tipus 'ExpenseForSupplier' necessari per la taula
    setExpenses(prevExpenses => [
      ...prevExpenses,
      {
        id: newlyLinkedExpense.id,
        expense_date: newlyLinkedExpense.expense_date,
        description: newlyLinkedExpense.description,
        total_amount: newlyLinkedExpense.total_amount,
        status: newlyLinkedExpense.status, // Assegura't que 'status' existeix a 'Expense'
      } as ExpenseForSupplier
    ].sort((a, b) => new Date(b.expense_date || 0).getTime() - new Date(a.expense_date || 0).getTime())); // Reordenem per data
  };

  // ✅ Funció per gestionar la desvinculació
  const handleUnlink = (expenseId: number) => {
    startUnlinkTransition(async () => {
      const result = await unlinkExpenseFromSupplier(expenseId, supplierId);
      if (result.success) {
        toast.success(result.message);
        setExpenses(prev => prev.filter(e => e.id !== expenseId));
      } else {
        toast.error(result.message || "Error en desvincular.");
      }
    });
  };

  return (
    <>
      <Card>
        <CardHeader className="flex flex-row items-center justify-between">
          <div>
            <CardTitle className="flex items-center gap-2"><CreditCard className="h-5 w-5" />{t('expensesCard.title')}</CardTitle>
            <CardDescription>{t('expensesCard.description')}</CardDescription>
          </div>
          <div className="flex gap-2">
            {/* ✅ Botó per VINCULAR existent */}
            <Button
              variant="outline"
              size="sm"
              onClick={() => setIsLinkDialogOpen(true)}
            >
              <LinkIcon className="h-4 w-4 mr-2" />
              {t('expensesCard.linkButton')}
            </Button>

            {/* Botó per CREAR nou */}
            <Button
              variant="default"
              size="sm"
              onClick={() => router.push(`/finances/expenses/new?supplierId=${supplierId}`)}
            >
              <PlusCircle className="h-4 w-4 mr-2" />
              {t('expensesCard.newButton')}
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          {expenses.length > 0 ? (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>{t('expensesCard.table.date')}</TableHead>
                  <TableHead>{t('expensesCard.table.description')}</TableHead>
                  <TableHead className="text-right">{t('expensesCard.table.amount')}</TableHead>
                  <TableHead>{t('expensesCard.table.status')}</TableHead>
                  <TableHead className="w-[50px]"> {/* Columna Accions */}
                    <span className="sr-only">Accions</span>
                  </TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {expenses.map((expense) => (
                  <TableRow key={expense.id}>
                    <TableCell>{formatDate(expense.expense_date)}</TableCell>
                    <TableCell>
                      {/* ✅ MILLORA NAVEGACIÓ: Afegim el paràmetre 'from' */}
                      <Link
                        href={`/finances/expenses/${expense.id}?from=/finances/suppliers/${supplierId}`}
                        className="hover:underline"
                      >
                        {expense.description || `Despesa #${expense.id}`}
                      </Link>
                    </TableCell>
                    <TableCell className="text-right">{formatCurrency(expense.total_amount)}</TableCell>
                    <TableCell><StatusBadge status={expense.status} /></TableCell>

                    {/* ✅ NOU: Cel·la d'accions (Desvincular) */}
                    <TableCell>
                      <AlertDialog>
                        <AlertDialogTrigger asChild>
                          <Button
                            variant="ghost"
                            size="icon"
                            className="h-8 w-8 text-muted-foreground hover:text-destructive"
                            disabled={isUnlinking}
                          >
                            <span className="sr-only">Desvincular despesa</span>
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </AlertDialogTrigger>
                        <AlertDialogContent>
                          <AlertDialogHeader>
                            <AlertDialogTitle>{t('expensesCard.unlinkDialog.title')}</AlertDialogTitle>
                            <AlertDialogDescription>
                              {/* ✅ SOLUCIÓ: Passem la variable 'expenseDesc' a t() */}
                              {t('expensesCard.unlinkDialog.description') + ' ' + (expense.description || `Despesa #${expense.id}`)}
                            </AlertDialogDescription>
                          </AlertDialogHeader>
                          <AlertDialogFooter>
                            <AlertDialogCancel disabled={isUnlinking}>Cancel·lar</AlertDialogCancel>
                            <AlertDialogAction
                              className="bg-destructive hover:bg-destructive/90"
                              onClick={() => handleUnlink(expense.id)}
                              disabled={isUnlinking}
                            >
                              {isUnlinking ? <Loader2 className="h-4 w-4 animate-spin" /> : "Desvincular"}
                            </AlertDialogAction>
                          </AlertDialogFooter>
                        </AlertDialogContent>
                      </AlertDialog>
                    </TableCell>

                  </TableRow>
                ))}
              </TableBody>
            </Table>
          ) : (
            <p className="text-sm text-muted-foreground">{t('expensesCard.empty')}</p>
          )}
        </CardContent>
      </Card>

      {/* ✅ Afegim el component de diàleg (controlat) */}
      <LinkExpenseDialog
        supplierId={supplierId}
        isOpen={isLinkDialogOpen}
        onOpenChange={setIsLinkDialogOpen}
        onLinkSuccess={handleLinkSuccess}
        t={t}
      />
    </>
  );
}

// =================== FILE: src/app/[locale]/(app)/finances/suppliers/[supplierId]/_components/tabs/RelateDataTabs.tsx ===================

"use client";

import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Users, CreditCard, Inbox } from 'lucide-react';

// Importa els tipus de dades
import { type ContactForSupplier } from '@/app/[locale]/(app)/crm/contactes/actions';
import { type ExpenseForSupplier } from '@/app/[locale]/(app)/finances/expenses/actions';
import { type TicketForSupplier } from '@/app/[locale]/(app)/comunicacio/inbox/actions';

// Importa els components de contingut de cada pestanya
import { ContactsTabContent } from './ContactsTabContent';
import { ExpensesTabContent } from './ExpensesTabContent';
import { TicketsTabContent } from './TicketsTabContent';

interface RelatedDataTabsProps {
  contacts: ContactForSupplier[];
  expenses: ExpenseForSupplier[];
  tickets: TicketForSupplier[];
  supplierId: string | null; // ID per als botons "Nou"
  supplierEmail: string | null | undefined; // Email per al botó "Cercar Inbox"
  t: (key: string) => string; // Tipus de la funció de traducció (ajusta'l segons next-intl)
}

export function RelatedDataTabs({
  contacts,
  expenses,
  tickets,
  supplierId,
  supplierEmail,
  t
}: RelatedDataTabsProps) {

  // Assegura't que supplierId no sigui null abans de passar-lo als fills
  const validSupplierId = supplierId ?? ''; 

  return (
    <Tabs defaultValue="contacts" className="w-full">
      <TabsList className="grid w-full grid-cols-3 mb-4">
        <TabsTrigger value="contacts">
          <Users className="h-4 w-4 mr-2"/> {t('contactsCard.title')} ({contacts.length})
        </TabsTrigger>
        <TabsTrigger value="expenses">
          <CreditCard className="h-4 w-4 mr-2"/> {t('expensesCard.title')} ({expenses.length})
        </TabsTrigger>
        <TabsTrigger value="tickets">
          <Inbox className="h-4 w-4 mr-2"/> {t('ticketsCard.title')} ({tickets.length})
        </TabsTrigger>
      </TabsList>

      <TabsContent value="contacts">
        <ContactsTabContent 
            contacts={contacts} 
            supplierId={validSupplierId} 
            t={t} 
        />
      </TabsContent>

      <TabsContent value="expenses">
        <ExpensesTabContent 
            expenses={expenses} 
            supplierId={validSupplierId} 
            t={t} 
        />
      </TabsContent>

      <TabsContent value="tickets">
        <TicketsTabContent 
            tickets={tickets} 
            supplierEmail={supplierEmail} 
            t={t} 
        />
      </TabsContent>
    </Tabs>
  );
}

// =================== FILE: src/app/[locale]/(app)/finances/suppliers/[supplierId]/_components/tabs/TicketsTabContent.tsx ===================

"use client";

import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Search, Inbox } from 'lucide-react';
import { type TicketForSupplier } from '@/app/[locale]/(app)/comunicacio/inbox/actions';
import { formatDate } from '@/lib/utils/formatters';
import { StatusBadge } from '@/components/shared/StatusBadge';

interface TicketsTabContentProps {
  tickets: TicketForSupplier[];
  supplierEmail: string | null | undefined;
  t: (key: string) => string;
}

export function TicketsTabContent({ tickets, supplierEmail, t }: TicketsTabContentProps) {
  const router = useRouter();

  return (
    <Card>
      <CardHeader className="flex flex-row items-center justify-between">
        <div>
          <CardTitle className="flex items-center gap-2"><Inbox className="h-5 w-5" />{t('ticketsCard.title')}</CardTitle>
          <CardDescription>{t('ticketsCard.description')}</CardDescription>
        </div>
        {supplierEmail && (
          <Button 
            variant="outline" 
            size="sm" 
            onClick={() => router.push(`/comunicacio/inbox?search=${encodeURIComponent(supplierEmail)}`)}
          >
            <Search className="h-4 w-4 mr-2" />
            {t('ticketsCard.searchInboxButton')}
          </Button>
        )}
      </CardHeader>
      <CardContent>
        {tickets.length > 0 ? (
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>{t('ticketsCard.table.subject')}</TableHead>
                <TableHead>{t('ticketsCard.table.lastActivity')}</TableHead>
                <TableHead>{t('ticketsCard.table.status')}</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {tickets.map((ticket) => (
                <TableRow key={ticket.id}>
                  <TableCell>
                    {ticket.subject || t('ticketsCard.noSubject')}
                  </TableCell>
                  {/* ✅ CORRECCIÓ: Utilitzem 'sent_at' i mantenim el control de nuls. */}
                  <TableCell>
                    {ticket.sent_at 
                      ? formatDate(ticket.sent_at, "true") 
                      : 'N/A'}
                  </TableCell>
                  <TableCell><StatusBadge status={ticket.status} /></TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        ) : (
          <p className="text-sm text-muted-foreground">{t('ticketsCard.empty')}</p>
        )}
      </CardContent>
    </Card>
  );
}

// =================== FILE: src/app/[locale]/(app)/finances/suppliers/[supplierId]/_hooks/useSupplierForm.ts ===================

"use client";

import { useState, useTransition } from 'react';
import { useRouter } from 'next/navigation';
import { useTranslations } from 'next-intl';
import { toast } from 'sonner';
import { type z } from 'zod';

import { type Supplier } from '@/types/finances/suppliers';
import { type SupplierFormData, saveSupplierAction } from '../../actions';
// Assumeix que tens 'schemas.ts' a '../../schemas'
import { type supplierFormSchema } from '../../schemas';

type SupplierFormValues = z.infer<typeof supplierFormSchema>;

interface UseSupplierFormProps {
  initialData: Supplier | null;
  supplierId: string | null;
}

const defaultValues: SupplierFormData = { nom: '', nif: null, email: null, telefon: null };

export function useSupplierForm({ initialData, supplierId }: UseSupplierFormProps) {
  const t = useTranslations('SupplierDetailPage');
  const router = useRouter();
  const [isPending, startTransition] = useTransition();
  const [formData, setFormData] = useState<SupplierFormData>(
    initialData
      ? {
        nom: initialData.nom ?? '',
        nif: initialData.nif ?? null,
        email: initialData.email ?? null,
        telefon: initialData.telefon ?? null,
      }
      : defaultValues
  );
  const [errors, setErrors] = useState<Partial<Record<keyof SupplierFormValues, string>>>({});

  const handleFieldChange = (field: keyof SupplierFormData, value: string | null) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (errors[field as keyof SupplierFormValues]) {
      setErrors(prev => ({ ...prev, [field]: undefined }));
    }
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setErrors({});
    if (!formData.nom || formData.nom.length < 2) {
      setErrors({ nom: t('validation.nameRequired') });
      return;
    }

    startTransition(async () => {
      const result = await saveSupplierAction(formData, supplierId);
      if (result.success) {
        toast.success(result.message);

        // ✅ LÒGICA DE REDIRECCIÓ CORREGIDA
        if (supplierId === null && result.data?.id) {
          // Si estàvem CREANT ('supplierId' era null) i tenim un nou ID:
          // REPLACEM '/new' amb '/[id]' a l'historial.
          router.replace(`/finances/suppliers/${result.data.id}`);
          // Opcionalment, podríem fer un refresh addicional si calgués
          // router.refresh(); // Potser no és necessari amb replace
        } else if (supplierId !== null) {
          // Si estàvem EDITANT ('supplierId' NO era null):
          // Només refresquem les dades de la pàgina actual.
          router.refresh();
        }
        // Si no hi ha ID (error?), no fem res o mostrem error.

      } else {
        toast.error(result.message || t('toast.saveError'));
      }
    });
  };

  return { isPending, formData, errors, handleFieldChange, handleSubmit, t };
}


// =================== FILE: src/app/[locale]/(app)/finances/suppliers/_components/SuppliersClient.tsx ===================

"use client";

import { useTranslations } from 'next-intl';
import { PlusCircle } from 'lucide-react';
import { useRouter } from 'next/navigation';

// ✅ SOLUCIÓ 1: Importem ColumnDef directament des del teu component genèric
import { GenericDataTable, type ColumnDef } from '@/components/shared/GenericDataTable';

import { type Supplier } from '@/types/finances/suppliers';
import { type PaginatedSuppliersResponse } from '../actions';
import { useSuppliers } from '../_hooks/useSuppliers';

import { PageHeader } from '@/components/shared/PageHeader';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { formatDate } from '@/lib/utils/formatters';

interface SuppliersClientProps {
  initialData: PaginatedSuppliersResponse;
}

export function SuppliersClient({ initialData }: SuppliersClientProps) {
  const t = useTranslations('SuppliersPage');
  const tShared = useTranslations('Shared');
  const router = useRouter();

  const {
    page,
    pageSize,
    searchTerm,
    handleSearchChange,
    handlePageChange,
    
    // Props per a GenericDataTable
    isPending,
    handleSortChange,
    sortBy,
    sortOrder,
    deleteItem,
    setDeleteItem,
    handleDelete,
  } = useSuppliers();

  const { data: suppliers, count: totalCount } = initialData;
  const totalPages = Math.ceil(totalCount / pageSize);

  // ✅ SOLUCIÓ 2: Definim les columnes amb la signatura correcta
  // La funció 'cell' rep la 'row' sencera, no un objecte { row }
  const columns: ColumnDef<Supplier>[] = [
    {
      accessorKey: 'nom',
      header: t('table.name'),
      enableSorting: true,
      cell: (row) => ( // 'row' és l'objecte Supplier
        <div className="flex flex-col">
          <span 
            className="font-medium cursor-pointer hover:underline"
            onClick={() => router.push(`/finances/suppliers/${row.id}`)}
          >
            {row.nom}
          </span>
          {row.nif && <span className="text-muted-foreground text-xs">{row.nif}</span>}
        </div>
      ),
    },
    {
      accessorKey: 'email',
      header: t('table.email'),
      enableSorting: true,
      cell: (row) => row.email || '-', // 'cell' és obligatori
    },
    {
      accessorKey: 'telefon',
      header: t('table.phone'),
      enableSorting: false,
      cell: (row) => row.telefon || '-', // 'cell' és obligatori
    },
    {
      accessorKey: 'created_at',
      header: t('table.created'),
      enableSorting: true,
      cell: (row) => formatDate(row.created_at), // 'cell' és obligatori
    },
  ];

  return (
    <div className="flex flex-col gap-6">
      <PageHeader
        title={t('title')}
        description={t('description')}
      >
        <Button onClick={() => router.push('/finances/suppliers/new')}>
          <PlusCircle className="mr-2 h-4 w-4" />
          {t('newButton')}
        </Button>
      </PageHeader>

      <div className="flex flex-col gap-4">
        {/* Filtres */}
        <div className="flex justify-between items-center">
          <Input
            placeholder={t('searchPlaceholder')}
            defaultValue={searchTerm}
            onChange={(e) => handleSearchChange(e.target.value)}
            className="max-w-sm"
          />
        </div>
        
        {/* ✅ SOLUCIÓ 3: Passem TOTES les props requerides a GenericDataTable */}
        <GenericDataTable
          // Dades i Columnes
          columns={columns}
          data={suppliers}
          
          // Estat de Càrrega
          isPending={isPending}
          
          // Ordenació
          onSort={handleSortChange}
          currentSortColumn={sortBy}
          currentSortOrder={sortOrder}
          
          // Paginació (que el component gestiona internament)
          page={page}
          totalPages={totalPages}
          onPageChange={handlePageChange}

          // Eliminació
          onDelete={handleDelete}
          deleteItem={deleteItem}
          setDeleteItem={setDeleteItem}
          deleteTitleKey="deleteDialog.title" // Clau de traducció
          deleteDescription={tShared('deleteDialog.description1')} // Text estàndard
          
          // Estat Buit
          emptyStateMessage={t('emptyState')}
        />
        
        {/* ❌ Eliminem el PaginationBar independent,
            perquè GenericDataTable ja en té un a dins */}
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/finances/suppliers/_components/SuppliersData.tsx ===================

// src/app/[locale]/(app)/finances/suppliers/_components/SuppliersData.tsx
import { fetchPaginatedSuppliers, type SupplierFilters } from '../actions';
import { SuppliersClient } from './SuppliersClient';

// ✅ Definim les props per rebre 'searchParams'
interface SuppliersDataProps {
  searchParams: {
    page?: string;
    pageSize?: string;
    search?: string;
    sortBy?: string;
    sortOrder?: string;
  };
}

// Aquest component és 'async'
export async function SuppliersData({ searchParams }: SuppliersDataProps) {

  // ✅ Parsegem els valors AQUÍ.
  // Com que 'SuppliersData' té una 'key' única i està
  // dins de <Suspense>, Next.js ara ho gestionarà correctament.
  const page = parseInt(searchParams?.page ?? '1', 10);
  const pageSize = parseInt(searchParams?.pageSize ?? '10', 10);
  const search = searchParams?.search;
  const sortBy = searchParams?.sortBy || 'nom';
  const sortOrder = (searchParams?.sortOrder === 'desc' ? 'desc' : 'asc') as 'asc' | 'desc';

  // Reconstruïm l'objecte 'filters'
  const filters: SupplierFilters = {
    searchTerm: search || undefined,
    sortBy,
    sortOrder,
    limit: pageSize,
    offset: (page - 1) * pageSize,
  };

  console.log('SuppliersData (amb key) - Calling action with filters:', filters);

  // Cridem l'acció
  const initialData = await fetchPaginatedSuppliers(filters);

  return (
    <SuppliersClient initialData={initialData} />
  );
}

// =================== FILE: src/app/[locale]/(app)/finances/suppliers/_hooks/useSuppliers.ts ===================

"use client";

import { usePathname, useRouter, useSearchParams } from 'next/navigation';
import { useMemo, useState, useTransition } from 'react';
import { useDebouncedCallback } from 'use-debounce';
import { toast } from 'sonner';
import { useTranslations } from 'next-intl';

import { type Supplier } from '@/types/finances/suppliers';
import { deleteSupplierAction } from '../actions'; // Importem l'acció d'esborrar

const DEFAULT_PAGE_SIZE = 10;

export function useSuppliers() {
  const router = useRouter();
  const pathname = usePathname();
  const searchParams = useSearchParams();
  const t = useTranslations('SuppliersPage.toast'); // Traduccions per als toasts
  
  const [isPending, startTransition] = useTransition();

  // Extreure i parsejar paràmetres de la URL
  const page = parseInt(searchParams.get('page') || '1', 10);
  const pageSize = parseInt(searchParams.get('pageSize') || DEFAULT_PAGE_SIZE.toString(), 10);
  const searchTerm = searchParams.get('search') || '';
  
  // ✅ AFEGIT: Lògica d'ordenació
  const sortBy = searchParams.get('sortBy') || 'nom';
  const sortOrder = (searchParams.get('sortOrder') || 'asc') as 'asc' | 'desc';

  // ✅ AFEGIT: Estat per al diàleg d'eliminació
  const [deleteItem, setDeleteItem] = useState<Supplier | null>(null);

  // Memoitzem els filtres per a la crida a l'API
  const filters = useMemo(() => ({
    searchTerm: searchTerm || undefined,
    sortBy,
    sortOrder,
    limit: pageSize,
    offset: (page - 1) * pageSize,
  }), [searchTerm, sortBy, sortOrder, pageSize, page]);

  // Funció per actualitzar la URL
  const updateQueryParams = (params: Record<string, string | number | undefined | null>) => {
    const current = new URLSearchParams(searchParams.toString());
    Object.entries(params).forEach(([key, value]) => {
      if (value === undefined || value === null || String(value).length === 0) {
        current.delete(key);
      } else {
        current.set(key, String(value));
      }
    });

    // Si canviem un filtre, tornem a la pàgina 1
    if (params.search !== undefined || params.pageSize !== undefined || params.sortBy !== undefined) {
      current.set('page', '1');
    }
    
    // Fem la navegació amb 'startTransition'
    startTransition(() => {
        router.push(`${pathname}?${current.toString()}`);
    });
  };

  // Funció de cerca amb debounce
  const handleSearchChange = useDebouncedCallback((term: string) => {
    updateQueryParams({ search: term });
  }, 300);

  // Funcions per a la paginació
  const handlePageChange = (newPage: number) => {
    updateQueryParams({ page: newPage });
  };
  
  // ✅ AFEGIT: Funció d'ordenació
  const handleSortChange = (newSortBy: string) => {
    const newSortOrder = sortBy === newSortBy && sortOrder === 'asc' ? 'desc' : 'asc';
    updateQueryParams({ sortBy: newSortBy, sortOrder: newSortOrder });
  };
  
  // ✅ AFEGIT: Funció per gestionar l'eliminació
  const handleDelete = () => {
    if (!deleteItem) return;

    startTransition(async () => {
        const result = await deleteSupplierAction(deleteItem.id);
        if (result.success) {
            toast.success(t('deleteSuccess'));
            setDeleteItem(null);
            // No cal 'router.refresh()', la navegació de 'updateQueryParams' ja ho farà
            // si la pàgina es queda buida (tot i que 'revalidatePath' ja ho fa al servidor)
        } else {
            toast.error(result.message || t('deleteError'));
        }
    });
  };

  return {
    page,
    pageSize,
    searchTerm,
    filters,
    handleSearchChange,
    handlePageChange,
    
    // Props per a GenericDataTable
    isPending,
    handleSortChange,
    sortBy,
    sortOrder,
    deleteItem,
    setDeleteItem,
    handleDelete,
  };
}

// =================== FILE: src/app/[locale]/(app)/layout.tsx ===================

import { ReactNode } from 'react';
import { NextIntlClientProvider } from 'next-intl';
import { getMessages } from 'next-intl/server';
import { AppClientLayout } from './_components/AppClientLayout';

// ✅ CORRECCIÓ 1: Definim el tipus de les propietats
// indicant que 'params' pot ser una promesa.
interface AppLayoutProps {
  children: ReactNode;
  params: Promise<{ locale: string }>;
};

/**
 * @summary Layout de servidor que embolcalla la part principal de l'aplicació.
 */
export default async function AppLayout(props: AppLayoutProps) {
  // ✅ CORRECCIÓ 2: Fem 'await' per resoldre la promesa i obtenir els paràmetres.
  const { locale } = await props.params;
  const { children } = props;

  // Carreguem els missatges necessaris per als components de client dins d'aquest layout.
  const messages = await getMessages({ locale });

  return (
    <NextIntlClientProvider locale={locale} messages={messages}>
      <AppClientLayout locale={locale}>{children}</AppClientLayout>
    </NextIntlClientProvider>
  );
}

// =================== FILE: src/app/[locale]/(app)/loading.tsx ===================

import { Loader2 } from "lucide-react";

/**
 * 'loading.tsx' és un arxiu especial de Next.js.
 * El component que s'exporta aquí s'utilitzarà automàticament com a 'fallback'
 * per al component <Suspense> del layout que l'envolta ('app/(app)/layout.tsx').
 * * Això permet mostrar una interfície de càrrega a l'instant mentre Next.js
 * carrega les dades de la nova pàgina al servidor, millorant molt l'experiència
 * d'usuari durant la navegació.
 */
export default function Loading() {
  return (
    <div className="flex h-full w-full items-center justify-center">
      <Loader2 className="h-10 w-10 animate-spin text-primary" />
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/network/actions.ts ===================

"use server";

import { validateUserSession } from "@/lib/supabase/session";


/**
 * Obté les dades detallades d'un sol equip, incloent el nom del propietari,
 * utilitzant dues consultes separades per a més robustesa.
 */
export async function getTeamDetailsAction(teamId: string) {
    if (!teamId) {
        return { success: false, message: "Falta l'ID de l'equip." };
    }

    // ✅ 1. Validem la sessió primer. Això ens dona un client de Supabase segur.
    const session = await validateUserSession();
    if ('error' in session) {
        return { success: false, message: session.error.message };
    }
    const { supabase } = session;

    try {
        // PAS 1: Obtenim les dades principals de l'equip des de la taula 'teams'.
        const { data: teamData, error: teamError } = await supabase
            .from('teams')
            .select('*') // Obtenim totes les columnes de l'equip
            .eq('id', teamId)
            .single();

        if (teamError || !teamData) {
            throw new Error("No s'ha pogut trobar l'equip especificat.");
        }

        // PAS 2: Si l'equip té un propietari, busquem el seu nom a la taula 'profiles'.
        let ownerData = null;
        if (teamData.owner_id) {
            const { data: profileData, error: profileError } = await supabase
                .from('profiles')
                .select('full_name')
                .eq('id', teamData.owner_id)
                .single();

            // Si hi ha un error en trobar el perfil, no fem que tot falli.
            // Simplement, el nom del propietari serà 'null'.
            if (profileError) {
                console.warn(`No s'ha trobat el perfil per a l'owner_id ${teamData.owner_id}:`, profileError.message);
            } else {
                ownerData = { full_name: profileData.full_name };
            }
        }

        // PAS 3: Combinem les dades manualment en l'objecte final.
        const detailedProfile = {
            ...teamData,
            owner: ownerData,
        };

        return { success: true, data: detailedProfile };

    } catch (error: unknown) {
        const message = error instanceof Error ? error.message : "Error desconegut en obtenir les dades.";
        console.error("Error a getTeamDetailsAction:", message);
        return { success: false, message };
    }
}

// =================== FILE: src/app/[locale]/(app)/network/loading.tsx ===================

"use client";

/**
 * @summary Esquelet de càrrega per a la pàgina de Network.
 */
export default function Loading() {
  return (
    <div className="h-full grid grid-cols-1 lg:grid-cols-3 gap-8 animate-pulse">
      {/* Esquelet de la llista de perfils */}
      <div className="lg:col-span-1 h-full bg-gray-800/50 rounded-lg p-4 space-y-4 overflow-y-hidden">
        {[...Array(5)].map((_, i) => (
          <div key={i} className="flex items-center gap-4">
            <div className="w-12 h-12 bg-gray-700/50 rounded-full shrink-0"></div>
            <div className="flex-1 space-y-2">
              <div className="h-4 w-3/4 bg-gray-700/50 rounded"></div>
              <div className="h-3 w-1/2 bg-gray-700/50 rounded"></div>
            </div>
          </div>
        ))}
      </div>
      {/* Esquelet del mapa */}
      <div className="lg:col-span-2 h-full bg-gray-800/50 rounded-lg"></div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/network/page.tsx ===================

/**
 * @file page.tsx (Network)
 * @summary Punto de entrada de la página, implementando React Suspense.
 */

import { Suspense } from 'react';
import { NetworkData } from './_components/NetworkData';
import { NetworkSkeleton } from './_components/NetworkSkeleton';

// La revalidación cada hora es una buena práctica.
export const revalidate = 3600;

export default function NetworkPage() {
  return (
    <Suspense fallback={<NetworkSkeleton />}>
      <NetworkData />
    </Suspense>
  );
}

// =================== FILE: src/app/[locale]/(app)/network/types.ts ===================

// /app/[locale]/network/types.ts

/**
 * Representa les dades MÍNIMES d'una empresa (team) que es mostren a la llista inicial.
 */
export type PublicProfileListItem = {
  id: string;
  name: string;
  sector: string | null;
  logo_url: string | null;
  latitude: number | null;
  longitude: number | null;
};

/**
* Representa les dades COMPLETES d'una empresa, incloent el nom del propietari.
* Aquestes dades es carreguen quan l'usuari fa clic.
*/
export type PublicProfileDetail = PublicProfileListItem & {
  summary: string | null;
  services: string[] | null;
  website: string | null;
  address: string | null;
  phone: string | null;
  email: string | null;
  owner: {
      full_name: string | null;
  } | null;
};

// =================== FILE: src/app/[locale]/(app)/network/_components/AddressAutocomplete.tsx ===================

/**
 * @file AddressAutocomplete.tsx
 * @summary Aquest fitxer defineix un component de client (`"use client"`) que proporciona un camp de text
 * per a la cerca d'adreces amb funcionalitat d'autocompletat, utilitzant el servei de Mapbox.
 * És reutilitzable en qualsevol formulari que necessiti introduir una adreça.
 */

"use client"; // Directiva de Next.js que marca aquest component per ser executat exclusivament al navegador.
              // És necessari perquè utilitza hooks de React (useState, useEffect) i interactua amb el DOM.

import { ChangeEvent } from 'react';
// Components i tipus específics de la llibreria de cerca de Mapbox per a React.
import { AddressAutofill } from '@mapbox/search-js-react';
import type { MapboxRetrieveResponse, MapboxContext } from '@mapbox/search-js-react';

// Importació d'icones per a la interfície d'usuari.
import { MapPin } from 'lucide-react';
// Importació del nostre tipus personalitzat per a l'objecte d'adreça detallada.
import type { DetailedAddress } from '@/types/shared/index';

/**
 * @interface AddressAutocompleteProps
 * @summary Defineix les propietats (props) que el component AddressAutocomplete espera rebre.
 */
interface AddressAutocompleteProps {
  /** El valor actual del camp de text, controlat pel component pare. */
  value: string;
  /** Funció que s'executa quan el contingut del camp de text canvia. */
  onChange: (e: ChangeEvent<HTMLInputElement>) => void;
  /** Funció callback que s'executa quan l'usuari selecciona una adreça de la llista de suggeriments. */
  onAddressSelect: (address: DetailedAddress) => void;
}

/**
 * @function AddressAutocomplete
 * @summary Component funcional de React que renderitza un input d'autocompletat d'adreces.
 */
export default function AddressAutocomplete({ value, onChange, onAddressSelect }: AddressAutocompleteProps) {
  
  /**
   * @function handleRetrieve
   * @summary Aquesta funció s'activa quan l'usuari selecciona un suggeriment d'adreça de Mapbox.
   * Processa la resposta de l'API per extreure els components individuals de l'adreça.
   * @param {MapboxRetrieveResponse} res - L'objecte de resposta complet de l'API de Mapbox.
   */
  const handleRetrieve = (res: MapboxRetrieveResponse) => { 
    // La resposta pot contenir múltiples resultats ('features'), però normalment ens interessa el primer i més rellevant.
    const feature = res.features[0];
    // Comprovació de seguretat per evitar errors si la resposta no té el format esperat.
    if (!feature?.properties) return;

    // L'objecte 'context' conté informació addicional com la ciutat, el país, la regió, etc.
    const context = feature.properties.context;
    
    /**
     * @function findContext
     * @summary Funció d'ajuda interna per buscar un component específic (com la ciutat o el codi postal)
     * dins de l'array 'context' de la resposta de Mapbox.
     * @param {string} idPrefix - El prefix que identifica el tipus de dada que busquem (ex: 'place', 'postcode').
     * @returns {string} - El nom del component trobat o una cadena buida.
     */
    const findContext = (idPrefix: string): string => {
      if (!context) return '';
      const found = context.find((ctx: MapboxContext) => ctx.id.startsWith(idPrefix));
      return found?.name || '';
    };

    // Extracció de cada part de l'adreça.
    const street = feature.properties.address || '';
    const city = findContext('place');
    const postcode = findContext('postcode');
    const region = findContext('region');
    const country = findContext('country');
    
    // Un cop tenim totes les dades, cridem a la funció 'onAddressSelect' del component pare
    // per passar-li l'objecte d'adreça complet i que pugui actualitzar el seu estat.
    onAddressSelect({ street, city, postcode, region, country, latitude:null, longitude:null });
  };

  // Renderització del component JSX.
  return (
    <div className="space-y-1">
      <label className="block text-sm font-medium text-muted-foreground">Carrer (amb cercador)</label>
      {/* El component `AddressAutofill` de Mapbox és un contenidor que injecta la lògica d'autocompletat
        a l'element <input> que es troba dins seu.
        Requereix un 'accessToken' per funcionar, que llegim de les variables d'entorn.
        La propietat 'onRetrieve' especifica quina funció executar quan es selecciona una adreça.
      */}
      <AddressAutofill accessToken={process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN!} onRetrieve={handleRetrieve}>
        <div className="relative"> {/* Contenidor per posicionar la icona a sobre de l'input. */}
          <MapPin className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
          <input
            id="address-search"
            className="w-full bg-gray-800 border border-gray-600 rounded-md pl-10 pr-4 py-2 focus:ring-2 focus:ring-purple-500 focus:outline-none"
            placeholder="Escriu un carrer i selecciona..."
            autoComplete="address-line1" // Atribut HTML per ajudar els navegadors a autocompletar.
            value={value} // El valor de l'input està controlat des de l'exterior.
            onChange={onChange} // La gestió del canvi també es delega al pare.
          />
        </div>
      </AddressAutofill>
    </div>
  );
}



// =================== FILE: src/app/[locale]/(app)/network/_components/MapContainer.tsx ===================

"use client";

import 'mapbox-gl/dist/mapbox-gl.css';
import { useRef, useEffect } from 'react';
import Map, { Marker, Popup, NavigationControl, MapRef } from 'react-map-gl';
import type { PublicProfileListItem, PublicProfileDetail } from '../types';
import { Building2, Globe, Briefcase, Loader2, Mail, Phone } from 'lucide-react';
import Image from 'next/image';
import { useTranslations } from 'next-intl';

interface MapContainerProps {
  profiles: PublicProfileListItem[];
  selectedProfile: PublicProfileListItem | null;
  onSelectProfile: (profile: PublicProfileListItem | null) => void;
  detailedProfile: PublicProfileDetail | null;
  isLoading: boolean;
}

// ✅ 2. Creem una funció per a formatar l'URL del web
const formatWebsiteUrl = (url: string | null | undefined): string => {
  if (!url) return '';
  if (url.startsWith('http://') || url.startsWith('https://')) {
      return url;
  }
  return `https://${url}`;
};
 
export default function MapContainer({ profiles, selectedProfile, onSelectProfile, detailedProfile, isLoading }: MapContainerProps) {
    const mapRef = useRef<MapRef>(null);
    const t = useTranslations('NetworkPage');
    const mapboxToken = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN;

    useEffect(() => {
        if (selectedProfile && selectedProfile.latitude != null && selectedProfile.longitude != null && mapRef.current) {
            mapRef.current.flyTo({ center: [selectedProfile.longitude, selectedProfile.latitude], zoom: 14, duration: 1500 });
        }
    }, [selectedProfile]);

    if (!mapboxToken) return <div className="w-full h-full flex items-center justify-center bg-gray-800 text-red-400 p-4">{t('mapboxError')}</div>;
    return (
      <Map ref={mapRef} initialViewState={{ longitude: 2.1734, latitude: 41.3851, zoom: 7 }} style={{ width: '100%', height: '100%' }} mapStyle="mapbox://styles/mapbox/dark-v11" mapboxAccessToken={mapboxToken} onDragStart={() => onSelectProfile(null)}>
          <NavigationControl position="top-right" />
          
          {profiles.filter(p => p.latitude != null && p.longitude != null).map((profile) => (
              <Marker key={profile.id} longitude={profile.longitude!} latitude={profile.latitude!} onClick={(e) => { e.originalEvent.stopPropagation(); onSelectProfile(profile); }}>
                  <div className="transform transition-transform duration-200 hover:scale-125">
                      {profile.logo_url ? <Image src={profile.logo_url} alt={t('logoAltText', { companyName: profile.name })} width={32} height={32} className="rounded-full border-2 border-purple-500 object-cover" /> : <div className="w-8 h-8 rounded-full bg-gray-800 border-2 border-purple-500 flex items-center justify-center"><Building2 className="w-4 h-4 text-purple-300" /></div>}
                  </div>
              </Marker>
          ))}
          
          {selectedProfile && selectedProfile.latitude != null && selectedProfile.longitude != null && (
              <Popup longitude={selectedProfile.longitude} latitude={selectedProfile.latitude} onClose={() => onSelectProfile(null)} closeOnClick={false} anchor="bottom" className="popup-dark">
                  {isLoading && <div className="p-4 flex justify-center"><Loader2 className="animate-spin text-white" /></div>}
                  {detailedProfile && !isLoading && (
                      <div className="max-w-xs p-1 text-white space-y-2">
                          <div className="flex items-center gap-3">
                              {detailedProfile.logo_url ? <Image src={detailedProfile.logo_url} alt={`Logo de ${detailedProfile.name}`} width={40} height={40} className="rounded-full object-cover bg-gray-700" /> : <div className="w-10 h-10 rounded-full bg-gray-700 flex items-center justify-center flex-shrink-0"><Building2 className="w-5 h-5 text-gray-400" /></div>}
                              <div>
                                  <h3 className="font-bold">{detailedProfile.name}</h3>
                                  {detailedProfile.owner?.full_name && <p className="text-xs text-gray-400">de {detailedProfile.owner.full_name}</p>}
                              </div>
                          </div>

                          {detailedProfile.summary && <p className="text-sm text-gray-300">{detailedProfile.summary}</p>}
                          
                          {/* ✅ 3. AFEGIM ELS NOUS CAMPS I CORREGIM L'ENLLAÇ */}
                          <div className="text-xs space-y-1 pt-2 border-t border-gray-700">
                              {detailedProfile.phone && (
                                  <a href={`tel:${detailedProfile.phone}`} className="flex items-center gap-2 text-gray-300 hover:text-white">
                                      <Phone className="w-3 h-3" /> {detailedProfile.phone}
                                  </a>
                              )}
                              {detailedProfile.email && (
                                  <a href={`mailto:${detailedProfile.email}`} className="flex items-center gap-2 text-gray-300 hover:text-white">
                                      <Mail className="w-3 h-3" /> {detailedProfile.email}
                                  </a>
                              )}
                              {detailedProfile.website && (
                                  <a href={formatWebsiteUrl(detailedProfile.website)} target="_blank" rel="noopener noreferrer" className="flex items-center gap-2 text-purple-400 hover:underline">
                                      <Globe className="w-3 h-3" /> Visitar web
                                  </a>
                              )}
                          </div>

                          {detailedProfile.services && detailedProfile.services.length > 0 && (
                              <div className="pt-2 border-t border-gray-700">
                                  <h4 className="text-xs font-semibold uppercase text-gray-500 mb-1 flex items-center gap-2"><Briefcase className="w-3 h-3"/> Serveis</h4>
                                  <div className="flex flex-wrap gap-1">
                                      {detailedProfile.services.map((s) => (<span key={s} className="bg-gray-700 text-xs px-2 py-1 rounded-full">{s}</span>))}
                                  </div>
                              </div>
                          )}
                      </div>
                  )}
              </Popup>
          )}
      </Map>
  );
}

// =================== FILE: src/app/[locale]/(app)/network/_components/NetworkClient.tsx ===================

// /app/[locale]/network/_components/NetworkClient.tsx

"use client";

import React, { useState, useMemo, useTransition } from 'react';
import dynamic from 'next/dynamic';
import ProfileList from './ProfileList';
import type { PublicProfileListItem, PublicProfileDetail } from '../types';
import { useTranslations } from 'next-intl';
import { List, Map as MapIcon } from 'lucide-react';
import { cn } from '@/lib/utils/utils';
import { Button } from '@/components/ui/button';
import { getTeamDetailsAction } from '../actions';
import { toast } from 'sonner';

const MapLoadingSkeleton = () => {
    const t = useTranslations('NetworkPage');
    return <div className="w-full h-full bg-muted flex items-center justify-center"><p className="text-muted-foreground">{t('loadingMap')}</p></div>;
};

const DynamicMapContainer = dynamic(() => import('./MapContainer'), { loading: () => <MapLoadingSkeleton />, ssr: false });

export function NetworkClient({ profiles, errorMessage }: {
    profiles: PublicProfileListItem[];
    errorMessage?: string;
}) {
    const [selectedProfile, setSelectedProfile] = useState<PublicProfileListItem | null>(null);
    const [detailedProfile, setDetailedProfile] = useState<PublicProfileDetail | null>(null);
    const [isDetailsLoading, startDetailsTransition] = useTransition();
    const [searchTerm, setSearchTerm] = useState('');
    const [viewMode, setViewMode] = useState<'list' | 'map'>('list');
    const t = useTranslations('NetworkPage');

    const filteredProfiles = useMemo(() => {
        if (!searchTerm) return profiles;
        return profiles.filter(p => p.name.toLowerCase().includes(searchTerm.toLowerCase()));
    }, [profiles, searchTerm]);

    const handleSelectProfile = (profile: PublicProfileListItem | null) => {
        setSelectedProfile(profile);
        setDetailedProfile(null);

        if (profile) {
            setViewMode('map');
            startDetailsTransition(async () => {
                const result = await getTeamDetailsAction(profile.id);
                if (result.success) {
                    setDetailedProfile(result.data as PublicProfileDetail);
                } else {
                    toast.error("Error en carregar els detalls", { description: result.message });
                }
            });
        }
    };

    if (errorMessage) {
        return <div className="p-8 text-destructive text-center">{errorMessage}</div>;
    }

    return (
        <div className="h-screen w-full flex flex-col bg-background">
            <div className="p-2 border-b bg-background/95 backdrop-blur-sm lg:hidden">
                <div className="flex w-full bg-muted p-1 rounded-md">
                    <Button variant={viewMode === 'list' ? 'secondary' : 'ghost'} className="flex-1" onClick={() => setViewMode('list')}>
                        <List className="mr-2 h-5 w-5" /> {t('listView')}
                    </Button>
                    <Button variant={viewMode === 'map' ? 'secondary' : 'ghost'} className="flex-1" onClick={() => setViewMode('map')}>
                        <MapIcon className="mr-2 h-5 w-5" /> {t('mapView')}
                    </Button>
                </div>
            </div>
            <div className="flex-1 flex lg:grid lg:grid-cols-3 lg:gap-8 lg:p-4 min-h-0">
                <div className={cn("lg:flex lg:flex-col", viewMode === 'list' ? 'flex' : 'hidden')}>
                    <ProfileList
                        profiles={filteredProfiles}
                        searchTerm={searchTerm}
                        onSearchChange={setSearchTerm}
                        onSelectProfile={handleSelectProfile}
                        selectedProfileId={selectedProfile?.id}
                    />
                </div>
                <div className={cn("lg:col-span-2 lg:block rounded-lg overflow-hidden", viewMode === 'map' ? 'block h-full w-full' : 'hidden')}>
                    <DynamicMapContainer
                        profiles={filteredProfiles}
                        selectedProfile={selectedProfile}
                        onSelectProfile={handleSelectProfile}
                        detailedProfile={detailedProfile}
                        isLoading={isDetailsLoading}
                    />
                </div>
            </div>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/network/_components/NetworkData.tsx ===================

// /app/[locale]/network/_components/NetworkData.tsx

import { createClient } from '@/lib/supabase/server';
import { NetworkClient } from './NetworkClient';
import { getTranslations } from 'next-intl/server';
import type { PublicProfileListItem } from '../types';

export async function NetworkData() {
    const t = await getTranslations('NetworkPage');
    const supabase = createClient();

    // Consulta simple per a la llista inicial. Només les dades bàsiques.
    const { data, error } = await supabase
        .from('teams')
        .select(`
            id,
            name,
            sector,
            logo_url,
            latitude,
            longitude
        `);

    if (error) {
        console.error('Error al carregar la llista de perfils:', error.message);
        return <NetworkClient profiles={[]} errorMessage={t('errorLoading')} />;
    }

    const profiles = (data as PublicProfileListItem[]) || [];

    return <NetworkClient profiles={profiles} />;
}

// =================== FILE: src/app/[locale]/(app)/network/_components/NetworkSkeleton.tsx ===================

/**
 * @file NetworkSkeleton.tsx
 * @summary Muestra un esqueleto de carga para la página de Network.
 */
"use client";

import React from 'react';
import { Skeleton } from '@/components/ui/skeleton';

export const NetworkSkeleton: React.FC = () => (
  <div className="h-full grid grid-cols-1 lg:grid-cols-3 gap-8 animate-pulse">
    {/* Esqueleto para la lista de perfiles */}
    <div className="lg:col-span-1 h-full flex flex-col glass-effect rounded-lg p-4 space-y-4">
      <Skeleton className="h-10 w-full" />
      <Skeleton className="h-24 w-full" />
      <Skeleton className="h-24 w-full" />
      <Skeleton className="h-24 w-full" />
      <Skeleton className="h-24 w-full" />
    </div>
    {/* Esqueleto para el mapa */}
    <div className="lg:col-span-2 h-full rounded-lg overflow-hidden">
      <Skeleton className="w-full h-full" />
    </div>
  </div>
);

// =================== FILE: src/app/[locale]/(app)/network/_components/ProfileCard.tsx ===================

"use client";

import { Building2 } from 'lucide-react';
import type { PublicProfileListItem } from '../types';
import Image from 'next/image';
import { useTranslations } from 'next-intl';
import { cn } from '@/lib/utils/utils';

interface ProfileCardProps {
    profile: PublicProfileListItem;
    isSelected: boolean;
    onClick: () => void;
}

export default function ProfileCard({ profile, isSelected, onClick }: ProfileCardProps) {
    const t = useTranslations('NetworkPage');
    return (
        <div onClick={onClick} className={cn('p-4 mb-2 rounded-lg cursor-pointer transition-all duration-200', isSelected ? 'bg-primary/20 ring-2 ring-primary' : 'bg-card hover:bg-muted')}>
            <div className="flex items-center gap-4">
                {profile.logo_url ? (
                    <Image src={profile.logo_url} alt={t('logoAltText', { companyName: profile.name })} width={48} height={48} className="rounded-full object-cover bg-muted" />
                ) : (
                    <div className="w-12 h-12 rounded-full bg-muted flex items-center justify-center flex-shrink-0">
                        <Building2 className="w-6 h-6 text-gray-400" />
                    </div>
                )}
                <div className="min-w-0">
                    <h3 className="font-bold truncate">{profile.name}</h3>
                    {profile.sector && <p className="text-sm text-primary font-medium truncate">{profile.sector}</p>}
                </div>
            </div>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/network/_components/ProfileList.tsx ===================

"use client";

import { Search } from 'lucide-react';
import type { PublicProfileListItem } from '../types';
import ProfileCard from './ProfileCard';
import { useTranslations } from 'next-intl';

interface ProfileListProps {
    profiles: PublicProfileListItem[];
    searchTerm: string;
    onSearchChange: (term: string) => void;
    onSelectProfile: (profile: PublicProfileListItem) => void;
    selectedProfileId?: string;
}

export default function ProfileList({ profiles, searchTerm, onSearchChange, onSelectProfile, selectedProfileId }: ProfileListProps) {
    const t = useTranslations('NetworkPage');
    return (
        <div className="flex flex-col h-full glass-effect rounded-lg">
            <div className="p-4 border-b border-border flex-shrink-0">
                <h2 className="text-xl font-bold mb-4">{t('networkTitle')}</h2>
                <div className="relative">
                    <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
                    <input type="text" placeholder={t('searchPlaceholder')} value={searchTerm} onChange={(e) => onSearchChange(e.target.value)} className="w-full bg-background border border-border rounded-md pl-10 pr-4 py-2 focus:ring-2 focus:ring-primary focus:outline-none" />
                </div>
            </div>
            <div className="flex-1 overflow-y-auto custom-scrollbar p-2">
                {profiles.length > 0 ? (
                    profiles.map(profile => (
                        <ProfileCard key={profile.id} profile={profile} isSelected={profile.id === selectedProfileId} onClick={() => onSelectProfile(profile)} />
                    ))
                ) : (
                    <p className="text-center text-muted-foreground p-4">{t('noResults')}</p>
                )}
            </div>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/projectStrocture/actions.ts ===================

/**
 * @file actions.ts (Project Structure)
 * @summary Aquesta Server Action actua com a pont segur entre la nostra aplicació i l'API de GitHub.
 * ✅ NOU: Ara inclou accions per obtenir les branques del repositori i carregar l'estructura
 * d'una branca específica. S'ha eliminat la lògica de desar posicions.
 */

"use server";

// --- Tipus de Dades ---
export interface FileTreeNode { path: string; type: 'tree' | 'blob'; }
interface StructureActionResult { data: FileTreeNode[] | null; error: string | null; }
interface ContentActionResult { data: string | null; error: string | null; }
interface Branch { name: string; }
interface BranchesActionResult { data: string[] | null; error: string | null; }

// --- Configuració de l'API de GitHub ---
const GITHUB_TOKEN = process.env.GITHUB_PAT;
const REPO_OWNER = process.env.NEXT_PUBLIC_GITHUB_REPO_OWNER;
const REPO_NAME = process.env.NEXT_PUBLIC_GITHUB_REPO_NAME;
// ✅ CORRECCIÓ: Definim la branca principal com a valor per defecte.
const MAIN_BRANCH = 'main'; 

/**
 * @summary Server Action per obtenir la llista de branques del repositori.
 */
export async function fetchBranchesAction(): Promise<BranchesActionResult> {
    if (!GITHUB_TOKEN || !REPO_OWNER || !REPO_NAME) {
        return { data: null, error: "La configuració de l'API de GitHub no està completa." };
    }
    const apiUrl = `https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/branches`;
    try {
        const response = await fetch(apiUrl, {
            headers: { Authorization: `Bearer ${GITHUB_TOKEN}`, 'X-GitHub-Api-Version': '2022-11-28' },
            next: { revalidate: 3600, tags: ['github-repo-branches'] },
        });
        if (!response.ok) throw new Error(`Error de l'API de GitHub: ${(await response.json()).message}`);
        const data: Branch[] = await response.json();
        return { data: data.map(branch => branch.name), error: null };
    } catch (error: unknown) { // ✅ CORRECCIÓN: Tipamos el error como 'unknown'
        // Comprobamos si el error es una instancia de Error para acceder a .message de forma segura
        const message = error instanceof Error ? error.message : "Un error desconegut ha ocorregut.";
        return { data: null, error: message };
    }
}

/**
 * @summary Obté l'estructura de fitxers d'una branca específica.
 * ✅ CORRECCIÓ: Afegim un valor per defecte al paràmetre 'branch' per evitar l'error.
 */
export async function fetchProjectStructureAction(branch: string = MAIN_BRANCH): Promise<StructureActionResult> {
  if (!GITHUB_TOKEN || !REPO_OWNER || !REPO_NAME) {
    return { data: null, error: "La configuració de l'API de GitHub no està completa." };
  }
  const apiUrl = `https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/git/trees/${branch}?recursive=1`;
  try {
    const response = await fetch(apiUrl, {
      headers: { Authorization: `Bearer ${GITHUB_TOKEN}`, 'X-GitHub-Api-Version': '2022-11-28' },
      next: { revalidate: 3600, tags: [`github-repo-structure-${branch}`] },
    });
    if (!response.ok) throw new Error(`Error de l'API de GitHub: ${(await response.json()).message}`);
    const data = await response.json();
    const filteredTree = (data.tree as FileTreeNode[]).filter(node => 
        !node.path.includes('node_modules') && !node.path.includes('.next') && !node.path.includes('.vscode') &&
        !node.path.includes('.DS_Store') && !node.path.includes('package-lock.json') && !node.path.endsWith('.md')
    );
    return { data: filteredTree, error: null };
} catch (error: unknown) { // ✅ CORRECCIÓN: Tipamos el error como 'unknown'
    const message = error instanceof Error ? error.message : "Un error desconegut ha ocorregut.";
    return { data: null, error: message };
}
}

/**
 * @summary Obté el contingut d'un fitxer específic.
 */
export async function fetchFileContentAction(filePath: string): Promise<ContentActionResult> {
    if (!GITHUB_TOKEN || !REPO_OWNER || !REPO_NAME) {
        return { data: null, error: "La configuració de l'API de GitHub no està completa." };
    }
    // ✅ CORRECCIÓ: Afegim una referència a la branca per a més precisió.
    const apiUrl = `https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/contents/${filePath}`;
    try {
        const response = await fetch(apiUrl, {
            headers: { Authorization: `Bearer ${GITHUB_TOKEN}`, 'X-GitHub-Api-Version': '2022-11-28' },
            next: { revalidate: 3600 },
        });
        if (!response.ok) throw new Error(`Error de l'API de GitHub: ${(await response.json()).message}`);
        const data = await response.json();
        
        const content = Buffer.from(data.content, 'base64').toString('utf-8');
        return { data: content, error: null };

    } catch (error: unknown) { // ✅ CORRECCIÓN: Tipamos el error como 'unknown'
        const message = error instanceof Error ? error.message : "Un error desconegut ha ocorregut.";
        return { data: null, error: message };
    }
}



// =================== FILE: src/app/[locale]/(app)/projectStrocture/page.tsx ===================

/**
 * @file page.tsx (Project Structure)
 * @summary Component de Servidor per a la pàgina de l'Arquitectura del Projecte.
 * ✅ VERSIÓ SIMPLIFICADA: Ara només renderitza el component de client, sense carregar posicions.
 */


import { ArchitectureVisualizer } from './_components/ArchitectureVisualizer';
import type { Metadata } from 'next';

export const metadata: Metadata = {
  title: 'Arquitectura del Projecte | Ribot',
};

// Ja no necessitem carregar cap dada aquí, tota la lògica es mou al client.
export default async function ProjectStructurePage() {
  return (
    <div className="h-full w-full p-4">
        <ArchitectureVisualizer />
    </div>
  );
}



// =================== FILE: src/app/[locale]/(app)/projectStrocture/_components/ArchitectureVisualizer.tsx ===================

/**
 * @file ArchitectureVisualizer.tsx
 * @summary Component de client que renderitza el diagrama interactiu de l'arquitectura.
 * ✅ VERSIÓ FINAL: Inclou disseny horitzontal, selector de branques, nodes personalitzats amb colors,
 * cerca, carpetes plegables i visualitzador de codi.
 */

"use client";

import React, { useState, useEffect, useCallback, useTransition, FC } from 'react';
import ReactFlow, { 
    Controls, Background, applyNodeChanges, applyEdgeChanges, Handle, Position, addEdge,
    type Node, type Edge, type OnNodesChange, type OnEdgesChange, type NodeProps, type Connection,
} from 'reactflow';
import 'reactflow/dist/style.css';
import Editor from 'react-simple-code-editor';
import { highlight, languages } from 'prismjs/components/prism-core';
import 'prismjs/components/prism-clike';
import 'prismjs/components/prism-javascript';
import 'prismjs/components/prism-typescript';
import 'prismjs/components/prism-markup';
import 'prismjs/components/prism-jsx';
import 'prismjs/components/prism-tsx';

import { fetchProjectStructureAction, fetchFileContentAction, fetchBranchesAction, type FileTreeNode } from '../actions';
import { Loader2, File, Folder, Database, Server, Component, Settings, FileCode, X, Search, Expand, Shrink, GitBranch } from 'lucide-react';
import { cn } from '@/lib/utils/utils';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

// --- Tipus de Dades ---
type CustomNodeData = { label: string; type: string; path: string; nodeType: 'tree' | 'blob'; isCollapsed?: boolean; isDimmed?: boolean; };
type CustomNode = Node<CustomNodeData>;

// --- Components de Nodes Personalitzats ---
const nodeIcons: Record<string, React.ElementType> = {
    root: Server, folder: Folder, supabaseFn: Database, serverAction: Server,
    serverPage: FileCode, clientComponent: Component, layout: FileCode,
    config: Settings, default: File,
};
const nodeColors: Record<string, string> = {
    root: 'bg-purple-600 border-purple-400', folder: 'bg-blue-600 border-blue-400',
    supabaseFn: 'bg-green-600 border-green-400', serverAction: 'bg-orange-600 border-orange-400',
    serverPage: 'bg-indigo-600 border-indigo-400', clientComponent: 'bg-pink-600 border-pink-400',
    layout: 'bg-rose-600 border-rose-400', config: 'bg-gray-500 border-gray-300',
    default: 'bg-gray-700 border-gray-500',
};

const CustomNodeComponent: FC<NodeProps<CustomNodeData>> = ({ data }) => {
    const Icon = nodeIcons[data.type] || (data.nodeType === 'tree' ? Folder : File);
    const colors = nodeColors[data.type] || nodeColors.default;
    return (
        <div className={cn("rounded-lg p-4 text-white font-sans shadow-lg flex items-center gap-4 border-2 min-w-[240px] transition-opacity", colors, data.isDimmed && "opacity-30")}>
            <Handle type="target" position={Position.Left} className="!bg-gray-400 opacity-50" />
            <Icon className="w-6 h-6 flex-shrink-0" />
            <div className="flex-grow">
                <div className="text-base font-bold">{data.label}</div>
            </div>
            {data.nodeType === 'tree' && (data.isCollapsed ? <Expand className="w-5 h-5" /> : <Shrink className="w-5 h-5" />)}
            <Handle type="source" position={Position.Right} className="!bg-gray-400 opacity-50" />
        </div>
    );
};
const nodeTypes = { custom: CustomNodeComponent };

// --- Funció de Transformació de Dades ---
const transformDataToFlow = (fileTree: FileTreeNode[]): { nodes: CustomNode[], edges: Edge[] } => {
    const nodes: CustomNode[] = [];
    const edges: Edge[] = [];
    const nodeMap = new Map<string, CustomNode>();

    const getNodeType = (path: string): string => {
        if (path.includes('supabase/functions')) return 'supabaseFn';
        if (path.endsWith('actions.ts')) return 'serverAction';
        if (path.endsWith('page.tsx')) return 'serverPage';
        if (path.includes('client.tsx') || path.includes('Client.tsx')) return 'clientComponent';
        if (path.endsWith('layout.tsx')) return 'layout';
        if (path.endsWith('middleware.ts')) return 'config';
        return 'default';
    }

    const rootNode: CustomNode = { id: 'root', data: { label: 'Projecte Ribot', type: 'root', path: '/', nodeType: 'tree' }, position: { x: 0, y: 0 }, type: 'custom' };
    nodes.push(rootNode);
    nodeMap.set('root', rootNode);

    fileTree.forEach(item => {
        const pathParts = item.path.split('/');
        let currentPath = '';
        pathParts.forEach((part, index) => {
            const previousPath = currentPath;
            currentPath = currentPath ? `${currentPath}/${part}` : part;
            if (!nodeMap.has(currentPath)) {
                const isLastPart = index === pathParts.length - 1;
                const newNode: CustomNode = {
                    id: currentPath,
                    data: { label: part, type: isLastPart && item.type === 'blob' ? getNodeType(currentPath) : 'folder', path: currentPath, nodeType: isLastPart ? item.type : 'tree' },
                    position: { x: 0, y: 0 },
                    type: 'custom',
                };
                nodes.push(newNode);
                nodeMap.set(currentPath, newNode);
                const parentNodeId = index === 0 ? 'root' : previousPath;
                edges.push({ id: `e-${parentNodeId}-${currentPath}`, source: parentNodeId, target: currentPath, type: 'smoothstep' });
            }
        });
    });
    
    const levels: Map<number, CustomNode[]> = new Map();
    nodes.forEach(node => {
        const level = node.id === 'root' ? 0 : node.id.split('/').length;
        if (!levels.has(level)) levels.set(level, []);
        levels.get(level)!.push(node);
    });
    levels.forEach((nodesAtLevel, level) => {
        const levelHeight = nodesAtLevel.length * 100;
        nodesAtLevel.forEach((node, index) => {
            node.position = {
                x: level * 350,
                y: index * 100 - (levelHeight / 2)
            };
        });
    });

    return { nodes, edges };
};

// --- Component Principal ---
export function ArchitectureVisualizer() {
    const [allNodes, setAllNodes] = useState<CustomNode[]>([]);
    const [allEdges, setAllEdges] = useState<Edge[]>([]);
    const [nodes, setNodes] = useState<CustomNode[]>([]);
    const [edges, setEdges] = useState<Edge[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [viewingFile, setViewingFile] = useState<{ path: string; content: string } | null>(null);
    const [isCodeLoading, startCodeLoadingTransition] = useTransition();
    const [searchTerm, setSearchTerm] = useState('');
    const [collapsedNodes, setCollapsedNodes] = useState<Record<string, boolean>>({});
    const [branches, setBranches] = useState<string[]>([]);
    const [selectedBranch, setSelectedBranch] = useState<string>('main');

    const onNodesChange: OnNodesChange = useCallback((changes) => setNodes((nds) => applyNodeChanges(changes, nds)), []);
    const onEdgesChange: OnEdgesChange = useCallback((changes) => setEdges((eds) => applyEdgeChanges(changes, eds)), []);
    const onConnect = useCallback((connection: Connection) => setEdges((eds) => addEdge({ ...connection, type: 'smoothstep', animated: true }, eds)), []);

    const handleNodeDoubleClick = useCallback((_: React.MouseEvent, node: CustomNode) => {
        if (node.data.nodeType === 'blob') {
            startCodeLoadingTransition(async () => {
                setViewingFile({ path: node.data.path, content: "Carregant contingut del fitxer..." });
                const result = await fetchFileContentAction(node.data.path);
                setViewingFile({ path: node.data.path, content: result.data || `Error: ${result.error}` });
            });
        }
    }, []);

    const handleNodeClick = useCallback((_: React.MouseEvent, node: CustomNode) => {
        if (node.data.nodeType === 'tree') {
            setCollapsedNodes(prev => ({ ...prev, [node.id]: !prev[node.id] }));
        }
    }, []);

    useEffect(() => {
        const loadStructure = async () => {
            setIsLoading(true);
            const result = await fetchProjectStructureAction(selectedBranch);
            if (result.data) {
                const { nodes: initialNodes, edges: initialEdges } = transformDataToFlow(result.data);
                setAllNodes(initialNodes);
                setAllEdges(initialEdges);
            } else {
                console.error(result.error);
            }
            setIsLoading(false);
        };
        if(selectedBranch) loadStructure();
    }, [selectedBranch]);

    useEffect(() => {
        const loadBranches = async () => {
            const result = await fetchBranchesAction();
            if (result.data) {
                setBranches(result.data);
                if (!result.data.includes('main')) {
                    setSelectedBranch(result.data[0] || '');
                }
            }
        };
        loadBranches();
    }, []);

    useEffect(() => {
        let visibleNodes = [...allNodes];
        if (searchTerm.trim()) {
            const lowerCaseSearch = searchTerm.toLowerCase();
            const matchingNodeIds = new Set<string>();
            allNodes.forEach(n => {
                if (n.data.label.toLowerCase().includes(lowerCaseSearch)) {
                    matchingNodeIds.add(n.id);
                    let parentId = allEdges.find(e => e.target === n.id)?.source;
                    while (parentId) {
                        matchingNodeIds.add(parentId);
                        parentId = allEdges.find(e => e.target === parentId)?.source;
                    }
                }
            });
            visibleNodes = allNodes.map(n => ({...n, data: { ...n.data, isDimmed: !matchingNodeIds.has(n.id) }}));
        } else {
            visibleNodes = allNodes.map(n => ({...n, data: { ...n.data, isDimmed: false }}));
        }

        const hiddenNodeIds = new Set<string>();
        Object.entries(collapsedNodes).forEach(([nodeId, isCollapsed]) => {
            if (isCollapsed) {
                const findDescendants = (id: string) => {
                    allEdges.forEach(edge => {
                        if (edge.source === id) {
                            hiddenNodeIds.add(edge.target);
                            findDescendants(edge.target);
                        }
                    });
                };
                findDescendants(nodeId);
            }
        });
        
        const finalNodes = visibleNodes.map(n => ({ ...n, hidden: hiddenNodeIds.has(n.id), data: {...n.data, isCollapsed: !!collapsedNodes[n.id]} }));
        setNodes(finalNodes);
        setEdges(allEdges.filter(e => !hiddenNodeIds.has(e.source) && !hiddenNodeIds.has(e.target)));

    }, [searchTerm, collapsedNodes, allNodes, allEdges]);

    if (isLoading && nodes.length === 0) {
        return <div className="flex items-center justify-center h-full text-white"><Loader2 className="w-8 h-8 animate-spin" /><p className="ml-4 text-lg">Construint el diagrama des de GitHub...</p></div>;
    }

    return (
        <div className="h-full w-full bg-gray-900 rounded-lg overflow-hidden relative font-sans flex flex-col">
            <div className="absolute top-4 left-4 z-10 text-white bg-black/40 p-3 rounded-lg shadow-lg backdrop-blur-sm flex items-center gap-4">
                <div className="relative">
                    <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400" />
                    <Input placeholder="Cerca un fitxer..." className="pl-9 bg-gray-800/50 border-gray-600" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} />
                </div>
                <div className="flex items-center gap-2">
                    <GitBranch className="w-5 h-5 text-gray-400" />
                    <Select value={selectedBranch} onValueChange={setSelectedBranch} disabled={branches.length === 0}>
                        <SelectTrigger className="w-[180px] bg-gray-800/50 border-gray-600">
                            <SelectValue placeholder="Carregant branques..." />
                        </SelectTrigger>
                        <SelectContent>
                            {branches.map(branch => <SelectItem key={branch} value={branch}>{branch}</SelectItem>)}
                        </SelectContent>
                    </Select>
                </div>
            </div>
            <ReactFlow nodes={nodes} edges={edges} onNodesChange={onNodesChange} onEdgesChange={onEdgesChange} onConnect={onConnect}
                onNodeDoubleClick={handleNodeDoubleClick} onNodeClick={handleNodeClick}
                fitView nodeTypes={nodeTypes} proOptions={{ hideAttribution: true }} className="bg-dots">
                <Controls />
                <Background color="#4B5563" />
            </ReactFlow>

            <Dialog open={!!viewingFile} onOpenChange={(isOpen) => !isOpen && setViewingFile(null)}>
                <DialogContent className="max-w-5xl h-[90vh] flex flex-col bg-gray-900/90 backdrop-blur-sm border-gray-700 text-white">
                    <DialogHeader>
                        <DialogTitle className="flex justify-between items-center font-mono text-lg">{viewingFile?.path}<Button variant="ghost" size="icon" onClick={() => setViewingFile(null)}><X className="w-4 h-4" /></Button></DialogTitle>
                    </DialogHeader>
                    <div className="flex-1 overflow-y-auto bg-[#282c34] rounded-md p-1 editor-container-class">
                        {isCodeLoading && !viewingFile?.content.startsWith('Error') ? (
                           <div className="flex items-center justify-center h-full"><Loader2 className="w-6 h-6 animate-spin"/></div>
                        ) : (
                            <Editor value={viewingFile?.content || ''} onValueChange={() => {}} highlight={(code) => highlight(code, languages.tsx, 'tsx')} padding={16} className="font-mono text-sm" style={{ minHeight: '100%'}}/>
                        )}
                    </div>
                </DialogContent>
            </Dialog>
        </div>
    );
}



// =================== FILE: src/app/[locale]/(app)/redirecting/page.tsx ===================

/**
 * @file page.tsx (Redirecting)
 * @summary Aquest fitxer defineix una pàgina de transició que es mostra a l'usuari
 * després d'accions importants com completar el formulari d'onboarding.
 * La seva funció és assegurar que la sessió del client i del servidor estigui sincronitzada
 * abans de redirigir a l'usuari al seu destí final (normalment el Dashboard).
 */

"use client"; // És un component de client perquè necessita utilitzar hooks (useEffect, useRouter).

import { useEffect } from 'react';
import { useRouter } from 'next/navigation';
import RedirectAnimation from '@/app/[locale]/(app)/_components/ui/redirect-animation';

/**
 * @function RedirectingPage
 * @summary Mostra una animació i gestiona la redirecció.
 */
export default function RedirectingPage() {
  const router = useRouter();

  // Aquest efecte s'executa un sol cop quan el component es munta.
  useEffect(() => {
    // Creem un temporitzador per donar temps a l'animació i assegurar que tot es processi correctament.
    const timer = setTimeout(() => {
      // --- AQUESTA LÒGICA ÉS CRUCIAL ---
      // 1. router.refresh(): Aquesta funció de Next.js força una recàrrega de les dades del servidor
      // sense perdre l'estat del client. És vital per assegurar que el servidor reconeix la nova
      // sessió o l'estat de l'usuari (ex: onboarding completat) abans de la navegació.
      router.refresh(); 

      // 2. router.push('/dashboard'): Un cop la sessió del servidor està actualitzada,
      // naveguem de manera segura a la pàgina principal de l'aplicació.
      router.push('/dashboard');
    }, 3000); // Esperem 3 segons.

    // Funció de neteja: si l'usuari navega fora d'aquesta pàgina abans que passin els 3 segons,
    // el temporitzador es cancel·la per evitar errors.
    return () => clearTimeout(timer);
  }, [router]);

  return (
    // Mostrem una animació per millorar l'experiència de l'usuari durant l'espera.
    <div className="min-h-screen flex items-center justify-center p-4 bg-background">
      <RedirectAnimation />
    </div>
  );
}


// =================== FILE: src/app/[locale]/(app)/settings/billing/actions.ts ===================

"use server";

import { createClient, createAdminClient } from "@/lib/supabase/server";
import { revalidatePath } from "next/cache";
import { validateUserSession } from '@/lib/supabase/session'; // Importem la nova funció

/**
 * Subscriu l'equip actiu de l'usuari a un nou pla.
 * En un entorn real, aquesta funció crearia una sessió de checkout de Stripe.
 * Ara mateix, només crea/actualitza la subscripció a la nostra base de dades.
 */
/**
 * Subscriu l'equip actiu de l'usuari a un nou pla.
 */
export async function subscribeToPlanAction(planId: string) {
    // ✅ 2. Validació centralitzada
    const session = await validateUserSession();
    if ('error' in session) {
        return { success: false, message: session.error.message };
    }
    const { supabase, user, activeTeamId } = session;

    try {
        await supabase
            .from('subscriptions')
            .upsert({
                team_id: activeTeamId,
                plan_id: planId,
                status: 'active',
                current_period_end: new Date(new Date().setMonth(new Date().getMonth() + 1)).toISOString(),
            }, { onConflict: 'team_id' })
            .throwOnError();

        // ✅ PAS CLAU: Actualitzem el token de l'usuari amb el nou pla.
        const supabaseAdmin = createAdminClient();
        await supabaseAdmin.auth.admin.updateUserById(
            user.id,
            { app_metadata: { ...user.app_metadata, active_team_plan: planId } }
        );

    } catch (error) {
        const message = error instanceof Error ? error.message : "Error en subscriure's al pla.";
        return { success: false, message };
    }

    revalidatePath('/settings/billing');
    return { success: true, message: `Subscripció al pla '${planId}' realitzada!` };
}

/**
 * Cancel·la la subscripció de l'equip actiu.
 */
export async function cancelSubscriptionAction() {
    // ✅ 2. Validació centralitzada
    const session = await validateUserSession();
    if ('error' in session) {
        return { success: false, message: session.error.message };
    }
    const { supabase, user, activeTeamId } = session;

    // Per a cancel·lar, necessitem permisos d'administrador de l'equip.
    // Ho gestionarem amb una comprovació de rol.
    const { data: member } = await supabase.from('team_members').select('role').eq('user_id', user.id).eq('team_id', activeTeamId).single();
    if (member?.role !== 'owner') {
        return { success: false, message: "Només el propietari de l'equip pot cancel·lar la subscripció." };
    }

    try {
        await createClient()
            .from('subscriptions')
            .update({ status: 'canceled' })
            .eq('team_id', activeTeamId)
            .throwOnError();

        // ✅ PAS CLAU: Actualitzem també el token de l'usuari per a reflectir la cancel·lació.
        const supabaseAdmin = createAdminClient();
        await supabaseAdmin.auth.admin.updateUserById(
            user.id,
            { app_metadata: { ...user.app_metadata, active_team_plan: 'free' } }
        );


    } catch (error) {
        const message = error instanceof Error ? error.message : "Error en cancel·lar la subscripció.";
        return { success: false, message };
    }

    revalidatePath('/settings/billing');
    return { success: true, message: "Subscripció cancel·lada." };
}

// =================== FILE: src/app/[locale]/(app)/settings/billing/page.tsx ===================

import { Suspense } from 'react';
import type { Metadata } from 'next';
import { getTranslations } from 'next-intl/server';
import { BillingData } from './_components/BillingData';
import { BillingSkeleton } from './_components/BillingSkeleton';
import { createClient } from '@/lib/supabase/server';
import { redirect } from 'next/navigation';
import { hasPermission, PERMISSIONS } from '@/lib/permissions';
import { AccessDenied } from '@/components/shared/AccessDenied';
// ✅ 1. Importem el tipus 'Role' des del fitxer de configuració de permisos.
import { type Role } from '@/lib/permissions.config';

export const dynamic = 'force-dynamic';

interface BillingPageProps {
  params: Promise<{ locale: string }>;
}

export async function generateMetadata(props: BillingPageProps): Promise<Metadata> {
  const { locale } = await props.params;
  const t = await getTranslations({ locale, namespace: 'SettingsPage.billing' });
  return { title: `${t('metaTitle')} | Ribot` };
}

export default async function BillingPage() {
  const supabase = createClient();
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) redirect('/login');

  const activeTeamId = user.app_metadata?.active_team_id;
  if (!activeTeamId) redirect('/settings/team');

  const { data: member } = await supabase
    .from('team_members')
    .select('role')
    .match({ user_id: user.id, team_id: activeTeamId })
    .single();

  // ✅ 2. Fem una asserció de tipus per dir-li a TypeScript que 'member.role' és un 'Role'.
  if (!hasPermission(member?.role as Role, PERMISSIONS.VIEW_BILLING)) {
    return <AccessDenied />;
  }

  return (
    <Suspense fallback={<BillingSkeleton />}>
      <BillingData />
    </Suspense>
  );
}

// =================== FILE: src/app/[locale]/(app)/settings/billing/_components/BillingClient.tsx ===================

"use client";

import { useState, useTransition } from 'react';
import { useRouter } from 'next/navigation'; // ✅ 1. Importem el router
import { motion } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { toast } from 'sonner';
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Check, Gift, Star, Gem, Settings} from 'lucide-react';
import { cn } from '@/lib/utils/utils';
import { useTranslations, useLocale } from 'next-intl';
import { subscribeToPlanAction, cancelSubscriptionAction } from '../actions';
import type { Subscription, Plan } from '@/types/settings';

const PlanIcon = ({ name, className }: { name: string; className?: string }) => {
  switch (name) {
    case 'Gift': return <Gift className={className} />;
    case 'Star': return <Star className={className} />;
    case 'Gem': return <Gem className={className} />;
    case 'Settings': return <Settings className={className} />;
    default: return null;
  }
};

export function BillingClient({ plans, activeSubscription, currentUserRole }: {
  plans: Plan[];
  activeSubscription: Subscription | null;
  currentUserRole: string | null;

}) {
  const t = useTranslations('SettingsPage.billing');
  const locale = useLocale();
  const router = useRouter(); // ✅ 2. Inicialitzem el router
  const [billingCycle, setBillingCycle] = useState<'monthly' | 'yearly'>('monthly');
  const [isPending, startTransition] = useTransition();

  // ✅ Variable de control per a la UI basada en permisos
  const canManageBilling = currentUserRole === 'owner' || currentUserRole === 'admin';

  const currentPlanDetails = plans.find(p => p.isCurrent);
  const handleSelectPlan = (planId: string) => {
    startTransition(async () => {
      const result = await subscribeToPlanAction(planId);
      if (result.success) {
        toast.success(result.message);
        router.refresh(); // ✅ 3. Refresquem les dades de la pàgina
      } else {
        toast.error(result.message);
      }
    });
  };

  const handleCancelSubscription = () => {
    startTransition(async () => {
      const result = await cancelSubscriptionAction();
      if (result.success) {
        toast.success(result.message);
        router.refresh(); // ✅ 3. Refresquem les dades de la pàgina
      } else {
        toast.error(result.message);
      }
    });
  };

  const handleManageBilling = () => { toast.info(t('redirecting'), { description: t('redirectingDesc') }); };



  return (
    <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="space-y-12">
      <div className="flex items-center justify-center space-x-2 sm:space-x-4">
        <Label htmlFor="billing-cycle" className={cn('transition-colors text-sm sm:text-base', billingCycle === 'monthly' ? 'text-foreground font-semibold' : 'text-muted-foreground')}>
          {t('monthlyBilling')}
        </Label>
        <Switch
          id="billing-cycle"
          checked={billingCycle === 'yearly'}
          onCheckedChange={(checked) => setBillingCycle(checked ? 'yearly' : 'monthly')}
        />
        <Label htmlFor="billing-cycle" className={cn('transition-colors text-sm sm:text-base', billingCycle === 'yearly' ? 'text-foreground font-semibold' : 'text-muted-foreground')}>
          {t('yearlyBilling')} <span className="text-primary font-bold">{t('yearlySave')}</span>
        </Label>
      </div>

      {/* ✅ DISSENY ADAPTABLE: afegim 'md:grid-cols-2' per a una millor visualització en tauletes */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 items-stretch">
        {plans.map((plan) => (
          <div
            key={plan.name}
            className={cn(
              "glass-card p-6 rounded-2xl flex flex-col relative border-2 transition-transform duration-300",
              plan.isPopular ? `${plan.colors.border} shadow-lg shadow-primary/20` : "border-transparent",
              plan.isCurrent ? "ring-2 ring-offset-2 ring-offset-background" : "lg:hover:-translate-y-2",
              plan.isCurrent ? plan.colors.border : ""
            )}
          >
            {plan.isPopular && (
              <div className="absolute top-0 -translate-y-1/2 left-1/2 -translate-x-1/2 bg-primary text-primary-foreground px-3 py-1 text-xs font-bold rounded-full tracking-wider">
                {t('mostPopular')}
              </div>
            )}

            <div className="flex-grow flex flex-col">
              <div className="flex items-center gap-3 mb-4">
                <PlanIcon name={plan.iconName} className={cn("w-6 h-6", plan.colors.text)} />
                <h3 className="text-xl font-bold text-foreground">{plan.name}</h3>
              </div>
              <p className="text-muted-foreground text-sm mb-6 flex-grow">{plan.description}</p>
              <div className="mb-2 min-h-[80px]">
                {plan.priceMonthly !== null ? (
                  <>
                    {/* ✅ DISSENY ADAPTABLE: Mida de font adaptable per al preu */}
                    <span className="text-4xl sm:text-5xl font-extrabold text-foreground">
                      €{billingCycle === 'monthly' ? plan.priceMonthly : plan.priceYearly ? Math.round(plan.priceYearly / 12) : 0}
                    </span>
                    <span className="text-muted-foreground text-sm sm:text-base">{t('pricePerMonth')}</span>
                    {billingCycle === 'yearly' && plan.priceYearly && (
                      <p className="text-xs text-muted-foreground mt-1">{t('billedAs', { price: plan.priceYearly })}</p>
                    )}
                  </>
                ) : (
                  <span className="text-3xl sm:text-4xl font-extrabold text-foreground">{t('contactUs')}</span>
                )}
              </div>
              <Button
                onClick={() => handleSelectPlan(plan.id)}
                // ✅ LÒGICA DE PERMISOS: El botó es desactiva si no pot gestionar la facturació
                disabled={plan.isCurrent || isPending || !canManageBilling}
                className={cn("w-full font-bold mt-2 mb-10", /* ... */)}
              >
                {plan.isCurrent ? t('yourCurrentPlan') : t('selectPlan')}
              </Button>
              <ul className="space-y-4 text-sm">
                {plan.features.map((feature, index) => (
                  <li key={index} className="flex items-start">
                    <Check className={cn("w-4 h-4 mr-3 mt-0.5 flex-shrink-0", plan.colors.text)} />
                    <span className="text-foreground/80">{feature}</span>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        ))}
      </div>

      {activeSubscription && activeSubscription.status === 'active' && currentPlanDetails && (
        <div className="max-w-2xl mx-auto">
          <Accordion type="single" collapsible className="w-full">
            <AccordionItem value="item-1" className="glass-card rounded-2xl border px-4 sm:px-6">
              <AccordionTrigger className="hover:no-underline text-left">
                <div className="flex items-center gap-3">
                  <PlanIcon name={currentPlanDetails.iconName} className={cn("w-6 h-6", currentPlanDetails.colors.text)} />
                  <div>
                    <p className="font-bold text-lg">{t('currentPlan', { planName: currentPlanDetails.name })}</p>
                    <p className="text-sm text-muted-foreground">{t('renewsOn', { date: new Date(activeSubscription.current_period_end).toLocaleDateString(locale, { day: 'numeric', month: 'long' }) })}. {t('clickForDetails')}</p>
                  </div>
                </div>
              </AccordionTrigger>
              <AccordionContent>
                <div className="space-y-3 text-sm pt-4">
                  <div className="flex justify-between"><span className="text-muted-foreground">{t('planLabel')}</span><span className="font-semibold">{currentPlanDetails.name}</span></div>
                  <div className="flex justify-between"><span className="text-muted-foreground">{t('statusLabel')}</span><span className="font-semibold text-green-500">{t('statusValue')}</span></div>
                  <div className="flex justify-between"><span className="text-muted-foreground">{t('renewalDateLabel')}</span><span className="font-semibold">{new Date(activeSubscription.current_period_end).toLocaleDateString(locale, { day: 'numeric', month: 'long', year: 'numeric' })}</span></div>
                </div>
                <div className="border-t mt-6 pt-6 flex flex-col sm:flex-row gap-3">
                  <Button className="w-full" onClick={handleManageBilling}>{t('manageButton')}</Button>
                  <Button variant="destructive" className="w-full" onClick={handleCancelSubscription} disabled={isPending}>{t('cancelButton')}</Button>
                </div>
              </AccordionContent>
            </AccordionItem>
          </Accordion>
        </div>
      )}
    </motion.div>
  );
}

// =================== FILE: src/app/[locale]/(app)/settings/billing/_components/BillingData.tsx ===================

import { BillingClient } from './BillingClient';
import { getTranslations } from 'next-intl/server';
import type { Subscription, Plan } from '@/types/settings';
import { validatePageSession } from '@/lib/supabase/session'; // ✅ 1. Importem l'assistent de sessió

const plansStructure = [
    { id: 'free', name: 'Free', iconName: 'Gift', priceMonthly: 0, priceYearly: 0, colors: { border: "border-muted", text: "text-muted-foreground", bg: "bg-muted", hoverBg: "hover:bg-muted/80" } },
    { id: 'plus', name: 'Plus', iconName: 'Star', priceMonthly: 29, priceYearly: 290, isPopular: true, colors: { border: "border-primary", text: "text-primary", bg: "bg-primary", hoverBg: "hover:bg-primary/90" } },
    { id: 'premium', name: 'Premium', iconName: 'Gem', priceMonthly: 79, priceYearly: 790, colors: { border: "border-teal-500", text: "text-teal-500", bg: "bg-teal-500", hoverBg: "hover:bg-teal-500/90" } },
    { id: 'custom', name: 'Personalitzat', iconName: 'Settings', priceMonthly: null, priceYearly: null, colors: { border: "border-foreground", text: "text-foreground", bg: "bg-foreground", hoverBg: "hover:bg-foreground/90" } },
];

export async function BillingData() {
    const t = await getTranslations('SettingsPage.billing');
       // ✅ 1. Validació de sessió neta i centralitzada
    const { supabase, user, activeTeamId } = await validatePageSession();

    const [subscriptionRes, memberRes] = await Promise.all([
        supabase.from('subscriptions').select('*').eq('team_id', activeTeamId).maybeSingle(),
        supabase.from('team_members').select('role').eq('user_id', user.id).eq('team_id', activeTeamId).single()
    ]);
    
    const activeSubscription = subscriptionRes.data;
    const currentUserRole = memberRes.data?.role || null;

    // ✅ TRAMPA DE DEPURACIÓ
    console.log("\n--- DEPURACIÓ DE PERMISOS (BillingData.tsx) ---");
    console.log("ID de l'usuari actual:", user.id);
    console.log("ID de l'equip actiu:", activeTeamId);
    console.log("Resultat de la consulta de rol (memberRes):", JSON.stringify(memberRes, null, 2));
    console.log("Rol de l'usuari detectat:", currentUserRole);
    console.log("----------------------------------------------\n");

    const finalPlansData: Plan[] = plansStructure.map(plan => ({
        ...plan,
        name: plan.id === 'custom' ? t(`plans.${plan.id}.name`) : plan.name,
        description: t(`plans.${plan.id}.description`),
        features: t.raw(`plans.${plan.id}.features`),
        isCurrent: activeSubscription?.status === 'active' && activeSubscription.plan_id === plan.id,
    }));

    return (
        <div>
            <h1 className="text-3xl font-bold mb-2">{t('pageTitle')}</h1>
            <p className="text-muted-foreground mb-8">{t('pageDescription')}</p>
            <BillingClient 
                plans={finalPlansData} 
                activeSubscription={activeSubscription as Subscription | null}
                currentUserRole={currentUserRole}
            />
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/settings/billing/_components/BillingSkeleton.tsx ===================

/**
 * @file BillingSkeleton.tsx
 * @summary Muestra un esqueleto de carga para la página de Facturación y Planes.
 */
"use client";

import React from 'react';
import { Skeleton } from '@/components/ui/skeleton';

export const BillingSkeleton: React.FC = () => (
  <div className="space-y-12 animate-pulse">
    <div className="space-y-2">
      <Skeleton className="h-9 w-1/3" />
      <Skeleton className="h-5 w-2/3" />
    </div>
    <div className="flex items-center justify-center space-x-4">
      <Skeleton className="h-5 w-32" />
      <Skeleton className="h-6 w-12 rounded-full" />
      <Skeleton className="h-5 w-40" />
    </div>
    <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
      <Skeleton className="h-96 rounded-2xl" />
      <Skeleton className="h-96 rounded-2xl" />
      <Skeleton className="h-96 rounded-2xl" />
      <Skeleton className="h-96 rounded-2xl" />
    </div>
  </div>
);

// =================== FILE: src/app/[locale]/(app)/settings/billing/_components/UpgradePlanNotice.tsx ===================

"use client";

import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Gem } from 'lucide-react'; // Icona per a funcionalitats premium

interface UpgradePlanNoticeProps {
    featureName: string;
    requiredPlan: string;
    locale: string;
}

export function UpgradePlanNotice({ featureName, requiredPlan, locale }: UpgradePlanNoticeProps) {
    return (
        <div className="flex items-center justify-center h-full">
            <Card className="w-full max-w-lg text-center">
                <CardHeader>
                    <div className="mx-auto bg-primary/10 p-3 rounded-full w-fit">
                        <Gem className="w-8 h-8 text-primary" />
                    </div>
                    <CardTitle className="mt-4">Funcionalitat Premium</CardTitle>
                    <CardDescription>
                        El teu pla actual no inclou accés a la funcionalitat de <span className="font-semibold">{featureName}</span>.
                    </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                    <p>
                        Per a poder utilitzar aquesta eina, si us plau, millora la teva subscripció al pla <span className="font-semibold">{requiredPlan}</span> o superior.
                    </p>
                    <Button asChild size="lg">
                        <Link href={`/${locale}/settings/billing`}>
                            Veure Plans i Preus
                        </Link>
                    </Button>
                </CardContent>
            </Card>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/settings/blacklist/action.ts ===================

"use server";

import { revalidatePath } from "next/cache";
import { validateUserSession } from "@/lib/supabase/session";
import { hasPermission, PERMISSIONS } from "@/lib/permissions";

/**
 * Afegeix una nova regla a la blacklist per a l'equip actiu.
 */
export async function addRuleAction(formData: FormData) {
  const session = await validateUserSession();
  if ('error' in session) {
    return { success: false, message: session.error.message };
  }
  const { supabase, user, activeTeamId } = session;

  // ✅ REFACTORITZACIÓ: Comprovació de permisos. Només usuaris autoritzats poden afegir regles.
  const { data: member } = await supabase.from('team_members').select('role').eq('user_id', user.id).eq('team_id', activeTeamId).single();
  if (!hasPermission(member?.role, PERMISSIONS.MANAGE_BLACKLIST)) {
    return { success: false, message: "No tens permisos per a gestionar la llista negra." };
  }

  const newRule = formData.get('newRule') as string;
  if (!newRule || !newRule.trim()) {
    return { success: false, message: "La regla no pot estar buida." };
  }

  const value = newRule.trim().toLowerCase();
  const rule_type = value.includes('@') ? 'email' : 'domain';

  const { error } = await supabase.from('blacklist_rules').insert({
    user_id: user.id,
    team_id: activeTeamId,
    value,
    rule_type
  });

  if (error) {
    console.error('Error afegint regla de blacklist:', error);
    return { success: false, message: "No s'ha pogut afegir la regla. Potser ja existeix." };
  }

  revalidatePath('/settings/blacklist');
  return { success: true, message: "Regla afegida correctament." };
}

/**
 * Elimina una regla de la blacklist.
 */
export async function deleteRuleAction(id: string) {
  const session = await validateUserSession();
  if ('error' in session) {
    return { success: false, message: session.error.message };
  }
  const { supabase, user, activeTeamId } = session;

  // ✅ REFACTORITZACIÓ: Comprovació de permisos abans d'intentar l'eliminació.
  const { data: member } = await supabase.from('team_members').select('role').eq('user_id', user.id).eq('team_id', activeTeamId).single();
  if (!hasPermission(member?.role, PERMISSIONS.MANAGE_BLACKLIST)) {
    return { success: false, message: "No tens permisos per a gestionar la llista negra." };
  }

  // La política RLS a la base de dades s'encarregarà de la seguretat a nivell de fila.
  const { error } = await supabase.from('blacklist_rules').delete().eq('id', id);

  if (error) {
    console.error('Error eliminant regla de blacklist:', error);
    return { success: false, message: "No s'ha pogut eliminar la regla." };
  }

  revalidatePath('/settings/blacklist');
  return { success: true, message: "Regla eliminada correctament." };
}


// =================== FILE: src/app/[locale]/(app)/settings/blacklist/page.tsx ===================

import { Suspense } from 'react';
import type { Metadata } from 'next';
import { getTranslations } from 'next-intl/server';
import { validatePageSession } from '@/lib/supabase/session';
import { hasPermission, PERMISSIONS, type Role } from '@/lib/permissions.config';
import { BlacklistData } from './_components/BlacklistData';
import { BlacklistSkeleton } from './_components/BlacklistSkeleton';
import { AccessDenied } from '@/components/shared/AccessDenied';

export const dynamic = 'force-dynamic';

// ✅ CORRECCIÓ CLAU: La propietat 'params' es defineix com una Promise.
type BlacklistPageProps = {
  params: Promise<{ locale: string }>; // <-- Ho definim com a Promise
};

export async function generateMetadata(props: BlacklistPageProps): Promise<Metadata> {
  // ✅ L'await és ara compatible amb el tipus.
  const { locale } = await props.params; 
  const t = await getTranslations({ locale, namespace: 'SettingsPage.blacklist' });
  return { title: `${t('metaTitle')} | Ribot` };
}


export default async function BlacklistPage() {
  // Aquesta funció fa la validació i redirigeix si no és vàlid [5]
  const { supabase, user, activeTeamId } = await validatePageSession();

  // Comprovació de permisos (basada en el rol de l'usuari [6])
  const { data: member } = await supabase
    .from('team_members')
    .select('role')
    .match({ user_id: user.id, team_id: activeTeamId })
    .single();

  if (!hasPermission(member?.role as Role, PERMISSIONS.VIEW_BLACKLIST)) {
    // Si no té permís, mostrem el component AccessDenied [2, 7]
    return <AccessDenied message="No tens permisos per a veure aquesta secció." />;
  }

  // Renderitzem el component de dades dins d'un Suspense [2].
  // La càrrega de dades real es farà a BlacklistData [8].
  return (
    <div className="space-y-6">
      <Suspense fallback={<BlacklistSkeleton />}>
        <BlacklistData currentUserRole={(member?.role as Role) || null} />
      </Suspense>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/settings/blacklist/_components/BlacklistClient.tsx ===================

"use client";

import React, { useTransition, useRef } from 'react';
import { motion } from 'framer-motion';
import { useTranslations } from 'next-intl';
import { toast } from 'sonner';
import { Loader2, Trash2 } from 'lucide-react';

import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { EmptyState } from '@/components/shared/EmptyState'; // ✅ REFACTORITZACIÓ: Component per a estat buit
import { addRuleAction, deleteRuleAction } from '../action';
import type { BlacklistRule } from '@/types/settings';
import { hasPermission, PERMISSIONS, type Role } from '@/lib/permissions.config'; // Importa des de .config!

interface BlacklistClientProps {
  initialRules: BlacklistRule[];
  currentUserRole: Role | null; // ✅ Tipus correcte
}

/**
 * Component de Client per a la pàgina de la Blacklist.
 * S'encarrega de la interactivitat de la UI.
 */
export function BlacklistClient({ initialRules, currentUserRole }: BlacklistClientProps) {
  const t = useTranslations('SettingsPage.blacklist');
  const [isPending, startTransition] = useTransition();
  const formRef = useRef<HTMLFormElement>(null);

  // ✅ REFACTORITZACIÓ: Variable de control per a la UI basada en permisos.
  const canManage = hasPermission(currentUserRole, PERMISSIONS.MANAGE_BLACKLIST);

  const handleAddSubmit = (formData: FormData) => {
    startTransition(async () => {
      const result = await addRuleAction(formData);
      // ✅ REFACTORITZACIÓ: Missatges de toast més específics.
      if (result.success) {
        toast.success(t('toast.addSuccess'), { description: result.message });
        formRef.current?.reset();
      } else {
        toast.error(t('toast.error'), { description: result.message });
      }
    });
  };

  const handleDelete = (id: string) => {
    startTransition(async () => {
      const result = await deleteRuleAction(id);
      if (result.success) {
        toast.success(t('toast.deleteSuccess'), { description: result.message });
      } else {
        toast.error(t('toast.error'), { description: result.message });
      }
    });
  };

  return (
    <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="glass-card p-6">
      {/* ✅ REFACTORITZACIÓ: El formulari es deshabilita si l'usuari no té permisos. */}
      <form ref={formRef} action={handleAddSubmit} className="flex gap-2 mb-6">
        <Input name="newRule" placeholder={t('placeholder')} required disabled={isPending || !canManage} />
        <Button type="submit" disabled={isPending || !canManage}>
          {isPending ? <Loader2 className="w-4 h-4 animate-spin" /> : t('addButton')}
        </Button>
      </form>

      <div className="space-y-2">
        {initialRules.length > 0 ? initialRules.map(rule => (
          <div key={rule.id} className="flex justify-between items-center p-2 bg-muted rounded-lg">
            <div className="flex items-center gap-2">
              <Badge variant={rule.rule_type === 'domain' ? 'default' : 'secondary'} className={undefined}>{rule.rule_type}</Badge>
              <span className="break-all">{rule.value}</span>
            </div>
            {/* ✅ REFACTORITZACIÓ: El botó d'eliminar es mostra/oculta segons els permisos. */}
            {canManage && (
              <Button variant="ghost" size="icon" onClick={() => handleDelete(rule.id)} disabled={isPending}>
                <Trash2 className="w-4 h-4 text-destructive" />
              </Button>
            )}
          </div>
        )) : (
          !isPending && <EmptyState message={`${t('emptyTitle')} - ${t('emptyDescription')}`} />
        )}
      </div>
    </motion.div>
  );
}


// =================== FILE: src/app/[locale]/(app)/settings/blacklist/_components/BlacklistData.tsx ===================

import { getTranslations } from 'next-intl/server';
import { BlacklistClient } from './BlacklistClient';
import { validatePageSession } from '@/lib/supabase/session';
import type { BlacklistRule } from '@/types/settings';
import type { Role } from '@/lib/permissions.config';

interface BlacklistDataProps {
  currentUserRole: Role | null;
}

export async function BlacklistData({ currentUserRole }: BlacklistDataProps) {
  const t = await getTranslations('SettingsPage.blacklist');
  const { supabase } = await validatePageSession();

  const { data: rulesFromDb, error } = await supabase
    .from('blacklist_rules')
    .select('*')
    .order('created_at', { ascending: false });

  if (error) {
    console.error("Error en carregar les regles de la blacklist:", error.message);
  }

  // ✅ CORRECCIÓ DEFINITIVA: Filtrem i després transformem.
  const formattedRules: BlacklistRule[] = (rulesFromDb || [])
    // 1. Filtrem per descartar les regles que tenen 'team_id' com a null,
    //    ja que el tipus 'BlacklistRule' requereix un string.
    .filter(rule => !!rule.team_id) 
    // 2. Transformem les regles restants al format correcte.
    .map(rule => ({
      ...rule,
      id: String(rule.id), // Convertim id: number -> string
      team_id: rule.team_id as string, // Ara podem assegurar que team_id és un string
      rule_type: rule.rule_type as 'domain' | 'email', // Assegurem el tipus per a més seguretat
    }));

  return (
    <div>
      <h1 className="text-3xl font-bold mb-2">{t('pageTitle')}</h1>
      <p className="text-muted-foreground mb-8">{t('pageDescription')}</p>
      <BlacklistClient 
        initialRules={formattedRules} 
        currentUserRole={currentUserRole}
      />
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/settings/blacklist/_components/BlacklistSkeleton.tsx ===================

"use client";

/**
 * @summary Mostra un esquelet de càrrega per a la pàgina de la Blacklist.
 */
export function BlacklistSkeleton() {
  return (
    <div className="glass-card p-6 animate-pulse">
      {/* Esquelet de la descripció */}
      <div className="space-y-2 mb-6">
        <div className="h-4 w-full bg-gray-700/50 rounded"></div>
        <div className="h-4 w-3/4 bg-gray-700/50 rounded"></div>
      </div>
      
      {/* Esquelet del formulari */}
      <div className="flex gap-2 mb-6">
        <div className="h-10 flex-1 bg-gray-700/50 rounded-md"></div>
        <div className="h-10 w-24 bg-gray-700/50 rounded-md"></div>
      </div>

      {/* Esquelet de la llista de regles */}
      <div className="space-y-2">
        {[...Array(3)].map((_, i) => (
          <div key={i} className="flex justify-between items-center p-2 h-10 bg-muted rounded-lg">
            <div className="flex items-center gap-2">
              <div className="h-6 w-16 bg-gray-700/50 rounded-full"></div>
              <div className="h-5 w-48 bg-gray-700/50 rounded-md"></div>
            </div>
            <div className="h-8 w-8 bg-gray-700/50 rounded-md"></div>
          </div>
        ))}
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/settings/customization/page.tsx ===================

import { Suspense } from 'react';
import type { Metadata } from 'next';
import { CustomizationData } from './_components/CustomizationData';
import { CustomizationSkeleton } from './_components/CustomizationSkeleton';

export const metadata: Metadata = {
  title: 'Personalització | Ribot',
};

// ❗ Eliminem les definicions de Stage i Tag d'aquí
// export type Stage = { id: string; name: string; };
// export type Tag = { id: string; name: string; color: string; };

export default function CustomizationPage() {
  return (
    <Suspense fallback={<CustomizationSkeleton />}>
      <CustomizationData />
    </Suspense>
  );
}

// =================== FILE: src/app/[locale]/(app)/settings/customization/_components/CustomizationClient.tsx ===================

"use client";

import { motion } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { toast } from 'sonner';
import { Plus, Trash, GripVertical } from 'lucide-react';
import { useTranslations } from 'next-intl';

import { ThemeSwitcher } from '@/components/ThemeSwitcher';
import { LanguageSwitcher } from '@/components/LanguageSwitcher';
// ✅ 1. Importem el tipus 'Database' per accedir a l'esquema.
import { type Database } from '@/types/supabase';

// ✅ 2. Definim els tipus 'Stage' i 'Tag' basant-nos en les taules de la base de dades.
//    Aquests tipus ara coincideixen exactament amb el que passa 'CustomizationData'.
type Stage = Database['public']['Tables']['pipeline_stages']['Row'];
type Tag = Database['public']['Tables']['contact_tags']['Row'];

export function CustomizationClient({ initialStages, initialTags }: { 
  initialStages: Stage[], 
  initialTags: Tag[] 
}) {
  const t = useTranslations('CustomizationPage');
  
  const handleNotImplemented = () => {
    toast.info("Funcionalitat no implementada", {
      description: "Aviat podràs gestionar etapes i etiquetes des d'aquí."
    });
  };

  return (
    <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="space-y-8">
      {/* Targeta per al Tema i Idioma */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div className="glass-card p-6">
          <h2 className="text-xl font-semibold">{t('themeTitle')}</h2>
          <p className="text-sm text-muted-foreground mt-2 mb-6">{t('themeDescription')}</p>
          <ThemeSwitcher />
        </div>
        
        <div className="glass-card p-6">
          <h2 className="text-xl font-semibold">{t('languageTitle')}</h2>
          <p className="text-sm text-muted-foreground mt-2 mb-6">{t('languageDescription')}</p>
          <LanguageSwitcher />
        </div>
      </div>

      {/* Etapes del Pipeline */}
      <div className="glass-card p-8">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-xl font-semibold">{t('pipelineTitle')}</h2>
          <Button onClick={handleNotImplemented}><Plus className="w-4 h-4 mr-2" />{t('newStageButton')}</Button>
        </div>
        <div className="space-y-3">
          {initialStages.map(stage => (
            <div key={stage.id} className="flex items-center gap-3 p-3 bg-muted rounded-lg">
              <GripVertical className="w-5 h-5 text-muted-foreground cursor-grab" />
              <p className="flex-1 font-medium">{stage.name}</p>
              <Button variant="ghost" size="icon" onClick={handleNotImplemented}>
                <Trash className="w-4 h-4 text-destructive" />
              </Button>
            </div>
          ))}
        </div>
      </div>

      {/* Etiquetes de Contacte */}
      <div className="glass-card p-8">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-xl font-semibold">{t('tagsTitle')}</h2>
          <Button onClick={handleNotImplemented}><Plus className="w-4 h-4 mr-2" />{t('newTagButton')}</Button>
        </div>
        <div className="flex flex-wrap gap-3">
          {initialTags.map(tag => (
            <div key={tag.id} className="flex items-center gap-2 px-3 py-1 rounded-full text-sm" style={{ backgroundColor: `${tag.color}20`, color: tag.color || undefined }}>
              <span className="font-medium">{tag.name}</span>
              <button onClick={handleNotImplemented} className="opacity-50 hover:opacity-100">
                <Trash className="w-3 h-3" />
              </button>
            </div>
          ))}
        </div>
      </div>
    </motion.div>
  );
}

// =================== FILE: src/app/[locale]/(app)/settings/customization/_components/CustomizationData.tsx ===================

import { CustomizationClient } from './CustomizationClient';
import { validatePageSession } from '@/lib/supabase/session';
// ✅ 1. Importem els tipus directament de la definició de la BD
import { type Database } from '@/types/supabase';

// ✅ 2. Definim els tipus basats en les taules
type PipelineStageRow = Database['public']['Tables']['pipeline_stages']['Row'];
type ContactTagRow = Database['public']['Tables']['contact_tags']['Row'];


export async function CustomizationData() {
    const { supabase } = await validatePageSession();

    // Consultes (sense canvis)
    const [stagesRes, tagsRes] = await Promise.all([
        supabase.from('pipeline_stages').select('id, name, position').order('position'), // Afegim position si no hi era
        supabase.from('contact_tags').select('id, name, color')
    ]);

    if (stagesRes.error || tagsRes.error) {
        console.error('Error en carregar dades de personalització:', stagesRes.error || tagsRes.error);
        throw new Error("No s'han pogut carregar les dades de personalització. Intenta-ho de nou més tard.");
    }

    // ✅ 3. Fem servir els tipus Row correctes per al cast
    return <CustomizationClient
        initialStages={(stagesRes.data as PipelineStageRow[]) || []}
        initialTags={(tagsRes.data as ContactTagRow[]) || []}
    />;
}

// =================== FILE: src/app/[locale]/(app)/settings/customization/_components/CustomizationSkeleton.tsx ===================

"use client";

export function CustomizationSkeleton() {
  return (
    <div className="space-y-8 animate-pulse">
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div className="glass-card p-6 h-48"></div>
        <div className="glass-card p-6 h-48"></div>
      </div>
      <div className="glass-card p-8 h-64"></div>
      <div className="glass-card p-8 h-64"></div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/settings/install/page.tsx ===================

import { getTranslations } from 'next-intl/server';
import { InstallationManager } from './_components/InstallationManager';

export default async function InstallPage() {
  const t = await getTranslations('SettingsPage.install');

  return (
    <div className="space-y-6">
      <div>
        <h3 className="text-lg font-medium">{t('title')}</h3>
        <p className="text-sm text-muted-foreground">{t('description')}</p>
      </div>
      <div className="border-t border-border pt-6">
        <InstallationManager
          texts={{
            install_button: t('install_button'),
            desktop_title: t('desktop_title'),
            desktop_instructions: t('desktop_instructions'),
            android_title: t('android_title'),
            android_instructions: t('android_instructions'),
            ios_title: t('ios_title'),
            ios_instructions: t('ios_instructions'),
            already_installed: t('already_installed'),
            
            // ✅ CORRECCIÓ: Canviem 'manual_install_title' pel nom correcte 'connect_device_title'.
            // També ens assegurem d'utilitzar la clau de traducció corresponent.
            connect_device_title: t('connect_device_title'),
          }}
        />
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/settings/install/_components/DeviceIcons.tsx ===================

// src/app/[locale]/(app)/settings/install/_components/DeviceIcons.tsx

import { Monitor, type LucideProps } from 'lucide-react';

// Icona per a Apple (iOS)
export const AppleIcon = (props: LucideProps) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    strokeWidth="2"
    strokeLinecap="round"
    strokeLinejoin="round"
    {...props}
  >
    <path d="M12 20.94c1.5 0 2.75 1.06 4 1.06 3 0 6-8 6-12.22A4.91 4.91 0 0 0 17 5c-2.22 0-4 1.44-5 2-1-.56-2.78-2-5-2a4.9 4.9 0 0 0-5 4.78C2 14 5 22 8 22c1.25 0 2.5-1.06 4-1.06Z" />
    <path d="M10 2c1 .5 2 2 2 5" />
  </svg>
);

// Icona per a Android
export const AndroidIcon = (props: LucideProps) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    strokeWidth="2"
    strokeLinecap="round"
    strokeLinejoin="round"
    {...props}
  >
    <path d="M14 8V4.83A1 1 0 0 0 12.17 4a14.24 14.24 0 0 0-8.34 0A1 1 0 0 0 2 4.83V8" />
    <path d="M6 12v4a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-4" />
    <path d="M12 12v8" />
    <path d="M4.2 10.2a6.5 6.5 0 0 1 15.6 0" />
    <path d="M4 4.5A2.5 2.5 0 0 1 6.5 2H8" />
    <path d="M16 2h1.5A2.5 2.5 0 0 1 20 4.5" />
  </svg>
);

// Re-exportem Monitor per mantenir la consistència
export const DesktopIcon = Monitor;

// =================== FILE: src/app/[locale]/(app)/settings/install/_components/InstallationManager.tsx ===================

// src/app/[locale]/(app)/settings/install/_components/InstallationManager.tsx
'use client';

import { useState, useEffect, type FC, type ReactNode } from 'react';
import { Button } from '@/components/ui/button';
import { Download, CheckCircle } from 'lucide-react';
import { motion } from 'framer-motion';
import { cn } from '@/lib/utils/utils';

// NOU: Importem les nostres icones personalitzades
import { AppleIcon, AndroidIcon, DesktopIcon } from './DeviceIcons';

interface InstallationManagerProps {
  texts: {
    install_button: string;
    desktop_title: string;
    desktop_instructions: string;
    android_title: string;
    android_instructions: string;
    ios_title: string;
    ios_instructions: string;
    already_installed: string;
    connect_device_title: string; // Text nou per al títol
  };
}

interface BeforeInstallPromptEvent extends Event {
  readonly platforms: string[];
  readonly userChoice: Promise<{
    outcome: 'accepted' | 'dismissed';
    platform: string;
  }>;
  prompt(): Promise<void>;
}

// =================================================================
// NOU: Subcomponent per a la targeta de dispositiu estilitzada
// =================================================================
interface DeviceInstallationCardProps {
  icon: ReactNode;
  title: string;
  instructions: string;
  buttonText?: string;
  onButtonClick?: () => void;
  gradient: string;
}

const DeviceInstallationCard: FC<DeviceInstallationCardProps> = ({
  icon,
  title,
  instructions,
  buttonText,
  onButtonClick,
  gradient,
}) => (
  <motion.div
    initial={{ opacity: 0, y: 20 }}
    animate={{ opacity: 1, y: 0 }}
    transition={{ duration: 0.5 }}
    className={cn(
      'rounded-xl p-6 md:p-8 flex flex-col items-center text-center text-white/90 ring-1 ring-white/10 shadow-2xl shadow-slate-900/50 relative overflow-hidden',
      gradient
    )}
  >
    <div className="absolute -top-10 -right-10 w-32 h-32 bg-white/5 rounded-full opacity-50" />
    <div className="mb-4">{icon}</div>
    <h3 className="text-xl font-bold mb-2 text-white">{title}</h3>
    <p className="text-sm text-white/60 max-w-sm mb-6">{instructions}</p>
    {buttonText && onButtonClick && (
      <Button
        onClick={onButtonClick}
        className="bg-white text-black hover:bg-white/90 font-bold transition-transform hover:scale-105"
      >
        <Download className="mr-2 h-4 w-4" />
        {buttonText}
      </Button>
    )}
  </motion.div>
);


// =================================================================
// COMPONENT PRINCIPAL REDISSENYAT
// =================================================================
export function InstallationManager({ texts }: InstallationManagerProps) {
  const [installPrompt, setInstallPrompt] = useState<BeforeInstallPromptEvent | null>(null);
  const [isStandalone, setIsStandalone] = useState(false);
  const [userOS, setUserOS] = useState<'android' | 'ios' | 'desktop' | null>(null);

  useEffect(() => {
    // La lògica de detecció es manté igual, és robusta.
    if (window.matchMedia('(display-mode: standalone)').matches) {
      setIsStandalone(true);
    }
    
    const userAgent = window.navigator.userAgent.toLowerCase();
    if (/android/.test(userAgent)) setUserOS('android');
    else if (/iphone|ipad|ipod/.test(userAgent)) setUserOS('ios');
    else setUserOS('desktop');
    
    const handleBeforeInstallPrompt = (e: Event) => {
      e.preventDefault();
      setInstallPrompt(e as BeforeInstallPromptEvent);
    };

    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
    return () => window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
  }, []);

  const handleInstallClick = async () => {
    if (!installPrompt) return;
    installPrompt.prompt();
    const { outcome } = await installPrompt.userChoice;
    if (outcome === 'accepted') {
      console.log('Usuari ha acceptat instal·lar la PWA.');
      setInstallPrompt(null);
    }
  };

  // NOU: Disseny millorat per a l'estat "Ja instal·lat"
  if (isStandalone) {
    return (
      <motion.div
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        className="flex items-center space-x-3 rounded-lg bg-green-500/10 p-4 text-green-400 ring-1 ring-green-500/20"
      >
        <CheckCircle className="h-6 w-6" />
        <p className="font-medium">{texts.already_installed}</p>
      </motion.div>
    );
  }
  
  // LÒGICA CLAU: Funció per renderitzar la targeta correcta
  const renderDeviceCard = () => {
    const commonIconProps = { size: 48, className: 'text-white/80' };

    switch (userOS) {
      case 'android':
        return (
          <DeviceInstallationCard
            icon={<AndroidIcon {...commonIconProps} />}
            title={texts.android_title}
            instructions={texts.android_instructions}
            buttonText={installPrompt ? texts.install_button : undefined}
            onButtonClick={installPrompt ? handleInstallClick : undefined}
            gradient="bg-gradient-to-br from-[#3DDC84] to-[#20A658]"
          />
        );
      case 'ios':
        return (
          <DeviceInstallationCard
            icon={<AppleIcon {...commonIconProps} />}
            title={texts.ios_title}
            instructions={texts.ios_instructions}
            // A iOS no hi ha 'installPrompt', per tant, no mostrem botó.
            gradient="bg-gradient-to-br from-[#555] to-[#111]"
          />
        );
      case 'desktop':
        return (
          <DeviceInstallationCard
            icon={<DesktopIcon {...commonIconProps} />}
            title={texts.desktop_title}
            instructions={texts.desktop_instructions}
            buttonText={installPrompt ? texts.install_button : undefined}
            onButtonClick={installPrompt ? handleInstallClick : undefined}
            gradient="bg-gradient-to-br from-[#007CF0] to-[#0052D4]"
          />
        );
      default:
        // Mostra un estat de càrrega o res mentre es detecta el SO.
        return <div className="h-64 w-full rounded-xl bg-muted/50 animate-pulse" />;
    }
  };

  return (
    <div className="space-y-6">
      <h4 className="text-lg font-semibold">{texts.connect_device_title}</h4>
      <div className="flex justify-center">
        {renderDeviceCard()}
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/settings/integrations/actions.ts ===================

/**
 * @file actions.ts (Integrations)
 * @summary Versió refactoritzada amb lògica centralitzada.
 */
"use server";

import { revalidatePath } from "next/cache";
import { redirect } from "next/navigation";
import { cookies } from "next/headers";
import { v4 as uuidv4 } from 'uuid';
// ✅ 1. Importem les dues utilitats de sessió.
import { validatePageSession, validateUserSession } from "@/lib/supabase/session";
import { type TransportOptions } from 'nodemailer';
import nodemailer from 'nodemailer';
import imaps from 'imap-simple';

import { ImapSmtpSchema, type ImapSmtpFormData } from './schemas';
import AES from 'crypto-js/aes';
// --- LÒGICA DE CONNEXIÓ CENTRALITZADA ---

/**
 * ✅ 2. Nova funció interna que gestiona tota la lògica de connexió OAuth.
 * Això elimina la repetició de codi a les quatre accions públiques.
*/
async function createOAuthRedirectAction(provider: 'google' | 'microsoft' | 'linkedin' | 'facebook') {
    // Utilitzem validatePageSession perquè l'acció principal és una redirecció.
    // Aquesta funció ja s'encarrega de redirigir a /login si l'usuari no està autenticat.
    await validatePageSession();

    const cookieStore = cookies();
    const state = uuidv4();
    (await cookieStore).set('oauth_state', state, { path: '/', httpOnly: true, secure: process.env.NODE_ENV === 'production' });

    const redirectUri = `${process.env.NEXT_PUBLIC_SITE_URL}/api/oauth/callback/${provider}`;
    let authUrl = '';
    const params = new URLSearchParams({ state, redirect_uri: redirectUri });

    // Configurem els paràmetres específics per a cada proveïdor
    switch (provider) {
        case 'google':
            params.set('client_id', process.env.GOOGLE_CLIENT_ID!);
            params.set('response_type', 'code');
            params.set('scope', 'https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.send');
            params.set('access_type', 'offline');
            params.set('prompt', 'consent');
            authUrl = `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;
            break;
        case 'microsoft':
            params.set('client_id', process.env.AZURE_CLIENT_ID!);
            params.set('response_type', 'code');
            params.set('scope', 'openid email offline_access User.Read Mail.Read Mail.Send');
            authUrl = `https://login.microsoftonline.com/common/oauth2/v2.0/authorize?${params.toString()}`;
            break;
        case 'linkedin':
            params.set('client_id', process.env.LINKEDIN_CLIENT_ID!);
            params.set('response_type', 'code');
            params.set('scope', 'openid profile email w_member_social');
            params.set('prompt', 'consent');
            authUrl = `https://www.linkedin.com/oauth/v2/authorization?${params.toString()}`;
            break;
        case 'facebook':
            const scopes = 'pages_show_list,pages_manage_posts,business_management,instagram_basic,instagram_content_publish';
            params.set('client_id', process.env.FACEBOOK_CLIENT_ID!);
            params.set('response_type', 'code');
            params.set('scope', scopes);
            authUrl = `https://www.facebook.com/v19.0/dialog/oauth?${params.toString()}`;
            break;
    }

    redirect(authUrl);
}

// ✅ 3. Les accions públiques ara són simples crides a la nostra funció central.
export async function connectGoogleAction() { return createOAuthRedirectAction('google'); }
export async function connectMicrosoftAction() { return createOAuthRedirectAction('microsoft'); }
export async function connectLinkedInAction() { return createOAuthRedirectAction('linkedin'); }
export async function connectFacebookAction() { return createOAuthRedirectAction('facebook'); }


// --- LÒGICA PER A IMAP/SMTP (AMB CORRECCIONS FINALS) ---

// --- LÒGICA PER A IMAP/SMTP (CORREGIDA) ---

type ImapConfig = {
    imap: {
        user: string;
        password: string;
        host: string;
        port: number;
        tls: boolean;
        authTimeout: number;
        tlsOptions?: {
            rejectUnauthorized?: boolean;
        };

    }
}

async function verifyImap(config: ImapConfig): Promise<void> {
    let connection;
    try {
        connection = await imaps.connect(config);
        await connection.end();
    } catch (err) {
        throw new Error(`Error de connexió IMAP: ${(err as Error).message}`);
    }
}

async function verifySmtp(config: TransportOptions): Promise<void> {
    const transporter = nodemailer.createTransport(config);
    try {
        await transporter.verify();
    } catch (err) {
        throw new Error(`Error de connexió SMTP: ${(err as Error).message}`);
    }
}

export async function connectImapSmtpAction(formData: ImapSmtpFormData) {
    const session = await validateUserSession();
    if ("error" in session) {
        return { success: false, message: "Sessió no vàlida." };
    }
    const { supabase, user } = session;

    const validation = ImapSmtpSchema.safeParse(formData);
    if (!validation.success) {
        return { success: false, message: "Dades del formulari invàlides.", errors: validation.error.flatten().fieldErrors };
    }
    const { email, password, imapHost, imapPort, smtpHost, smtpPort } = validation.data;

    const imapConfig: ImapConfig = { imap: { user: email, password: password, host: imapHost, port: imapPort, tls: true, authTimeout: 5000, tlsOptions: { rejectUnauthorized: false } } };
    const smtpConfig = { host: smtpHost, port: smtpPort, secure: smtpPort === 465, auth: { user: email, pass: password }, tls: { rejectUnauthorized: false } };

    try {
        await Promise.all([
            verifyImap(imapConfig),
            verifySmtp(smtpConfig as TransportOptions) 
        ]);
    } catch (error) {
        return { success: false, message: `No s'ha pogut verificar la connexió: ${(error as Error).message}` };
    }
    
    try {
        const secretKey = process.env.ENCRYPTION_SECRET_KEY;
        if (!secretKey) {
            throw new Error("La clau d'encriptació no està configurada al servidor.");
        }

        const encryptedPassword = AES.encrypt(password, secretKey).toString();
        
        const configPayload = {
            imap: { user: imapConfig.imap.user, host: imapConfig.imap.host, port: imapConfig.imap.port, tls: imapConfig.imap.tls, authTimeout: imapConfig.imap.authTimeout, },
            smtp: { host: smtpConfig.host, port: smtpConfig.port, secure: smtpConfig.secure, auth: { user: smtpConfig.auth.user, }, },
        };
        
        const { error: dbError } = await supabase.from('user_credentials').upsert({ 
            user_id: user.id, 
            provider: 'custom_email', 
            config: configPayload, 
            encrypted_password: encryptedPassword,
            access_token: null, 
            refresh_token: null, 
            expires_at: null, 
        }, { onConflict: 'user_id, provider' });
        
        if (dbError) {
            // Si hi ha un error guardant a la BD, el llancem perquè el catch el capturi
            throw dbError;
        };
        
        revalidatePath('/settings/integrations');
        return { success: true, message: "Compte de correu connectat correctament!" };

    } catch (error) {
        // ✅ PAS DE DEPURACIÓ: Mostrarem aquest error desconegut per consola
        console.error("=============== ERROR DESCONEGUT CAPTURAT ===============");
        console.error(error);
        console.error("==========================================================");

        const errorMessage = error instanceof Error ? error.message : "Error desconegut";
        return { success: false, message: `Error en el procés de connexió: ${errorMessage}` };
    }
}


// --- ACCIONS DE DESCONNEXIÓ (REFATORITZADES) ---

async function handleDisconnect(provider: string) {
    // ✅ 4. Utilitzem validateUserSession perquè aquesta funció retorna un objecte de resultat.
    const session = await validateUserSession();
    if ("error" in session) {
        return { success: false, message: session.error.message };
    }
    const { supabase, user, activeTeamId } = session;

    try {
        const isTeamIntegration = ['linkedin', 'facebook', 'instagram'].includes(provider);
        let query;

        if (isTeamIntegration) {
            // La nostra funció ja valida que activeTeamId existeix.
            query = supabase.from('team_credentials').delete().match({ team_id: activeTeamId, provider });
        } else {
            query = supabase.from('user_credentials').delete().match({ user_id: user.id, provider });
        }

        const { error } = await query;
        if (error) throw error;

        revalidatePath('/settings/integrations');
        return { success: true, message: `Integració desconnectada correctament.` };
    } catch (error) {
        const errorMessage = error instanceof Error ? error.message : "Error desconegut";
        return { success: false, message: `No s'ha pogut desconnectar: ${errorMessage}` };
    }
}

export async function disconnectGoogleAction() { return await handleDisconnect('google'); }
export async function disconnectMicrosoftAction() { return await handleDisconnect('microsoft'); }
export async function disconnectLinkedInAction() { return await handleDisconnect('linkedin'); }
export async function disconnectFacebookAction() { return await handleDisconnect('facebook'); }
// Actualitzem handleDisconnect per incloure 'custom_email'
export async function disconnectCustomEmailAction() {
    return await handleDisconnect('custom_email');
}



// =================== FILE: src/app/[locale]/(app)/settings/integrations/page.tsx ===================

import { Suspense } from 'react';
import type { Metadata } from 'next';
import { getTranslations } from 'next-intl/server';
import { IntegrationsData } from './_components/IntegrationsData';
import { IntegrationsSkeleton } from './_components/IntegrationsSkeleton';

export async function generateMetadata(): Promise<Metadata> {
    const t = await getTranslations('SettingsPage.integrations');
    return { title: t('pageTitle') };
}

export default function IntegrationsPage() {
    return (
        <Suspense fallback={<IntegrationsSkeleton />}>
            <IntegrationsData />
        </Suspense>
    );
}

// =================== FILE: src/app/[locale]/(app)/settings/integrations/schemas.ts ===================

// src/app/[locale]/(app)/settings/integrations/schemas.ts
import { z } from 'zod';

// Aquest fitxer NO té "use server" perquè s'utilitzarà tant al client com al servidor.

export const ImapSmtpSchema = z.object({
  email: z.string().email({ message: "El correu electrònic no és vàlid." }),
  password: z.string().min(1, { message: "La contrasenya no pot estar buida." }),
  imapHost: z.string().min(1, { message: "El servidor IMAP és requerit." }),
  imapPort: z.coerce.number().min(1, { message: "El port IMAP és requerit." }),
  smtpHost: z.string().min(1, { message: "El servidor SMTP és requerit." }),
  smtpPort: z.coerce.number().min(1, { message: "El port SMTP és requerit." }),
});

export type ImapSmtpFormData = z.infer<typeof ImapSmtpSchema>;

// =================== FILE: src/app/[locale]/(app)/settings/integrations/_components/ImapSmtpDialog.tsx ===================

"use client";

import React, { useTransition } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { toast } from 'sonner';
import { useTranslations } from 'next-intl';

import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogFooter,
  DialogClose
} from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Loader2 } from 'lucide-react';
import { ImapSmtpSchema, type ImapSmtpFormData } from '../schemas';
import { connectImapSmtpAction } from '../actions';

interface ImapSmtpDialogProps {
  children: React.ReactNode;
  onSuccess: () => void;
}

export function ImapSmtpDialog({ children, onSuccess }: ImapSmtpDialogProps) {
  const t = useTranslations('SettingsPage.integrations.customEmailDialog');
  const [isPending, startTransition] = useTransition();
  const [isOpen, setIsOpen] = React.useState(false);

  const form = useForm<ImapSmtpFormData>({
    resolver: zodResolver(ImapSmtpSchema),
    defaultValues: {
      email: '',
      password: '',
      imapHost: '',
      imapPort: 993,
      smtpHost: '',
      smtpPort: 465,
    },
  });

  const { register, handleSubmit, formState: { errors } } = form;

  const onSubmit = (data: ImapSmtpFormData) => {
    startTransition(async () => {
      const result = await connectImapSmtpAction(data);
      if (result.success) {
        toast.success(t('toast.success'), { description: result.message });
        onSuccess();
        setIsOpen(false);
        form.reset();
      } else {
        toast.error(t('toast.error'), { description: result.message || t('toast.genericError') });
      }
    });
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>{children}</DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>{t('title')}</DialogTitle>
          <DialogDescription>{t('description')}</DialogDescription>
        </DialogHeader>
        <form onSubmit={handleSubmit(onSubmit)}>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="email" className="text-right">
                {t('emailLabel')}
              </Label>
              <div className="col-span-3">
                <Input id="email" {...register('email')} />
                {errors.email && <p className="text-sm text-red-500 mt-1">{errors.email.message}</p>}
              </div>
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="password" className="text-right">
                {t('passwordLabel')}
              </Label>
              <div className="col-span-3">
                <Input id="password" type="password" {...register('password')} />
                {errors.password && <p className="text-sm text-red-500 mt-1">{errors.password.message}</p>}
              </div>
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="imapHost" className="text-right">
                {t('imapHostLabel')}
              </Label>
              <div className="col-span-3">
                <Input id="imapHost" {...register('imapHost')} placeholder="imap.exemple.com" />
                {errors.imapHost && <p className="text-sm text-red-500 mt-1">{errors.imapHost.message}</p>}
              </div>
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="imapPort" className="text-right">
                {t('imapPortLabel')}
              </Label>
              <div className="col-span-3">
                <Input id="imapPort" type="number" {...register('imapPort')} />
                {errors.imapPort && <p className="text-sm text-red-500 mt-1">{errors.imapPort.message}</p>}
              </div>
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="smtpHost" className="text-right">
                {t('smtpHostLabel')}
              </Label>
              <div className="col-span-3">
                <Input id="smtpHost" {...register('smtpHost')} placeholder="smtp.exemple.com" />
                {errors.smtpHost && <p className="text-sm text-red-500 mt-1">{errors.smtpHost.message}</p>}
              </div>
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="smtpPort" className="text-right">
                {t('smtpPortLabel')}
              </Label>
              <div className="col-span-3">
                <Input id="smtpPort" type="number" {...register('smtpPort')} />
                {errors.smtpPort && <p className="text-sm text-red-500 mt-1">{errors.smtpPort.message}</p>}
              </div>
            </div>
          </div>
          <DialogFooter>
            <DialogClose asChild>
              <Button type="button" variant="secondary">{t('cancelButton')}</Button>
            </DialogClose>
            <Button type="submit" disabled={isPending}>
              {isPending && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
              {t('connectButton')}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}

// =================== FILE: src/app/[locale]/(app)/settings/integrations/_components/IntegrationsClient.tsx ===================

"use client";

import React, { useState, useTransition, useEffect } from 'react';
import { useRouter, useSearchParams, usePathname } from 'next/navigation';
import { motion } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { toast } from 'sonner';
import { CheckCircle, Loader2, XCircle, Mail } from 'lucide-react';
import { 
    connectGoogleAction, disconnectGoogleAction, 
    connectMicrosoftAction, disconnectMicrosoftAction,
    connectLinkedInAction, disconnectLinkedInAction,
    connectFacebookAction, disconnectFacebookAction,
    disconnectCustomEmailAction // Importa la nova acció
} from '../actions';
import Image from 'next/image';
import { useTranslations } from 'next-intl';

// Importa el nou component de diàleg
import { ImapSmtpDialog } from './ImapSmtpDialog';

// Importem les teves imatges locals
import instagram from '@/../public/instagram.jpeg';
import facebook from '@/../public/facebook.jpeg';
import linkedin from '@/../public/linkedin.png';

interface IntegrationsClientProps {
    initialConnectionStatuses: {
        google: boolean;
        microsoft: boolean;
        linkedin: boolean;
        facebook: boolean;
        instagram: boolean;
        custom_email: boolean; // Afegeix el nou estat
    };
}

// Definim el tipus per als proveïdors per a més seguretat
type Provider = 'google' | 'microsoft' | 'linkedin' | 'facebook' | 'custom_email';

export function IntegrationsClient({ initialConnectionStatuses }: IntegrationsClientProps) {
    const t = useTranslations('SettingsPage.integrations');
    const router = useRouter();
    const pathname = usePathname();
    const searchParams = useSearchParams();

    const [connections, setConnections] = useState(initialConnectionStatuses);
    const [isPending, startTransition] = useTransition();

    const width = 34;
    const height = 34;

    useEffect(() => {
        const error = searchParams.get('error');
        const success = searchParams.get('success');

        if (error) {
            toast.error(t('toast.error'), { description: t('toast.genericError') });
        }
        if (success === 'true') {
            toast.success(t('toast.success'), { description: t('toast.connectedSuccess') });
            router.refresh(); 
        }
        
        if (error || success) {
            router.replace(pathname, { scroll: false });
        }
    }, [searchParams, router, pathname, t]);

    const handleConnect = (provider: Provider) => {
        startTransition(() => {
            if (provider === 'google') connectGoogleAction();
            if (provider === 'microsoft') connectMicrosoftAction();
            if (provider === 'linkedin') connectLinkedInAction();
            if (provider === 'facebook') connectFacebookAction();
        });
    };

    const handleDisconnect = (provider: Provider) => {
        startTransition(async () => {
            const actionMap = {
                google: disconnectGoogleAction,
                microsoft: disconnectMicrosoftAction,
                linkedin: disconnectLinkedInAction,
                facebook: disconnectFacebookAction,
                custom_email: disconnectCustomEmailAction, // Afegeix la nova acció
            };
            const result = await actionMap[provider]();
            
            if (result.success) {
                toast.success(result.message);
                if (provider === 'facebook') {
                    setConnections(prev => ({ ...prev, facebook: false, instagram: false }));
                } else {
                    setConnections(prev => ({ ...prev, [provider]: false }));
                }
                router.refresh();
            } else {
                toast.error(result.message);
            }
        });
    };
    
    const integrationList = [
        { name: 'google', title: t('googleTitle'), description: t('googleDescription'), icon: "https://fonts.gstatic.com/s/i/productlogos/googleg/v6/24px.svg" },
        { name: 'microsoft', title: t('microsoftTitle'), description: t('microsoftDescription'), icon: "https://img.icons8.com/?size=100&id=117562&format=png&color=000000" },
        { name: 'linkedin', title: t('linkedinTitle'), description: t('linkedinDescription'), icon: linkedin },
    ] as const;

    // Funció per actualitzar l'estat després de la connexió IMAP
    const handleCustomEmailSuccess = () => {
        setConnections(prev => ({...prev, custom_email: true}));
        router.refresh();
    }

    return (
        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
            <div className="glass-card p-4 sm:p-6 md:p-8 space-y-4">
                <h2 className="text-xl font-semibold mb-2">{t('title')}</h2>
                {/* Integració Correu Personalitzat */}
                <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 p-4 bg-muted/50 rounded-lg">
                    <div className="flex items-center gap-4">
                        <div className="flex-shrink-0 h-[34px] w-[34px] bg-primary/10 rounded-lg flex items-center justify-center">
                            <Mail className="h-5 w-5 text-primary" />
                        </div>
                        <div>
                            <h3 className="font-semibold">{t('customEmail.title')}</h3>
                            <p className="text-sm text-muted-foreground">{t('customEmail.description')}</p>
                        </div>
                    </div>
                    <div className="w-full sm:w-auto flex-shrink-0">
                        {connections.custom_email ? (
                            <div className="flex items-center justify-between w-full sm:gap-4">
                                <span className="flex items-center gap-2 text-green-500 text-sm"><CheckCircle className="w-5 h-5" /> {t('statusConnected')}</span>
                                <Button variant="destructive" size="sm" onClick={() => handleDisconnect('custom_email')} disabled={isPending}>
                                    {isPending && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                                    <XCircle className="w-4 h-4 sm:mr-2" />
                                    <span className="hidden sm:inline">{t('disconnectButton')}</span>
                                </Button>
                            </div>
                        ) : (
                            <ImapSmtpDialog onSuccess={handleCustomEmailSuccess}>
                                <Button disabled={isPending} className="w-full">
                                    {isPending && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                                    {t('connectButton')}
                                </Button>
                            </ImapSmtpDialog>
                        )}
                    </div>
                </div>
                {integrationList.map((item) => (
                    <div key={item.name} className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 p-4 bg-muted/50 rounded-lg">
                        <div className="flex items-center gap-4">
                            <Image src={item.icon} width={width} height={height} alt={`${item.name} logo`} className="flex-shrink-0" unoptimized />
                            <div>
                                <h3 className="font-semibold">{item.title}</h3>
                                <p className="text-sm text-muted-foreground">{item.description}</p>
                            </div>
                        </div>
                        <div className="w-full sm:w-auto flex-shrink-0">
                            {connections[item.name] ? (
                                <div className="flex items-center justify-between w-full sm:gap-4">
                                    <span className="flex items-center gap-2 text-green-500 text-sm"><CheckCircle className="w-5 h-5" /> {t('statusConnected')}</span>
                                    <Button variant="destructive" size="sm" onClick={() => handleDisconnect(item.name)} disabled={isPending}>
                                        {isPending && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                                        <XCircle className="w-4 h-4 sm:mr-2" />
                                        <span className="hidden sm:inline">{t('disconnectButton')}</span>
                                    </Button>
                                </div>
                            ) : (
                                <form action={() => handleConnect(item.name)} className="w-full">
                                    <Button type="submit" disabled={isPending} className="w-full">
                                        {isPending && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                                        {t('connectButton')}
                                    </Button>
                                </form>
                            )}
                        </div>
                    </div>
                ))}

                <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 p-4 bg-muted/50 rounded-lg">
                    <div className="flex items-center gap-4">
                        <div className="flex -space-x-2 flex-shrink-0">
                            <Image src={facebook} width={width} height={height} alt="Facebook logo" className="rounded-full ring-2 ring-background" />
                            <Image src={instagram} width={width} height={height} alt="Instagram logo" className="rounded-full ring-2 ring-background" />
                        </div>
                        <div>
                            <h3 className="font-semibold">{t('metaTitle')}</h3>
                            <p className="text-sm text-muted-foreground">{t('metaDescription')}</p>
                        </div>
                    </div>
                    <div className="w-full sm:w-auto flex-shrink-0">
                        {connections.facebook ? (
                            <div className="flex items-center justify-between w-full sm:gap-4">
                                <span className="flex items-center gap-2 text-green-500 text-sm"><CheckCircle className="w-5 h-5" /> {t('statusConnected')}</span>
                                <Button variant="destructive" size="sm" onClick={() => handleDisconnect('facebook')} disabled={isPending}>
                                    {isPending && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                                    <XCircle className="w-4 h-4 sm:mr-2" />
                                    <span className="hidden sm:inline">{t('disconnectButton')}</span>
                                </Button>
                            </div>
                        ) : (
                            <form action={() => handleConnect('facebook')} className="w-full">
                                <Button type="submit" disabled={isPending} className="w-full">
                                    {isPending && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                                    {t('connectButton')}
                                </Button>
                            </form>
                        )}
                    </div>
                </div>
            </div>
        </motion.div>
    );
}

// =================== FILE: src/app/[locale]/(app)/settings/integrations/_components/IntegrationsData.tsx ===================

import { validatePageSession } from "@/lib/supabase/session"; 
import { IntegrationsClient } from "./IntegrationsClient";
import { getTranslations } from "next-intl/server";

export async function IntegrationsData() {
    const t = await getTranslations('SettingsPage.integrations');
    const { supabase, user, activeTeamId } = await validatePageSession();

    const [userCredsRes, teamCredsRes] = await Promise.all([
        supabase.from('user_credentials').select('provider').eq('user_id', user.id),
        supabase.from('team_credentials').select('provider').eq('team_id', activeTeamId)
    ]);

    const userProviders = userCredsRes.data?.map(c => c.provider) || [];
    const teamProviders = teamCredsRes.data?.map(c => c.provider) || [];

    const allConnectedProviders = new Set([...userProviders, ...teamProviders]);

    const connectionStatuses = {
        google: allConnectedProviders.has('google'),
        microsoft: allConnectedProviders.has('microsoft'),
        linkedin: allConnectedProviders.has('linkedin'),
        facebook: allConnectedProviders.has('facebook'),
        instagram: allConnectedProviders.has('instagram'),
        custom_email: allConnectedProviders.has('custom_email'), // Afegeix aquesta línia
    };

    return (
        <div>
            <h1 className="text-3xl font-bold mb-8">{t('pageTitle')}</h1>
            <IntegrationsClient initialConnectionStatuses={connectionStatuses} />
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/settings/integrations/_components/IntegrationsSkeleton.tsx ===================

/**
 * @file IntegrationsSkeleton.tsx
 * @summary Mostra un esquelet de càrrega per a la pàgina d'Integracions.
 */
"use client";

import { Skeleton } from '@/components/ui/skeleton';

export function IntegrationsSkeleton() {
  return (
    <div>
      {/* Esquelet per a la capçalera */}
      <Skeleton className="h-9 w-1/2 mb-8" />
      
      {/* Esquelet per a la targeta d'integracions */}
      <div className="glass-card p-8 space-y-4 animate-pulse">
        <Skeleton className="h-7 w-1/3 mb-4" />
        {/* Esquelet per a la línia de Google */}
        <div className="flex items-center justify-between p-4 bg-muted/50 rounded-lg">
          <div className="flex items-center gap-4">
            <Skeleton className="h-6 w-6 rounded-full" />
            <div className="space-y-2">
              <Skeleton className="h-5 w-24" />
              <Skeleton className="h-4 w-40" />
            </div>
          </div>
          <Skeleton className="h-9 w-28 rounded-md" />
        </div>
        {/* Esquelet per a la línia de Microsoft */}
        <div className="flex items-center justify-between p-4 bg-muted/50 rounded-lg">
          <div className="flex items-center gap-4">
            <Skeleton className="h-6 w-6 rounded-full" />
            <div className="space-y-2">
              <Skeleton className="h-5 w-32" />
              <Skeleton className="h-4 w-48" />
            </div>
          </div>
          <Skeleton className="h-9 w-28 rounded-md" />
        </div>
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/settings/layout.tsx ===================

import { SettingsNav } from "./_components/settings-nav";

// Aquest component de layout envoltarà totes les pàgines de la secció de configuració.
export default function SettingsLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    // En pantalles grans (lg), creem una graella de dues columnes.
    // En pantalles més petites, els elements es col·loquen un a sobre de l'altre.
    <div className="lg:grid lg:grid-cols-[280px_1fr] lg:gap-12 space-y-8 lg:space-y-0">
      <aside className="lg:col-span-1">
        {/* El menú de navegació */}
        <SettingsNav />
      </aside>
      <main className="lg:col-span-1">
        {/* Aquí es renderitzarà el contingut de cada pàgina (perfil, facturació, etc.) */}
        {children}
      </main>
    </div>
  );
}


// =================== FILE: src/app/[locale]/(app)/settings/page.tsx ===================

// Aquest és un Server Component que gestiona la ruta arrel '/settings'.

import { redirect } from 'next/navigation';

/**
 * Aquesta pàgina no té contingut visual propi.
 * La seva única funció és redirigir l'usuari automàticament
 * a la primera secció de la configuració, que és el perfil.
 * Això millora l'experiència d'usuari, evitant que arribi a una pàgina '/settings' buida.
 */
export default function SettingsRootPage() {
  // 'redirect' és una funció de Next.js que envia l'usuari a una altra URL.
  redirect('/settings/profile');
}

// =================== FILE: src/app/[locale]/(app)/settings/permissions/actions.ts ===================

"use server";

import { revalidatePath } from "next/cache";
import { validateUserSession } from '@/lib/supabase/session'; // Importem la nova funció
// El tipus de dades que rebrem del client
type Permission = {
    grantee_user_id: string; // Qui rep el permís
    target_user_id: string;  // De qui veurà els correus
};

/**
 * Actualitza tots els permisos d'inbox per a l'equip actiu.
 */
export async function updateInboxPermissionsAction(permissions: Permission[]) {
    // ✅ 2. Validació centralitzada
    const session = await validateUserSession();
    if ('error' in session) {
        return { success: false, message: session.error.message };
    }
    const { supabase, user, activeTeamId } = session;

    // Comprovació de rol: només owners/admins poden canviar permisos
    const { data: member } = await supabase.from('team_members').select('role').eq('user_id', user.id).eq('team_id', activeTeamId).single();
    if (!['owner', 'admin'].includes(member?.role || '')) {
        return { success: false, message: "No tens permisos per a gestionar els permisos de l'inbox." };
    }
    
    try {
        // Estratègia "esborrar i tornar a crear": és la més simple i robusta.
        // 1. Esborrem tots els permisos existents per a aquest equip.
        await supabase.from('inbox_permissions').delete().eq('team_id', activeTeamId);

        // 2. Si hi ha nous permisos per a desar, els inserim.
        if (permissions.length > 0) {
            const permissionsToInsert = permissions.map(p => ({ ...p, team_id: activeTeamId }));
            await supabase.from('inbox_permissions').insert(permissionsToInsert).throwOnError();
        }

        revalidatePath('/settings/permissions');
        return { success: true, message: "Permisos actualitzats correctament." };
    } catch (error) {
        const message = error instanceof Error ? error.message : "Error desconegut en desar els permisos.";
        return { success: false, message };
    }
}

// =================== FILE: src/app/[locale]/(app)/settings/permissions/page.tsx ===================

import { createClient } from "@/lib/supabase/server";
import { redirect } from "next/navigation";
import { PermissionsClient } from './_components/PermissionsClient';
import { Card, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { TriangleAlert } from "lucide-react";

// Definim aquí els tipus de dades per a aquesta pàgina
type Member = { id: string; full_name: string | null; email: string | null; };
type Permission = { grantee_user_id: string; target_user_id: string; };

export default async function PermissionsPage() {
    const supabase = createClient();
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) redirect('/login');
    
    const activeTeamId = user.app_metadata?.active_team_id;
    if (!activeTeamId) redirect('/settings/team');

    // ✅ PAS 1: Comprovació de permisos a nivell de pàgina
    // Verifiquem el rol de l'usuari actual dins de l'equip actiu.
    const { data: currentUserMember } = await supabase
        .from('team_members')
        .select('role')
        .eq('user_id', user.id)
        .eq('team_id', activeTeamId)
        .single();
    
    const canManagePermissions = ['owner', 'admin'].includes(currentUserMember?.role || '');

    // Si l'usuari no és owner o admin, li mostrem un missatge d'accés denegat.
    if (!canManagePermissions) {
        return (
            <Card className="max-w-lg mx-auto mt-10">
                <CardHeader className="text-center">
                    <div className="mx-auto bg-destructive/10 p-3 rounded-full w-fit">
                        <TriangleAlert className="w-8 h-8 text-destructive" />
                    </div>
                    <CardTitle className="mt-4">Accés Denegat</CardTitle>
                    <CardDescription>
                        Només els propietaris i administradors de l'equip poden gestionar els permisos de la bústia d'entrada.
                    </CardDescription>
                </CardHeader>
            </Card>
        );
    }
    
    // ✅ PAS 2: Carreguem les dades necessàries si l'usuari té permís
    const [membersRes, permissionsRes] = await Promise.all([
        supabase.from('team_members').select('profiles(id, full_name, email)').eq('team_id', activeTeamId),
        supabase.from('inbox_permissions').select('grantee_user_id, target_user_id').eq('team_id', activeTeamId)
    ]);

    const teamMembers: Member[] = membersRes.data?.map(m => m.profiles).filter(Boolean) as unknown as Member[] || [];
    const initialPermissions: Permission[] = permissionsRes.data || [];

    return (
        <div className="space-y-6">
            <div>
                <h1 className="text-3xl font-bold">Permisos de l'Inbox</h1>
                <p className="text-muted-foreground mt-2">
                    Selecciona les caselles per a permetre que un membre de l'equip pugui veure la bústia de correu d'un altre.
                </p>
            </div>
            <div className="mt-8">
                <PermissionsClient
                    teamMembers={teamMembers}
                    initialPermissions={initialPermissions}
                />
            </div>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/settings/permissions/_components/PermissionsClient.tsx ===================

"use client";

import { useState, useTransition } from 'react';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Card, CardContent, CardFooter } from '@/components/ui/card';
import { toast } from 'sonner';
import { updateInboxPermissionsAction } from '../actions';
import { Loader2 } from 'lucide-react';

type Member = { id: string; full_name: string | null; email: string | null; };
type Permission = { grantee_user_id: string; target_user_id: string; };

export function PermissionsClient({ teamMembers, initialPermissions }: {
    teamMembers: Member[];
    initialPermissions: Permission[];
}) {
    const [permissions, setPermissions] = useState<Permission[]>(initialPermissions);
    const [isPending, startTransition] = useTransition();

    const handlePermissionChange = (granteeId: string, targetId: string, isChecked: boolean) => {
        if (isChecked) {
            setPermissions(prev => [...prev, { grantee_user_id: granteeId, target_user_id: targetId }]);
        } else {
            setPermissions(prev => prev.filter(p => !(p.grantee_user_id === granteeId && p.target_user_id === targetId)));
        }
    };

    const handleSave = () => {
        startTransition(async () => {
            const result = await updateInboxPermissionsAction(permissions);
            if (result.success) {
                toast.success(result.message);
            } else {
                toast.error(result.message);
            }
        });
    };

    return (
        <Card>
            <CardContent className="p-0">
                <Table>
                    <TableHeader>
                        <TableRow>
                            <TableHead className="w-[250px]">Membre de l'equip</TableHead>
                            {teamMembers.map(targetUser => (
                                <TableHead key={targetUser.id} className="text-center">
                                    Pot veure la bústia de <br/>
                                    <span className="font-semibold">{targetUser.full_name || targetUser.email}</span>
                                </TableHead>
                            ))}
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        {teamMembers.map(granteeUser => (
                            <TableRow key={granteeUser.id}>
                                <TableCell className="font-semibold">{granteeUser.full_name || granteeUser.email}</TableCell>
                                {teamMembers.map(targetUser => {
                                    // Un usuari no es pot donar permís a si mateix, la casella està buida.
                                    if (granteeUser.id === targetUser.id) {
                                        return <TableCell key={targetUser.id} />;
                                    }
                                    const isChecked = permissions.some(p => p.grantee_user_id === granteeUser.id && p.target_user_id === targetUser.id);
                                    return (
                                        <TableCell key={targetUser.id} className="text-center">
                                            <Checkbox
                                                checked={isChecked}
                                                onCheckedChange={(checked) => handlePermissionChange(granteeUser.id, targetUser.id, !!checked)}
                                            />
                                        </TableCell>
                                    );
                                })}
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>
            </CardContent>
            <CardFooter className="flex justify-end p-4 border-t">
                <Button onClick={handleSave} disabled={isPending}>
                    {isPending && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                    Desar Permisos
                </Button>
            </CardFooter>
        </Card>
    );
}

// =================== FILE: src/app/[locale]/(app)/settings/profile/actions.ts ===================

"use server";

import { revalidatePath } from "next/cache";
import { z } from 'zod';
import { validateUserSession } from "@/lib/supabase/session";
import { hasPermission, PERMISSIONS } from "@/lib/permissions";

/**
 * Actualitza les dades PERSONALS de l'usuari.
 */
export async function updateUserProfileAction(formData: FormData) {
  // ✅ MILLORA: Validació de sessió centralitzada.
  const session = await validateUserSession();
  if ('error' in session) return { success: false, message: session.error.message };
  const { supabase, user } = session;

  const profileData = {
    full_name: formData.get('full_name') as string,
    phone: formData.get('phone') as string,
    job_title: formData.get('job_title') as string,
  };

  const { error } = await supabase.from('profiles').update(profileData).eq('id', user.id);

  if (error) return { success: false, message: `Error en actualitzar el perfil: ${error.message}` };

  revalidatePath('/settings/profile');
  return { success: true, message: "Perfil personal actualitzat." };
}


// ✅ MILLORA: Esquema de Zod per a la validació de dades.
const TeamSchema = z.object({
  name: z.string().min(1, "El nom de l'empresa és obligatori."),
  tax_id: z.string().optional(),
  address: z.string().optional(),
  company_phone: z.string().optional(),
  company_email: z.string().email("L'email de l'empresa no és vàlid.").optional().or(z.literal('')),
  website: z.string().url("L'URL de la web no és vàlida.").optional().or(z.literal('')),
  summary: z.string().optional(),
  sector: z.string().optional(),
  logo_url: z.string().optional(),
});

/**
 * Actualitza les dades DE L'EMPRESA de l'equip actiu.
 */
export async function updateTeamAction(formData: FormData) {
  const session = await validateUserSession();
  if ('error' in session) return { success: false, message: session.error.message };
  const { supabase, user, activeTeamId } = session;

  // ✅ MILLORA: Permisos centralitzats amb el helper.
  const { data: member } = await supabase.from('team_members').select('role').eq('user_id', user.id).eq('team_id', activeTeamId).single();
  if (!hasPermission(member?.role, PERMISSIONS.MANAGE_TEAM_PROFILE)) {
    return { success: false, message: "No tens permisos per a editar aquest equip." };
  }

  // ✅ MILLORA: Validació de dades amb Zod.
  const rawData = Object.fromEntries(formData.entries());
  const validation = TeamSchema.safeParse(rawData);

  if (!validation.success) {
    // Podríem retornar els errors específics de Zod per mostrar-los al formulari.
    return { success: false, message: "Hi ha errors en les dades del formulari." };
  }
  
  // Treballem amb les dades validades i netejades per Zod.
  const { company_email, company_phone, ...teamData } = validation.data;
  const finalTeamData = {
    ...teamData,
    email: company_email,
    phone: company_phone
  };

  const { error } = await supabase.from('teams').update(finalTeamData).eq('id', activeTeamId);

  if (error) return { success: false, message: `Error en actualitzar l'empresa: ${error.message}` };

  revalidatePath('/settings/profile');
  return { success: true, message: "Dades de l'empresa actualitzades." };
}

// =================== FILE: src/app/[locale]/(app)/settings/profile/page.tsx ===================

import { getTranslations } from "next-intl/server";
import { ProfileData } from "./_components/ProfileData";
import { Suspense } from "react";

// Aquest és un exemple de com hauria de ser una pàgina de contingut
// dins de la secció de configuració.
export default async function ProfilePage() {
  const t = await getTranslations('SettingsPage.nav');

  return (
    <div className="space-y-8">
      {/* ✅ NOU: Afegim el títol aquí, però només el mostrem en pantalles petites (lg:hidden)
          perquè en escriptori ja apareix al menú lateral. */}
      <h1 className="text-3xl font-bold lg:hidden">{t('title')}</h1>
      
      {/* El teu contingut, com el formulari de perfil, va aquí */}
      <Suspense fallback={<div>Carregant perfil...</div>}>
        <ProfileData />
      </Suspense>
    </div>
  );
}


// =================== FILE: src/app/[locale]/(app)/settings/profile/_components/ProfileData.tsx ===================

import { validatePageSession } from '@/lib/supabase/session';
import { getActiveTeam } from '@/lib/supabase/teams'; // ✅ 1. Importem la nostra funció robusta
import { ProfileForm } from "./ProfileForm";
import type { Profile, Team } from "@/types/settings";
import { Role } from '@/lib/permissions.config';

export async function ProfileData() {
  const { supabase, user } = await validatePageSession();

  // Obtenim l'ID de l'equip actiu des del token, que és la font més fiable
  const activeTeamId = user.app_metadata.active_team_id;

  // Si no hi ha equip actiu, només carreguem el perfil
  if (!activeTeamId) {
    const { data: profile } = await supabase.from('profiles').select('*').eq('id', user.id).single();
    return (
      <ProfileForm 
        email={user.email || ''}
        profile={profile as Profile} 
        team={null}
        role={null}
      />
    );
  }

  // ✅ 2. Fem les consultes en paral·lel per a màxima eficiència
  const [profileRes, teamRes, memberRes] = await Promise.all([
    supabase.from('profiles').select('*').eq('id', user.id).single(),
    getActiveTeam(), // Reutilitzem la nostra funció! Ja sap quin equip obtenir.
    supabase.from('team_members').select('role').eq('user_id', user.id).eq('team_id', activeTeamId).single()
  ]);
  
  const profile = profileRes.data as Profile | null;
  const team = teamRes as Team | null; // getActiveTeam ja retorna l'objecte correcte
  const role = memberRes.data?.role as Role | null;

  return (
    <ProfileForm 
      email={user.email || ''}
      profile={profile as Profile} 
      team={team}
      role={role}
    />
  );
}

// =================== FILE: src/app/[locale]/(app)/settings/profile/_components/ProfileForm.tsx ===================

"use client";

import React, { useState, useTransition } from 'react';
import { motion } from 'framer-motion';
import Image from 'next/image';
import { toast } from 'sonner';
import { Loader2, Upload } from "lucide-react";

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';

import { createClient } from '@/lib/supabase/client';
import { updateUserProfileAction, updateTeamAction } from '../actions';
import type { Profile, Team } from '@/types/settings';

import { hasPermission, PERMISSIONS } from '@/lib/permissions.config';

interface ProfileFormProps {
    email: string;
    profile: Profile;
    team: Team | null;
    role: 'owner' | 'admin' | 'member' | null;
}

export function ProfileForm({ email, profile, team, role }: ProfileFormProps) {
    const [isProfilePending, startProfileTransition] = useTransition();
    const [isTeamPending, startTeamTransition] = useTransition();
    const [isUploading, setIsUploading] = useState(false);
    const [logoUrl, setLogoUrl] = useState(team?.logo_url || null);

    const canManageTeam = hasPermission(role, PERMISSIONS.MANAGE_TEAM_PROFILE);

    const handleLogoUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (!file || !team) return;

        setIsUploading(true);
        const filePath = `${team.id}/logo-${Date.now()}`;
        const { error } = await createClient().storage.from('logos').upload(filePath, file, { upsert: true });

        if (error) {
            toast.error("Error al pujar el logo", { description: error.message });
        } else {
            const { data } = createClient().storage.from('logos').getPublicUrl(filePath);
            setLogoUrl(data.publicUrl);
            toast.success("Logo pujat correctament");
        }
        setIsUploading(false);
    };

    const handleUpdateProfile = (formData: FormData) => {
        startProfileTransition(async () => {
            const result = await updateUserProfileAction(formData);
            if (result.success) toast.success(result.message);
            else toast.error(result.message);
        });
    };

    const handleUpdateTeam = (formData: FormData) => {
        startTeamTransition(async () => {
            formData.set('logo_url', logoUrl || '');
            const result = await updateTeamAction(formData);
            if (result.success) toast.success(result.message);
            else toast.error(result.message);
        });
    };

    return (
        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="space-y-8">
            {/* --- Formulari de Perfil Personal --- */}
            <form action={handleUpdateProfile}>
                <Card>
                    <CardHeader>
                        <CardTitle>El Meu Perfil</CardTitle>
                        <CardDescription>Aquestes són les teves dades personals.</CardDescription>
                    </CardHeader>
                    <CardContent>
                        {/* ✅ MILLORA: Graella de 2 columnes per al perfil */}
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div className="space-y-2">
                                <Label>Email</Label>
                                <Input type="email" value={email} disabled />
                            </div>
                            <div className="space-y-2">
                                <Label htmlFor="full_name">Nom i Cognoms</Label>
                                <Input id="full_name" name="full_name" defaultValue={profile?.full_name || ''} />
                            </div>
                            <div className="space-y-2">
                                <Label htmlFor="phone">Telèfon Personal</Label>
                                <Input id="phone" name="phone" defaultValue={profile?.phone || ''} />
                            </div>
                            <div className="space-y-2">
                                <Label htmlFor="job_title">Càrrec</Label>
                                <Input id="job_title" name="job_title" defaultValue={profile?.job_title || ''} placeholder="Ex: Director Comercial" />
                            </div>
                        </div>
                    </CardContent>
                    <CardFooter>
                        <Button type="submit" disabled={isProfilePending}>{isProfilePending ? "Desant..." : "Desar Perfil"}</Button>
                    </CardFooter>
                </Card>
            </form>

            {/* --- Formulari de l'Empresa --- */}
            {canManageTeam && team && (
                <form action={handleUpdateTeam}>
                    <Card>
                        <CardHeader>
                            <CardTitle>Dades de l'Empresa</CardTitle>
                            <CardDescription>Aquesta informació s'utilitzarà a les teves factures i pressupostos.</CardDescription>
                        </CardHeader>
                        <CardContent className="space-y-6">
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                                <div className="space-y-2">
                                    <Label htmlFor="name">Nom de l'empresa</Label>
                                    <Input id="name" name="name" defaultValue={team.name || ''} />
                                </div>
                                <div className="space-y-2">
                                    <Label htmlFor="tax_id">NIF/CIF</Label>
                                    <Input id="tax_id" name="tax_id" defaultValue={team.tax_id || ''} />
                                </div>
                                <div className="space-y-2">
                                    <Label htmlFor="email">Email de l'empresa</Label>
                                    <Input id="email" name="email" type="email" defaultValue={team.email || ''} />
                                </div>

                                {/* ✅ segona graella */}

                                <div className="space-y-2">
                                    <Label htmlFor="phone">Telèfon de l'empresa</Label>
                                    <Input id="phone" name="phone" defaultValue={team.phone || ''} />
                                </div>
                                <div className="space-y-2">
                                    <Label htmlFor="sector">Sector</Label>
                                    <Input id="sector" name="sector" defaultValue={team.sector || ''} placeholder="Ex: Tecnologia, Construcció" />
                                </div>
                                <div className="space-y-2">
                                    <Label htmlFor="country">País</Label>
                                    <Input id="country" name="country" defaultValue={team.country || ''} placeholder="País" />
                                </div>


                                {/* ✅ tercera graella */}
                                <div className="space-y-2">
                                    <Label htmlFor="street">Carrer</Label>
                                    <Input id="street" name="street" defaultValue={team.street || ''} placeholder="Carrer, Número, Ciutat, CP, País" />
                                </div>
                                <div className="space-y-2">
                                    <Label htmlFor="postal_code">Codi Postal</Label>
                                    <Input id="postal_code" name="postal_code" defaultValue={team.postal_code || ''} placeholder="Codi Postal" />
                                </div>
                                <div className="space-y-2">
                                    <Label htmlFor="city">Població</Label>
                                    <Input id="city" name="city" defaultValue={team.city || ''} placeholder="Població" />
                                </div>



                                <div className="md:col-span-2 space-y-2">
                                    <Label htmlFor="website">Pàgina web</Label>
                                    <Input id="website" name="website" type="url" defaultValue={team.website || ''} placeholder="https://elteudomini.com" />
                                </div>
                                <div className="md:col-span-2 space-y-2">
                                    <Label htmlFor="summary">Descripció curta</Label>
                                    <Textarea id="summary" name="summary" defaultValue={team.summary || ''} placeholder="Una breu descripció del que fa la teva empresa." />
                                </div>
                                <div className="md:col-span-2 space-y-2">
                                    <Label>Logo</Label>
                                    <div className="mt-2 flex items-center gap-4">
                                        {logoUrl ? <Image src={logoUrl} alt="Logo" width={64} height={64} className="object-contain rounded-lg border p-1" /> : <div className="h-16 w-16 bg-muted rounded-lg flex items-center justify-center text-muted-foreground">Logo</div>}
                                        <Button asChild variant="outline">
                                            <label htmlFor="logo-upload" className="cursor-pointer">
                                                {isUploading ? <Loader2 className="animate-spin" /> : <Upload className="w-4 h-4 mr-2" />} Cambiar Logo
                                            </label>
                                        </Button>
                                        <input id="logo-upload" type="file" accept="image/*" className="hidden" onChange={handleLogoUpload} disabled={isUploading} />
                                    </div>
                                </div>
                            </div>
                        </CardContent>
                        <CardFooter>
                            <Button type="submit" disabled={isTeamPending}>{isTeamPending ? "Desant..." : "Desar Dades de l'Empresa"}</Button>
                        </CardFooter>
                    </Card>
                </form>
            )}
        </motion.div>
    );
}

// =================== FILE: src/app/[locale]/(app)/settings/profile/_components/ProfileSkeleton.tsx ===================

"use client";

const SkeletonCard = ({ lines }: { lines: number }) => (
  <div className="border bg-card text-card-foreground shadow-sm rounded-lg animate-pulse">
    <div className="p-6 space-y-2">
      <div className="h-6 w-1/3 bg-gray-700/50 rounded-md"></div>
      <div className="h-4 w-2/3 bg-gray-700/50 rounded-md"></div>
    </div>
    <div className="p-6 pt-0 space-y-6">
      {[...Array(lines)].map((_, i) => (
        <div key={i} className="space-y-2">
          <div className="h-4 w-1/4 bg-gray-700/50 rounded-md"></div>
          <div className="h-10 w-full bg-gray-700/50 rounded-md"></div>
        </div>
      ))}
    </div>
  </div>
);

/**
 * @summary Mostra un esquelet de càrrega per a la pàgina d'edició del perfil.
 */
export function ProfileSkeleton() {
  return (
    <div className="space-y-8">
      <SkeletonCard lines={3} />
      <SkeletonCard lines={2} />
      <div className="flex justify-end pt-4">
        <div className="h-10 w-32 bg-gray-700/50 rounded-md"></div>
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/settings/team/actions.ts ===================

"use server";

import { createClient, createAdminClient } from "@/lib/supabase/server";
import { redirect } from "next/navigation";
import { revalidatePath } from "next/cache";
import { Resend } from 'resend';
import { validateUserSession } from "@/lib/supabase/session"; // ✅ Utilitzem el teu helper!
import { PERMISSIONS, validateSessionAndPermission, Role } from '@/lib/permissions';

/**
 * Crea un nou equip i les seves dependències de manera transaccional
 * cridant una funció RPC a la base de dades.
 */
export async function createTeamAction(formData: FormData) {
    // 1. Validació d'entrades (això es queda igual)
    const teamName = formData.get('teamName') as string;
    if (!teamName || teamName.trim().length < 2) {
        return { success: false, message: "El nom de l'equip és obligatori." };
    }

    // 2. Validació de sessió (ara amb el teu helper)
    // Necessitem assegurar que hi ha un usuari per a que 'auth.uid()' funcioni a la funció SQL.
    const session = await validateUserSession();
    if ('error' in session) {
        return { success: false, message: session.error.message };
    }
    const { supabase } = session;

    try {
        // 3. Execució de la transacció
        // Cridem la nostra funció de la base de dades amb un sol 'await'.
        const { error } = await supabase.rpc('create_team_with_defaults', {
            team_name: teamName
        });

        if (error) throw error; // Si hi ha un error, el 'catch' el gestionarà.

    } catch (error: unknown) {
        console.error("Error en la transacció de crear equip:", error);

        let errorMessage = "No s'ha pogut crear l'equip.";
        if (error instanceof Error) {
            errorMessage = `No s'ha pogut crear l'equip: ${error.message}`;
        }
        return { success: false, message: errorMessage };
    }

    // 4. Revalidació i redirecció
    revalidatePath('/settings/team');
    return redirect('/settings/team'); // És bona pràctica retornar el redirect
}
/**
 * Convida un usuari a l'equip ACTIU.
 * Implementa una lògica híbrida:
 * - Si l'usuari ja existeix, crea una invitació interna i envia un email de cortesia.
 * - Si l'usuari no existeix, crea una invitació amb token i envia un email de registre.
 */
export async function inviteUserAction(formData: FormData) {
    // 1. VALIDACIÓ DE PERMISOS
    const validation = await validateSessionAndPermission(PERMISSIONS.MANAGE_TEAM_MEMBERS);
    if ('error' in validation) {
        return { success: false, message: validation.error.message };
    }
    const { user: inviter, activeTeamId, supabase } = validation;

    // 2. VALIDACIÓ D'ENTRADES
    const email = formData.get('email') as string;
    const role = formData.get('role') as Role;
    if (!email || !role) {
        return { success: false, message: "Falten l'email o el rol." };
    }

    try {
        // 3. COMPROVACIÓ DE SEGURETAT: Ja existeix una invitació pendent per a aquest email?
        const { data: existingInvite } = await supabase.from('invitations').select('id').match({ email, team_id: activeTeamId, status: 'pending' }).maybeSingle();
        if (existingInvite) {
            return { success: false, message: "Ja s'ha enviat una invitació a aquest usuari per a aquest equip." };
        }

        // 4. CERCA EFICIENT D'USUARI
        const { data: existingUserId } = await supabase.rpc('get_user_id_by_email', { email_to_check: email });

        // 5. OBTENCIÓ DE DADES COMUNES
        const [teamRes, inviterProfileRes] = await Promise.all([
            supabase.from('teams').select('name').eq('id', activeTeamId).single(),
            supabase.from('profiles').select('full_name').eq('id', inviter.id).single()
        ]);

        if (teamRes.error) throw new Error("L'equip actiu no s'ha trobat.");
        const teamName = teamRes.data.name;
        const inviterName = inviterProfileRes.data?.full_name || inviter.email!;

        // 6. CREACIÓ DE LA INVITACIÓ: La creem sempre i obtenim el token.
        const { data: invitation, error: inviteError } = await supabase
            .from('invitations')
            .insert({
                team_id: activeTeamId,
                email,
                role,
                inviter_name: inviterName,
                team_name: teamName,
                user_id: existingUserId // Si no existeix, serà null, la qual cosa és correcte.
            })
            .select('id, token') // Demanem el token!
            .single();

        if (inviteError) throw inviteError;
        if (!invitation) throw new Error("No s'ha pogut crear la invitació.");

        // 7. LÒGICA D'ENVIAMENT D'EMAIL
        const resend = new Resend(process.env.RESEND_API_KEY);

        if (existingUserId) {
            // --- Cas A: L'usuari JA EXISTEIX ---
            await resend.emails.send({
                from: `Notificació de "${teamName}" <invitacions@ribotflow.com>`,
                to: email,
                subject: `Has estat convidat a unir-te a l'equip ${teamName}`,
                html: `<p>Hola de nou, <strong>${inviterName}</strong> t'ha convidat a l'equip <strong>${teamName}</strong>. Com que ja tens un compte, pots acceptar-la des del teu panell d'equips.</p><div style="text-align: center; margin: 25px 0;"><a href="${process.env.NEXT_PUBLIC_SITE_URL}/settings/team" target="_blank" style="background-color: #007bff; color: #ffffff; padding: 15px 25px; text-decoration: none; border-radius: 5px; font-weight: bold;">Anar al meu panell</a></div>`
            });
        } else {
            // --- Cas B: L'usuari ÉS NOU ---
            // Ara tenim 'invitation.token' disponible.
            await resend.emails.send({
                from: `Invitació de "${teamName}" <invitacions@ribotflow.com>`,
                to: email,
                subject: `Has estat convidat a unir-te a l'equip ${teamName}`,
                html: `
                <!DOCTYPE html>
                <html>
                <body style="font-family: Arial, sans-serif; background-color: #f4f4f4; padding: 20px;">
                    <table align="center" width="100%" style="max-width: 600px; background-color: #ffffff; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
                        <tr>
                            <td style="padding: 40px 30px;">
                                <h1 style="font-size: 24px;">Has estat convidat!</h1>
                                <p style="font-size: 16px; line-height: 1.6;">Hola,</p>
                                <p style="font-size: 16px; line-height: 1.6;">
                                    <strong>${inviterName}</strong> t'ha convidat a unir-te al seu equip <strong>${teamName}</strong>.
                                </p>
                                <div style="text-align: center; margin: 25px 0;">
                                    <a href="${process.env.NEXT_PUBLIC_SITE_URL}/invitation/accept?token=${invitation.token}&email=${encodeURIComponent(email)}" target="_blank" style="background-color: #007bff; color: #ffffff; padding: 15px 25px; text-decoration: none; border-radius: 5px; font-weight: bold;">
                                        Uneix-te a l'equip
                                    </a>
                                </div>
                            </td>
                        </tr>
                    </table>
                </body>
                </html>`
            });
        }

        revalidatePath('/settings/team');
        return { success: true, message: `Invitació enviada a ${email}.` };

    } catch (error: unknown) {
        console.error("Error en el procés d'invitació:", error);
        let errorMessage = "No s'ha pogut enviar la invitació.";
        if (error instanceof Error) {
            errorMessage = error.message;
        }
        return { success: false, message: errorMessage };
    }
}
/**
/**
 * Punt d'entrada per a un enllaç d'invitació.
 * Valida el token i redirigeix l'usuari a 'login' o a 'signup'
 * depenent de si ja té un compte.
 */
export async function resolveInvitationAction(token: string) {
    // 1. Validació del token (això ja estava perfecte)
    if (!token) {
        return redirect('/login?message=El token d\'invitació no és vàlid.');
    }

    const supabaseAdmin = createAdminClient();

    const { data: invitation } = await supabaseAdmin
        .from('invitations')
        .select('email')
        .match({ token, status: 'pending' }) // Afegim la comprovació de 'status' per seguretat
        .single();

    if (!invitation) {
        return redirect('/login?message=La teva invitació no és vàlida o ja ha estat utilitzada.');
    }

    const invitedEmail = invitation.email;

    // 2. Comprovació d'usuari (la part refactoritzada)
    // ✅ Substituïm el 'listUsers' per la nostra crida RPC eficient.
    const { data: existingUserId, error: rpcError } = await supabaseAdmin.rpc('get_user_id_by_email', {
        email_to_check: invitedEmail
    });

    if (rpcError) {
        console.error("Error a l'RPC get_user_id_by_email:", rpcError);
        return redirect('/login?message=Hi ha hagut un error al servidor.');
    }

    // 3. Redirecció basada en el resultat
    if (existingUserId) {
        // L'usuari JA EXISTEIX. L'enviem a iniciar sessió.
        console.log(`[resolveInvitation] L'usuari ${invitedEmail} ja existeix. Redirigint a login.`);
        redirect(`/login?invite_token=${token}&email=${encodeURIComponent(invitedEmail)}`);
    } else {
        // L'usuari NO EXISTEIX. L'enviem a la pàgina de registre per a convidats.
        console.log(`[resolveInvitation] L'usuari ${invitedEmail} és nou. Redirigint a la pàgina de registre.`);
        redirect(`/invitation/accept?token=${token}&email=${encodeURIComponent(invitedEmail)}`);
    }
}
/**
 * Processa l'acceptació d'una invitació de manera transaccional.
 * Afegeix l'usuari a l'equip, actualitza el seu token de sessió i neteja la invitació.
 */
export async function acceptInviteAction(token: string) {
    // 1. Validació bàsica de l'usuari
    const supabase = createClient();
    const { data: { user } } = await supabase.auth.getUser();
    const locale = user?.user_metadata?.locale || 'ca';

    if (!user) {
        return redirect(`/login?invite_token=${token}&message=Has d'iniciar sessió per acceptar.`);
    }

    try {
        // 2. Execució de la transacció
        // Cridem la nostra funció de la base de dades, que ho fa tot.
        const { error } = await supabase.rpc('accept_invitation_and_set_active_team', {
            invite_token: token
        });

        if (error) throw error;

        // 3. Forcem el refresc del token al costat del client
        // Aquesta és una bona pràctica per assegurar que la UI s'actualitza a l'instant.
        await supabase.auth.refreshSession();

    } catch (error: unknown) {
        let errorMessage = "Error en processar la invitació.";
        if (error instanceof Error) {
            // La funció SQL retorna missatges d'error clars que podem mostrar a l'usuari.
            if (error.message.includes('INVITATION_NOT_FOUND')) {
                errorMessage = "La teva invitació no és vàlida o ja ha estat utilitzada.";
            } else if (error.message.includes('INVITATION_FOR_DIFFERENT_USER')) {
                errorMessage = "Aquesta invitació està destinada a un altre compte de correu.";
            } else {
                errorMessage = error.message;
            }
        }
        console.error("Error a acceptInviteAction:", errorMessage);
        return redirect(`/dashboard?error=${encodeURIComponent(errorMessage)}`);
    }

    // 4. Redirecció final
    // L'usuari ha acceptat la invitació i el seu token ja apunta al nou equip.
    // El redirigim directament al dashboard (o on consideris).
    return redirect(`/${locale}/dashboard?success=Benvingut a l'equip!`);
}
/**
 * Revoca una invitació pendent de l'equip actiu.
 * L'acció només la poden realitzar usuaris amb els permisos adequats.
 */
export async function revokeInvitationAction(invitationId: string) {
    // 1. VALIDACIÓ CENTRALITZADA: Substituïm tot el boilerplate per una sola crida.
    const validation = await validateSessionAndPermission(PERMISSIONS.MANAGE_TEAM_MEMBERS);
    if ('error' in validation) {
        return { success: false, message: validation.error.message };
    }
    // Obtenim el context ja validat.
    const { activeTeamId, supabase } = validation;

    try {
        // 2. EXECUCIÓ DE L'ACCIÓ: La lògica principal no canvia, però ara dins d'un try/catch.
        // La comprovació 'eq('team_id', activeTeamId)' és una capa de seguretat excel·lent.
        const { error } = await supabase
            .from('invitations')
            .delete()
            .match({ id: invitationId, team_id: activeTeamId });

        if (error) throw error;

    } catch (error: unknown) {
        console.error("Error en revocar la invitació:", error);
        let errorMessage = "No s'ha pogut revocar la invitació.";
        if (error instanceof Error) {
            errorMessage = error.message;
        }
        return { success: false, message: errorMessage };
    }

    // 3. REVALIDACIÓ I RESPOSTA
    revalidatePath('/settings/team');
    return { success: true, message: "Invitació revocada." };
}
/**
 * Canvia l'equip actiu de l'usuari, actualitzant les metadades del seu token
 * per reflectir el nou context (ID de l'equip i pla de subscripció).
 */
export async function switchActiveTeamAction(teamId: string) {
    // 1. Validació d'usuari: N'hi ha prou amb saber que l'usuari està logat.
    // Usem createClient directament perquè 'validateUserSession' requereix un equip actiu.
    const supabase = createClient();
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
        return { success: false, message: "Usuari no autenticat." };
    }

    try {
        // 2. Comprovació de seguretat: L'usuari pertany a l'equip de destí?
        const { data: member } = await supabase
            .from('team_members')
            .select('team_id')
            .match({ user_id: user.id, team_id: teamId })
            .maybeSingle();

        if (!member) {
            return { success: false, message: "No tens accés a aquest equip." };
        }

        // 3. MILLORA CLAU: Obtenim el pla de subscripció del nou equip.
        const { data: subscription } = await supabase
            .from('subscriptions')
            .select('plan_id, status')
            .eq('team_id', teamId)
            .maybeSingle();

        const newTeamPlan = (subscription?.status === 'active') ? subscription.plan_id : 'free';

        // 4. Actualització del token de l'usuari amb TOT el nou context.
        const supabaseAdmin = createAdminClient();
        const { error: updateError } = await supabaseAdmin.auth.admin.updateUserById(
            user.id,
            {
                app_metadata: {
                    ...user.app_metadata,
                    active_team_id: teamId,
                    active_team_plan: newTeamPlan // ✅ Afegim el pla
                }
            }
        );

        if (updateError) throw updateError;

    } catch (error: unknown) {
        console.error("Error en canviar d'equip actiu:", error);
        let errorMessage = "No s'ha pogut canviar d'equip.";
        if (error instanceof Error) {
            errorMessage = error.message;
        }
        return { success: false, message: errorMessage };
    }
    await supabase.auth.refreshSession();

    // 5. Revalidació i èxit
    // Revalidem tot el layout perquè components com la barra de navegació o el menú
    // puguin reaccionar al canvi d'equip.
    revalidatePath('/', 'layout');
    return { success: true };
}
/**
 * Activa o desactiva el permís de l'usuari actual per a veure la bústia d'un altre membre.
 */
export async function toggleInboxPermissionAction(targetUserId: string) { // ✅ NOMÉS UN PARÀMETRE
    // 1. VALIDACIÓ CENTRALITZADA: Comprovem que l'usuari té permisos per a gestionar rols/permisos.
    const validation = await validateSessionAndPermission(PERMISSIONS.MANAGE_TEAM_ROLES);
    if ('error' in validation) {
        return { success: false, message: validation.error.message };
    }
    const { user: granteeUser, activeTeamId, supabase } = validation;

    // L'usuari que fa l'acció no pot donar-se permisos a si mateix per veure la seva pròpia bústia.
    if (granteeUser.id === targetUserId) {
        return { success: false, message: "No pots assignar-te permisos a tu mateix." };
    }

    try {
        // 2. LÒGICA PRINCIPAL: Comprovem si el permís ja existeix.
        const { data: existingPermission } = await supabase
            .from('inbox_permissions')
            .select('id')
            .match({
                team_id: activeTeamId,
                grantee_user_id: granteeUser.id,
                target_user_id: targetUserId
            })
            .maybeSingle();

        if (existingPermission) {
            // Si existeix, l'esborrem.
            const { error } = await supabase.from('inbox_permissions').delete().eq('id', existingPermission.id);
            if (error) throw error;
            revalidatePath('/settings/team');
            return { success: true, message: "Permís revocat." };
        } else {
            // Si no existeix, el creem.
            const { error } = await supabase.from('inbox_permissions').insert({
                team_id: activeTeamId,
                grantee_user_id: granteeUser.id,
                target_user_id: targetUserId
            });
            if (error) throw error;
            revalidatePath('/settings/team');
            return { success: true, message: "Permís concedit." };
        }
    } catch (error: unknown) {
        console.error("Error en canviar el permís de la bústia:", error);
        let errorMessage = "No s'ha pogut actualitzar el permís.";
        if (error instanceof Error) {
            errorMessage = error.message;
        }
        return { success: false, message: errorMessage };
    }
}
/**
 * ✅ NOU: Neteja l'equip actiu, per a tornar al "vestíbul".
 */

export async function clearActiveTeamAction() {
    // 1. Validació de sessió amb el teu helper.
    const session = await validateUserSession();
    if ('error' in session) {
        // En aquest cas, si no hi ha usuari, no hi ha res a netejar.
        // Podem retornar èxit o l'error, depenent de la semàntica que prefereixis.
        return { success: false, message: session.error.message };
    }
    const { user } = session;

    try {
        // 2. Execució de l'acció
        const supabaseAdmin = createAdminClient();
        const { error } = await supabaseAdmin.auth.admin.updateUserById(
            user.id,
            {
                app_metadata: {
                    ...user.app_metadata,
                    active_team_id: null,
                    active_team_plan: null // ✅ Important netejar també el pla.
                }
            }
        );

        if (error) throw error;

    } catch (error: unknown) {
        console.error("Error en netejar l'equip actiu:", error);
        let errorMessage = "No s'ha pogut sortir de l'equip.";
        if (error instanceof Error) {
            errorMessage = error.message;
        }
        return { success: false, message: errorMessage };
    }

    // 3. Revalidació i resposta
    revalidatePath('/settings/team', 'page');
    return { success: true };
}

/**
 * Permet a un usuari autenticat acceptar una invitació personal des del "lobby".
 * No requereix un equip actiu previ. Tota la lògica s'executa com una transacció.
 */
export async function acceptPersonalInviteAction(invitationId: string) {
    // PAS 1: Validació senzilla. Només necessitem saber qui és l'usuari.
    const supabase = createClient();
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
        return { success: false, message: "Has d'iniciar sessió per a acceptar una invitació." };
    }

    try {
        // PAS 2: Execució de la transacció a la base de dades.
        // Cridem la funció RPC que fa tota la feina: valida la invitació,
        // t'afegeix al 'team_members', actualitza el teu 'active_team_id' i esborra la invitació.
        const { error } = await supabase.rpc('accept_personal_invitation', {
            invitation_id: invitationId
        });
        if (error) throw error;

        // PAS 3: Refresquem la sessió per a assegurar-nos que el navegador rep el nou token actualitzat.
        await supabase.auth.refreshSession();

    } catch (error: unknown) {
        console.error("Error en acceptar la invitació personal:", error);
        let errorMessage = "No s'ha pogut acceptar la invitació.";
        if (error instanceof Error && error.message.includes('INVALID_INVITATION')) {
            errorMessage = "Aquesta invitació no és vàlida o ja no està disponible.";
        }
        return { success: false, message: errorMessage };
    }

    // PAS 4: Revalidem la pàgina i retornem l'èxit.
    revalidatePath('/settings/team');
    return { success: true };
}

export async function declinePersonalInviteAction(invitationId: string) {
    // 1. Validació de sessió amb el teu helper.
    const session = await validateUserSession();
    if ('error' in session) {
        return { success: false, message: session.error.message };
    }
    const { user, supabase } = session;

    try {
        // 2. Execució de l'acció. La teva lògica ja era segura i correcta.
        const { error } = await supabase
            .from('invitations')
            .update({ status: 'declined' })
            .match({ id: invitationId, user_id: user.id }); // Assegura que l'usuari només pot rebutjar les seves pròpies invitacions.

        if (error) throw error;

    } catch (error: unknown) {
        console.error("Error en rebutjar la invitació:", error);
        return { success: false, message: "No s'ha pogut rebutjar la invitació." };
    }

    // 3. Revalidació i resposta
    revalidatePath('/settings/team');
    return { success: true };
}

export async function removeMemberAction(userIdToRemove: string) {
    // 1. VALIDACIÓ DE PERMISOS: Tot el boilerplate desapareix.
    const validation = await validateSessionAndPermission(PERMISSIONS.MANAGE_TEAM_MEMBERS);
    if ('error' in validation) {
        return { success: false, message: validation.error.message };
    }
    const { user: actionUser, activeTeamId, supabase } = validation;

    // 2. VALIDACIONS DE NEGOCI: Aquestes comprovacions són específiques d'aquesta acció.
    if (actionUser.id === userIdToRemove) {
        return { success: false, message: "No et pots eliminar a tu mateix." };
    }

    const { data: team } = await supabase.from('teams').select('owner_id').eq('id', activeTeamId).single();
    if (team?.owner_id === userIdToRemove) {
        return { success: false, message: "No es pot eliminar el propietari de l'equip." };
    }

    // 3. EXECUCIÓ DE L'ACCIÓ
    try {
        const supabaseAdmin = createAdminClient();

        // Eliminem el membre
        const { error: deleteError } = await supabaseAdmin
            .from('team_members')
            .delete()
            .match({ user_id: userIdToRemove, team_id: activeTeamId });

        if (deleteError) throw deleteError;

        // Netegem el token de l'usuari eliminat (aquesta és una pràctica excel·lent!)
        const { data: { user: removedUser } } = await supabaseAdmin.auth.admin.getUserById(userIdToRemove);
        if (removedUser?.app_metadata?.active_team_id === activeTeamId) {
            await supabaseAdmin.auth.admin.updateUserById(userIdToRemove, {
                app_metadata: { ...removedUser.app_metadata, active_team_id: null, active_team_plan: null }
            });
        }
    } catch (error: unknown) {
        console.error("Error en eliminar el membre:", error);
        let errorMessage = "No s'ha pogut eliminar el membre.";
        if (error instanceof Error) {
            errorMessage = error.message;
        }
        return { success: false, message: errorMessage };
    }

    // 4. REVALIDACIÓ I RESPOSTA
    revalidatePath('/settings/team');
    return { success: true, message: "Membre eliminat correctament." };
}

// Afegeix aquesta nova acció al teu fitxer actions.ts
export async function updateMemberRoleAction(memberUserId: string, newRole: Role) {
    // 1. VALIDACIÓ DE PERMISOS
    const validation = await validateSessionAndPermission(PERMISSIONS.MANAGE_TEAM_ROLES);
    if ('error' in validation) {
        return { success: false, message: validation.error.message };
    }
    const { activeTeamId, supabase } = validation;

    // 2. VALIDACIONS DE NEGOCI
    if (newRole === 'owner') {
        return { success: false, message: "La propietat de l'equip no es pot assignar, s'ha de transferir mitjançant una altra acció." };
    }

    try {
        const { data: team } = await supabase.from('teams').select('owner_id').eq('id', activeTeamId).single();
        if (team?.owner_id === memberUserId) {
            return { success: false, message: "No es pot canviar el rol del propietari de l'equip." };
        }

        // 3. EXECUCIÓ DE L'ACCIÓ
        const { error } = await supabase
            .from('team_members')
            .update({ role: newRole })
            .match({ user_id: memberUserId, team_id: activeTeamId });

        if (error) throw error;

    } catch (error: unknown) {
        console.error("Error en actualitzar el rol del membre:", error);
        let errorMessage = "No s'ha pogut actualitzar el rol.";
        if (error instanceof Error) {
            errorMessage = error.message;
        }
        return { success: false, message: errorMessage };
    }

    // 4. REVALIDACIÓ I RESPOSTA
    revalidatePath('/settings/team');
    return { success: true, message: "Rol actualitzat correctament." };
}

// =================== FILE: src/app/[locale]/(app)/settings/team/page.tsx ===================

// /src/app/[locale]/(app)/settings/team/page.tsx

import { validatePageSession } from '@/lib/supabase/session';
import { TeamSelectorData } from './_components/TeamSelectorData';
import { ActiveTeamManagerData } from './_components/ActiveTeamManagerData';

// Mantenim l'ordre a Next.js per assegurar el renderitzat dinàmic
export const dynamic = 'force-dynamic';

// Podem mantenir els tipus aquí o moure'ls a un fitxer types.ts si prefereixes
export type Team = { id: string; name: string; };
export type Invitation = { id: string; email: string; role: string; };
export type UserTeam = { role: string; teams: Team | null; };
export type PersonalInvitation = { id: string; team_name: string; inviter_name: string };
export type ProfileInfo = { id: string; full_name: string | null; email: string | null; avatar_url: string | null; };
export type TeamMember = { role: string; profiles: ProfileInfo | null; };
export type ActiveTeamData = {
    team: Team;
    teamMembers: TeamMember[];
    pendingInvitations: Invitation[];
    currentUserRole: string;
    inboxPermissions: { grantee_user_id: string; target_user_id: string; }[];
};
// ✅ CORRECCIÓ CLAU: Definim searchParams com una Promise que conté el tipus esperat.
interface TeamSettingsPageProps {
    searchParams: Promise<{ view?: string }>;
}
export default async function TeamSettingsPage({ searchParams }: TeamSettingsPageProps) {
    // La validació de sessió (que inclou la redirecció si no hi ha usuari/equip actiu)
    const { user, activeTeamId } = await validatePageSession();

    // ✅ Aquest 'await' és ara semànticament correcte i tipificat.
    const { view } = await searchParams;

    if (view === 'select' || !activeTeamId) {
        // La vista de selecció d'equip/lobby es crida si no hi ha equip actiu o si el paràmetre 'view=select' està present.
        return <TeamSelectorData userId={user.id} />;
    }

    // Si hi ha un equip actiu, mostrem el panell de gestió.
    return <ActiveTeamManagerData user={user} activeTeamId={activeTeamId} />;
}

// =================== FILE: src/app/[locale]/(app)/settings/team/_components/ActiveTeamManagerData.tsx ===================

// /src/app/[locale]/(app)/settings/team/_components/ActiveTeamManagerData.tsx

import { createClient } from "@/lib/supabase/server";
import { TeamData } from "./TeamData"; // Component que ara carrega les dades
import { TeamStateCorrector } from "./TeamStateCorrector";
import type { User } from '@supabase/supabase-js';
// Ja no necessitem importar els altres tipus aquí

interface ActiveTeamManagerDataProps {
  user: User;
  activeTeamId: string;
}

export async function ActiveTeamManagerData({ user, activeTeamId }: ActiveTeamManagerDataProps) {
    const supabase = createClient();

    // 1. L'única feina d'aquest component és verificar si l'usuari és membre.
    const { data: member, error: memberError } = await supabase
        .from('team_members')
        .select('role')
        .match({ user_id: user.id, team_id: activeTeamId })
        .single();

    if (!member || memberError) {
        return <TeamStateCorrector />;
    }

    // 2. ✅ CORRECCIÓ CLAU: Ara només passem les props que 'TeamData' realment espera.
    // Deleguem tota la càrrega de dades a 'TeamData'.
    return (
        <TeamData
            user={user}
            member={member}
            activeTeamId={activeTeamId}
        />
    );
}

// =================== FILE: src/app/[locale]/(app)/settings/team/_components/TeamClient.tsx ===================

"use client";


import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { useRouter } from 'next/navigation';
import { Loader2, UserPlus, Trash2, Plus, ArrowRight, LogOut, Eye, EyeOff } from 'lucide-react';
import { toast } from 'sonner';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { useTransition, useRef, useEffect } from 'react';

// ✅ PAS 1: IMPORTA EL CLIENT CORRECTE I LES ACCIONS
import { createClient } from '@/lib/supabase/client';
import {
    removeMemberAction,
    switchActiveTeamAction,
    clearActiveTeamAction,
    createTeamAction,
    inviteUserAction,
    revokeInvitationAction,
    toggleInboxPermissionAction,
    acceptPersonalInviteAction,
    declinePersonalInviteAction,
    updateMemberRoleAction
} from '../actions';
import type { User } from '@supabase/supabase-js';
import type { UserTeam, ActiveTeamData } from '../page';

type ActionResult = { success: boolean; message?: string; } | void;

// ✅ Añadimos la nueva prop opcional 'invalidTeamState'.
interface TeamClientProps {
    user: User;
    userTeams: UserTeam[];
    activeTeamData: ActiveTeamData | null;
    invalidTeamState?: boolean;
    personalInvitations: { id: string; team_name: string; inviter_name: string }[]; // ✅ Nova prop

}
/**
 * Component de client intel·ligent que renderitza o el HUB o el DASHBOARD de l'equip.
 */
export function TeamClient({ user, userTeams, activeTeamData, invalidTeamState, personalInvitations }: TeamClientProps) {
    const router = useRouter();
    const [isPending, startTransition] = useTransition();
    const supabase = createClient();
    const formRef = useRef<HTMLFormElement>(null);


    // ✅ Este efecto corrige automáticamente un estado de equipo inválido.
    useEffect(() => {
        if (invalidTeamState) handleClearTeam();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [invalidTeamState]);

    // ✅ Noves funcions per gestionar les invitacions personals
    const handleAccept = (invitationId: string) => {
        startTransition(() => executeActionAndReload(() => acceptPersonalInviteAction(invitationId)));
    };
    // Dins del component TeamClient, al costat dels altres handlers
    const handleRemoveMember = (userId: string) => {
        // Afegim una confirmació per seguretat
        if (!confirm("Estàs segur que vols eliminar aquest membre de l'equip? Aquesta acció no es pot desfer.")) {
            return;
        }
        startTransition(async () => {
            const result = await removeMemberAction(userId);
            if (result.success) {
                toast.success(result.message);
                router.refresh(); // Refresquem per veure la llista de membres actualitzada
            } else {
                toast.error(result.message);
            }
        });
    };
    const executeActionAndReload = async (action: () => Promise<ActionResult>) => {
        const result = await action();
        if (result && result.success === false) {
            toast.error("Error", { description: result.message });
            return;
        }
        await supabase.auth.refreshSession();
        // Forzamos una recarga completa para garantizar la sincronización.
        window.location.reload();
    };
    // ✅ La funció handler ara només necessita el targetUserId
    const handleTogglePermission = (targetUserId: string) => {
        startTransition(async () => {
            // Passem només un paràmetre a la nova acció
            const result = await toggleInboxPermissionAction(targetUserId);
            if (result.success) {
                toast.success(result.message);
                router.refresh();
            } else {
                toast.error(result.message);
            }
        });
    };


    const handleCreateTeam = (formData: FormData) => {
        startTransition(async () => {
            const result = await createTeamAction(formData);
            if (result?.success === false) {
                toast.error(result.message);
            }
        });
    };

    const handleInvite = (formData: FormData) => {
        startTransition(async () => {
            const result = await inviteUserAction(formData);
            if (result.success) {
                toast.success(result.message);
                formRef.current?.reset();
                router.refresh();
            } else {
                toast.error(result.message);
            }
        });
    };
    // ✅ NOU HANDLER: Crida l'acció per a canviar el rol
    const handleRoleChange = (memberUserId: string, newRole: 'admin' | 'member') => {
        startTransition(async () => {
            const result = await updateMemberRoleAction(memberUserId, newRole);
            if (result.success) {
                toast.success(result.message);
                router.refresh();
            } else {
                toast.error(result.message);
            }
        });
    };
    const handleDecline = (invitationId: string) => {
        startTransition(async () => {
            await declinePersonalInviteAction(invitationId);
            toast.info("Invitació rebutjada.");
            router.refresh();
        });
    };
    const handleRevoke = (invitationId: string) => {
        startTransition(async () => {
            await revokeInvitationAction(invitationId);
            toast.success("Invitació revocada");
            router.refresh();
        });
    };

    const getInitials = (name: string | null | undefined) => {
        if (!name) return '??';
        return name.split(' ').map(n => n[0]).slice(0, 2).join('').toUpperCase();
    };

    const handleSwitchTeam = (teamId: string) => {
        startTransition(() => executeActionAndReload(() => switchActiveTeamAction(teamId)));
    };

    const handleClearTeam = () => {
        startTransition(() => executeActionAndReload(() => clearActiveTeamAction()));
    };

    // Si el estado es inválido, mostramos un mensaje de carga mientras se corrige.
    if (invalidTeamState) {
        return <div className="flex justify-center items-center h-64">Corrigiendo estado del equipo...</div>;
    }
    // --- VISTA 1: El "vestíbul" o HUB d'equips ---
    if (!activeTeamData) {
        return (
            <div className="max-w-4xl mx-auto space-y-8 p-4">
                {/* ✅ NOU BLOC DE NOTIFICACIÓ D'INVITACIONS */}
                {personalInvitations && personalInvitations.length > 0 && (
                    <Card className="bg-primary/5 border-primary/20">
                        <CardHeader>
                            <CardTitle>Tens invitacions pendents!</CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-4">
                            {personalInvitations.map(invite => (
                                <div key={invite.id} className="flex items-center justify-between p-3 bg-background rounded-lg">
                                    <div>
                                        <p className="font-medium">
                                            <strong>{invite.inviter_name}</strong> t'ha convidat a <strong>{invite.team_name}</strong>.
                                        </p>
                                    </div>
                                    <div className="flex gap-2">
                                        <Button size="sm" onClick={() => handleAccept(invite.id)} disabled={isPending}>
                                            {isPending ? <Loader2 className="animate-spin w-4 h-4" /> : "Acceptar"}
                                        </Button>
                                        <Button size="sm" variant="ghost" onClick={() => handleDecline(invite.id)} disabled={isPending}>Rebutjar</Button>
                                    </div>
                                </div>
                            ))}
                        </CardContent>
                    </Card>
                )}
                <div>
                    <h1 className="text-3xl font-bold">Els Teus Equips</h1>
                    <p className="text-muted-foreground">Selecciona un equip per a començar a treballar o crea'n un de nou.</p>
                </div>
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
                    {userTeams.map(({ teams, role }) => teams && (
                        <Card key={teams.id} className="flex flex-col">
                            <CardHeader>
                                <CardTitle>{teams.name}</CardTitle>
                                <CardDescription>El teu rol: <span className="font-semibold capitalize">{role}</span></CardDescription>
                            </CardHeader>
                            <CardContent className="flex-grow flex items-end">
                                <Button onClick={() => handleSwitchTeam(teams.id)} disabled={isPending} className="w-full">
                                    {isPending ? <Loader2 className="animate-spin w-4 h-4" /> : "Entrar"}
                                    {!isPending && <ArrowRight className="w-4 h-4 ml-2" />}
                                </Button>
                            </CardContent>
                        </Card>
                    ))}
                    <Card className="border-dashed">
                        <CardHeader><CardTitle>Crear un nou equip</CardTitle></CardHeader>
                        <CardContent>
                            <form action={handleCreateTeam} className="space-y-4">
                                <Input name="teamName" placeholder="Nom del nou equip" required disabled={isPending} />
                                <Button type="submit" disabled={isPending} className="w-full">
                                    {isPending ? <Loader2 className="animate-spin w-4 h-4" /> : <Plus className="w-4 h-4 mr-2" />} Crear Equip
                                </Button>
                            </form>
                        </CardContent>
                    </Card>
                </div>
            </div>
        );
    }

    // --- VISTA 2: El panell de control de l'equip actiu ---
    const { team, teamMembers, pendingInvitations, currentUserRole, inboxPermissions } = activeTeamData;
    const canManage = currentUserRole === 'owner' || currentUserRole === 'admin';

    return (
        <div className="space-y-8 max-w-4xl mx-auto">
            <div className="flex justify-between items-center">
                <h1 className="text-3xl font-bold">{team.name}</h1>
                <Button variant="outline" onClick={handleClearTeam} disabled={isPending}>
                    <LogOut className="w-4 h-4 mr-2" /> Canviar d'equip
                </Button>
            </div>

            {canManage && (
                <Card>
                    <CardHeader><CardTitle>Convida nous membres</CardTitle></CardHeader>
                    <CardContent>
                        <form ref={formRef} action={handleInvite} className="flex flex-col sm:flex-row gap-2">
                            <Input name="email" type="email" placeholder="correu@exemple.com" required disabled={isPending} className="flex-grow" />
                            <Select name="role" defaultValue="member" required>
                                <SelectTrigger className="w-full sm:w-[150px]"><SelectValue /></SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="member">Membre</SelectItem>
                                    <SelectItem value="admin">Admin</SelectItem>
                                </SelectContent>
                            </Select>
                            <Button type="submit" disabled={isPending} className="sm:w-auto">
                                {isPending ? <Loader2 className="animate-spin w-4 h-4" /> : <UserPlus className="w-4 h-4" />}
                            </Button>
                        </form>
                    </CardContent>
                </Card>
            )}

            {canManage && pendingInvitations.length > 0 && (
                <Card>
                    <CardHeader><CardTitle>Invitacions Pendents</CardTitle></CardHeader>
                    <CardContent className="divide-y">
                        {pendingInvitations.map(invite => (
                            <div key={invite.id} className="flex items-center justify-between py-3 first:pt-0 last:pb-0">
                                <div>
                                    <p className="font-medium">{invite.email}</p>
                                    <p className="text-sm text-muted-foreground capitalize">{invite.role}</p>
                                </div>
                                <form action={() => handleRevoke(invite.id)}>
                                    <Button type="submit" variant="ghost" size="sm" disabled={isPending}><Trash2 className="w-4 h-4 text-destructive" /></Button>
                                </form>
                            </div>
                        ))}
                    </CardContent>
                </Card>
            )}

            <Card>
                <CardHeader><CardTitle>Membres de l'equip ({teamMembers.length})</CardTitle></CardHeader>
                <CardContent className="divide-y">
                    {teamMembers.map(member => {
                        if (!member.profiles) return null;
                        const isOwner = member.role === 'owner';
                        const isSelf = user.id === member.profiles.id;
                        if (!member.profiles) return null;

                        // Comprovem si l'usuari actual té permís per a veure la bústia d'aquest membre
                        const hasPermission = Array.isArray(inboxPermissions) && inboxPermissions.some(
                            p => p.grantee_user_id === user.id && p.target_user_id === member.profiles!.id
                        );
                        return (
                            <div key={member.profiles.id} className="flex items-center justify-between py-4 first:pt-0 last:pb-0">
                                <div className="flex items-center gap-4">
                                    <Avatar>
                                        <AvatarImage src={member.profiles.avatar_url ?? undefined} />
                                        <AvatarFallback>{getInitials(member.profiles.full_name)}</AvatarFallback>
                                    </Avatar>
                                    <div>
                                        <p className="font-semibold">{member.profiles.full_name || 'Usuari sense nom'}</p>
                                        <p className="text-sm text-muted-foreground">{member.profiles.email}</p>
                                    </div>
                                </div>
                                <div className="flex items-center gap-2 sm:gap-4">
                                    {/* ✅ LÒGICA DELS ROLS */}
                                    {isOwner ? (
                                        <Badge variant="default" className="capitalize">{member.role}</Badge>
                                    ) : (
                                        <Select
                                            value={member.role}
                                            onValueChange={(newRole) => handleRoleChange(member.profiles!.id, newRole as 'admin' | 'member')}
                                            // El propietari pot canviar rols, l'admin també (excepte altres admins si no vols),
                                            // i ningú pot canviar el seu propi rol.
                                            disabled={!canManage || isSelf || isPending}
                                        >
                                            <SelectTrigger className="w-[120px]">
                                                <SelectValue />
                                            </SelectTrigger>
                                            <SelectContent>
                                                <SelectItem value="admin">Admin</SelectItem>
                                                <SelectItem value="member">Membre</SelectItem>
                                            </SelectContent>
                                        </Select>
                                    )}
                                    {/* ✅ NOVA ICONA DE PERMISOS */}
                                    {/* Només el propietari la veu, i no per a si mateix */}
                                    {currentUserRole === 'owner' && user.id !== member.profiles.id && (
                                        <TooltipProvider>
                                            <Tooltip>
                                                <TooltipTrigger asChild>
                                                    <Button
                                                        variant="ghost"
                                                        size="icon"
                                                        onClick={() => handleTogglePermission(member.profiles!.id)}
                                                        disabled={isPending}
                                                    >
                                                        {hasPermission ? <Eye className="w-4 h-4 text-primary" /> : <EyeOff className="w-4 h-4 text-muted-foreground" />}
                                                    </Button>
                                                </TooltipTrigger>
                                                <TooltipContent>
                                                    <p>{hasPermission ? `Clica per a deixar de veure la bústia de ${member.profiles.full_name}` : `Clica per a veure la bústia de ${member.profiles.full_name}`}</p>
                                                </TooltipContent>
                                            </Tooltip>
                                        </TooltipProvider>
                                    )}
                                    {canManage && member.role !== 'owner' && user.id !== member.profiles.id && (
                                        // 👇 AQUEST BOTÓ ÉS EL QUE CANVIEM
                                        <TooltipProvider>
                                            <Tooltip>
                                                <TooltipTrigger asChild>
                                                    <Button
                                                        variant="ghost"
                                                        size="icon"
                                                        disabled={isPending}
                                                        onClick={() => handleRemoveMember(member.profiles!.id)} // ✅ AFEGIM L'ACCIÓ
                                                    >
                                                        <Trash2 className="w-4 h-4 text-destructive" />
                                                    </Button>
                                                </TooltipTrigger>
                                                <TooltipContent>
                                                    <p>Eliminar {member.profiles.full_name}</p>
                                                </TooltipContent>
                                            </Tooltip>
                                        </TooltipProvider>
                                    )}
                                </div>
                            </div>
                        );
                    })}
                </CardContent>
            </Card>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/settings/team/_components/TeamDashboard.tsx ===================

// /app/[locale]/settings/team/_components/TeamDashboard.tsx
"use client";

import type { User } from '@supabase/supabase-js';
import type { ActiveTeamData } from '../page';
import { useTeamManagement } from '../_hooks/useTeamManagement';

// Imports de UI (de shadcn/ui o el teu sistema de components)
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Card, CardContent,CardHeader, CardTitle } from '@/components/ui/card';
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { Loader2, UserPlus, Trash2, LogOut, Eye, EyeOff } from 'lucide-react';

interface TeamDashboardProps {
    user: User;
    activeTeamData: ActiveTeamData;
}

export function TeamDashboard({ user, activeTeamData }: TeamDashboardProps) {
    // 1. Tota la lògica complexa s'obté amb una sola línia!
    const {
        isPending,
        inviteFormRef,
        handleClearTeam,
        handleInvite,
        handleRemoveMember,
        handleRoleChange,
        handleRevokeInvite,
        handleTogglePermission,
    } = useTeamManagement();

    // 2. Les dades i variables per a la vista es preparen aquí
    const { team, teamMembers, pendingInvitations, currentUserRole, inboxPermissions } = activeTeamData;
    const canManage = currentUserRole === 'owner' || currentUserRole === 'admin';

    const getInitials = (name: string | null | undefined) => {
        if (!name) return '??';
        return name.split(' ').map(n => n[0]).slice(0, 2).join('').toUpperCase();
    };

    // 3. El return és gairebé 100% JSX. Molt fàcil de llegir.
    return (
        <div className="space-y-8 max-w-4xl mx-auto">
            <div className="flex justify-between items-center">
                <h1 className="text-3xl font-bold">{team.name}</h1>
                <Button variant="outline" onClick={handleClearTeam} disabled={isPending}>
                    <LogOut className="w-4 h-4 mr-2" /> Canviar d'equip
                </Button>
            </div>

            {canManage && (
                <Card>
                    <CardHeader><CardTitle>Convida nous membres</CardTitle></CardHeader>
                    <CardContent>
                        <form ref={inviteFormRef} action={handleInvite} className="flex flex-col sm:flex-row gap-2">
                            <Input name="email" type="email" placeholder="correu@exemple.com" required disabled={isPending} className="flex-grow" />
                            <Select name="role" defaultValue="member" required>
                                <SelectTrigger className="w-full sm:w-[150px]"><SelectValue /></SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="member">Membre</SelectItem>
                                    <SelectItem value="admin">Admin</SelectItem>
                                </SelectContent>
                            </Select>
                            <Button type="submit" disabled={isPending} className="sm:w-auto">
                                {isPending ? <Loader2 className="animate-spin w-4 h-4" /> : <UserPlus className="w-4 h-4" />}
                            </Button>
                        </form>
                    </CardContent>
                </Card>
            )}

            {canManage && pendingInvitations.length > 0 && (
                <Card>
                    <CardHeader><CardTitle>Invitacions Pendents</CardTitle></CardHeader>
                    <CardContent className="divide-y">
                        {pendingInvitations.map(invite => (
                            <div key={invite.id} className="flex items-center justify-between py-3 first:pt-0 last:pb-0">
                                <div>
                                    <p className="font-medium">{invite.email}</p>
                                    <p className="text-sm text-muted-foreground capitalize">{invite.role}</p>
                                </div>
                                <Button type="button" variant="ghost" size="sm" disabled={isPending} onClick={() => handleRevokeInvite(invite.id)}>
                                    <Trash2 className="w-4 h-4 text-destructive" />
                                </Button>
                            </div>
                        ))}
                    </CardContent>
                </Card>
            )}

            <Card>
                <CardHeader><CardTitle>Membres de l'equip ({teamMembers.length})</CardTitle></CardHeader>
                <CardContent className="divide-y">
                    {teamMembers.map(member => {
                         if (!member.profiles) return null;
                         const isOwner = member.role === 'owner';
                         const isSelf = user.id === member.profiles.id;
                         const hasPermission = Array.isArray(inboxPermissions) && inboxPermissions.some(
                             p => p.grantee_user_id === user.id && p.target_user_id === member.profiles!.id
                         );

                        return (
                            <div key={member.profiles.id} className="flex items-center justify-between py-4 first:pt-0 last:pb-0">
                                <div className="flex items-center gap-4">
                                    <Avatar>
                                        <AvatarImage src={member.profiles.avatar_url ?? undefined} />
                                        <AvatarFallback>{getInitials(member.profiles.full_name)}</AvatarFallback>
                                    </Avatar>
                                    <div>
                                        <p className="font-semibold">{member.profiles.full_name || 'Usuari sense nom'}</p>
                                        <p className="text-sm text-muted-foreground">{member.profiles.email}</p>
                                    </div>
                                </div>
                                <div className="flex items-center gap-2 sm:gap-4">
                                     {isOwner ? (
                                        <Badge variant="default" className="capitalize">{member.role}</Badge>
                                     ) : (
                                        <Select
                                            value={member.role}
                                            onValueChange={(newRole) => handleRoleChange(member.profiles!.id, newRole as 'admin' | 'member')}
                                            disabled={!canManage || isSelf || isPending}
                                        >
                                            <SelectTrigger className="w-[120px]"><SelectValue /></SelectTrigger>
                                            <SelectContent>
                                                <SelectItem value="admin">Admin</SelectItem>
                                                <SelectItem value="member">Membre</SelectItem>
                                            </SelectContent>
                                        </Select>
                                     )}
                                     {currentUserRole === 'owner' && !isSelf && (
                                         <TooltipProvider>
                                             <Tooltip>
                                                 <TooltipTrigger asChild>
                                                     <Button variant="ghost" size="icon" onClick={() => handleTogglePermission(member.profiles!.id)} disabled={isPending}>
                                                         {hasPermission ? <Eye className="w-4 h-4 text-primary" /> : <EyeOff className="w-4 h-4 text-muted-foreground" />}
                                                     </Button>
                                                 </TooltipTrigger>
                                                 <TooltipContent>
                                                     <p>{hasPermission ? `Deixar de veure la bústia` : `Veure la bústia`}</p>
                                                 </TooltipContent>
                                             </Tooltip>
                                         </TooltipProvider>
                                     )}
                                     {canManage && !isSelf && (
                                         <TooltipProvider>
                                             <Tooltip>
                                                 <TooltipTrigger asChild>
                                                     <Button variant="ghost" size="icon" disabled={isPending} onClick={() => handleRemoveMember(member.profiles!.id)}>
                                                         <Trash2 className="w-4 h-4 text-destructive" />
                                                     </Button>
                                                 </TooltipTrigger>
                                                 <TooltipContent><p>Eliminar membre</p></TooltipContent>
                                             </Tooltip>
                                         </TooltipProvider>
                                     )}
                                </div>
                            </div>
                        );
                    })}
                </CardContent>
            </Card>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/settings/team/_components/TeamData.tsx ===================

// /src/app/[locale]/(app)/settings/team/_components/TeamData.tsx (VERSIÓ AMB VISTA)

import { createClient } from "@/lib/supabase/server";
import { TeamDashboard } from "./TeamDashboard";
import type { User } from "@supabase/supabase-js";
import type { ActiveTeamData, Team, Invitation, TeamMember } from "../page";

interface TeamDataProps {
    user: User;
    member: { role: string };
    activeTeamId: string;
}

export async function TeamData({ user, member, activeTeamId }: TeamDataProps) {
    const supabase = createClient();

    // La consulta dels membres ara és molt més senzilla i directa.
    const [teamRes, invitesRes, permissionsRes, membersRes] = await Promise.all([
        supabase.from('teams').select('id, name').eq('id', activeTeamId).single(),
        supabase.from('invitations').select('id, email, role').eq('team_id', activeTeamId).eq('status', 'pending'),
        supabase.from('inbox_permissions').select('grantee_user_id, target_user_id').eq('team_id', activeTeamId),
        // ✅ CANVI CLAU: Consultem directament a la VISTA!
        supabase.from('team_members_with_profiles').select('*').eq('team_id', activeTeamId)
    ]);

    // La transformació de dades també es simplifica, ja que la vista retorna un format pla.
    const finalTeamMembers: TeamMember[] = (membersRes.data || []).map(m => ({
        role: m.role ?? "", // Ensure role is always a string
        profiles: m.user_id ? { // Només creem el perfil si hi ha dades
            id: m.user_id,
            full_name: m.full_name,
            email: m.email,
            avatar_url: m.avatar_url,
        } : null,
    }));

    const activeTeamData: ActiveTeamData = {
        team: teamRes.data as Team,
        teamMembers: finalTeamMembers,
        pendingInvitations: (invitesRes.data as Invitation[]) || [],
        currentUserRole: member.role,
        inboxPermissions: permissionsRes.data || []
    };

    // DEPURACIÓ: Aquest log ara hauria de mostrar les dades correctes.
    console.log("===================================");
    console.log("DADES FINALS (des de la VISTA):");
    console.log(JSON.stringify(activeTeamData.teamMembers, null, 2));
    console.log("===================================");

    return <TeamDashboard user={user} activeTeamData={activeTeamData} />;
}

// =================== FILE: src/app/[locale]/(app)/settings/team/_components/TeamHub.tsx ===================

// /app/[locale]/settings/team/_components/TeamHub.tsx
"use client";

import type { UserTeam, PersonalInvitation } from '../page';
import { useTeamHub } from '../_hooks/useTeamHub';

// Imports de UI
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Loader2, Plus, ArrowRight } from 'lucide-react';

interface TeamHubProps {
    userTeams: UserTeam[];
    personalInvitations: PersonalInvitation[];
}

export function TeamHub({ userTeams, personalInvitations }: TeamHubProps) {
    // Obtenim tota la lògica del nostre hook
    const {
        isPending,
        handleCreateTeam,
        handleSwitchTeam,
        handleAcceptInvite,
        handleDeclineInvite,
    } = useTeamHub();

    return (
        <div className="max-w-4xl mx-auto space-y-8 p-4">
            {/* Secció d'invitacions pendents */}
            {personalInvitations && personalInvitations.length > 0 && (
                <Card className="bg-primary/5 border-primary/20">
                    <CardHeader>
                        <CardTitle>Tens invitacions pendents!</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                        {personalInvitations.map(invite => (
                            <div key={invite.id} className="flex items-center justify-between p-3 bg-background rounded-lg">
                                <div>
                                    <p className="font-medium">
                                        <strong>{invite.inviter_name}</strong> t'ha convidat a <strong>{invite.team_name}</strong>.
                                    </p>
                                </div>
                                <div className="flex gap-2">
                                    <Button size="sm" onClick={() => handleAcceptInvite(invite.id)} disabled={isPending}>
                                        {isPending ? <Loader2 className="animate-spin w-4 h-4" /> : "Acceptar"}
                                    </Button>
                                    <Button size="sm" variant="ghost" onClick={() => handleDeclineInvite(invite.id)} disabled={isPending}>
                                        Rebutjar
                                    </Button>
                                </div>
                            </div>
                        ))}
                    </CardContent>
                </Card>
            )}

            {/* Secció principal de selecció i creació d'equips */}
            <div>
                <h1 className="text-3xl font-bold">Els Teus Equips</h1>
                <p className="text-muted-foreground">Selecciona un equip per a començar a treballar o crea'n un de nou.</p>
            </div>
            
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
                {/* Llista dels equips de l'usuari */}
                {userTeams.map(({ teams, role }) => teams && (
                    <Card key={teams.id} className="flex flex-col">
                        <CardHeader>
                            <CardTitle>{teams.name}</CardTitle>
                            <CardDescription>El teu rol: <span className="font-semibold capitalize">{role}</span></CardDescription>
                        </CardHeader>
                        <CardContent className="flex-grow flex items-end">
                            <Button onClick={() => handleSwitchTeam(teams.id)} disabled={isPending} className="w-full">
                                {isPending ? <Loader2 className="animate-spin w-4 h-4" /> : "Entrar"}
                                {!isPending && <ArrowRight className="w-4 h-4 ml-2" />}
                            </Button>
                        </CardContent>
                    </Card>
                ))}
                
                {/* Targeta per crear un nou equip */}
                <Card className="border-dashed">
                    <CardHeader><CardTitle>Crear un nou equip</CardTitle></CardHeader>
                    <CardContent>
                        <form action={handleCreateTeam} className="space-y-4">
                            <Input name="teamName" placeholder="Nom del nou equip" required disabled={isPending} />
                            <Button type="submit" disabled={isPending} className="w-full">
                                {isPending ? <Loader2 className="animate-spin w-4 h-4" /> : <Plus className="w-4 h-4 mr-2" />} Crear Equip
                            </Button>
                        </form>
                    </CardContent>
                </Card>
            </div>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/settings/team/_components/TeamSelectorData.tsx ===================

import { createClient } from "@/lib/supabase/server";
import { TeamHub } from "./TeamHub";
// ✅ 1. Importem els dos tipus per a més claredat.
import type { UserTeam, PersonalInvitation } from '../page';

interface TeamSelectorDataProps {
  userId: string;
}

export async function TeamSelectorData({ userId }: TeamSelectorDataProps) {
    const supabase = createClient();

    const [userTeamsRes, invitationsRes] = await Promise.all([
        supabase.from('team_members').select('role, teams!inner(id, name)').eq('user_id', userId),
        supabase.from('invitations').select('id, team_name, inviter_name').eq('user_id', userId).eq('status', 'pending')
    ]);

    if (userTeamsRes.error || invitationsRes.error) {
        console.error("Error loading team selection data:", { teamError: userTeamsRes.error, invError: invitationsRes.error });
        return <div>Error en carregar les dades de l'equip.</div>;
    }

    const userTeams: UserTeam[] = (userTeamsRes.data || []).filter(Boolean).map(m => ({
        role: m.role,
        // Aquesta lògica per a 'teams' sembla correcta per gestionar relacions
        teams: Array.isArray(m.teams) ? m.teams[0] : m.teams
    }));

    // ✅ 2. Filtrem i transformem les invitacions per assegurar que compleixen el tipus.
    const personalInvitations: PersonalInvitation[] = (invitationsRes.data || [])
        .filter((invite): invite is PersonalInvitation => 
            !!invite.team_name && !!invite.inviter_name
        );

    return (
        <TeamHub 
            userTeams={userTeams} 
            // ✅ 3. Passem l'array ja filtrat i correctament tipat.
            personalInvitations={personalInvitations} 
        />
    );
}

// =================== FILE: src/app/[locale]/(app)/settings/team/_components/TeamSkeleton.tsx ===================

"use client";

/**
 * @summary Esquelet de càrrega per a la pàgina de Gestió d'Equip.
 */
export function TeamSkeleton() {
  return (
    <div className="space-y-8 animate-pulse">
      {/* Esquelet del formulari d'invitació */}
      <div className="glass-card p-6">
        <div className="h-6 w-1/3 bg-gray-700/50 rounded-md mb-2"></div>
        <div className="h-4 w-2/3 bg-gray-700/50 rounded-md mb-4"></div>
        <div className="flex gap-2">
          <div className="h-10 flex-1 bg-gray-800/50 rounded-md"></div>
          <div className="h-10 w-24 bg-gray-800/50 rounded-md"></div>
          <div className="h-10 w-28 bg-gray-800/50 rounded-md"></div>
        </div>
      </div>
      
      {/* Esquelet de la llista de membres */}
      <div className="glass-card p-6">
        <div className="h-6 w-1/4 bg-gray-700/50 rounded-md mb-4"></div>
        <div className="space-y-3">
          {[...Array(3)].map((_, i) => (
            <div key={i} className="flex items-center justify-between p-2 h-12 bg-muted rounded-lg">
              <div className="h-6 w-1/2 bg-gray-800/50 rounded-md"></div>
              <div className="h-6 w-1/4 bg-gray-800/50 rounded-md"></div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/settings/team/_components/TeamStateCorrector.tsx ===================

"use client";

import { useEffect, useState } from 'react'; // Importem useState
import { useTransition } from 'react';
import { toast } from 'sonner';
import { clearActiveTeamAction } from '../actions';
import { Button } from '@/components/ui/button'; // Importem el botó per a reintentar

export function TeamStateCorrector() {
    const [, startTransition] = useTransition();
    // Afegim un estat per guardar el missatge d'error
    const [errorMessage, setErrorMessage] = useState<string | null>(null);

    const runCorrection = () => {
        setErrorMessage(null); // Resetejem l'error abans de començar
        startTransition(async () => {
            console.log("[CLIENT] Estat invàlid detectat. Executant neteja...");
            const result = await clearActiveTeamAction();
            if (result?.success === false) {
                const message = result.message || "Hi ha hagut un error inesperat.";
                toast.error("Error en corregir l'estat de l'equip.", { description: message });
                setErrorMessage(message); // Guardem l'error a l'estat
            } else {
                window.location.reload();
            }
        });
    };

    // Executem la correcció només un cop quan el component es munta
    useEffect(() => {
        runCorrection();
    }, []); 

    // Renderitzem condicionalment segons si hi ha error o no
    return (
        <div className="flex flex-col justify-center items-center h-64 gap-4">
            {errorMessage ? (
                <>
                    <p className="text-destructive">No s'ha pogut corregir l'estat de l'equip.</p>
                    <p className="text-sm text-muted-foreground">{errorMessage}</p>
                    <Button onClick={runCorrection}>Reintentar</Button>
                </>
            ) : (
                <p>Corregint estat de l'equip...</p>
            )}
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/settings/team/_hooks/useTeamHub.ts ===================

// /app/[locale]/settings/team/_hooks/useTeamHub.ts
"use client";

import { useTransition } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import {
    createTeamAction,
    switchActiveTeamAction,
    acceptPersonalInviteAction,
    declinePersonalInviteAction
} from '../actions';

export function useTeamHub() {
    const [isPending, startTransition] = useTransition();
    const router = useRouter();

    // Funció genèrica per a accions que requereixen una recàrrega completa
    // (canviar d'equip o acceptar una invitació canvien el token d'usuari)
    type ActionResult = { success: boolean; message?: string };
    
    const executeActionAndReload = (action: () => Promise<ActionResult>) => {
        startTransition(async () => {
            const result = await action();
            if (result && result.success === false) {
                toast.error(result.message || "Hi ha hagut un error.");
            } else {
                // ✅ Redirigeix a la vista principal de l’equip
                router.replace("/settings/team");
                router.refresh();
            }
        });
    };

    // Handlers que utilitzen la funció genèrica
    const handleCreateTeam = (formData: FormData) => {
        executeActionAndReload(() => createTeamAction(formData));
    };

    const handleSwitchTeam = (teamId: string) => {
        executeActionAndReload(() => switchActiveTeamAction(teamId));
    };

    const handleAcceptInvite = (invitationId: string) => {
        executeActionAndReload(() => acceptPersonalInviteAction(invitationId));
    };

    // Handler per rebutjar, que només necessita un refresc de dades
    const handleDeclineInvite = (invitationId: string) => {
        startTransition(async () => {
            await declinePersonalInviteAction(invitationId);
            toast.info("Invitació rebutjada.");
            router.refresh(); // No cal recarregar tota la pàgina, només les dades del servidor.
        });
    };

    // Retornem la nostra caixa d'eines 🧰
    return {
        isPending,
        handleCreateTeam,
        handleSwitchTeam,
        handleAcceptInvite,
        handleDeclineInvite,
    };
}

// =================== FILE: src/app/[locale]/(app)/settings/team/_hooks/useTeamManagement.ts ===================

// /src/app/[locale]/(app)/settings/team/_hooks/useTeamManagement.ts (VERSIÓ FINAL)
"use client";

import { useTransition, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import {
    inviteUserAction, removeMemberAction,
    revokeInvitationAction, toggleInboxPermissionAction, updateMemberRoleAction
} from '../actions';
import type { Role } from '@/lib/permissions.config';

export function useTeamManagement() {
    const [isPending, startTransition] = useTransition();
    const router = useRouter();
    const inviteFormRef = useRef<HTMLFormElement>(null);

    // Define a type for the expected result structure
    type ActionResult = { success: boolean; message?: string };

    // Funció genèrica per a accions que refresquen les dades
    const executeActionAndRefresh = (action: () => Promise<ActionResult>, successMessage?: string) => {
        startTransition(async () => {
            const result = await action();
            if (result?.success === false) {
                toast.error(result.message || "Hi ha hagut un error.");
            } else {
                if (successMessage) toast.success(successMessage);
                router.refresh();
            }
        });
    };

    const handleClearTeam = () => {
        // Simplement naveguem a la pàgina d'equips. Res més.
        // Com que ja som a la pàgina, un 'refresh' és suficient
        // per a que el 'page.tsx' es torni a executar i ens mostri el lobby.
        router.push('/settings/team?view=select');
    };

    const handleInvite = (formData: FormData) => {
        executeActionAndRefresh(() => inviteUserAction(formData));
        inviteFormRef.current?.reset();
    };

    const handleRemoveMember = (userId: string) => {
        if (!confirm("Estàs segur que vols eliminar aquest membre? Aquesta acció no es pot desfer.")) return;
        executeActionAndRefresh(() => removeMemberAction(userId));
    };

    const handleRoleChange = (userId: string, newRole: Role) => {
        executeActionAndRefresh(() => updateMemberRoleAction(userId, newRole));
    };

    const handleRevokeInvite = (invitationId: string) => {
        executeActionAndRefresh(() => revokeInvitationAction(invitationId));
    };

    const handleTogglePermission = (targetUserId: string) => {
        executeActionAndRefresh(() => toggleInboxPermissionAction(targetUserId));
    };

    const getInitials = (name: string | null | undefined) => {
        if (!name) return '??';
        return name.split(' ').map(n => n[0]).slice(0, 2).join('').toUpperCase();
    };

    return {
        isPending, inviteFormRef, handleClearTeam, handleInvite,
        handleRemoveMember, handleRoleChange, handleRevokeInvite,
        handleTogglePermission, getInitials,
    };
}

// =================== FILE: src/app/[locale]/(app)/settings/_components/settings-nav.tsx ===================

/**
 * @file SettingsNav.tsx
 * @summary Component de navegació per a la secció de Configuració,
 * ara adaptable per a escriptori i mòbil.
 */
"use client";

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { useLocale, useTranslations } from 'next-intl';
import { User, CreditCard, Users, Puzzle, Wrench, ShieldOff ,KeyRound, Download} from 'lucide-react';
import { cn, getCleanPathname } from '@/lib/utils/utils';

const settingsNavItems = [
  { id: 'profile', labelKey: 'profile', icon: User, path: '/settings/profile' },
  { id: 'billing', labelKey: 'billing', icon: CreditCard, path: '/settings/billing' },
  { id: 'team', labelKey: 'team', icon: Users, path: '/settings/team' },
  { id: 'integrations', labelKey: 'integrations', icon: Puzzle, path: '/settings/integrations' },
  { id: 'blacklist', labelKey: 'blacklist', icon: ShieldOff, path: '/settings/blacklist' },
  { id: 'customization', labelKey: 'customization', icon: Wrench, path: '/settings/customization' },
  { id: 'install', labelKey: 'install', icon: Download, path: '/settings/install' },
  { id: 'permissions', labelKey: 'permissions', icon: KeyRound, path: '/settings/permissions' },
];

export function SettingsNav() {
  const t = useTranslations('SettingsPage.nav');
  const fullPathname = usePathname();
  const locale = useLocale();
  const cleanPathname = getCleanPathname(fullPathname, locale);

  return (
    // Aquest <nav> és ara un contenidor flexible.
    <nav className="flex flex-col gap-4">
      {/* El títol principal només es mostra en pantalles grans */}
      <h1 className="text-3xl font-bold mb-4 hidden lg:block">{t('title')}</h1>
      
      {/* ✅ DISSENY ADAPTABLE:
        - En mòbil ('flex-row'), és una fila.
        - En escriptori ('lg:flex-col'), és una columna.
        - 'overflow-x-auto' permet fer scroll horitzontal en mòbil si no hi caben tots els elements.
      */}
      <ul className="flex flex-row lg:flex-col space-x-2 lg:space-x-0 lg:space-y-1 overflow-x-auto pb-2 -mb-2">
        {settingsNavItems.map(item => {
          // Comprovem si l'enllaç està actiu
          const isActive = cleanPathname === item.path;
          return (
            <li key={item.id} className="flex-shrink-0">
              <Link
                href={`/${locale}${item.path}`}
                className={cn(
                  'flex items-center gap-3 px-4 py-2.5 rounded-lg transition-all duration-200 hover:bg-accent text-sm lg:text-base',
                  isActive
                    ? 'bg-primary text-primary-foreground font-semibold shadow-sm'
                    : 'text-muted-foreground hover:text-foreground'
                )}
              >
                <item.icon className="w-5 h-5" />
                <span>{t(item.labelKey as string)}</span>
              </Link>
            </li>
          );
        })}
      </ul>
    </nav>
  );
}


// =================== FILE: src/app/[locale]/(app)/settings/_components/SettingsSkeleton.tsx ===================

/**
 * @file SettingsSkeleton.tsx
 * @summary Esquelet de càrrega per a l'estructura general de la secció de Configuració.
 */
"use client";

import { Skeleton } from '@/components/ui/skeleton';

export function SettingsSkeleton() {
  return (
    <div className="flex flex-col lg:flex-row gap-8 h-full animate-pulse">
      {/* Esquelet per a la navegació lateral */}
      <aside className="flex-shrink-0 lg:w-64">
        <Skeleton className="h-9 w-1/2 mb-8" />
        <div className="space-y-2">
          <Skeleton className="h-12 w-full" />
          <Skeleton className="h-12 w-full" />
          <Skeleton className="h-12 w-full" />
          <Skeleton className="h-12 w-full" />
        </div>
      </aside>
      {/* Esquelet per a l'àrea de contingut */}
      <main className="flex-1">
        <div className="space-y-4">
          <Skeleton className="h-9 w-1/3" />
          <Skeleton className="h-5 w-2/3" />
          <Skeleton className="h-64 w-full mt-8" />
        </div>
      </main>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/_components/AppClientLayout.tsx ===================

// Ubicació: /app/(app)/components/AppClientLayout.tsx

"use client";

import React, { useState, ReactNode } from 'react';
import Image from 'next/image';
import { motion } from 'framer-motion';
import { useTranslations } from 'next-intl';
import { toast } from 'sonner';

// Hooks i Stores
import { useAppNavigation } from '@/hooks/useAppNavigation';
import { useNavigationStore } from '@/stores/navigationStore';

// Components
import { MainSidebar } from './main-sidebar';
import { ModuleSidebar } from './module-sidebar';
import { MobileMenu } from './MobileMenu';
import { Chatbot } from '@/components/chatbot/Chatbot';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";

// Accions
import { logoutAction } from '@/app/[locale]/(auth)/auth/actions';

// Imatges i tipus
export function AppClientLayout({ children }: { children: ReactNode, locale: string }) {
    const t = useTranslations('Navigation');
    const { isChatbotOpen } = useNavigationStore();
    const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);

    // ✅ Tota la lògica complexa ve del nostre hook personalitzat!
    const {
        activeModule,
        isModuleSidebarOpen,
        setIsModuleSidebarOpen,
        handleNavigation,
        handleMainMenuClick,
    } = useAppNavigation();

    const handleSignOut = () => {
        logoutAction();
    };

    const handleNotImplementedClick = (e: React.MouseEvent) => {
        e.preventDefault();
        toast.info(t('comingSoon'), { description: t('featureUnavailable') });
    };

    return (
        <div className="h-screen w-screen flex flex-col lg:flex-row bg-background text-foreground overflow-hidden">
            <MainSidebar
                onModuleSelect={handleMainMenuClick}
                onOpenSignOutDialog={() => setIsSignOutDialogOpen(true)}
                onNotImplemented={handleNotImplementedClick}
            />

            <motion.div
                className="hidden lg:block overflow-hidden flex-shrink-0"
                initial={false}
                animate={{ width: isModuleSidebarOpen && activeModule ? '16rem' : '0rem' }}
                transition={{ type: 'spring', stiffness: 400, damping: 40 }}
            >
                {activeModule && (
                    <ModuleSidebar
                        module={activeModule}
                        onClose={() => setIsModuleSidebarOpen(false)}
                        handleNavigation={handleNavigation}
                    />
                )}
            </motion.div>

            <div className="flex-1 flex flex-col overflow-hidden">
                <header className="lg:hidden flex items-center justify-between p-4 border-b border-border flex-shrink-0">
                    <MobileMenu
                        onOpenSignOutDialog={() => setIsSignOutDialogOpen(true)}
                        onNotImplementedClick={handleNotImplementedClick}
                        handleNavigation={handleNavigation}
                    />
                    <span className="font-bold text-lg">Ribotflow</span>
                    <Image
                        src="/icon0.svg"
                        alt={t('logoAlt')}
                        className="object-cover"
                        priority height={40}
                        width={64}   // Substitueix per l'amplada real de la teva imatge

                    />

                </header>
                <main className="flex-1 overflow-y-auto">
                    <div className="h-full p-4 sm:p-6 md:p-8">{children}</div>
                </main>
                {isChatbotOpen && <Chatbot />}
            </div>

            <AlertDialog open={isSignOutDialogOpen} onOpenChange={setIsSignOutDialogOpen}>
                <AlertDialogContent>
                    <AlertDialogHeader>
                        <AlertDialogTitle>{t('signOutConfirmTitle')}</AlertDialogTitle>
                        <AlertDialogDescription>{t('signOutConfirmDescription')}</AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                        <AlertDialogCancel>{t('cancel')}</AlertDialogCancel>
                        <AlertDialogAction onClick={handleSignOut} className="bg-destructive hover:bg-destructive/90">{t('confirmSignOut')}</AlertDialogAction>
                    </AlertDialogFooter>
                </AlertDialogContent>
            </AlertDialog>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/_components/main-sidebar.tsx ===================

// Ubicació: /app/(app)/components/main-sidebar.tsx

"use client";

import React from 'react';
import Image from 'next/image';
import { useTranslations } from 'next-intl';
import { LogOut } from 'lucide-react';

import { useNavigationStore } from '@/stores/navigationStore';
import { navModules, bottomItems } from '@/config/navigation';
import type { NavItem as NavItemType } from '@/types/app/navigation';

import { NavItem } from './NavItem';

interface MainSidebarProps {
    onModuleSelect: (module: NavItemType) => void;
    onOpenSignOutDialog: () => void;
    onNotImplemented: (e: React.MouseEvent) => void;
}

export function MainSidebar({ onModuleSelect, onOpenSignOutDialog, onNotImplemented }: MainSidebarProps) {
    const t = useTranslations('Navigation');
    const { isNavigating } = useNavigationStore();
    const { toggleChatbot } = useNavigationStore();

    const handleItemClick = (e: React.MouseEvent<HTMLAnchorElement>, item: NavItemType) => {
        // ✅ CORRECCIÓ: Comprovem primer si l'ítem no està implementat.
        if (item.notImplemented) {
            e.preventDefault(); // Prevenim la navegació del Link
            onNotImplemented(e); // Cridem a la funció corresponent del pare
            return; // Aturem l'execució aquí
        }

        // Lògica especial per a certs botons (com el chatbot)
        if (item.id === 'ia') {
            e.preventDefault();
            toggleChatbot();
            return;
        }

        // Prevenim la navegació si no és un enllaç directe (és un mòdul que obre un submenú)
        if (!item.isSingle) {
            e.preventDefault();
        }

        // Finalment, notifiquem al component pare que s'ha fet un clic.
        onModuleSelect(item);
    };

    return (
        <aside className="hidden lg:flex w-24 h-full glass-effect border-r border-border p-4 flex-col items-center z-20">
            {/* Logo a la part superior */}
            <div className="flex items-center justify-center gap-3 mb-8">
                <div className="w-12 h-12 bg-gradient-to-r to-pink-500 rounded-lg flex items-center justify-center overflow-hidden">
                    {isNavigating ? (
                        <video
                            src="/videoLoading.webm"
                            autoPlay muted loop playsInline
                            className="w-full h-full object-cover"
                        />
                    ) : (
                        <Image
                            src="/icon0.svg"
                            alt={t('logoAlt')}
                            className="object-cover"
                            priority
                            width={64}   // Substitueix per l'amplada real de la teva imatge
                            height={64}  // Substitueix per l'alçada real de la teva imatge
                        />
                    )}
                </div>
            </div>

            {/* Navegació principal */}
            <nav className="flex-1 flex flex-col items-center gap-4 z-20">
                {navModules.map(item => (
                    <NavItem key={item.id} item={item} onClick={handleItemClick} t={t} />
                ))}
            </nav>

            {/* Elements de la part inferior */}
            <div className="flex flex-col items-center gap-4 border-t border-border pt-4 mt-4">
                {bottomItems.map(item => (
                    <NavItem key={item.id} item={item} onClick={handleItemClick} t={t} />
                ))}

                {/* Botó de tancar sessió */}
                <div
                    onClick={onOpenSignOutDialog}
                    className="flex items-center justify-center h-12 w-12 rounded-lg text-muted-foreground hover:bg-muted cursor-pointer group relative"
                    role="button"
                    aria-label={t('signOut')}
                >
                    <LogOut className="w-6 h-6" />
                    <span className="absolute left-16 p-2 px-3 text-sm font-medium bg-popover text-popover-foreground rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">{t('signOut')}</span>
                </div>
            </div>
        </aside>
    );
}

// =================== FILE: src/app/[locale]/(app)/_components/MobileMenu.tsx ===================

"use client";

import React, { useState } from 'react';
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from "@/components/ui/sheet";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Button } from '@/components/ui/button';
import { Menu, LogOut } from 'lucide-react';
import { useTranslations } from 'next-intl';
import { navModules, bottomItems } from '@/config/navigation';
import type { NavItem } from '@/types/app/navigation';

export function MobileMenu({ onOpenSignOutDialog, onNotImplementedClick, handleNavigation }: {
    onOpenSignOutDialog: () => void;
    onNotImplementedClick: (e: React.MouseEvent) => void;
    handleNavigation: (item: NavItem) => void;
}) {
    const [isOpen, setIsOpen] = useState(false);
    const t = useTranslations('Navigation');

    // Funció que crida a handleNavigation i tanca el menú
    const createClickHandler = (item: NavItem) => () => {
        handleNavigation(item);
        // Tanquem el menú si és un enllaç simple o si és un sub-ítem
        if (item.isSingle !== false) { // isSingle pot ser true o undefined
            setIsOpen(false);
        }
    };

    return (
        <Sheet open={isOpen} onOpenChange={setIsOpen}>
            <SheetTrigger asChild>
                <Button variant="ghost" size="icon" className="lg:hidden"><Menu className="h-6 w-6" /></Button>
            </SheetTrigger>
            <SheetContent side="left" className="w-full sm:w-[320px] p-0 flex flex-col">
                <SheetHeader className="p-4 border-b"><SheetTitle>{t('menuTitle')}</SheetTitle></SheetHeader>
                <nav className="flex-1 overflow-y-auto p-4 space-y-1">
                    {navModules.map(module => (
                        module.isSingle ? (
                            <Button key={module.id} variant="ghost" className="w-full justify-start gap-3 px-4 py-3 text-base font-medium" onClick={createClickHandler(module)}>
                                <module.icon className="w-5 h-5" /> {t(module.labelKey)}
                            </Button>
                        ) : (
                            <Accordion key={module.id} type="single" collapsible className="w-full">
                                <AccordionItem value={module.id} className="border-b-0">
                                    <AccordionTrigger className="px-4 py-3 text-base font-medium hover:no-underline hover:bg-muted rounded-lg">
                                        <div className="flex items-center gap-3"><module.icon className="w-5 h-5" />{t(module.labelKey)}</div>
                                    </AccordionTrigger>
                                    <AccordionContent className="pl-8 pt-2 pb-1">
                                        <div className="flex flex-col gap-1">
                                            {module.children?.map((item: NavItem) => (
                                                <Button key={item.id} variant="ghost" className="w-full justify-start gap-3 px-4 py-2 text-muted-foreground hover:text-foreground" onClick={createClickHandler(item)}>
                                                    <item.icon className="w-4 h-4" />{t(item.labelKey)}
                                                </Button>
                                            ))}
                                        </div>
                                    </AccordionContent>
                                </AccordionItem>
                            </Accordion>
                        )
                    ))}
                </nav>
                <div className="p-4 border-t mt-auto space-y-1">
                    {bottomItems.map(item =>
                        item.notImplemented ? (
                            <Button key={item.id} variant="ghost" className="w-full justify-start ..." onClick={onNotImplementedClick}>{/* ... */}</Button>
                        ) : (
                            <Button key={item.id} variant="ghost" className="w-full justify-start ..." onClick={createClickHandler(item)}>{/* ... */}</Button>
                        )
                    )}
                    <Button variant="ghost" className="w-full justify-start ... text-red-500" onClick={onOpenSignOutDialog}>
                        <LogOut className="w-5 h-5" /> {t('signOut')}
                    </Button>
                </div>
            </SheetContent>
        </Sheet>
    );
}

// =================== FILE: src/app/[locale]/(app)/_components/module-sidebar.tsx ===================

"use client";

import { usePathname } from 'next/navigation';
import { useLocale, useTranslations } from 'next-intl';
import { ChevronLeft } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { cn, getCleanPathname } from '@/lib/utils/utils';
import type { NavItem } from '@/types/app/navigation';

/**
 * @summary Barra lateral para un módulo específico (submenú).
 * AHORA GESTIONA LA NAVEGACIÓN A TRAVÉS DE UNA FUNCIÓN PARA COMPROBAR PERMISOS.
 */
export function ModuleSidebar({ module, onClose, handleNavigation }: {
    module: NavItem;
    onClose: () => void;
    handleNavigation: (item: NavItem) => void; // ✅ Acceptem la funció de navegació
}) {
    const locale = useLocale();
    const t = useTranslations('Navigation');
    const fullPathname = usePathname();
    const cleanPathname = getCleanPathname(fullPathname, locale);

    if (!module || !module.children) return null;

    return (
        <div className="hidden lg:flex w-64 h-full glass-effect border-r border-border flex-col p-4 flex-shrink-0">
            <div className="flex items-center justify-between mb-6">
                <h2 className="text-lg font-bold pl-2">{t(module.labelKey)}</h2>
                <Button variant="ghost" size="icon" onClick={onClose}>
                    <ChevronLeft className="h-5 w-5" />
                </Button>
            </div>
            <nav className="flex flex-col gap-2">
                {module.children.map(item => {
                    const isActive = cleanPathname === item.path;
                    return (
                        // ✅ CORRECCIÓ: Hem canviat <Link> per <Button> per a controlar el clic
                        <Button
                            key={item.id}
                            variant="ghost" // Usem 'ghost' per a que sembli un enllaç
                            onClick={() => handleNavigation(item)} // Cridem a la funció que comprova els permisos
                            className={cn(
                                'flex items-center justify-start gap-3 px-4 py-2.5 rounded-lg text-sm transition-colors w-full h-auto text-left', // 'text-left' per a alinear
                                isActive
                                    ? 'bg-primary text-primary-foreground font-semibold shadow-sm'
                                    : 'text-muted-foreground hover:bg-muted/50 hover:text-foreground'
                            )}
                        >
                            <item.icon className="w-5 h-5" />
                            <span>{t(item.labelKey)}</span>
                        </Button>
                    );
                })}
            </nav>
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/_components/NavItem.tsx ===================

// Ubicació: /components/layout/NavItem.tsx (o on guardis els teus components)

"use client";

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { useLocale } from 'next-intl';

import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { cn, getCleanPathname } from '@/lib/utils/utils';
import type { NavItem as NavItemType } from '@/types/app/navigation';

// Definim les propietats que rebrà el nostre component
interface NavItemProps {
    item: NavItemType;
    onClick: (e: React.MouseEvent<HTMLAnchorElement>, item: NavItemType) => void;
    t: (key: string) => string; // Passem la funció de traducció per mantenir el component pur
}

export function NavItem({ item, onClick, t }: NavItemProps) {
    const fullPathname = usePathname();
    const locale = useLocale();
    
    // La lògica per determinar si l'ítem està actiu
    const activeCheckPath = item.basePath || item.path;
    const isActive = getCleanPathname(fullPathname, locale).startsWith(activeCheckPath);

    return (
        <TooltipProvider delayDuration={100}>
            <Tooltip>
                <TooltipTrigger asChild>
                    <Link
                        href={`/${locale}${item.path}`}
                        onClick={(e) => onClick(e, item)} // Cridem a la funció del pare
                        className={cn(
                            'flex items-center justify-center h-12 w-12 rounded-lg transition-colors relative',
                            isActive 
                                ? 'bg-primary text-primary-foreground' 
                                : 'text-muted-foreground hover:bg-muted'
                        )}
                        aria-label={t(item.labelKey)}
                    >
                        <item.icon className="w-6 h-6" />
                    </Link>
                </TooltipTrigger>
                <TooltipContent side="right" className="ml-2">
                    <p>{t(item.labelKey)}</p>
                </TooltipContent>
            </Tooltip>
        </TooltipProvider>
    );
}

// =================== FILE: src/app/[locale]/(app)/_components/ui/redirect-animation.tsx ===================

// src/app/_components/ui/redirect-animation.tsx
"use client"; // ✅ Indica a Next.js que aquest component s'executa al client (necessari per animacions i estat).

import { motion } from 'framer-motion'; // ✅ Importem Framer Motion per gestionar animacions.
import { Rocket } from 'lucide-react'; // ✅ Icona de coet de la llibreria Lucide.
import { useTranslations } from 'next-intl'; // ✅ Import

export default function RedirectAnimation() {
  const t = useTranslations('RedirectAnimation'); // ✅ Hook

  // ✅ Component que mostra una animació mentre es prepara l'espai de treball.
  return (
    <div className="flex flex-col items-center justify-center gap-6 text-center">
      {/* ✅ Animació principal del coet */}
      <motion.div
        // Estat inicial del coet: posició vertical y=0, opacitat completa i lleuger gir.
        initial={{ y: 0, opacity: 1, rotate: -45 }}
        // Animació: el coet es mou cap amunt i desapareix (opacitat 0).
        animate={{ y: -150, opacity: 0 }}
        // Configuració de la transició: durada, suavitzat, repetició infinita amb retard.
        transition={{
          duration: 2,
          ease: "easeInOut",
          repeat: Infinity,
          repeatType: "loop",
          repeatDelay: 1,
        }}
      >
        {/* ✅ Icona del coet estilitzada */}
        <Rocket className="w-24 h-24 text-primary" />
      </motion.div>

      {/* ✅ Text que apareix suaument després d’un retard */}
      <motion.p
        initial={{ opacity: 0 }} // El text comença invisible.
        animate={{ opacity: 1 }} // Es fa visible.
        transition={{ delay: 0.5, duration: 1 }} // Apareix després de 0.5s, dura 1s.
        className="text-2xl font-semibold text-muted-foreground"
      >
        {t('loadingWorkspace')} {/* ✅ Text traduït */}
        </motion.p>
    </div>
  );
}


// =================== FILE: src/app/[locale]/(auth)/auth/actions.ts ===================

// /app/[locale]/auth/actions.ts

"use server";

import { z } from 'zod';
import { createClient, createAdminClient } from "@/lib/supabase/server";
import { headers } from "next/headers";
import { redirect } from "next/navigation";

// ✅ PRINCIPI DRY: Un helper per a inicialitzar el context de l'acció
async function createActionContext() {
    const supabase = createClient();
    const headersList = await headers();
    const locale = headersList.get('x-next-intl-locale') || 'ca';
    const origin = headersList.get('origin');
    return { supabase, locale, origin };
}

// --- Esquemes de Validació amb Zod ---
const LoginSchema = z.object({
    email: z.string().email("L'adreça d'email no és vàlida."),
    password: z.string().min(1, "La contrasenya és obligatòria."),
});

const SignupSchema = z.object({
    email: z.string().email("L'adreça d'email no és vàlida."),
    fullName: z.string().min(1, "El nom complet és obligatori.").optional(), 
    password: z.string().min(8, "La contrasenya ha de tenir almenys 8 caràcters."),
    invite_token: z.string().optional(),
});

const ForgotPasswordSchema = z.object({
    email: z.string().email("Si us plau, introdueix una adreça d'email vàlida."),
});

const UpdatePasswordSchema = z.object({
    password: z.string().min(8, "La nova contrasenya ha de tenir almenys 8 caràcters."),
    code: z.string().min(1, "Falta el token de restabliment."),
});


// --- Accions Refactoritzades ---

export async function loginAction(formData: FormData) {
    const { supabase, locale } = await createActionContext();
    const result = LoginSchema.safeParse(Object.fromEntries(formData));

    if (!result.success) {
        return redirect(`/${locale}/login?message=${encodeURIComponent(result.error.issues[0].message)}`);
    }

    const { error } = await supabase.auth.signInWithPassword(result.data);
    if (error) {
        return redirect(`/${locale}/login?message=${encodeURIComponent("Credencials incorrectes.")}`);
    }

    redirect(`/${locale}/dashboard`);
}

export async function signupAction(formData: FormData) {
    const { supabase, locale, origin } = await createActionContext();
    const supabaseAdmin = createAdminClient();
    const result = SignupSchema.safeParse(Object.fromEntries(formData));

    if (!result.success) {
        return redirect(`/${locale}/signup?message=${encodeURIComponent(result.error.issues[0].message)}`);
    }

    const { email, password, fullName, invite_token } = result.data;

    const { data: existingUser } = await supabaseAdmin.from('users').select('id').eq('email', email).single();
    if (existingUser) {
        return redirect(`/${locale}/login?message=${encodeURIComponent("Ja existeix un compte amb aquest correu.")}`);
    }

    const nextUrl = invite_token ? `/dashboard?token=${invite_token}` : `/onboarding`;

    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
        email,
        password,
        options: {
            emailRedirectTo: `${origin}/auth/callback?next=${encodeURIComponent(nextUrl)}`,
            ...(fullName && { data: { full_name: fullName } })
        },
    });

    if (signUpError) {
        return redirect(`/${locale}/signup?message=${encodeURIComponent(signUpError.message)}`);
    }
    if (!signUpData.user) {
        return redirect(`/${locale}/signup?message=No s'ha pogut crear l'usuari.`);
    }


    return redirect(`/auth/check-email?email=${encodeURIComponent(email)}`);
}

export async function logoutAction() {
    const { supabase, locale } = await createActionContext();
    await supabase.auth.signOut();
    redirect(`/${locale}/login`);
}

export async function googleAuthAction(inviteToken?: string | null) {
    const { supabase, origin } = await createActionContext();
    if (inviteToken) {
        await supabase.auth.signOut();
    }
    let redirectTo = `${origin}/auth/callback`;
    if (inviteToken) {
        redirectTo += `?next=/dashboard?token=${inviteToken}`;
    }
    const { data, error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: { redirectTo },
    });

    if (error) {
        return redirect(`/login?message=${encodeURIComponent("No s'ha pogut iniciar sessió amb Google.")}`);
    }
    return redirect(data.url);
}

export async function forgotPasswordAction(formData: FormData): Promise<{ success: boolean; message: string }> {
    const { supabase, origin, locale } = await createActionContext();
    const result = ForgotPasswordSchema.safeParse(Object.fromEntries(formData));

    if (!result.success) {
        return { success: false, message: result.error.issues[0].message };
    }

    const { error } = await supabase.auth.resetPasswordForEmail(result.data.email, {
        redirectTo: `${origin}/${locale}/auth/reset-password`,
    });

    if (error) {
        console.error("Error en restablir la contrasenya:", error);
        return { success: false, message: "No s'ha pogut iniciar el procés de restabliment." };
    }

    return { success: true, message: "Si l'email existeix, rebràs un enllaç per a restablir la teva contrasenya." };
}

// ✅ Aquesta és la nova acció que hem mogut des del component de pàgina
export async function updatePasswordAction(formData: FormData) {
    const { supabase, locale } = await createActionContext();
    const result = UpdatePasswordSchema.safeParse(Object.fromEntries(formData));

    if (!result.success) {
        return redirect(`/${locale}/auth/reset-password?message=${encodeURIComponent(result.error.issues[0].message)}`);
    }

    const { code, password } = result.data;

    const { error: exchangeError } = await supabase.auth.exchangeCodeForSession(code);
    if (exchangeError) {
        return redirect(`/${locale}/auth/reset-password?message=L'enllaç de restabliment és invàlid o ha caducat.`);
    }

    const { error: updateError } = await supabase.auth.updateUser({ password });
    if (updateError) {
        return redirect(`/${locale}/auth/reset-password?message=${encodeURIComponent(updateError.message)}`);
    }

    return redirect(`/${locale}/login?message=La teva contrasenya s'ha actualitzat correctament.`);
}

// =================== FILE: src/app/[locale]/(auth)/auth/callback/route.ts ===================

import { createClient, createAdminClient } from "@/lib/supabase/server";
import { headers } from "next/headers";
import { NextResponse, type NextRequest } from 'next/server';

export async function GET(request: NextRequest) {
    const { searchParams, origin } = new URL(request.url);
    const code = searchParams.get('code');
    const next = searchParams.get('next') ?? '/dashboard'; // Per defecte, anem al dashboard
    const locale = (await headers()).get('x-next-intl-locale') || 'ca';

    if (code) {

        const supabase = createClient();
        const { error, data: { user } } = await supabase.auth.exchangeCodeForSession(code);

        if (!error && user) {
            const inviteToken = new URL(`${origin}${next}`).searchParams.get('token');

            // CAS 1: L'usuari ve amb una invitació
            if (inviteToken) {
                const supabaseAdmin = createAdminClient();
                const { data: invitation } = await supabaseAdmin.from('invitations').select('*').eq('token', inviteToken).single();

                if (invitation) {
                    await supabaseAdmin.from('team_members').insert({ team_id: invitation.team_id, user_id: user.id, role: invitation.role });
                    const { data: subscription } = await supabaseAdmin.from('subscriptions').select('plan_id, status').eq('team_id', invitation.team_id).single();
                    const teamPlan = (subscription?.status === 'active') ? subscription.plan_id : 'free';

                    await supabaseAdmin.auth.admin.updateUserById(user.id, { app_metadata: { active_team_id: invitation.team_id, active_team_plan: teamPlan } });
                    await supabaseAdmin.from('profiles').update({ onboarding_completed: true }).eq('id', user.id);
                    await supabaseAdmin.from('invitations').delete().eq('id', invitation.id);
                    // ✅ PAS CRUCIAL: Forcem el refresc de la sessió per a actualitzar la cookie

                    await supabase.auth.refreshSession();
                    // Després de gestionar la invitació, el portem directament al dashboard
                    return NextResponse.redirect(`${origin}/${locale}/dashboard`);
                }
            }

            // CAS 2: Usuari normal (sense invitació)
            const { data: profile } = await supabase.from('profiles').select('onboarding_completed').eq('id', user.id).single();
            if (profile && !profile.onboarding_completed) {
                return NextResponse.redirect(`${origin}/${locale}/onboarding`);
            }

            // Per a la resta de casos, el portem a la seva destinació (normalment, el dashboard)
            return NextResponse.redirect(`${origin}/${locale}${next.split('?')[0]}`);
        }
    }

    return NextResponse.redirect(`${origin}/${locale}/login?error=auth_failed`);
}

// =================== FILE: src/app/[locale]/(auth)/auth/check-email/page.tsx ===================

"use client";

import { Suspense } from 'react';
import { useSearchParams } from 'next/navigation';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { MailCheck } from 'lucide-react';

function CheckEmailMessage() {
    const searchParams = useSearchParams();
    const email = searchParams.get('email');

    if (!email) {
        return (
            <Card className="w-full max-w-md">
                <CardHeader>
                    <CardTitle>Error</CardTitle>
                </CardHeader>
                <CardContent>
                    <p>No s'ha proporcionat cap correu electrònic.</p>
                </CardContent>
            </Card>
        );
    }


    // AQUEST COMPONENT ARA NOMÉS MOSTRA EL MISSATGE. NO TÉ useEffect NI LÒGICA DE REDIRECCIÓ.
    return (
        <Card className="w-full max-w-md text-center">
            <CardHeader>
                <div className="mx-auto bg-primary/10 text-primary p-3 rounded-full w-fit">
                    <MailCheck className="w-8 h-8" />
                </div>
                <CardTitle className="mt-4 text-2xl">Només un pas més!</CardTitle>
                <CardDescription>
                    T'hem enviat un enllaç de confirmació a <br/>
                    <strong className="text-foreground">{email}</strong>
                </CardDescription>
            </CardHeader>
            <CardContent>
                <p className="text-sm text-muted-foreground">
                    Si us plau, fes clic a l'enllaç per activar el teu compte. Si no el veus, revisa la teva carpeta de correu brossa (spam).
                </p>
                <p className="text-xs text-muted-foreground mt-6">
                    Pots tancar aquesta pestanya un cop hagis confirmat el correu a l'altra.
                </p>
            </CardContent>
        </Card>
    );
}

export default function CheckEmailPage() {
    return (
        <div className="flex items-center justify-center min-h-screen bg-muted/40 p-4">
            <Suspense>
                <CheckEmailMessage />
            </Suspense>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(auth)/auth/reset-password/page.tsx ===================

// /app/[locale]/auth/reset-password/_components/ResetPasswordClient.tsx
"use client";

import { useSearchParams } from 'next/navigation';
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { updatePasswordAction } from '../actions'; // La mateixa acció

export default function ResetPasswordClient() {
    // Utilitzem el hook de client per obtenir els paràmetres de cerca de forma segura.
    const searchParams = useSearchParams();
    
    // Accedim als valors directament sense await
    const message = searchParams.get('message');
    const code = searchParams.get('code');

    // Nota: L'acció updatePasswordAction s'espera que gestioni l'absència de 'code'.
    
    return (
        <div className="flex items-center justify-center min-h-screen">
            <div className="w-full max-w-sm space-y-6">
                <h1 className="text-2xl font-bold">Crea una nova contrasenya</h1>
                
                <form action={updatePasswordAction} className="space-y-4">
                    {/* Utilitzem el valor obtingut del hook */}
                    <input type="hidden" name="code" value={code || ''} /> 
                    <div className="space-y-2">
                        <Label htmlFor="password">Nova Contrasenya</Label>
                        <Input id="password" name="password" type="password" required minLength={8} />
                    </div>
                    <Button type="submit" className="w-full">Actualitzar Contrasenya</Button>
                    
                    {message && (
                        <p className="text-sm text-center text-destructive p-2 bg-destructive/10 rounded-md">
                            {message}
                        </p>
                    )}
                </form>
            </div>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(auth)/login/page.tsx ===================

// /app/[locale]/login/page.tsx

import LoginForm from './_components/LoginClient';
import { Suspense } from 'react';

// This Server Component is now very simple.
export default function LoginPage() {
  return (
    // Suspense is still needed because the child component uses a hook to read params.
    <Suspense>
      <LoginForm />
    </Suspense>
  );
}

// =================== FILE: src/app/[locale]/(auth)/login/_components/ForgotPasswordDialog.tsx ===================

"use client";

import { useState, useTransition } from 'react';
import { toast } from 'sonner';
import { useTranslations } from 'next-intl';
import { forgotPasswordAction } from '@/app/[locale]/(auth)/auth/actions';

// UI Components
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogTrigger } from '@/components/ui/dialog';
import { Loader2, MailCheck } from 'lucide-react';

export function ForgotPasswordDialog() {
    // ✅ CORRECCIÓ: Agafem l'espai de noms principal 'LoginPage'.
    const t = useTranslations('LoginPage');
    const [isOpen, setIsOpen] = useState(false);
    const [isPending, startTransition] = useTransition();
    const [emailSent, setEmailSent] = useState(false);
    const [userEmail, setUserEmail] = useState("");

    const handleSubmit = (formData: FormData) => {
        const email = formData.get('email') as string;
        setUserEmail(email);

        startTransition(async () => {
            const result = await forgotPasswordAction(formData);
            if (result.success) {
                setEmailSent(true);
            } else {
                toast.error(t('forgotPassword.errorTitle'), { description: result.message });
            }
        });
    };

    const handleOpenChange = (open: boolean) => {
        setIsOpen(open);
        if (!open) {
            // Reseteja l'estat quan el diàleg es tanca
            setTimeout(() => {
                setEmailSent(false);
                setUserEmail("");
            }, 300);
        }
    };

    return (
        <Dialog open={isOpen} onOpenChange={handleOpenChange}>
            <DialogTrigger asChild>
                <button type="button" className="text-sm font-medium text-primary hover:underline">
                    {/* ✅ CORRECCIÓ: Usem la clau completa i correcta. */}
                    {t('forgotPasswordLink')}
                </button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-md">
                {emailSent ? (
                    <div className="text-center p-8">
                        <MailCheck className="w-16 h-16 text-green-500 mx-auto mb-4" />
                        <h3 className="text-xl font-bold">{t('forgotPassword.successTitle')}</h3>
                        <p className="text-muted-foreground mt-2">
                            {t('forgotPassword.successDescription')} <br />
                            <strong className="text-foreground">{userEmail}</strong>
                        </p>
                        <p className="text-xs text-muted-foreground mt-4">{t('forgotPassword.spamWarning')}</p>
                        <Button onClick={() => setIsOpen(false)} className="mt-6 w-full">{t('forgotPassword.closeButton')}</Button>
                    </div>
                ) : (
                    <>
                        <DialogHeader>
                            <DialogTitle>{t('forgotPassword.title')}</DialogTitle>
                            <DialogDescription>{t('forgotPassword.description')}</DialogDescription>
                        </DialogHeader>
                        <form action={handleSubmit}>
                            <div className="grid gap-4 py-4">
                                {/* ✅ CORRECCIÓ: Usem la clau del nivell superior. */}
                                <Label htmlFor="email-forgot">{t('emailLabel')}</Label>
                                <Input id="email-forgot" name="email" type="email" placeholder={t('emailPlaceholder')} required disabled={isPending} />
                            </div>
                            <DialogFooter>
                                <Button type="submit" disabled={isPending} className="w-full">
                                    {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                                    {t('forgotPassword.submitButton')}
                                </Button>
                            </DialogFooter>
                        </form>
                    </>
                )}
            </DialogContent>
        </Dialog>
    );
}



// =================== FILE: src/app/[locale]/(auth)/login/_components/LoginClient.tsx ===================

"use client";

import Image from 'next/image';
import Link from 'next/link';
import dynamic from 'next/dynamic';
import { useTranslations } from 'next-intl';

// UI Components
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Separator } from '@/components/ui/separator';
import { Mail, Lock, Loader2, Check, AlertTriangle } from 'lucide-react';

// Lògica i components refactoritzats
import { useLoginForm } from '../_hooks/useLoginForm';
import { ForgotPasswordDialog } from './ForgotPasswordDialog';

// Carrega dinàmica per a components pesats només de client
const ParticleBackground = dynamic(() => import('@/app/[locale]/_components/ParticleBackground').then(mod => mod.ParticleBackground), { ssr: false });

// Component de presentació per a la secció de branding
const BrandingSection = () => {
    const t = useTranslations('LoginPage');
    return (
        <div className="hidden lg:flex flex-col items-center justify-center p-12 relative z-10">
            <div className="text-center max-w-md">
                <Image src="/android-chrome-192x192.png" alt="Logo de Ribotflow" width={80} height={80} className="mx-auto mb-6" />
                <h1 className="text-4xl font-bold mb-4">{t('welcomeTitle')}</h1>
                <p className="text-lg text-muted-foreground mb-8">{t('welcomeSubtitle')}</p>
                <ul className="space-y-4 text-lg text-left">
                    <li className="flex items-start"><Check className="w-6 h-6 text-primary mr-3 mt-1 shrink-0" /><span>{t('feature1')}</span></li>
                    <li className="flex items-start"><Check className="w-6 h-6 text-primary mr-3 mt-1 shrink-0" /><span>{t('feature2')}</span></li>
                    <li className="flex items-start"><Check className="w-6 h-6 text-primary mr-3 mt-1 shrink-0" /><span>{t('feature3')}</span></li>
                </ul>
            </div>
        </div>
    );
};

export default function LoginClient() {
    const t = useTranslations('LoginPage');
    // ✅ Tota la lògica complexa ara ve d'aquest hook. El component només es preocupa de renderitzar.
    const { isPending, isGoogleLoading, errorMessage, handleEmailLogin, handleGoogleLogin } = useLoginForm();

    return (
        <div className="w-full min-h-screen lg:grid lg:grid-cols-2 relative">
            <ParticleBackground />
            <BrandingSection />

            <div className="flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8 bg-background relative z-10">
                <div className="w-full max-w-md space-y-8">
                    <div className="text-center lg:text-left">
                        <h2 className="text-3xl font-bold tracking-tight">{t('title')}</h2>
                        <p className="mt-2 text-muted-foreground">
                            {t('subtitle')}{" "}
                            <Link href="/signup" className="font-medium text-primary hover:underline">{t('signupLink')}</Link>
                        </p>
                    </div>

                    <div className="space-y-6">
                        <Button variant="outline" className="w-full text-lg py-6 flex items-center justify-center" onClick={handleGoogleLogin} disabled={isGoogleLoading || isPending}>
                            {isGoogleLoading ? <Loader2 className="mr-2 h-5 w-5 animate-spin" /> : <Image className="w-5 h-5 mr-3" alt="Google logo" src="https://fonts.gstatic.com/s/i/productlogos/googleg/v6/24px.svg" width={20} height={20} />}
                            <span>{t('googleButton')}</span>
                        </Button>

                        <div className="relative">
                            <div className="absolute inset-0 flex items-center"><Separator /></div>
                            <div className="relative flex justify-center text-xs uppercase"><span className="bg-background px-2 text-muted-foreground">{t('separator')}</span></div>
                        </div>

                        <form action={handleEmailLogin} className="space-y-6">
                            {errorMessage && (
                                <div className="bg-destructive/10 text-destructive border border-destructive/30 p-3 rounded-md flex items-center gap-3 text-sm">
                                    <AlertTriangle className="w-5 h-5 flex-shrink-0" />
                                    <p>{errorMessage}</p>
                                </div>
                            )}
                            <div className="space-y-2">
                                <Label htmlFor="email">{t('emailLabel')}</Label>
                                <div className="relative">
                                    <Mail className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
                                    <Input id="email" name="email" type="email" placeholder={t('emailPlaceholder')} required className="pl-10" />
                                </div>
                            </div>
                            <div className="space-y-2">
                                <div className="flex items-center justify-between">
                                    <Label htmlFor="password">{t('passwordLabel')}</Label>
                                    {/* ✅ El diàleg ara és un component independent i auto-gestionat. */}
                                    <ForgotPasswordDialog />
                                </div>
                                <div className="relative">
                                    <Lock className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
                                    <Input id="password" name="password" type="password" required minLength={6} className="pl-10" />
                                </div>
                            </div>
                            <Button type="submit" className="w-full text-lg py-6" disabled={isPending || isGoogleLoading}>
                                {isPending && <Loader2 className="mr-2 h-5 w-5 animate-spin" />}
                                {t('submitButton')}
                            </Button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    );
}


// =================== FILE: src/app/[locale]/(auth)/login/_hooks/useLoginForm.ts ===================

"use client";

import { useTransition, useMemo } from 'react';
import { useSearchParams } from 'next/navigation';
import { useTranslations } from 'next-intl';
import { loginAction, googleAuthAction } from '@/app/[locale]/(auth)/auth/actions';

/**
 * Custom hook que encapsula tota la lògica d'estat i accions per al formulari de login.
 */
export function useLoginForm() {
    const t = useTranslations('LoginPage');
    const searchParams = useSearchParams();
    const [isPending, startTransition] = useTransition();
    const [isGoogleLoading, startGoogleTransition] = useTransition();

    const handleEmailLogin = (formData: FormData) => {
        startTransition(() => {
            loginAction(formData);
        });
    };

    const handleGoogleLogin = () => {
        startGoogleTransition(() => {
            googleAuthAction();
        });
    };

    // useMemo assegura que el missatge d'error només es calculi quan canviïn els paràmetres de la URL.
    const errorMessage = useMemo(() => {
        const message = searchParams.get('message');
        const error = searchParams.get('error');

        if (error === 'invalid_credentials') return t('errors.invalidCredentials');
        if (error === 'auth_failed') return t('errors.authFailed');
        if (error === 'invite_failed') return message || t('errors.inviteFailed');
        if (message) return message;
        
        return null;
    }, [searchParams, t]);

    return {
        isPending,
        isGoogleLoading,
        errorMessage,
        handleEmailLogin,
        handleGoogleLogin,
    };
}


// =================== FILE: src/app/[locale]/(auth)/signup/page.tsx ===================

// /app/[locale]/(auth)/signup/page.tsx (VERSIÓ FINAL)

import { Suspense } from 'react';
import { SignupClient } from './_components/SignupClient';

// Ja no necessitem definir 'SignupPageProps' si no hi ha props.
// La pàgina ja no necessita rebre 'searchParams'.
export default async function SignupPage() {
  return (
    <Suspense>
      <SignupClient />
    </Suspense>
  );
}

// =================== FILE: src/app/[locale]/(auth)/signup/_components/SignupClient.tsx ===================

"use client";

import Image from 'next/image';
import Link from 'next/link';
import dynamic from 'next/dynamic';
import { useTranslations } from 'next-intl';

// UI Components
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Separator } from '@/components/ui/separator';
import { Mail, Lock, Loader2, Check, AlertTriangle } from 'lucide-react';

// Lògica i components refactoritzats
import { useSignupForm } from '../_hooks/useSignupForm';
import { Checkbox } from '@radix-ui/react-checkbox';

const ParticleBackground = dynamic(() => import('@/app/[locale]/_components/ParticleBackground').then(mod => mod.ParticleBackground), { ssr: false });

// Component de presentació per a la secció de branding
const BrandingSection = () => {
    const t = useTranslations('SignupPage');
    return (
        <div className="hidden lg:flex flex-col items-center justify-center p-12 relative z-10">
            <div className="text-center max-w-md">
                <Image src="/android-chrome-192x192.png" alt="Logo de Ribotflow" width={60} height={60} className="mx-auto mb-8" />
                <h1 className="text-4xl font-bold mb-6">{t('welcomeTitle')}</h1>
                <p className="text-lg text-muted-foreground mb-8">{t('welcomeSubtitle')}</p>
                <ul className="space-y-4 text-lg text-left">
                    <li className="flex items-start"><Check className="w-6 h-6 text-primary mr-3 mt-1 shrink-0" /><span>{t('feature1')}</span></li>
                    <li className="flex items-start"><Check className="w-6 h-6 text-primary mr-3 mt-1 shrink-0" /><span>{t('feature2')}</span></li>
                    <li className="flex items-start"><Check className="w-6 h-6 text-primary mr-3 mt-1 shrink-0" /><span>{t('feature3')}</span></li>
                </ul>
            </div>
        </div>
    );
};

// ✅ JA NO REP PROPS
export function SignupClient() {
    const t = useTranslations('SignupPage');
    const commonLegalT = useTranslations('LegalPages.Common'); // 👈 Per als títols/enllaços
    // ✅ OBTENIM TOT DEL HOOK I JA NO PASSEM EL TOKEN COM A ARGUMENT
    const { 
        isPending, 
        isGoogleLoading, 
        errorMessage, 
        handleEmailSignup, 
        handleGoogleSignup,
        invitedEmail // <-- Obtingut del hook
    } = useSignupForm();

    return (
        <div className="w-full min-h-screen lg:grid lg:grid-cols-2 relative">
            <ParticleBackground />
            <BrandingSection />

            <div className="flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8 bg-background relative z-10">
                <div className="w-full max-w-md space-y-8">
                    <div className="text-center lg:text-left">
                        <h2 className="text-3xl font-bold tracking-tight">{t('title')}</h2>
                        <p className="mt-2 text-muted-foreground">
                            {t('subtitle')}{" "}
                            <Link href="/login" className="font-medium text-primary hover:underline">{t('loginLink')}</Link>
                        </p>
                    </div>

                    <div className="space-y-6">
                        <Button variant="outline" className="w-full text-lg py-6" onClick={handleGoogleSignup} disabled={isGoogleLoading || isPending}>
                            {isGoogleLoading ? <Loader2 className="mr-2 h-5 w-5 animate-spin" /> : <Image className="w-5 h-5 mr-3" alt="Google logo" src="https://fonts.gstatic.com/s/i/productlogos/googleg/v6/24px.svg" width={20} height={20} />}
                            <span>{t('googleButton')}</span>
                        </Button>

                        <div className="relative">
                            <div className="absolute inset-0 flex items-center"><Separator /></div>
                            <div className="relative flex justify-center text-xs uppercase"><span className="bg-background px-2 text-muted-foreground">{t('separator')}</span></div>
                        </div>

                        <form action={handleEmailSignup} className="space-y-6">
                            {errorMessage && (
                                <div className="bg-destructive/10 text-destructive border border-destructive/30 p-3 rounded-md flex items-center gap-3 text-sm">
                                    <AlertTriangle className="w-5 h-5 flex-shrink-0" />
                                    <p>{errorMessage}</p>
                                </div>
                            )}
                            <div className="space-y-2">
                                <Label htmlFor="email">{t('emailLabel')}</Label>
                                <div className="relative">
                                    <Mail className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
                                    <Input id="email" name="email" type="email" placeholder={t('emailPlaceholder')} required className="pl-10" defaultValue={invitedEmail ?? undefined} readOnly={!!invitedEmail} />
                                </div>
                                {invitedEmail && <p className="text-xs text-muted-foreground">Aquesta invitació és exclusiva per a aquest correu electrònic.</p>}
                            </div>
                            <div className="space-y-2">
                                <Label htmlFor="password">{t('passwordLabel')}</Label>
                                <div className="relative">
                                    <Lock className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
                                    <Input id="password" name="password" type="password" required minLength={6} placeholder={t('passwordPlaceholder')} className="pl-10" />
                                </div>
                            </div>
                            {/* --- Checkboxes Legals --- */}
                            {/* ✅ Checkbox Termes i Condicions */}
                            <div className="flex items-start space-x-2">
                                <Checkbox id="terms" name="termsAccepted" required disabled={isPending || isGoogleLoading} />
                                <Label htmlFor="terms" className="text-sm font-normal leading-snug text-muted-foreground">
                                    {t('acceptTermsPrefix')}{" "}
                                    <Link href={commonLegalT('termsConditionsLink')} target="_blank" className="underline hover:text-primary">
                                        {commonLegalT('termsConditionsTitle')}
                                    </Link>
                                </Label>
                            </div>

                            {/* ✅ Checkbox Política de Privacitat */}
                             <div className="flex items-start space-x-2">
                                <Checkbox id="privacy" name="privacyAccepted" required disabled={isPending || isGoogleLoading} />
                                <Label htmlFor="privacy" className="text-sm font-normal leading-snug text-muted-foreground">
                                    {t('acceptPrivacyPrefix')}{" "}
                                    <Link href={commonLegalT('privacyPolicyLink')} target="_blank" className="underline hover:text-primary">
                                        {commonLegalT('privacyPolicyTitle')}
                                    </Link>
                                </Label>
                            </div>
                            <Button type="submit" className="w-full text-lg py-6" disabled={isPending || isGoogleLoading}>
                                {isPending && <Loader2 className="mr-2 h-5 w-5 animate-spin" />}
                                {t('submitButton')}
                            </Button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    );
}


// =================== FILE: src/app/[locale]/(auth)/signup/_hooks/useSignupForm.ts ===================

// /app/[locale]/signup/_hooks/useSignupForm.ts

"use client";

import { useTransition, useMemo } from 'react';
import { useSearchParams } from 'next/navigation';
import { useTranslations } from 'next-intl';
import { signupAction, googleAuthAction } from '@/app/[locale]/(auth)/auth/actions';

/**
 * Hook que encapsula tota la lògica d'estat i accions per al formulari de registre.
 */
// ✅ JA NO NECESSITA REBRE EL TOKEN COM A ARGUMENT
export function useSignupForm() {
    const t = useTranslations('SignupPage');
    const searchParams = useSearchParams();
    const [isPending, startTransition] = useTransition();
    const [isGoogleLoading, startGoogleTransition] = useTransition();

    // ✅ LLEGIM EL TOKEN I L'EMAIL DIRECTAMENT AQUÍ
    const inviteToken = useMemo(() => searchParams.get('invite_token'), [searchParams]);
    const invitedEmail = useMemo(() => searchParams.get('email'), [searchParams]);

    const handleEmailSignup = (formData: FormData) => {
        if (inviteToken) {
            formData.append('invite_token', inviteToken);
        }
        startTransition(() => {
            signupAction(formData);
        });
    };

    const handleGoogleSignup = () => {
        startGoogleTransition(() => {
            googleAuthAction(inviteToken);
        });
    };

    const errorMessage = useMemo(() => {
        const errorKey = searchParams.get('errorKey');
        const message = searchParams.get('message');

        if (errorKey) {
            // Intenta obtenir la traducció. Si no existeix, mostra la clau com a fallback.
            return t(`errors.${errorKey}`) || errorKey;
        }
        if (message) {
            return message;
        }
        return null;
    }, [searchParams, t]);


    return {
        isPending,
        isGoogleLoading,
        errorMessage,
        handleEmailSignup,
        handleGoogleSignup,
        inviteToken,    // ✅ RETORNEM ELS VALORS LLEGITS
        invitedEmail,   // ✅ RETORNEM ELS VALORS LLEGITS
    };
}

// =================== FILE: src/app/[locale]/(legal)/avis-legal/page.tsx ===================

import { getTranslations } from 'next-intl/server';
import { type Metadata } from 'next';
import Link from 'next/link';

// ✅ 1. Definim la interfície amb 'params' com a Promise.
interface LegalPageProps {
  params: Promise<{ locale: string }>;
}

export async function generateMetadata(props: LegalPageProps): Promise<Metadata> {
  const { locale } = await props.params; // ✅ 2. Resolem la promesa.
  const t = await getTranslations({ locale, namespace: 'LegalPages.LegalNotice' });
  return {
    title: t('metaTitle'),
  };
}

export default async function LegalNoticePage(props: LegalPageProps) {
  const { locale } = await props.params; // ✅ 3. Resolem la promesa.
  const t = await getTranslations({ locale, namespace: 'LegalPages.LegalNotice' });
  const commonT = await getTranslations({ locale, namespace: 'LegalPages.Common' });

  return (
    <div className="container mx-auto px-4 py-8 max-w-4xl prose dark:prose-invert">
      <h1>{t('title')}</h1>
      <p>{commonT('lastUpdated', { date: new Date().toLocaleDateString(locale) })}</p>

      <section>
        <h2>{t('section1.title')}</h2> {/* 1. Dades Identificatives */}
        <p>{t('section1.content.p1', {
          companyName: commonT('companyData.name'),
          companyVat: commonT('companyData.vat'),
          companyAddress: commonT('companyData.address'),
          companyEmail: commonT('companyData.email'),
          // companyRegistry: commonT('companyData.registry'), // Afegeix si ets empresa
        })}</p>
      </section>

      <section>
        <h2>{t('section2.title')}</h2> {/* 2. Objecte */}
        <p>{t('section2.content.p1', { appName: commonT('appName') })}</p>
      </section>

      <section>
        <h2>{t('section3.title')}</h2> {/* 3. Propietat Intel·lectual i Industrial */}
        <p>{t('section3.content.p1', { appName: commonT('appName'), companyName: commonT('companyData.name') })}</p>
        <p>{t('section3.content.p2')}</p>
      </section>

      <section>
        <h2>{t('section4.title')}</h2> {/* 4. Condicions d'Ús */}
        <p>{t('section4.content.p1')}</p>
        <p>{t('section4.content.p2')}</p>
        {/* Llista d'obligacions */}
        <ul>
          <li>{t('section4.content.obligation1')}</li>
          <li>{t('section4.content.obligation2')}</li>
          <li>{t('section4.content.obligation3')}</li>
          {/* ... més obligacions ... */}
        </ul>
      </section>

       <section>
        <h2>{t('section5.title')}</h2> {/* 5. Exclusió de Responsabilitat */}
        <p>{t('section5.content.p1')}</p>
        <p>{t('section5.content.p2')}</p>
        {/* ... altres exclusions ... */}
      </section>

       <section>
        <h2>{t('section6.title')}</h2> {/* 6. Enllaços */}
        <p>{t('section6.content.p1')}</p>
      </section>

       <section>
        <h2>{t('section7.title')}</h2> {/* 7. Protecció de Dades i Cookies */}
        {/* Utilitzem Link de next/link per a la navegació SPA */}
        <p>{t('section7.content.p1')} <Link href={commonT('privacyPolicyLink')}>{commonT('privacyPolicyTitle')}</Link> {commonT('and')} <Link href={commonT('cookiePolicyLink')}>{commonT('cookiePolicyTitle')}</Link>.</p>
      </section>

       <section>
        <h2>{t('section8.title')}</h2> {/* 8. Modificacions */}
        <p>{t('section8.content.p1')}</p>
      </section>

      <section>
        <h2>{t('section9.title')}</h2> {/* 9. Llei Aplicable i Jurisdicció */}
        <p>{t('section9.content.p1')}</p>
      </section>

    </div>
  );
}

// =================== FILE: src/app/[locale]/(legal)/politica-cookies/page.tsx ===================

import { getTranslations } from 'next-intl/server';
import { type Metadata } from 'next';
import Link from 'next/link';

// ✅ 1. Definim la interfície amb 'params' com a Promise.
interface LegalPageProps {
  params: Promise<{ locale: string }>;
}

export async function generateMetadata(props: LegalPageProps): Promise<Metadata> {
  const { locale } = await props.params; // ✅ 2. Resolem la promesa.
  const t = await getTranslations({ locale, namespace: 'LegalPages.CookiePolicy' });
  return {
    title: t('metaTitle'),
  };
}

export default async function CookiePolicyPage(props: LegalPageProps) {
  const { locale } = await props.params; // ✅ 3. Resolem la promesa.
  const t = await getTranslations({ locale, namespace: 'LegalPages.CookiePolicy' });
  const commonT = await getTranslations({ locale, namespace: 'LegalPages.Common' });

  return (
    <div className="container mx-auto px-4 py-8 max-w-4xl prose dark:prose-invert">
      <h1>{t('title')}</h1>
      <p>{commonT('lastUpdated', { date: new Date().toLocaleDateString(locale) })}</p>

      <section>
        <h2>{t('section1.title')}</h2> {/* 1. Què són les cookies? */}
        <p>{t('section1.content.p1')}</p>
      </section>

      <section>
        <h2>{t('section2.title')}</h2> {/* 2. Quin tipus de cookies utilitzem? */}
        <p>{t('section2.content.p1', { appName: commonT('appName') })}</p>
        <p><strong>{t('section2.content.type1.name')}:</strong></p> {/* Tècniques/Necessàries */}
        <p>{t('section2.content.type1.description')}</p>
        <ul>
          {/* Llista les cookies tècniques concretes */}
          <li>{t('section2.content.type1.cookie1', { name: 'supabase-auth-token (o similar)'})}</li> {/* Exemple Supabase */}
          <li>{t('section2.content.type1.cookie2', { name: 'next-intl-locale'})}</li> {/* Exemple idioma */}
          {/* ... altres cookies tècniques */}
        </ul>
         {/* Secció Opcional: Cookies Analítiques */}
        {/*
        <p><strong>{t('section2.content.type2.name')}:</strong></p>
        <p>{t('section2.content.type2.description')}</p>
        <ul>
          <li>{t('section2.content.type2.cookie1', { name: '_ga, _gid (Google Analytics)'})}</li>
        </ul>
        <p>{t('section2.content.type2.thirdPartyInfo')}</p>
        */}
         {/* Secció Opcional: Cookies de Publicitat/Màrqueting */}
        {/* ... */}
      </section>

      <section>
        <h2>{t('section3.title')}</h2> {/* 3. Com pots gestionar les cookies? */}
        <p>{t('section3.content.p1')}</p>
        <p>{t('section3.content.p2')}</p>
         {/* Enllaços a configuració de navegadors */}
        <ul>
          <li><a href="https://support.google.com/chrome/answer/95647" target="_blank" rel="noopener noreferrer">Google Chrome</a></li>
          <li><a href="https://support.mozilla.org/es/kb/habilitar-y-deshabilitar-cookies-sitios-web-rastrear-preferencias" target="_blank" rel="noopener noreferrer">Mozilla Firefox</a></li>
          <li><a href="https://support.apple.com/es-es/guide/safari/sfri11471/mac" target="_blank" rel="noopener noreferrer">Apple Safari</a></li>
          <li><a href="https://support.microsoft.com/es-es/windows/eliminar-y-administrar-cookies-168dab11-0753-043d-7c16-ede5947fc64d" target="_blank" rel="noopener noreferrer">Microsoft Edge</a></li>
        </ul>
        <p>{t('section3.content.p3')}</p> {/* Eina de consentiment */}
      </section>

       <section>
        <h2>{t('section4.title')}</h2> {/* 4. Més informació */}
        <p>{t('section4.content.p1')} <Link href={commonT('privacyPolicyLink')}>{commonT('privacyPolicyTitle')}</Link>.</p>
      </section>

      <section>
        <h2>{t('section5.title')}</h2> {/* 5. Canvis a la Política */}
        <p>{t('section5.content.p1')}</p>
      </section>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(legal)/politica-privacitat/page.tsx ===================

import { getTranslations } from 'next-intl/server';
import { type Metadata } from 'next';

// ✅ 1. Definim la interfície amb 'params' com a Promise.
interface LegalPageProps {
  params: Promise<{ locale: string }>;
}

export async function generateMetadata(props: LegalPageProps): Promise<Metadata> {
  const { locale } = await props.params; // ✅ 2. Resolem la promesa.
  const t = await getTranslations({ locale, namespace: 'LegalPages.PrivacyPolicy' });
  return {
    title: t('metaTitle'),
  };
}

export default async function PrivacyPolicyPage(props: LegalPageProps) {
  const { locale } = await props.params; // ✅ 3. Resolem la promesa.
  const t = await getTranslations({ locale, namespace: 'LegalPages.PrivacyPolicy' });
  // Pots estructurar el contingut com vulguis (headings, paràgrafs)
  return (
    <div className="container mx-auto px-4 py-8 max-w-4xl prose dark:prose-invert"> {/* Usa 'prose' per estils bàsics */}
      <h1>{t('title')}</h1>
      <p>{t('lastUpdated', { date: new Date().toLocaleDateString(locale) })}</p>

      <section>
        <h2>{t('section1.title')}</h2> {/* 1. Qui som (Responsable) */}
        <p>{t('section1.content.p1', { companyName: 'El Teu Nom/Empresa', companyVat: 'El Teu NIF/CIF', companyAddress: 'La Teva Adreça', companyEmail: 'El Teu Email de Contacte' })}</p>
      </section>

      <section>
        <h2>{t('section2.title')}</h2> {/* 2. Quines dades tractem i per què */}
        <p>{t('section2.content.p1')}</p>
        <ul>
          <li>{t('section2.content.item1')}</li> {/* Dades d'identificació i contacte */}
          <li>{t('section2.content.item2')}</li> {/* Dades professionals */}
          <li>{t('section2.content.item3')}</li> {/* Dades introduïdes per l'usuari (clients, factures...) -> ROL ENCARREGAT */}
          <li>{t('section2.content.item4')}</li> {/* Dades de navegació/ús */}
          <li>{t('section2.content.item5')}</li> {/* Dades de pagament (si aplica) */}
        </ul>
        <p>{t('section2.content.p2')}</p> {/* Finalitats */}
         <ul>
          <li>{t('section2.content.purpose1')}</li> {/* Prestació servei */}
          <li>{t('section2.content.purpose2')}</li> {/* Comunicacions */}
          <li>{t('section2.content.purpose3')}</li> {/* Millores */}
          <li>{t('section2.content.purpose4')}</li> {/* Seguretat */}
          <li>{t('section2.content.purpose5')}</li> {/* Compliment legal */}
        </ul>
      </section>

      <section>
        <h2>{t('section3.title')}</h2> {/* 3. Base Legal */}
         <p>{t('section3.content.p1')}</p>
         <ul>
          <li>{t('section3.content.basis1')}</li> {/* Contracte */}
          <li>{t('section3.content.basis2')}</li> {/* Consentiment (ex: newsletter) */}
          <li>{t('section3.content.basis3')}</li> {/* Interès legítim (ex: seguretat) */}
          <li>{t('section3.content.basis4')}</li> {/* Obligació legal */}
        </ul>
      </section>

      <section>
          <h2>{t('section4.title')}</h2> {/* 4. Rol com a Encarregat del Tractament */}
          <p>{t('section4.content.p1')}</p> {/* Explicació dades clients/proveïdors de l'usuari */}
          <p>{t('section4.content.p2')}</p> {/* Referència a Termes i Condicions (DPA) */}
      </section>

      <section>
        <h2>{t('section5.title')}</h2> {/* 5. Amb qui compartim les dades */}
        <p>{t('section5.content.p1')}</p>
        <ul>
          <li>{t('section5.content.item1', { provider: 'Supabase' })}</li> {/* Proveïdor infraestructura */}
          {/* Afegeix altres si cal: Passarel·les pagament, Emailing, Analytics... */}
        </ul>
         <p>{t('section5.content.p2')}</p> {/* Transferències internacionals */}
      </section>

      <section>
        <h2>{t('section6.title')}</h2> {/* 6. Quant temps guardem les dades */}
        <p>{t('section6.content.p1')}</p>
      </section>

      <section>
        <h2>{t('section7.title')}</h2> {/* 7. Quins són els teus drets */}
        <p>{t('section7.content.p1')}</p> {/* Drets ARSLOP */}
        <p>{t('section7.content.p2', { email: 'El Teu Email de Contacte' })}</p> {/* Com exercir-los */}
        <p>{t('section7.content.p3')}</p> {/* Dret a reclamar AEPD */}
      </section>

      <section>
        <h2>{t('section8.title')}</h2> {/* 8. Mesures de Seguretat */}
        <p>{t('section8.content.p1')}</p>
      </section>

       <section>
        <h2>{t('section9.title')}</h2> {/* 9. Canvis a la Política */}
        <p>{t('section9.content.p1')}</p>
      </section>

      {/* ... Afegeix altres seccions necessàries (Cookies, Menors...) */}
    </div>
  );
}

// =================== FILE: src/app/[locale]/(legal)/termes-condicions/page.tsx ===================

import { getTranslations } from 'next-intl/server';
import { type Metadata } from 'next';
import Link from 'next/link';

// ✅ 1. Definim la interfície amb 'params' com a Promise.
interface LegalPageProps {
  params: Promise<{ locale: string }>;
}

export async function generateMetadata(props: LegalPageProps): Promise<Metadata> {
  const { locale } = await props.params; // ✅ 2. Resolem la promesa.
  const t = await getTranslations({ locale, namespace: 'LegalPages.TermsAndConditions' });
  return {
    title: t('metaTitle'),
  };
}

export default async function TermsAndConditionsPage(props: LegalPageProps) {
  const { locale } = await props.params; // ✅ 3. Resolem la promesa.
  const t = await getTranslations({ locale, namespace: 'LegalPages.TermsAndConditions' });
  const commonT = await getTranslations({ locale, namespace: 'LegalPages.Common' });
  return (
    <div className="container mx-auto px-4 py-8 max-w-4xl prose dark:prose-invert">
      <h1>{t('title')}</h1>
      <p>{commonT('lastUpdated', { date: new Date().toLocaleDateString(locale) })}</p>

      <section>
        <h2>{t('section1.title')}</h2> {/* 1. Acceptació */}
        <p>{t('section1.content.p1', { appName: commonT('appName'), companyName: commonT('companyData.name') })}</p>
        <p>{t('section1.content.p2')} <Link href={commonT('privacyPolicyLink')}>{commonT('privacyPolicyTitle')}</Link>.</p>
      </section>

      <section>
        <h2>{t('section2.title')}</h2> {/* 2. Descripció del Servei */}
        <p>{t('section2.content.p1', { appName: commonT('appName') })}</p>
         {/* Descriu les funcionalitats principals */}
      </section>

      <section>
        <h2>{t('section3.title')}</h2> {/* 3. Accés i Compte d'Usuari */}
        <p>{t('section3.content.p1')}</p>
        <p>{t('section3.content.p2')}</p>
        <p>{t('section3.content.p3')}</p>
      </section>

      <section>
        <h2>{t('section4.title')}</h2> {/* 4. Obligacions de l'Usuari */}
        <p>{t('section4.content.p1')}</p>
         <ul>
          <li>{t('section4.content.obligation1')}</li>
          <li>{t('section4.content.obligation2')}</li>
          <li>{t('section4.content.obligation3')}</li>
          <li>{t('section4.content.obligation4')}</li>
           {/* ... més obligacions */}
        </ul>
      </section>

       <section>
        <h2>{t('section5.title')}</h2> {/* 5. Condicions Econòmiques (SI APLICA) */}
        {/* Si és gratuït, indica-ho. Si és de pagament, detalla plans, preus, pagament, renovació, cancel·lació... */}
        <p>{t('section5.content.p1')}</p>
      </section>

      <section>
        <h2>{t('section6.title')}</h2> {/* 6. Propietat Intel·lectual */}
        <p>{t('section6.content.p1', { appName: commonT('appName'), companyName: commonT('companyData.name') })}</p>
        <p>{t('section6.content.p2')}</p>
      </section>

      <section>
        <h2>{t('section7.title')}</h2> {/* 7. Protecció de Dades (DPA) */}
        <p>{t('section7.content.p1')} <Link href={commonT('privacyPolicyLink')}>{commonT('privacyPolicyTitle')}</Link>.</p>
        <p><strong>{t('section7.content.dpaTitle')}</strong></p>
        <p>{t('section7.content.dpaP1', { appName: commonT('appName') })}</p>
        <p>{t('section7.content.dpaP2')}</p>
        {/* Detalla aquí o en un annex les obligacions com a Encarregat del Tractament */}
      </section>

      <section>
        <h2>{t('section8.title')}</h2> {/* 8. Garanties i Limitació de Responsabilitat */}
        <p>{t('section8.content.p1')}</p>
        <p>{t('section8.content.p2')}</p>
        {/* ... límits específics de responsabilitat ... */}
      </section>

       <section>
        <h2>{t('section9.title')}</h2> {/* 9. Modificació dels Termes */}
        <p>{t('section9.content.p1')}</p>
      </section>

       <section>
        <h2>{t('section10.title')}</h2> {/* 10. Durada i Terminació */}
        <p>{t('section10.content.p1')}</p>
        <p>{t('section10.content.p2')}</p>
      </section>

      <section>
        <h2>{t('section11.title')}</h2> {/* 11. Llei Aplicable i Jurisdicció */}
        <p>{t('section11.content.p1')}</p>
      </section>

    </div>
  );
}

// =================== FILE: src/app/[locale]/accept-invite/route.ts ===================

import { type NextRequest, NextResponse } from 'next/server';
import { headers } from 'next/headers';

// ✅ CORRECCIÓ: Importem l'acció des de la seva nova ubicació centralitzada.
import { resolveInvitationAction } from '@/app/actions/invitationActions';

export const dynamic = 'force-dynamic';

/**
 * Aquest Route Handler és el primer que s'executa quan un usuari
 * fa clic a l'enllaç de la invitació del correu.
 * La seva única feina és actuar com un "director de trànsit".
 */
export async function GET(request: NextRequest) {
  const token = request.nextUrl.searchParams.get('token');
  // Obtenim el locale a partir de les capçaleres que injecta el middleware
  const locale = (await headers()).get('x-next-intl-locale') || 'ca';

  if (!token) {
    // Si per alguna raó no hi ha token, el portem al login amb un error.
    const url = request.nextUrl.clone();
    url.pathname = `/${locale}/login`;
    url.searchParams.set('message', 'Token d\'invitació invàlid o inexistent.');
    return NextResponse.redirect(url);
  }

  // Cridem a l'acció que conté la lògica per decidir si l'usuari
  // ha d'anar a la pàgina de login o a la de registre per a convidats.
  // Aquesta acció ja retorna una NextResponse.redirect(), per la qual cosa
  // simplement retornem el seu resultat.
  return await resolveInvitationAction(token);
}


// =================== FILE: src/app/[locale]/global-error.tsx ===================

// src/app/[locale]/global-error.tsx
'use client';

import { useEffect } from 'react';
import { Button } from '@/components/ui/button';

export default function GlobalError({
  error,
  reset,
}: {
  error: Error & { digest?: string };
  reset: () => void;
}) {
  useEffect(() => {
    // Aquí és on podríes enviar l'error a un servei de monitorització
    // com Sentry, LogRocket, etc.
    console.error('S_ha produït un error global no controlat:', error);
  }, [error]);

  return (
    <html>
      <body>
        <div className="flex min-h-screen flex-col items-center justify-center bg-background text-foreground">
          <div className="mx-auto max-w-md text-center">
            <h1 className="text-4xl font-bold tracking-tight sm:text-5xl">
              Ups! Alguna cosa ha fallat.
            </h1>
            <p className="mt-4 text-lg text-muted-foreground">
              El nostre equip tècnic ja ha estat notificat. Estem treballant
              per solucionar-ho el més aviat possible.
            </p>
            <div className="mt-8">
              <Button
                onClick={
                  // Intenta recuperar-te renderitzant de nou el segment
                  () => reset()
                }
                size="lg"
              >
                Torna-ho a intentar
              </Button>
            </div>
            {/* En desenvolupament, pots mostrar detalls de l'error si vols, 
                tot i que Next.js ja mostra el seu overlay. */}
            {process.env.NODE_ENV === 'development' && (
              <pre className="mt-4 rounded-md bg-muted p-4 text-left text-sm">
                <code>{error?.message}</code>
                <code>{error?.stack}</code>
              </pre>
            )}
          </div>
        </div>
      </body>
    </html>
  );
}

// =================== FILE: src/app/[locale]/invitation/accept/page.tsx ===================

// /app/[locale]/invitation/accept/page.tsx (VERSIÓ FINAL)

import { InvitedSignupForm } from './_components/InvitedSignupForm';
import { createClient } from '@/lib/supabase/server';

// Assegura que la pàgina sempre es renderitza dinàmicament per a llegir els searchParams.
export const dynamic = 'force-dynamic';

// ✅ CORRECCIÓ CLAU: Definim searchParams com una Promise.
type InvitedSignupPageProps = {
    searchParams: Promise<{ 
        token?: string; 
        email?: string;
    }>;
};

export default async function InvitedSignupPage({ searchParams }: InvitedSignupPageProps) {
    console.log("Search params a la pàgina d'acceptació d'invitació:", searchParams);
    
    // ✅ L'await és ara consistent amb el tipus definit (Promise<T>).
    const { token, email } = await searchParams;
    let teamName: string | null = null; 

    if (token) {
        // Utilitzem createClient() des del servidor [8]
        const supabase = createClient();
        
        // Consulta per obtenir el nom de l'equip a partir del token [9]
        const { data: invitationData } = await supabase
            .from('invitations')
            .select('team_name')
            .eq('token', token)
            .single();
        
        if (invitationData?.team_name) {
            teamName = invitationData.team_name;
        }
    }

    return (
        <div className="flex flex-col items-center justify-center min-h-screen bg-muted/40 p-4">
            <InvitedSignupForm 
                inviteToken={token}
                invitedEmail={email}
                teamName={teamName}
            />
        </div>
    );
}

// =================== FILE: src/app/[locale]/invitation/accept/_components/InvitedSignupForm.tsx ===================

"use client";

import { useTransition } from 'react';
import { signupAction } from '@/app/[locale]/(auth)/auth/actions';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Loader2, Mail, Lock, User as UserIcon } from 'lucide-react';

type InvitedSignupFormProps = {
  inviteToken?: string;
  invitedEmail?: string;
  teamName?: string | null;
};

export function InvitedSignupForm({ inviteToken, invitedEmail, teamName }: InvitedSignupFormProps) {
  const [isPending, startTransition] = useTransition();
  console.log("Props rebudes al formulari:", { inviteToken, invitedEmail, teamName });

  const handleSubmit = (formData: FormData) => {
    startTransition(() => {
      signupAction(formData);
    });
  };
  return (
    <Card className="w-full max-w-md shadow-lg">
      <CardHeader className="text-center">
        <CardTitle className="text-2xl">Benvingut/da a Bord!</CardTitle>
        <CardDescription>
          Estàs a punt d'unir-te a <strong>{teamName || "l'equip"}</strong>. Només has de completar el teu perfil.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <form action={handleSubmit} className="space-y-4">

          {/* Aquest input ocult és per al token, està perfecte. */}
          <input type="hidden" name="invite_token" value={inviteToken} />

          {/* El camp de l'email ja està configurat per a enviar-se amb el formulari
                        gràcies al 'name="email"'. És visible però no editable. Perfecte! */}
          <div className="space-y-2">
            <Label htmlFor="email">El teu correu electrònic</Label>
            <div className="relative">
              <Mail className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
              <Input
                id="email"
                name="email" // Aquesta línia l'envia amb el formulari
                type="email"
                required
                defaultValue={invitedEmail || ''}
                readOnly={true} // Aquesta línia evita que es pugui editar
                className="pl-10 bg-muted/60 cursor-not-allowed focus-visible:ring-transparent"
              />
            </div>
          </div>

          {/* La resta del formulari es queda igual */}
          <div className="space-y-2">
            <Label htmlFor="fullName">Nom i cognoms</Label>
            <div className="relative">
              <UserIcon className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
              <Input
                id="fullName"
                name="fullName"
                placeholder="El teu nom complet"
                required
                className="pl-10"
                disabled={isPending}
              />
            </div>
          </div>
          <div className="space-y-2">
            <Label htmlFor="password">Crea una contrasenya</Label>
            <div className="relative">
              <Lock className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
              <Input
                id="password"
                name="password"
                type="password"
                placeholder="Mínim 8 caràcters" // <-- Canvi aquí
                required
                minLength={8} // <-- Canvi aquí
                className="pl-10"
                disabled={isPending}
              />
            </div>
          </div>

          <Button type="submit" disabled={isPending} className="w-full">
            {isPending ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Creant compte...
              </>
            ) : (
              `Unir-se a ${teamName || "l'equip"}`
            )}
          </Button>
        </form>
      </CardContent>
    </Card>
  );
}

// =================== FILE: src/app/[locale]/layout.tsx ===================

import '../globals.css';
import 'prismjs/themes/prism-tomorrow.css';
import 'flowbite'; // 👈 AFEGEIX AQUESTA LÍNIA AQUÍ

import { Inter } from 'next/font/google';
import type { Metadata } from 'next';
import { ReactNode } from 'react';
import { Toaster } from 'sonner';
import { ThemeProvider } from '@/components/theme-provider';
import { NextIntlClientProvider } from 'next-intl';
import { getMessages, getTranslations } from 'next-intl/server';
// NOU: Component per registrar el Service Worker de forma segura al client
import { PWARegistration } from '@/components/PWARegistration';

const inter = Inter({ subsets: ['latin'] });

interface LocaleLayoutProps {
  children: ReactNode;
  params: Promise<{ locale: string }>;
}

export async function generateMetadata(props: { params: Promise<{ locale: string }> }): Promise<Metadata> {
  const { locale } = await props.params;
  const t = await getTranslations({ locale, namespace: 'Metadata' });
  const siteUrl = process.env.NEXT_PUBLIC_SITE_URL || 'https://ribotflow.com';

  return {
    title: { template: `%s | ${t('siteName')}`, default: t('defaultTitle') },
    description: t('description'),
    metadataBase: new URL(siteUrl),
    
    icons: {
      icon: '/favicon.ico',
      apple: '/apple-icon.png',
    },
    manifest: '/site.webmanifest',
  };
}

export default async function LocaleLayout(props: LocaleLayoutProps) {
  const { locale } = await props.params;
  const { children } = props;

  const messages = await getMessages({ locale });

  return (
    <html lang={locale} suppressHydrationWarning>
      <body className={inter.className}>
        <NextIntlClientProvider locale={locale} messages={messages}>
          <ThemeProvider
            attribute="class"
            defaultTheme="dark"
            enableSystem
            disableTransitionOnChange
          >
            {children}
          </ThemeProvider>
          <Toaster position="bottom-right" richColors closeButton />
          {/* NOU: Afegim el component de registre del SW */}
          <PWARegistration />
        </NextIntlClientProvider>
      </body>
    </html>
  );
}

// =================== FILE: src/app/[locale]/onboarding/actions.ts ===================

"use server";

import { z } from 'zod';
// ✅ CORRECCIÓ: Importem les teves funcions de client
import { createClient, createAdminClient } from "@/lib/supabase/server";
import { headers } from "next/headers";
import { redirect } from "next/navigation";

// L'esquema de Zod i el tipus es queden igual
const OnboardingSchema = z.object({
    full_name: z.string().min(3, "El nom complet és obligatori."),
    company_name: z.string().min(2, "El nom de l'empresa és obligatori."),
    tax_id: z.string().optional(),
    website: z.string().url("Introdueix una URL vàlida.").optional().or(z.literal('')),
    summary: z.string().optional(),
    sector: z.string().optional(),
    services: z.array(z.string()).min(1, "Has de seleccionar almenys un servei."),
    phone: z.string().optional(),
    street: z.string().min(1, "El carrer és obligatori."),
    city: z.string().min(1, "La ciutat és obligatòria."),
    postal_code: z.string().min(1, "El codi postal és obligatori."),
    region: z.string().min(1, "La regió és obligatòria."),
    country: z.string().min(1, "El país és obligatori."),
    latitude: z.number().optional(),
    longitude: z.number().optional(),
});

type OnboardingFormData = z.infer<typeof OnboardingSchema>;


export async function submitOnboardingAction(formData: OnboardingFormData) {
    // --- PAS 1: INICIALITZACIÓ I AUTENTICACIÓ ---
    // ✅ CORRECCIÓ: Cridem les teves funcions sense arguments
    const supabase = createClient();
    const supabaseAdmin = createAdminClient();
    
    const { data: { user } } = await supabase.auth.getUser();

    if (!user) {
        return { success: false, message: "Usuari no autenticat." };
    }

    // --- PAS 2: VALIDACIÓ DE DADES AMB ZOD ---
    const validationResult = OnboardingSchema.safeParse(formData);

    if (!validationResult.success) {
        return { success: false, message: validationResult.error.issues[0].message };
    }
    
    const validData = validationResult.data;
    
    try {
        // --- 1. PREPAREM LES DADES PER A LA INSERCIÓ ---
        const profileUpdateData = {
            full_name: formData.full_name,
            phone: formData.phone || null,
            onboarding_completed: true,
        };

        const teamInsertData = {
            name: formData.company_name,
            owner_id: user.id,
            tax_id: formData.tax_id,
            website: formData.website,
            summary: formData.summary,
            sector: formData.sector,
            services: formData.services,
            phone: formData.phone,
            email: user.email,
            address: [formData.street, formData.city, formData.postal_code, formData.country].filter(Boolean).join(', '),
            street: formData.street,
            city: formData.city,
            postal_code: formData.postal_code,
            region: formData.region,
            country: formData.country,
            latitude: formData.latitude,
            longitude: formData.longitude,
        };

        // --- 2. EXECUTEM LES OPERACIONS A LA BASE DE DADES ---

        // Actualitzem el perfil personal de l'usuari
        await supabase.from('profiles').update(profileUpdateData).eq('id', user.id).throwOnError();
        
        const { data: newTeam } = await supabase.from('teams').insert(teamInsertData).select('id').single().throwOnError();
        
        await supabase.from('team_members').insert({ team_id: newTeam.id, user_id: user.id, role: 'owner' }).throwOnError();
        
        await supabaseAdmin.from('subscriptions').insert({
            team_id: newTeam.id,
            plan_id: 'free',
            status: 'active'
        }).throwOnError();

        await supabaseAdmin.auth.admin.updateUserById(
            user.id,
            {
                app_metadata: {
                    ...user.app_metadata,
                    active_team_id: newTeam.id,
                    active_team_plan: 'free'
                },
                user_metadata: {
                    ...user.user_metadata,
                    full_name: validData.full_name
                }
            }
        );
        
    } catch (error) {
        const message = error instanceof Error ? error.message : "Hi ha hagut un error desconegut.";
        console.error("Error durant l'acció d'Onboarding:", message);
        return { success: false, message: "No s'ha pogut completar el registre. Intenta-ho de nou." };
    }

    // --- PAS 4: REDIRECCIÓ SI TOT HA ANAT BÉ ---
    await supabase.auth.refreshSession();

    const locale = (await headers()).get('x-next-intl-locale') || 'ca';
    redirect(`/${locale}/dashboard`);
}

// =================== FILE: src/app/[locale]/onboarding/page.tsx ===================

import { Suspense } from 'react';
import type { Metadata } from 'next';
import { OnboardingData } from './_components/OnboardingData';
import { OnboardingSkeleton } from './_components/OnboardingSkeleton';

export const metadata: Metadata = {
  title: 'Benvingut a Ribotflow',
  description: 'Completa el teu perfil per començar.',
};

export default function OnboardingPage() {
  return (
    <Suspense fallback={<OnboardingSkeleton />}>
      <OnboardingData />
    </Suspense>
  );
}

// =================== FILE: src/app/[locale]/onboarding/_components/OnboardingClient.tsx ===================

// /app/[locale]/onboarding/_components/OnboardingClient.tsx
"use client";

import React from 'react';
import { AnimatePresence } from 'framer-motion';
import { OnboardingProvider, useOnboarding } from './OnboardingContext';
import { OnboardingLayout } from './OnboardingLayout'; // Nou component per l'estructura
import { Step1, Step2, Step3 } from './steps'; // Components per a cada pas

interface OnboardingClientProps {
    initialFullName: string;
    availableServices: { id: number; name: string }[];
}

// Component intern que renderitza el pas actual
function OnboardingSteps({ availableServices }: { availableServices: { id: number; name: string }[] }) {
    const { step } = useOnboarding(); // Obtenim l'estat del context
    
    return (
        <AnimatePresence mode="wait">
            {step === 1 && <Step1 key="step1" />}
            {step === 2 && <Step2 key="step2" />}
            {step === 3 && <Step3 key="step3" availableServices={availableServices} />}
        </AnimatePresence>
    );
}

// El component principal ara és molt més net
export function OnboardingClient({ initialFullName, availableServices }: OnboardingClientProps) {
    return (
        <OnboardingProvider initialFullName={initialFullName}>
            <OnboardingLayout>
                <OnboardingSteps availableServices={availableServices} />
            </OnboardingLayout>
        </OnboardingProvider>
    );
}

// =================== FILE: src/app/[locale]/onboarding/_components/OnboardingContext.tsx ===================

// /app/[locale]/onboarding/_context/OnboardingContext.tsx
"use client";

import { createContext, useContext, ReactNode } from 'react';
import { useOnboardingForm } from '../_hooks/useOnboardingForm';

// El 'ReturnType' ens estalvia haver de reescriure tots els tipus del hook
type OnboardingContextType = ReturnType<typeof useOnboardingForm> | null;

const OnboardingContext = createContext<OnboardingContextType>(null);

export function useOnboarding() {
    const context = useContext(OnboardingContext);
    if (!context) {
        throw new Error("useOnboarding ha de ser utilitzat dins d'un OnboardingProvider");
    }
    return context;
}

export function OnboardingProvider({ children, initialFullName }: { children: ReactNode, initialFullName: string }) {
    const value = useOnboardingForm(initialFullName);
    return (
        <OnboardingContext.Provider value={value}>
            {children}
        </OnboardingContext.Provider>
    );
}

// =================== FILE: src/app/[locale]/onboarding/_components/OnboardingData.tsx ===================

// /app/[locale]/onboarding/_components/OnboardingData.tsx

import { createClient } from '@/lib/supabase/server';
import { redirect } from 'next/navigation';
import { OnboardingClient } from './OnboardingClient';

export async function OnboardingData() {
    const supabase = createClient(); // La teva funció ja gestiona les cookies

    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
        return redirect('/login');
    }
    
    // ✅ Executem les dues consultes alhora per més rapidesa
    const [profileRes, servicesRes] = await Promise.all([
        supabase.from('profiles').select('onboarding_completed').eq('id', user.id).single(),
        supabase.from('services').select('id, name').order('name')
    ]);

    // Comprovem el resultat del perfil
    if (profileRes.data?.onboarding_completed) {
        return redirect('/dashboard');
    }

    // Comprovem si hi ha hagut un error en carregar els serveis
    if (servicesRes.error) {
        console.error("Error al carregar els serveis:", servicesRes.error);
    }
    
    const initialFullName = user.user_metadata?.full_name || '';
    const availableServices = servicesRes.data || [];

    return (
        <OnboardingClient 
            initialFullName={initialFullName} 
            availableServices={availableServices}
        />
    );
}

// =================== FILE: src/app/[locale]/onboarding/_components/OnboardingLayout.tsx ===================

"use client";

import { useOnboarding } from './OnboardingContext';
import { useTranslations } from 'next-intl';
import { motion, AnimatePresence } from 'framer-motion';
import { Progress } from '@/components/ui/progress';
import { Button } from '@/components/ui/button';
import { ArrowLeft, ArrowRight, Loader2 } from 'lucide-react';

export function OnboardingLayout({ children }: { children: React.ReactNode }) {
    const { step, goToNextStep, goToPrevStep, handleSubmit, isPending } = useOnboarding();
    const t = useTranslations('OnboardingPage');
    const totalSteps = 3;
    const progress = (step / totalSteps) * 100;

    return (
        <div className="flex items-center justify-center min-h-screen p-4 bg-background">
            <div className="w-full max-w-2xl glass-card p-8 md:p-12 shadow-2xl space-y-6">
                <Progress value={progress} className="w-full" />
                <div className="text-center">
                    <p className="font-semibold text-primary mb-2">{t('step', { current: step, total: totalSteps })}</p>
                    <AnimatePresence mode="wait">
                        <motion.h1 key={step} initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -10 }} className="text-3xl font-bold">
                            {step === 1 && t('step1.title')}
                            {step === 2 && t('step2.title')}
                            {step === 3 && t('step3.title')}
                        </motion.h1>
                    </AnimatePresence>
                </div>

                <div className="min-h-[250px] flex flex-col justify-center">
                    {children}
                </div>

                <div className="flex justify-between items-center pt-6 border-t">
                    <Button variant="ghost" onClick={goToPrevStep} disabled={step === 1 || isPending}>
                        <ArrowLeft className="mr-2 h-4 w-4" /> Enrere
                    </Button>
                    {step < totalSteps ? (
                        <Button onClick={goToNextStep} disabled={isPending}>
                            Següent <ArrowRight className="ml-2 h-4 w-4" />
                        </Button>
                    ) : (
                        <Button onClick={handleSubmit} disabled={isPending}>
                            {isPending ? <Loader2 className="animate-spin" /> : "Finalitzar"}
                        </Button>
                    )}
                </div>
            </div>
        </div>
    );
}

// =================== FILE: src/app/[locale]/onboarding/_components/OnboardingSkeleton.tsx ===================

"use client";

/**
 * @summary Esquelet de càrrega per a la pàgina d'Onboarding.
 */
export function OnboardingSkeleton() {
  return (
    <div className="flex items-center justify-center min-h-screen p-4 bg-background animate-pulse">
      <div className="w-full max-w-2xl glass-card p-8 shadow-2xl">
        <div className="space-y-4">
          <div className="h-8 w-1/3 bg-gray-700/50 rounded-md"></div>
          <div className="h-5 w-2/3 bg-gray-700/50 rounded-md"></div>
          <div className="h-3 w-full bg-gray-700/50 rounded-md mt-4"></div>
        </div>
        <div className="mt-8 space-y-6">
          <div className="h-12 w-full bg-gray-700/50 rounded-md"></div>
          <div className="h-12 w-full bg-gray-700/50 rounded-md"></div>
        </div>
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/onboarding/_components/ServiceSelectionModal.tsx ===================

"use client";

import React, { useState, useMemo, FC } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input'; // Importem l'Input per al cercador
import { Check, Search } from 'lucide-react'; // Importem la icona de cerca

// --- Component per a la targeta de servei individual (sense canvis) ---
const ServiceCard: FC<{ serviceName: string; isSelected: boolean; onClick: () => void; }> = ({ serviceName, isSelected, onClick }) => (
    <motion.button
        type="button"
        onClick={onClick}
        // 👇 PAS 1: Reduïm l'alçada i el padding per fer-la més petita
        // 👇 PAS 2: Canviem les classes 'primary' per les 'green' quan està seleccionada
        className={`relative w-full h-16 p-2 rounded-lg border-2 flex items-center justify-center text-center font-semibold transition-all duration-200 ease-in-out ${ // -> h-24 p-4 a h-20 p-3
            isSelected 
                ? 'bg-green-100 border-green-600 text-green-700' // -> Canviat de 'primary' a 'green'
                : 'bg-muted/50 border-transparent hover:border-green-500/50' // -> BONUS: Canviat el hover a verd també
        }`}
        whileTap={{ scale: 0.95 }}
    >
        {isSelected && (
            // 👇 PAS 3: Canviem el fons de la icona de 'check' a verd
            <div className="absolute top-2 right-2 bg-green-600 text-primary-foreground rounded-full p-1"> {/* // -> Canviat de 'bg-primary' a 'bg-green-600' */}
                <Check className="w-3 h-3" />
            </div>
        )}
        {serviceName}
    </motion.button>
);


// --- Component per al diàleg modal (AMB LES MILLORES) ---
interface ServiceSelectionModalProps {
    isOpen: boolean;
    onClose: () => void;
    availableServices: { id: number; name: string }[];
    selectedServices: string[];
    onToggleService: (serviceName: string) => void;
}

export const ServiceSelectionModal: FC<ServiceSelectionModalProps> = ({ isOpen, onClose, availableServices, selectedServices, onToggleService }) => {
    // ✅ PAS 1: Afegim un estat per al terme de cerca
    const [searchTerm, setSearchTerm] = useState('');

    // ✅ PAS 2: Filtrem els serveis basant-nos en el terme de cerca
    const filteredServices = useMemo(() => {
        if (!searchTerm) {
            return availableServices;
        }
        return availableServices.filter(service =>
            service.name.toLowerCase().includes(searchTerm.toLowerCase())
        );
    }, [searchTerm, availableServices]);

    return (
        <AnimatePresence>
            {isOpen && (
                <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    className="fixed inset-0 bg-black/60 z-50 flex items-center justify-center p-4"
                    onClick={onClose}
                >
                    <motion.div
                        initial={{ scale: 0.9, opacity: 0, y: 20 }}
                        animate={{ scale: 1, opacity: 1, y: 0 }}
                        exit={{ scale: 0.9, opacity: 0, y: 20 }}
                        transition={{ type: 'spring', stiffness: 300, damping: 30 }}
                        className="bg-background rounded-xl shadow-2xl w-full max-w-3xl max-h-[80vh] flex flex-col"
                        onClick={(e) => e.stopPropagation()}
                    >
                        <div className="p-6 border-b">
                            <h2 className="text-2xl font-bold">Selecciona els teus serveis</h2>
                            {/* ✅ PAS 3: Augmentem la mida de la lletra de la descripció */}
                            <p className="text-muted-foreground mt-1 text-sm">Tria les categories que millor descriuen la teva activitat.</p>
                            
                            {/* ✅ PAS 4: Afegim el camp de cerca */}
                            <div className="relative mt-4">
                                <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
                                <Input
                                    type="text"
                                    placeholder="Cerca serveis..."
                                    className="pl-10"
                                    value={searchTerm}
                                    onChange={(e) => setSearchTerm(e.target.value)}
                                />
                            </div>
                        </div>
                        
                        {/* ✅ PAS 5: Renderitzem la llista filtrada */}
                        <div className="p-6 overflow-y-auto grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                            {filteredServices.length > 0 ? (
                                filteredServices.map(service => (
                                    <ServiceCard
                                        key={service.id}
                                        serviceName={service.name}
                                        isSelected={selectedServices.includes(service.name)}
                                        onClick={() => onToggleService(service.name)}
                                    />
                                ))
                            ) : (
                                <p className="text-muted-foreground col-span-full text-center py-8">No s'han trobat serveis.</p>
                            )}
                        </div>
                        
                        <div className="p-6 border-t mt-auto flex justify-end">
                            <Button onClick={onClose} size="lg">Fet</Button>
                        </div>
                    </motion.div>
                </motion.div>
            )}
        </AnimatePresence>
    );
};

// =================== FILE: src/app/[locale]/onboarding/_components/steps/index.ts ===================

export * from './Step1';
export * from './Step2';
export * from './Step3';

// =================== FILE: src/app/[locale]/onboarding/_components/steps/Step1.tsx ===================

"use client";

import { FC, ElementType } from 'react';
import { motion } from 'framer-motion';
import { useOnboarding } from '../OnboardingContext';
import { Input, type InputProps } from '@/components/ui/input';
import { User, Building, FileText } from 'lucide-react';

const InputWithIcon: FC<InputProps & { icon: ElementType }> = ({ icon: Icon, ...props }) => (
    <div className="relative">
        <Icon className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
        <Input className="pl-10" {...props} />
    </div>
);

export const Step1 = () => {
    const { formData, handleInputChange } = useOnboarding();

    return (
        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} className="space-y-6">
            <InputWithIcon icon={User} name="full_name" placeholder="El teu nom i cognoms" value={formData.full_name} onChange={handleInputChange} required />
            <InputWithIcon icon={Building} name="company_name" placeholder="Nom de la teva empresa o marca" value={formData.company_name} onChange={handleInputChange} required />
            <InputWithIcon icon={FileText} name="tax_id" placeholder="NIF/CIF (opcional)" value={formData.tax_id} onChange={handleInputChange} />
        </motion.div>
    );
};

// =================== FILE: src/app/[locale]/onboarding/_components/steps/Step2.tsx ===================

"use client";

import { motion } from 'framer-motion';
import { useOnboarding } from '../OnboardingContext';
import { AddressSearch } from '@/app/[locale]/_components/AddressSearch';
import { useTranslations } from 'next-intl';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';

// ✅ 1. IMPORTEM DE NOU ELS ICONES
import { Home, MapPin, Mailbox, Landmark } from 'lucide-react';

export const Step2 = () => {
    const { formData, handleAddressSelect, handleAddressChange } = useOnboarding();
    const t = useTranslations('OnboardingPage');

    return (
        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} className="space-y-6">
            <AddressSearch onAddressSelect={handleAddressSelect} />
            
            {formData.address && (
                <div className="pt-6 border-t grid grid-cols-1 sm:grid-cols-2 gap-4">
                    
                    {/* Camp del Carrer */}
                    <div className="space-y-2">
                        <Label htmlFor="street">{t('step2.streetLabel')}</Label>
                        {/* ✅ 2. AFEGIM EL CONTENIDOR I L'ICONE */}
                        <div className="relative flex items-center">
                            <Home className="absolute left-3 w-4 h-4 text-muted-foreground" />
                            <Input
                                id="street"
                                value={formData.address.street ?? ''}
                                onChange={(e) => handleAddressChange('street', e.target.value)}
                                placeholder={t('step2.addressPlaceholder')}
                                className="pl-10" // <-- Donem espai a l'esquerra per a l'icone
                            />
                        </div>
                    </div>

                    {/* Camp de la Ciutat */}
                    <div className="space-y-2">
                        <Label htmlFor="city">{t('step2.cityLabel')}</Label>
                        <div className="relative flex items-center">
                            <MapPin className="absolute left-3 w-4 h-4 text-muted-foreground" />
                            <Input
                                id="city"
                                value={formData.address.city ?? ''}
                                onChange={(e) => handleAddressChange('city', e.target.value)}
                                placeholder={t('step2.cityPlaceholder')}
                                className="pl-10"
                            />
                        </div>
                    </div>

                    {/* Camp del Codi Postal */}
                    <div className="space-y-2">
                        <Label htmlFor="postcode">{t('step2.postcodeLabel')}</Label>
                        <div className="relative flex items-center">
                            <Mailbox className="absolute left-3 w-4 h-4 text-muted-foreground" />
                            <Input
                                id="postcode"
                                value={formData.address.postcode ?? ''}
                                onChange={(e) => handleAddressChange('postcode', e.target.value)}
                                placeholder={t('step2.postcodePlaceholder')}
                                className="pl-10"
                            />
                        </div>
                    </div>

                    {/* Camp de la Regió/Província */}
                    <div className="space-y-2">
                        <Label htmlFor="region">{t('step2.regionLabel')}</Label>
                        <div className="relative flex items-center">
                            <Landmark className="absolute left-3 w-4 h-4 text-muted-foreground" />
                            <Input
                                id="region"
                                value={formData.address.region ?? ''}
                                onChange={(e) => handleAddressChange('region', e.target.value)}
                                placeholder={t('step2.regionLabel')}
                                className="pl-10"
                            />
                        </div>
                    </div>
                </div>
            )}
        </motion.div>
    );
};

// =================== FILE: src/app/[locale]/onboarding/_components/steps/Step3.tsx ===================

"use client";

import { useState, FC, ElementType } from 'react';
import { motion } from 'framer-motion';
import { useOnboarding } from '../OnboardingContext';
import { ServiceSelectionModal } from '../ServiceSelectionModal';
import { Input, type InputProps } from '@/components/ui/input';
import { Phone, Globe, Briefcase } from 'lucide-react';

const InputWithIcon: FC<InputProps & { icon: ElementType }> = ({ icon: Icon, ...props }) => (
    <div className="relative">
        <Icon className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
        <Input className="pl-10" {...props} />
    </div>
);

export const Step3 = ({ availableServices }: { availableServices: { id: number; name: string }[] }) => {
    const { formData, handleInputChange, handleToggleService } = useOnboarding();
    const [isServicesModalOpen, setIsServicesModalOpen] = useState(false);

    return (
        <>
            <ServiceSelectionModal
                isOpen={isServicesModalOpen}
                onClose={() => setIsServicesModalOpen(false)}
                availableServices={availableServices}
                selectedServices={formData.services}
                onToggleService={handleToggleService}
            />
            <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} className="space-y-6">
                <InputWithIcon icon={Phone} name="phone" type="tel" placeholder="Telèfon de contacte" value={formData.phone} onChange={handleInputChange} />
                <InputWithIcon icon={Globe} name="website" placeholder="Pàgina web (opcional) Ex: https://digitaistudios.com/ " value={formData.website} onChange={handleInputChange} />
                <div>
                    <label className="text-sm font-medium text-muted-foreground mb-2 block">Serveis principals</label>
                    <button type="button" onClick={() => setIsServicesModalOpen(true)} className="w-full min-h-[40px] flex items-center gap-2 rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background text-left">
                        <Briefcase className="w-5 h-5 text-muted-foreground shrink-0" />
                        {formData.services.length > 0 ? (
                            <div className="flex flex-wrap gap-1">
                                {formData.services.map(service => (
                                    <span key={service} className="bg-muted text-muted-foreground px-2 py-0.5 rounded-md text-xs">{service}</span>
                                ))}
                            </div>
                        ) : (
                            <span className="text-muted-foreground">Fes clic per a seleccionar serveis</span>
                        )}
                    </button>
                    <p className="text-xs text-muted-foreground mt-1">Selecciona les categories que millor et defineixen.</p>
                </div>
            </motion.div>
        </>
    );
};

// =================== FILE: src/app/[locale]/onboarding/_hooks/useOnboardingForm.ts ===================

"use client";

import { useState, useTransition } from 'react';
import { toast } from 'sonner';
import type { DetailedAddress } from '@/types/shared/address';
import { submitOnboardingAction } from '../actions';

const initialFormData = {
    full_name: '',
    company_name: '',
    tax_id: '',
    website: '',
    phone: '',
    services: [] as string[],
    address: null as DetailedAddress | null,
    summary: '',
    sector: '',
};

export function useOnboardingForm(initialFullName: string) {
    const [formData, setFormData] = useState({ ...initialFormData, full_name: initialFullName });
    const [step, setStep] = useState(1);
    const [isPending, startTransition] = useTransition();

    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        setFormData(prev => ({ ...prev, [e.target.name]: e.target.value }));
    };

    const handleAddressSelect = (address: DetailedAddress) => {
        setFormData(prev => ({ ...prev, address }));
    };

    const handleToggleService = (serviceName: string) => {
        setFormData(prev => ({
            ...prev,
            services: prev.services.includes(serviceName)
                ? prev.services.filter(s => s !== serviceName)
                : [...prev.services, serviceName]
        }));
    };

    const validateStep = (currentStep: number): boolean => {
        switch (currentStep) {
            case 1: return !!formData.full_name && !!formData.company_name;
            case 2:
                // ✅ Comprovem que l'objecte 'address' existeix I que els seus camps obligatoris tenen valor.
                return (
                    !!formData.address &&
                    !!formData.address.street &&
                    !!formData.address.city &&
                    !!formData.address.postcode &&
                    !!formData.address.region && // <-- LA COMPROVACIÓ CLAU QUE FALTAVA
                    !!formData.address.country
                ); case 3: return formData.services.length > 0;
            default: return true;
        }
    };

    const goToNextStep = () => {
        if (validateStep(step)) setStep(s => Math.min(3, s + 1));
        else toast.error("Si us plau, completa els camps obligatoris.");
    };

    const goToPrevStep = () => setStep(s => Math.max(1, s - 1));

    const handleSubmit = () => {
        // 1. Validació dels passos (això ja ho tenies)
        if (!validateStep(1) || !validateStep(2) || !validateStep(3)) {
            toast.error("Falten camps per completar en alguns dels passos.");
            return;
        }

        // 2. ✅ AFEGIM LA COMPROVACIÓ DE SEGURETAT (LA GUARDA)
        // Aquesta línia és la clau. Si l'adreça és nul·la, mostrem un error i parem l'execució.
        if (!formData.address) {
            toast.error("L'adreça és obligatòria. Si us plau, selecciona'n una.");
            return;
        }

        startTransition(async () => {
            // 3. Ara TypeScript ja sap que 'formData.address' no pot ser 'null' aquí.
            const finalDataForAction = {
                full_name: formData.full_name,
                company_name: formData.company_name,
                tax_id: formData.tax_id,
                website: formData.website,
                summary: formData.summary,
                sector: formData.sector,
                services: formData.services,
                phone: formData.phone,
                street: formData.address!.street, // <-- Ara és segur accedir aquí
                city: formData.address!.city,
                postal_code: formData.address!.postcode,
                region: formData.address!.region,
                country: formData.address!.country,
                latitude: formData.address!.latitude ?? undefined,
                longitude: formData.address!.longitude ?? undefined,
            };

            const result = await submitOnboardingAction(finalDataForAction);

            if (result?.success === false) {
                toast.error(result.message || "Hi ha hagut un error desconegut.");
            }
        });
    };
    // ✅ NOU GESTOR PER A L'EDICIÓ MANUAL DELS CAMPS DE L'ADREÇA
    const handleAddressChange = (field: keyof DetailedAddress, value: string) => {
        setFormData(prev => ({
            ...prev,
            address: {
                // Si l'adreça no existeix, creem un objecte base per evitar errors
                ...(prev.address || { street: '', city: '', postcode: '', region: '', country: '', latitude: null, longitude: null }),
                [field]: value
            }
        }));
    };

    // ✅ Assegura't que l'objecte que retornes inclou TOTES aquestes funcions
    return {
        step,
        formData,
        isPending,
        handleInputChange,
        handleAddressSelect,
        handleAddressChange, // ✅ EXPORTEM LA NOVA FUNCIÓ
        handleToggleService,
        goToNextStep,
        goToPrevStep,
        handleSubmit, // <-- La funció que faltava!
    };
}

// =================== FILE: src/app/[locale]/page.tsx ===================

/**
 * @file src/app/[locale]/page.tsx
 * @summary Aquesta és la pàgina d'inici (Landing Page).
 * No fa cap redirecció. El middleware s'encarrega de tot.
 */
import { LandingClient } from './_components/LandingClient';
import type { Metadata } from 'next';

export const metadata: Metadata = {
  title: 'Ribotflow - El Futur de la Gestió Empresarial',
  description: 'Unifica el teu CRM, vendes i comunicacions.',
};

export default function LandingPage() {
  return <LandingClient />;
}

// =================== FILE: src/app/[locale]/quote/[secureId]/actions.ts ===================

"use server";

import { createAdminClient } from "@/lib/supabase/server";
import { revalidatePath } from "next/cache";
import type { QuoteItem } from '@/types/crm';
import { z } from 'zod';

// Esquema de validació per a l'acceptació
const AcceptQuoteSchema = z.string().uuid("L'identificador del pressupost és invàlid.");

// Esquema de validació per al rebuig
const RejectQuoteSchema = z.object({
    secureId: z.string().uuid("L'identificador del pressupost és invàlid."),
    reason: z.string().min(10, "El motiu del rebuig ha de tenir almenys 10 caràcters.").max(500, "El motiu és massa llarg."),
});

/**
 * Gestiona l'acceptació d'un pressupost, actualitza l'oportunitat associada
 * i crea un esborrany de factura amb tots els seus conceptes.
 */
export async function acceptQuoteAction(secureId: string) {
    const validation = AcceptQuoteSchema.safeParse(secureId);
    if (!validation.success) {
        return { success: false, message: validation.error.issues[0].message };
    }

    const supabaseAdmin = createAdminClient();

    try {
        // PAS 1: Actualitzem el pressupost a 'Accepted' i recuperem totes les seves dades,
        // incloent els conceptes ('items') en una sola consulta.
        const { data: quote, error: quoteError } = await supabaseAdmin
            .from('quotes')
            .update({ status: 'Accepted' })
            .eq('secure_id', secureId)
            .select('*, items:quote_items(*)')
            .single();

        if (quoteError) throw new Error(`Error en actualitzar el pressupost: ${quoteError.message}`);
        if (!quote) throw new Error("No s'ha trobat el pressupost després d'actualitzar.");

        // PAS 2: Actualitzem l'oportunitat associada a 'Guanyat'.
        if (quote.opportunity_id) {
            await supabaseAdmin
                .from('opportunities')
                .update({ stage_name: 'Guanyat' })
                .eq('id', quote.opportunity_id);
        }

        // PAS 3: Creem un nou esborrany de factura amb les dades del pressupost.
        const { data: newInvoice, error: invoiceError } = await supabaseAdmin
            .from('invoices')
            .insert({
                user_id: quote.user_id,
                team_id: quote.team_id,
                contact_id: quote.contact_id,
                quote_id: quote.id,
                status: 'Draft',
                total_amount: quote.total,
                subtotal: quote.subtotal,
                tax_amount: quote.tax,
                discount_amount: quote.discount,
                issue_date: new Date().toISOString().slice(0, 10),
                due_date: new Date(new Date().setDate(new Date().getDate() + 30)).toISOString().slice(0, 10),
            })
            .select('id')
            .single();

        if (invoiceError) throw new Error(`Error en crear la factura: ${invoiceError.message}`);

        // PAS 4: Copiem els conceptes del pressupost a la nova factura.
        if (quote.items && quote.items.length > 0) {
            const newInvoiceItems = quote.items.map((item: QuoteItem) => {
                // Calculem el total de la línia al servidor per a més seguretat.
                const lineTotal = (item.quantity || 0) * (item.unit_price || 0);

                return {
                    invoice_id: newInvoice.id,
                    product_id: item.product_id || null,
                    description: item.description,
                    quantity: item.quantity,
                    unit_price: item.unit_price,
                    tax_rate: item.tax_rate,
                    total: lineTotal,
                    user_id: quote.user_id,
                    team_id: quote.team_id,
                };
            });

            await supabaseAdmin.from('invoice_items').insert(newInvoiceItems).throwOnError();
        }

        // Revalidem les rutes afectades per a que la UI es refresqui.
        revalidatePath('/crm/quotes');
        revalidatePath('/finances/facturacio');
        return { success: true, message: "Pressupost acceptat i esborrany de factura creat correctament." };

    } catch (error: unknown) {
        const message = error instanceof Error ? error.message : "Error desconegut en processar l'acceptació.";
        console.error("[acceptQuoteAction] Error:", message);
        return { success: false, message };
    }
}
/**
 * Gestiona el rebuig d'un pressupost de manera segura al servidor.
 */
export async function rejectQuoteAction(secureId: string, reason: string) {
    const validation = RejectQuoteSchema.safeParse({ secureId, reason });
    if (!validation.success) {
        return { success: false, message: validation.error.issues[0].message };
    }

    const supabaseAdmin = createAdminClient();

    try {
        const { data: quote } = await supabaseAdmin
            .from('quotes')
            .select('id, user_id, team_id, contact_id, opportunity_id')
            .eq('secure_id', secureId)
            .single()
            .throwOnError();

        await supabaseAdmin.from('quotes').update({ status: 'Declined', rejection_reason: reason }).eq('id', quote.id);

        if (quote.opportunity_id) {
            await supabaseAdmin.from('opportunities').update({ stage_name: 'Negociació' }).eq('id', quote.opportunity_id);
        }

        await supabaseAdmin.from('activities').insert({
            user_id: quote.user_id,
            team_id: quote.team_id,
            contact_id: quote.contact_id,
            quote_id: quote.id,
            opportunity_id: quote.opportunity_id,
            type: 'Rebuig de Pressupost',
            content: reason,
            is_read: false
        });

        revalidatePath('/crm/quotes');
        return { success: true, message: "El rebuig s'ha processat correctament." };
    } catch (error: unknown) {
        const message = error instanceof Error ? error.message : "Error desconegut";
        return { success: false, message };
    }
}




// =================== FILE: src/app/[locale]/quote/[secureId]/page.tsx ===================

// FITXER: app/[locale]/(app)/crm/quotes/[id]/page.ts

import { notFound } from 'next/navigation';
import { PublicQuoteClient } from './_components/PublicQuoteClient';
import { getQuoteDataBySecureId } from './_components/PublicQuoteData';

// 👇 CORRECCIÓ: 'params' és un objecte, no una Promise.
//    El nom de la propietat ha de coincidir amb el nom del directori dinàmic, que és '[id]'.
type PageProps = {
  params: Promise<{ id: string }>;
};

export default async function PublicQuotePage({ params }: PageProps) {
  // 👇 CORRECCIÓ: No cal fer 'await' a 'params'. Accedeix directament.
 const { id: userId } = await params;
  
  // Utilitzem 'id' per a obtenir les dades.
  const quoteData = await getQuoteDataBySecureId(userId);

  if (!quoteData) {
    notFound();
  }

  return <PublicQuoteClient initialQuoteData={quoteData} />;
}

// =================== FILE: src/app/[locale]/quote/[secureId]/_components/PublicQuoteClient.tsx ===================

"use client";

import { usePublicQuote } from "../_hooks/usePublicQuote";
import { RejectionDialog } from "./RejectionDialog";
import { QuoteStatusScreen } from "./QuoteStatusScreeen";
import { PublicQuoteView } from "./PublicQuoteView";
import type { QuoteDataFromServer } from "@/types/crm"; // ✅ Importem el tipus correcte    

export function PublicQuoteClient({ initialQuoteData }: { initialQuoteData: QuoteDataFromServer; }) {
    // Tota la lògica complexa ara prové d'aquest hook.
    const {
        quote,
        isPending,
        finalStatus,
        isRejecting,
        setIsRejecting,
        handleAccept,
        handleReject
    } = usePublicQuote(initialQuoteData);

    // Si el pressupost ja té un estat final (acceptat o rebutjat), mostrem la pantalla corresponent.
    if (finalStatus) {
        return <QuoteStatusScreen status={finalStatus} quote={quote} />;
    }

    // Si no, mostrem la vista principal del pressupost i el diàleg de rebuig (que està ocult per defecte).
    return (
        <>
            <PublicQuoteView
                quoteData={quote}
                onAccept={handleAccept}
                onReject={() => setIsRejecting(true)} // Aquest botó només obre el diàleg
                isPending={isPending}
            />
            <RejectionDialog
                isOpen={isRejecting}
                onOpenChange={setIsRejecting}
                onSubmit={handleReject} // La lògica de rebuig real s'executa aquí
                isPending={isPending}
            />
        </>
    );
}


// =================== FILE: src/app/[locale]/quote/[secureId]/_components/PublicQuoteData.tsx ===================

import { createClient } from '@/lib/supabase/server'; 
import type { QuoteDataFromServer } from "@/types/crm"; 

/**
 * Funció de servidor per obtenir les dades d'un pressupost a partir del seu ID segur.
 * Aquesta funció encapsula la lògica de Supabase.
 * @param secureId L'ID únic del pressupost.
 * @returns Les dades del pressupost o null si no es troba.
 */
export async function getQuoteDataBySecureId(secureId: string): Promise<QuoteDataFromServer | null> {
    
    // Utilitzem el client de Supabase del servidor
    const supabase = createClient();

    // Consulta per fer JOIN amb 'contacts', 'teams' i 'quote_items'
    const { data: quoteData, error } = await supabase
        .from("quotes")
        .select(`
            *, 
            contacts (*), 
            team:teams (*), 
            quote_items (*)
        `)
        .eq("secure_id", secureId)
        .single();

    if (error || !quoteData) {
        // En un entorn de producció, podríeu registrar l'error aquí sense llençar-lo
        // per a no revelar detalls sensibles al client o a la consola pública.
        console.error("Error carregant dades del pressupost:", error?.message || "Dades no trobades");
        return null;
    }
    
    // Assegurem que el tipus de retorn coincideix amb la interfície esperada
    return quoteData as unknown as QuoteDataFromServer;
}

// =================== FILE: src/app/[locale]/quote/[secureId]/_components/PublicQuoteView.tsx ===================

"use client";

import { Button } from "@/components/ui/button";
import { Loader2, CheckCircle, XCircle } from "lucide-react";
import { QuotePreview } from "@/app/[locale]/(app)/crm/quotes/[id]/_components/QuotePreview";
import { type QuoteDataFromServer } from "@/types/crm";
// ✅ 1. Importem els tipus que 'QuotePreview' realment espera.
import { type EditableQuote } from "@/app/[locale]/(app)/crm/quotes/[id]/_hooks/useQuoteEditor";
import { type Database } from "@/types/supabase";

// Definim els tipus locals que 'QuotePreview' utilitza
type Contact = Database['public']['Tables']['contacts']['Row'];
type Team = Database['public']['Tables']['teams']['Row'];

interface PublicQuoteViewProps {
    quoteData: QuoteDataFromServer;
    onAccept: () => void;
    onReject: () => void;
    isPending: boolean;
}

export function PublicQuoteView({ quoteData, onAccept, onReject, isPending }: PublicQuoteViewProps) {
    
    // ✅ 2. Creem l'objecte 'quoteForPreview' amb el tipus correcte 'EditableQuote'.
    //    Fem una asserció de tipus perquè sabem que l'estructura de dades és compatible.
    const quoteForPreview = quoteData as unknown as EditableQuote;

    return (
        <div className="bg-gray-100 min-h-screen p-4 sm:p-8">
            <div className="max-w-4xl mx-auto">
                <div className="text-center mb-6">
                    <h1 className="text-3xl text-black font-bold">Revisió del Pressupost</h1>
                    <p className="text-gray-600">Hola {quoteData.contacts?.nom || "estimat client"}, revisa els detalls i confirma la teva decisió.</p>
                </div>
                <div className="bg-white rounded-lg shadow-lg">
                    <QuotePreview
                        quote={quoteForPreview}
                        // ✅ 3. Assegurem que els contactes es passen com el tipus correcte.
                        contacts={quoteData.contacts ? [quoteData.contacts as unknown as Contact] : []}
                        // ✅ 4. Assegurem que el perfil de l'empresa es passa com el tipus correcte.
                        companyProfile={quoteData.team as unknown as Team | null}
                        subtotal={quoteData.subtotal || 0}
                        discountAmount={(quoteData.subtotal || 0) * (quoteData.discount || 0) / 100}
                        tax={quoteData.tax || 0}
                        total={quoteData.total || 0}
                    />
                </div>
                <div className="mt-8 p-6 bg-white rounded-lg shadow-lg flex flex-col sm:flex-row justify-around items-center gap-4">
                    <p className="text-lg text-black font-semibold">Estàs d'acord amb aquest pressupost?</p>
                    <div className="flex gap-4">
                        <Button variant="destructive" size="lg" disabled={isPending} onClick={onReject}>
                            <XCircle className="w-5 h-5 mr-2" /> Rebutjar
                        </Button>
                        <Button className="bg-green-600 hover:bg-green-700" size="lg" onClick={onAccept} disabled={isPending}>
                            {isPending ? <Loader2 className="w-5 h-5 mr-2 animate-spin" /> : <CheckCircle className="w-5 h-5 mr-2" />}
                            Acceptar Pressupost
                        </Button>
                    </div>
                </div>
            </div>
        </div>
    );
}

// =================== FILE: src/app/[locale]/quote/[secureId]/_components/QuoteStatusScreeen.tsx ===================

"use client";

import { CheckCircle, XCircle } from "lucide-react";
import type { QuoteDataFromServer } from "@/types/crm"; // ✅ Importem el tipus correcte    

interface QuoteStatusScreenProps {
    status: 'accepted' | 'declined';
    quote: QuoteDataFromServer;
}

export function QuoteStatusScreen({ status, quote }: QuoteStatusScreenProps) {
    if (status === 'accepted') {
        return (
            <div className="flex flex-col h-screen w-full justify-center items-center bg-gray-100 text-center p-4">
                <CheckCircle className="w-24 h-24 text-green-500 mb-4" />
                <h1 className="text-3xl text-black font-bold mb-2">Pressupost Acceptat!</h1>
                <p className="text-lg text-black">Gràcies per la teva confiança, {quote.contacts?.nom}.</p>
                <p className="text-lg text-black">Hem notificat a {quote.team?.name || 'l\'empresa'} i es posaran en contacte amb tu aviat.</p>
            </div>
        );
    }

    return (
        <div className="flex flex-col h-screen w-full justify-center items-center bg-gray-100 text-center p-4">
            <XCircle className="w-24 h-24 text-red-500 mb-4" />
            <h1 className="text-3xl text-black font-bold mb-2">Feedback rebut</h1>
            <p className="text-lg text-black">Gràcies pels teus comentaris.</p>
        </div>
    );
}


// =================== FILE: src/app/[locale]/quote/[secureId]/_components/RejectionDialog.tsx ===================

"use client";

import { useState } from 'react';
import { toast } from 'sonner';

// UI Components
import { Button } from "@/components/ui/button";
import { AlertDialog, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Loader2, Send } from "lucide-react";

interface RejectionDialogProps {
    isOpen: boolean;
    onOpenChange: (open: boolean) => void;
    onSubmit: (reason: string) => void;
    isPending: boolean;
}

export function RejectionDialog({ isOpen, onOpenChange, onSubmit, isPending }: RejectionDialogProps) {
    const [reason, setReason] = useState("");

    const handleSubmit = () => {
        if (reason.trim() === "") {
            toast.error("Motiu requerit", { description: "Si us plau, explica breument per què rebutges el pressupost." });
            return;
        }
        onSubmit(reason);
    };

    return (
        <AlertDialog open={isOpen} onOpenChange={onOpenChange}>
            <AlertDialogContent>
                <AlertDialogHeader>
                    <AlertDialogTitle>Rebutjar el Pressupost</AlertDialogTitle>
                    <AlertDialogDescription>Per ajudar-nos a millorar, si us plau, explica'ns breument els motius de la teva decisió.</AlertDialogDescription>
                </AlertDialogHeader>
                <div className="py-4">
                    <Label htmlFor="rejectionReason" className="text-left">Motius del rebuig</Label>
                    <Textarea id="rejectionReason" placeholder="Ex: El preu és massa alt, falten funcionalitats..." className="mt-2" value={reason} onChange={(e) => setReason(e.target.value)} />
                </div>
                <AlertDialogFooter>
                    <AlertDialogCancel disabled={isPending}>Cancel·lar</AlertDialogCancel>
                    <Button onClick={handleSubmit} disabled={isPending}>
                        {isPending ? <Loader2 className="w-4 h-4 mr-2 animate-spin" /> : <Send className="w-4 h-4 mr-2" />}
                        Enviar i Rebutjar
                    </Button>
                </AlertDialogFooter>
            </AlertDialogContent>
        </AlertDialog>
    );
}


// =================== FILE: src/app/[locale]/quote/[secureId]/_hooks/usePublicQuote.ts ===================

"use client";

import { useState, useTransition } from 'react';
import { toast } from 'sonner';
import { acceptQuoteAction, rejectQuoteAction } from '../actions';
import type { QuoteDataFromServer } from "@/types/crm"; // ✅ Importem el tipus correcte    

/**
 * Hook que encapsula tota la lògica per a la pàgina pública d'un pressupost.
 */
export function usePublicQuote(initialQuote: QuoteDataFromServer) {
    const [quote] = useState(initialQuote);
    const [isPending, startTransition] = useTransition();

    // L'estat final del pressupost (acceptat o rebutjat)
    const [finalStatus, setFinalStatus] = useState<'accepted' | 'declined' | null>(() => {
        if (quote.status === "Accepted") return "accepted";
        if (quote.status === "Declined") return "declined";
        return null;
    });

    // Estat per a controlar la visibilitat del diàleg de rebuig
    const [isRejecting, setIsRejecting] = useState(false);

    const handleAccept = () => {
        startTransition(async () => {
            const result = await acceptQuoteAction(quote.secure_id);
            if (result.success) {
                setFinalStatus("accepted");
            } else {
                toast.error("Error en acceptar", { description: result.message });
            }
        });
    };

    const handleReject = (reason: string) => {
        startTransition(async () => {
            const result = await rejectQuoteAction(quote.secure_id, reason);
            if (result.success) {
                setFinalStatus("declined");
                setIsRejecting(false);
            } else {
                toast.error("Error en rebutjar", { description: result.message });
            }
        });
    };

    return {
        quote,
        isPending,
        finalStatus,
        isRejecting,
        setIsRejecting,
        handleAccept,
        handleReject
    };
}


// =================== FILE: src/app/[locale]/_components/AddressSearch.tsx ===================

"use client";

import React, { useState, useCallback, useEffect } from 'react';
import { useTranslations } from 'next-intl';
import { useDebounce } from 'use-debounce';
import { Input } from '@/components/ui/input';
import { Loader2, MapPin } from 'lucide-react';
import type { DetailedAddress } from '@/types/shared/address';

interface AddressSearchProps {
  onAddressSelect: (address: DetailedAddress) => void;
}

// ✅ 1. DEFINIM UN TIPUS SEGUR PER ALS SUGGERIMENTS DE MAPBOX
interface MapboxSuggestion {
  name: string;
  mapbox_id: string;
  full_address: string;
}

export function AddressSearch({ onAddressSelect }: AddressSearchProps) {
  const t = useTranslations('OnboardingPage.step2');
  const [query, setQuery] = useState('');
  // ✅ 2. APLIQUEM EL NOU TIPUS A L'ESTAT DELS SUGGERIMENTS
  const [suggestions, setSuggestions] = useState<MapboxSuggestion[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [debouncedQuery] = useDebounce(query, 500);

  const fetchSuggestions = useCallback(async (searchTerm: string) => {
    if (searchTerm.length < 3) {
      setSuggestions([]);
      return;
    }
    setIsLoading(true);
    const accessToken = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN;
    const endpoint = `https://api.mapbox.com/search/searchbox/v1/suggest?q=${encodeURIComponent(searchTerm)}&language=ca,es&session_token=08a700a8-1423-4c99-800a-471238634710&access_token=${accessToken}`;
    
    try {
      const response = await fetch(endpoint);
      const data = await response.json();
      setSuggestions(data.suggestions || []);
    } catch (error) {
      console.error('Error fetching Mapbox suggestions:', error);
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchSuggestions(debouncedQuery);
  }, [debouncedQuery, fetchSuggestions]);

  // ✅ 3. APLIQUEM EL NOU TIPUS AL PARÀMETRE DE LA FUNCIÓ
  const handleSelectSuggestion = async (suggestion: MapboxSuggestion) => {
    setIsLoading(true);
    setQuery(''); 
    setSuggestions([]);

    const accessToken = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN;
    const endpoint = `https://api.mapbox.com/search/searchbox/v1/retrieve/${suggestion.mapbox_id}?session_token=08a700a8-1423-4c99-800a-471238634710&access_token=${accessToken}`;
    
    try {
        const response = await fetch(endpoint);
        const data = await response.json();
        const feature = data.features[0];
        if (!feature) return;

        const context = feature.properties.context;
        
        onAddressSelect({
            street: feature.properties.address || '',
            city: context?.place?.name || '',
            postcode: context?.postcode?.name || '',
            region: context?.region?.name || '',
            country: context?.country?.name || '',
            latitude: feature.geometry.coordinates[1],
            longitude: feature.geometry.coordinates[0],
        });
    } catch (error) {
        console.error('Error retrieving Mapbox address:', error);
    } finally {
        setIsLoading(false);
    }
  };

  return (
    <div className="relative">
      <div className="relative">
        <MapPin className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
        <Input
          placeholder={t('addressPlaceholder')}
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          className="pl-10"
        />
        {isLoading && <Loader2 className="absolute right-3 top-1/2 -translate-y-1/2 w-5 h-5 animate-spin" />}
      </div>

      {suggestions.length > 0 && (
        <ul className="absolute z-10 w-full mt-2 bg-card border rounded-md shadow-lg max-h-60 overflow-y-auto">
          {suggestions.map((s) => (
            <li 
              key={s.mapbox_id}
              onClick={() => handleSelectSuggestion(s)}
              className="px-4 py-2 hover:bg-muted cursor-pointer"
            >
              <p className="font-semibold">{s.name}</p>
              <p className="text-sm text-muted-foreground">{s.full_address}</p>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}

// =================== FILE: src/app/[locale]/_components/CountdownView.tsx ===================

"use client";

import { useEffect, useState, useRef } from 'react';
import { useTranslations } from 'next-intl';
import Image from 'next/image';
import Link from 'next/link';
import dynamic from 'next/dynamic';

// Importem els nous components de la UI
import { ThemeSwitcher } from '@/components/ThemeSwitcher';
import { LanguageSwitcher } from '@/components/LanguageSwitcher';
import { Button } from '@/components/ui/button';

// Carreguem el fons de partícules de manera dinàmica per a un millor rendiment.
const ParticleBackground = dynamic(
  () => import('./ParticleBackground').then(mod => mod.ParticleBackground),
  { ssr: false }
);

// Sub-components interns per a una millor organització del codi.
const CountdownBlock = ({ value, label }: { value: string; label: string }) => (
  <div className="min-w-[80px] md:min-w-[120px] text-center">
    <span className="text-[clamp(3rem,8vw,5rem)] font-bold leading-none block">{value}</span>
    <span className="text-xs md:text-sm font-light text-gray-400 tracking-widest uppercase">{label}</span>
  </div>
);
const FeatureBlock = ({ title, color, dataTitle, children }: { title: string; color: string; dataTitle: string; children: React.ReactNode }) => (
  <div className="feature-block py-16 mb-32 opacity-20 transition-opacity duration-500" data-title={dataTitle}>
    <h3 className={`text-3xl font-medium mb-4 ${color}`}>{title}</h3>
    {/* ✅ CORRECCIÓ: Canviem 'text-gray-300' per 'text-muted-foreground' */}
    <p className="text-xl leading-relaxed text-muted-foreground max-w-prose">
      {children}
    </p>
  </div>
);

/**
 * @summary El component principal i interactiu de la Landing Page.
 */
export function CountdownView() {
  const t = useTranslations('LandingPage');
  const [timeLeft, setTimeLeft] = useState({ days: '00', hours: '00', minutes: '00', seconds: '00' });
  const [isClient, setIsClient] = useState(false);
  const featureContentRef = useRef<HTMLDivElement>(null);
  const stickyTitleRef = useRef<HTMLHeadingElement>(null);

  useEffect(() => { setIsClient(true); }, []);

  // Lògica del compte enrere (sense canvis).
  useEffect(() => {
    if (!isClient) return;
    const countDownDate = new Date("Oct 1, 2025 00:00:00").getTime();
    const interval = setInterval(() => {
      const now = new Date().getTime();
      const distance = countDownDate - now;
      if (distance < 0) {
        clearInterval(interval);
        setTimeLeft({ days: '00', hours: '00', minutes: '00', seconds: '00' });
        return;
      }
      setTimeLeft({
        days: String(Math.floor(distance / (1000 * 60 * 60 * 24))).padStart(2, '0'),
        hours: String(Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))).padStart(2, '0'),
        minutes: String(Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60))).padStart(2, '0'),
        seconds: String(Math.floor((distance % (1000 * 60)) / 1000)).padStart(2, '0'),
      });
    }, 1000);
    return () => clearInterval(interval);
  }, [isClient]);

  // ✅ CORRECCIÓ: Efecte per a l'animació de l'scroll.
  useEffect(() => {
    if (!isClient || !featureContentRef.current || !stickyTitleRef.current) return;

    const featureBlocks = Array.from(featureContentRef.current.querySelectorAll<HTMLDivElement>('.feature-block'));
    const stickyTitle = stickyTitleRef.current;

    const updateActiveFeature = (target: Element) => {
      const title = target.getAttribute('data-title');
      if (title) stickyTitle.innerHTML = title;
      featureBlocks.forEach(b => b.classList.remove('opacity-100'));
      target.classList.add('opacity-100');
    };

    const observer = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          updateActiveFeature(entry.target);
        }
      });
    }, { rootMargin: '-50% 0px -50% 0px', threshold: 0 });

    featureBlocks.forEach(block => observer.observe(block));

    // Activem el primer bloc manualment a la càrrega inicial per solucionar l'error.
    if (featureBlocks.length > 0) {
      updateActiveFeature(featureBlocks[0]);
    }

    return () => featureBlocks.forEach(block => observer.unobserve(block));
  }, [isClient]);

  return (
    <div className="relative z-10 bg-background text-foreground">
      {/* El fons de partícules es renderitza només al client i per sota de tot. */}
      {isClient && <ParticleBackground />}

      <div className="relative z-10">
        {/* ✅ NOU: Barra de navegació superior amb nou disseny */}

        <nav className="fixed top-0 left-0 right-0 z-50 p-4 flex justify-between items-center bg-background/50 backdrop-blur-md border-b border-white/10">
          <Link href="/" className="flex items-center gap-2">
            <Image src="/android-chrome-192x192.png" alt="Logo de Ribotflow" width={32} height={32} />
            <span className="font-bold text-lg hidden sm:block">Ribotflow</span>
          </Link>
          <div className="flex items-center gap-2">
            <LanguageSwitcher />
            <ThemeSwitcher />
            <Button asChild className="bg-gradient-to-r from-green-400 to-cyan-400 text-black font-bold hover:opacity-90 transition-opacity">
              <Link href="/login">Accedir</Link>
            </Button>
          </div>
        </nav>

        <header className="flex flex-col justify-center items-center h-screen text-center p-4">
          <h1 className="text-[clamp(3.5rem,10vw,7rem)] font-black tracking-tighter leading-none mb-6 bg-gradient-to-r from-green-400 via-cyan-400 to-pink-500 bg-clip-text text-transparent animate-gradient-shift">
            {t('mainTitle')}
          </h1>
          <p className="text-[clamp(1.1rem,2.5vw,1.5rem)] font-light text-muted-foreground max-w-3xl leading-relaxed mb-14">
            {t('subtitle')}
          </p>
          <div className="flex gap-4 md:gap-8">
            <CountdownBlock value={timeLeft.days} label={t('days')} />
            <CountdownBlock value={timeLeft.hours} label={t('hours')} />
            <CountdownBlock value={timeLeft.minutes} label={t('minutes')} />
            <CountdownBlock value={timeLeft.seconds} label={t('seconds')} />
          </div>
        </header>

        {/* Títol d'introducció a les funcionalitats */}
        <h2 className="text-[clamp(2rem,4vw,3rem)] text-center my-32 font-extrabold bg-gradient-to-r from-green-400 via-cyan-400 to-pink-500 bg-clip-text text-transparent animate-gradient-slow">
          {t('featuresIntro')}
        </h2>

        {/* Secció de les funcionalitats amb efecte d'scroll */}
        <section className="grid grid-cols-1 md:grid-cols-[1fr_1.5fr] gap-8 max-w-6xl mx-auto px-8">
          <div className="sticky top-0 h-screen hidden md:flex items-center">
            <h2 ref={stickyTitleRef} className="text-[clamp(2rem,5vw,3.5rem)] font-bold leading-tight transition-opacity duration-500"></h2>
          </div>
          <div ref={featureContentRef}>
            <FeatureBlock title={t('feature1Title')} color="text-green-400" dataTitle={t('feature1DataTitle')}>{t('feature1Text')}</FeatureBlock>
            <FeatureBlock title={t('feature2Title')} color="text-cyan-400" dataTitle={t('feature2DataTitle')}>{t('feature2Text')}</FeatureBlock>
            <FeatureBlock title={t('feature3Title')} color="text-pink-400" dataTitle={t('feature3DataTitle')}>{t('feature3Text')}</FeatureBlock>
            <FeatureBlock title={t('feature4Title')} color="text-green-400" dataTitle={t('feature4DataTitle')}>{t('feature4Text')}</FeatureBlock>
            <FeatureBlock title={t('feature5Title')} color="text-cyan-400" dataTitle={t('feature5DataTitle')}>{t('feature5Text')}</FeatureBlock>
            <FeatureBlock title={t('feature6Title')} color="text-pink-400" dataTitle={t('feature6DataTitle')}>{t('feature6Text')}</FeatureBlock>
          </div>
        </section>

        {/* Peu de pàgina */}
        <footer className="text-center py-16 text-gray-500">
          {/* ✅ NOU: Afegim el selector de tema al peu de pàgina */}
          <div className="mb-8 flex justify-center">
            <ThemeSwitcher />
          </div>
          <p>&copy; {new Date().getFullYear()} Ribotflow. {t('developedBy')} <Link href="..." className="...">DigitAI Studios</Link>.</p>
        </footer>
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/_components/FeaturesPanel.tsx ===================

"use client";

import { Briefcase, Landmark, Headphones, Users, Workflow, ArrowRight} from 'lucide-react';
import { useTranslations } from 'next-intl';
import { motion } from 'framer-motion';
import type { ElementType } from 'react'; // ✅ Importem ElementType des de React

// Sub-component per a cada element del panell
const FeatureItem = ({ icon: Icon, title, description, href, colorClass }: { 
  icon: ElementType, 
  title: string, 
  description: string, 
  href: string,
  colorClass: string
}) => (
  <motion.a 
    href={href}
    whileHover={{ scale: 1.02 }} // Una animació més subtil
    className="flex items-center gap-5 group p-4 hover:bg-muted/50 rounded-lg transition-colors"
  >
    {/* ✅ MILLORA: Fons més sòlid per a la icona que s'adapta al tema */ }
    <div className="p-3 bg-background/50 dark:bg-muted rounded-lg mt-1 group-hover:bg-primary/10 transition-colors ring-1 ring-border">
      {/* ✅ MILLORA: Icona més gran */}
      <Icon className={`w-6 h-6 transition-colors ${colorClass}`} />
    </div>
    <div className="flex-1">
      {/* ✅ MILLORA: Text més gran */}
      <h3 className="font-bold text-lg group-hover:text-foreground transition-colors">{title}</h3>
      <p className="text-base text-muted-foreground">{description}</p>
    </div>
    <ArrowRight className="w-5 h-5 text-muted-foreground opacity-0 group-hover:opacity-100 transition-opacity" />
  </motion.a>
);

/**
 * @summary Component que renderitza el panell lateral amb les funcionalitats destacades.
 */
export function FeaturesPanel() {
  const t = useTranslations('MainLandingView.featuresPanel');
  
  const features = [
    { icon: Briefcase, title: t('crm.title'), description: t('crm.desc'), href: "#crm", colorClass: 'text-brand-green' },
    { icon: Landmark, title: t('finances.title'), description: t('finances.desc'), href: "#finances", colorClass: 'text-brand-cyan' },
    { icon: Headphones, title: t('comunicacio.title'), description: t('comunicacio.desc'), href: "#comunicacio", colorClass: 'text-brand-pink' },
    { icon: Users, title: t('network.title'), description: t('network.desc'), href: "#network", colorClass: 'text-brand-green' },
    { icon: Workflow, title: t('projectStrocture.title'), description: t('projectStrocture.desc'), href: "#projectes", colorClass: 'text-brand-cyan' },
  ];

  return (
    <motion.div 
      initial={{ opacity: 0, x: 50 }}
      animate={{ opacity: 1, x: 0 }}
      transition={{ duration: 0.5, delay: 0.2, ease: 'easeOut' }}
      className="glass-card p-6 rounded-2xl space-y-2"
    >
      <h2 className="text-sm font-semibold uppercase tracking-wider text-muted-foreground px-4 mb-2">{t('title')}</h2>
      {features.map((feature, index) => (
        <motion.div
          key={feature.title}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.4 + index * 0.1 }}
        >
          <FeatureItem {...feature} />
        </motion.div>
      ))}
    </motion.div>
  );
}

// =================== FILE: src/app/[locale]/_components/LandingClient.tsx ===================

"use client";

import { useEffect, useState } from 'react';

// Importem les dues vistes que podem mostrar
import { CountdownView } from './CountdownView'; // Aquest serà el teu component de compte enrere
import { MainLandingView } from './MainLandingView'; // Aquest és el nou component professional

// Definim la data de llançament
const LAUNCH_DATE = new Date("Jan 1, 2024 00:00:00");

export function LandingClient() {
  const [isLaunchTime, setIsLaunchTime] = useState(false);
  
  // Aquest efecte comprova la data només al client
  useEffect(() => {
    if (new Date() > LAUNCH_DATE) {
      setIsLaunchTime(true);
    }
  }, []);

  // Renderitzem una vista o l'altra segons si ha arribat la data de llançament
  if (isLaunchTime) {
    return <MainLandingView />;
  } else {
    // Has de moure el teu codi antic del compte enrere a un nou component 'CountdownView.tsx'
    return <CountdownView />;
  }
}

// =================== FILE: src/app/[locale]/_components/LandingNav.tsx ===================

"use client";

import Link from 'next/link';
import Image from 'next/image';
import { Button } from '@/components/ui/button';
import { LanguageSwitcher } from '@/components/LanguageSwitcher';
import { ThemeSwitcher } from '@/components/ThemeSwitcher';
import { useTranslations } from 'next-intl';
import { motion } from 'framer-motion';

export function LandingNav() {
  const t = useTranslations('LandingNav');

  return (
    <motion.nav 
      initial={{ y: -100 }}
      animate={{ y: 0 }}
      transition={{ duration: 0.5, ease: 'easeOut' }}
      className="fixed top-0 left-0 right-0 z-50 p-4 flex justify-between items-center bg-background/50 backdrop-blur-lg border-b border-white/10"
    >
      <Link href="/" className="flex items-center gap-2">
        <Image src="/android-chrome-192x192.png" alt="Logo de Ribotflow" width={32} height={32} />
        <span className="font-bold text-lg hidden sm:block text-foreground">Ribotflow</span>
      </Link>
      <div className="flex items-center gap-2">
        <LanguageSwitcher />
        <ThemeSwitcher />
        <Button asChild variant="ghost">
          <Link href="/login">{t('login')}</Link>
        </Button>
        <Button asChild className="hidden sm:inline-flex bg-gradient-to-r from-green-400 to-cyan-400 text-black font-bold hover:scale-105 transition-transform">
          <Link href="/signup">{t('signup')}</Link>
        </Button>
      </div>
    </motion.nav>
  );
}

// =================== FILE: src/app/[locale]/_components/MainLandingView.tsx ===================

"use client";

import { LandingNav } from './LandingNav';
import { FeaturesPanel } from './FeaturesPanel';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import { useTranslations } from 'next-intl';
import { motion } from 'framer-motion';

export function MainLandingView() {
    const t = useTranslations('MainLandingView');

    return (
        <div className="bg-background text-foreground min-h-screen overflow-x-hidden">
            <LandingNav />
            
            <main className="container mx-auto px-4 pt-40 pb-20">
                <div className="grid lg:grid-cols-2 gap-20 items-center">
                    {/* Columna Esquerra: Text i CTA */}
                    <motion.div
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.6, ease: 'easeOut' }}
                    >
                        <h1 className="text-4xl md:text-6xl font-black tracking-tighter !leading-[1.1] mb-6">
                            {t('title')}
                        </h1>
                        <p className="text-lg md:text-xl text-muted-foreground max-w-xl mb-10">
                            {t('subtitle')}
                        </p>
                        <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                            <Button asChild size="lg" className="bg-gradient-to-r from-green-400 to-cyan-400 text-black font-bold text-lg py-7 px-10 hover:opacity-90 transition-opacity rounded-full">
                                <Link href="/signup">{t('ctaButton')}</Link>
                            </Button>
                        </motion.div>
                    </motion.div>
                    
                    {/* Columna Dreta: Panell de Funcions */}
                    <div className="hidden lg:block">
                        <FeaturesPanel />
                    </div>
                </div>
            </main>
        </div>
    );
}

// =================== FILE: src/app/[locale]/_components/ParticleBackground.tsx ===================

"use client";

import { useEffect, useRef } from 'react';

export function ParticleBackground() {
  const canvasRef = useRef<HTMLCanvasElement>(null);

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    let animationFrameId: number;
    let particlesArray: Particle[] = [];

    class Particle {
      x: number;
      y: number;
      directionX: number;
      directionY: number;
      size: number;
      color: string;

      constructor(x: number, y: number, dX: number, dY: number, size: number, color: string) {
        this.x = x;
        this.y = y;
        this.directionX = dX;
        this.directionY = dY;
        this.size = size;
        this.color = color;
      }

      draw(context: CanvasRenderingContext2D) {
        context.beginPath();
        context.arc(this.x, this.y, this.size, 0, Math.PI * 2, false);
        context.fillStyle = '#1a1a1a';
        context.fill();
      }

      update(canvasEl: HTMLCanvasElement, context: CanvasRenderingContext2D) {
        if (this.x > canvasEl.width || this.x < 0) this.directionX = -this.directionX;
        if (this.y > canvasEl.height || this.y < 0) this.directionY = -this.directionY;
        this.x += this.directionX;
        this.y += this.directionY;
        this.draw(context);
      }
    }

    const init = (canvasEl: HTMLCanvasElement) => {
      particlesArray = [];
      const numberOfParticles = (canvasEl.height * canvasEl.width) / 9000;
      for (let i = 0; i < numberOfParticles * 0.5; i++) {
        const size = (Math.random() * 2) + 1;
        const x = Math.random() * (canvasEl.width - size * 2) + size * 2;
        const y = Math.random() * (canvasEl.height - size * 2) + size * 2;
        const dX = (Math.random() * 0.4) - 0.2;
        const dY = (Math.random() * 0.4) - 0.2;
        particlesArray.push(new Particle(x, y, dX, dY, size, '#1a1a1a'));
      }
    };

    const connect = (canvasEl: HTMLCanvasElement, context: CanvasRenderingContext2D) => {
      for (let a = 0; a < particlesArray.length; a++) {
        for (let b = a; b < particlesArray.length; b++) {
          const distance = ((particlesArray[a].x - particlesArray[b].x) ** 2) + ((particlesArray[a].y - particlesArray[b].y) ** 2);
          if (distance < (canvasEl.width / 8) * (canvasEl.height / 8)) {
            const opacityValue = 1 - (distance / 20000);
            context.strokeStyle = `rgba(102, 102, 102, ${opacityValue})`;
            context.lineWidth = 1;
            context.beginPath();
            context.moveTo(particlesArray[a].x, particlesArray[a].y);
            context.lineTo(particlesArray[b].x, particlesArray[b].y);
            context.stroke();
          }
        }
      }
    };

    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      particlesArray.forEach(p => p.update(canvas, ctx));
      connect(canvas, ctx);
      animationFrameId = requestAnimationFrame(animate);
    };

    const resizeCanvas = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      init(canvas);
    };

    window.addEventListener('resize', resizeCanvas);
    resizeCanvas();
    animate();

    return () => {
      window.removeEventListener('resize', resizeCanvas);
      cancelAnimationFrame(animationFrameId);
    };
  }, []);

  return <canvas ref={canvasRef} className="fixed top-0 left-0 w-full h-full z-0 opacity-25" />;
}


// =================== FILE: src/components/chatbot/Chatbot.tsx ===================

"use client";

import { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Bot, Send, User, Loader2, X } from 'lucide-react';
import { useNavigationStore } from '@/stores/navigationStore';

export function Chatbot() {
    const [messages, setMessages] = useState<{ id: string; role: 'user' | 'assistant'; content: string }[]>([]);
    const [input, setInput] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const chatContainerRef = useRef<HTMLDivElement>(null);
    const { toggleChatbot } = useNavigationStore();

    useEffect(() => {
        if (chatContainerRef.current) {
            chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
        }
    }, [messages]);

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        if (!input.trim()) return;

        const userMessage = { id: crypto.randomUUID(), role: 'user' as const, content: input };
        setMessages(prev => [
            ...prev,
            userMessage,
            { id: crypto.randomUUID(), role: 'assistant', content: '' }
        ]);
        setIsLoading(true);
        const question = input;
        setInput('');

        try {
            const response = await fetch('/api/chatbot', {
                method: 'POST',
                body: JSON.stringify({ question }),
            });

            if (!response.ok || !response.body) throw new Error("Error en la resposta del servidor.");

            const reader = response.body.getReader();
            const decoder = new TextDecoder();

            while (true) {
                const { done, value } = await reader.read();
                if (done) break;

                const chunk = decoder.decode(value);
                setMessages(prev => {
                    const newMessages = [...prev];
                    newMessages[newMessages.length - 1].content += chunk;
                    return newMessages;
                });
            }
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        } catch (error) {
            setMessages(prev => {
                const newMessages = [...prev];
                newMessages[newMessages.length - 1].content = "Hi ha hagut un error. Si us plau, intenta-ho de nou.";
                return newMessages;
            });
        } finally {
            setIsLoading(false);
        }
    };

    function handleInputChange(event: React.ChangeEvent<HTMLInputElement>): void {
        setInput(event.target.value);
    }

    return (
        <div className="fixed bottom-4 right-4 w-96 h-[600px] bg-card border rounded-lg shadow-lg flex flex-col">
            <div className="p-4 border-b flex items-center justify-between">
                <div className="flex items-center gap-3">
                    <Bot className="w-6 h-6 text-primary" />
                    <h2 className="font-semibold">Assistent d'IA</h2>
                </div>
                <Button variant="ghost" size="icon" onClick={toggleChatbot} className="h-8 w-8">
                    <X className="w-4 h-4" />
                </Button>
            </div>
            <div ref={chatContainerRef} className="flex-1 p-4 overflow-y-auto space-y-4">
                {messages.map((msg) => (
                    <div key={msg.id} className={`flex gap-3 ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                        {msg.role === 'assistant' && <Bot className="w-6 h-6 flex-shrink-0" />}
                        <div className={`p-3 rounded-lg max-w-xs whitespace-pre-wrap ${msg.role === 'user' ? 'bg-primary text-primary-foreground' : 'bg-muted'}`}>
                            {msg.content}
                        </div>
                        {msg.role === 'user' && <User className="w-6 h-6 flex-shrink-0" />}
                    </div>
                ))}
                {isLoading && (
                    <div className="flex justify-start gap-3">
                        <Bot className="w-6 h-6 flex-shrink-0" />
                        <div className="p-3 rounded-lg bg-muted flex items-center justify-center">
                            <Loader2 className="w-5 h-5 animate-spin" />
                        </div>
                    </div>
                )}
            </div>
            <form onSubmit={handleSubmit} className="p-4 border-t flex gap-2">
                <Input
                    value={input}
                    onChange={handleInputChange}
                    placeholder="Fes una pregunta..."
                    disabled={isLoading}
                />
                <Button type="submit" disabled={isLoading || !input.trim()}>
                    <Send className="w-4 h-4" />
                </Button>
            </form>
        </div>
    );
}

// =================== FILE: src/components/features/contactes/ContactSelector.tsx ===================

// /src/components/features/contactes/ContactSelector.tsx (Refactoritzat)
"use client";

import { FC, useState } from 'react';
import { useTranslations } from 'next-intl';
import { Button } from '@/components/ui/button';
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from "@/components/ui/command";
import { Check, ChevronsUpDown } from 'lucide-react';
import { cn } from "@/lib/utils/utils";
// ✅ 1. Importem el tipus directament des de la definició de la base de dades.
import { type Database } from '@/types/supabase';

// ✅ 2. Definim el tipus Contact només amb les propietats que aquest component necessita.
type Contact = Pick<Database['public']['Tables']['contacts']['Row'], 'id' | 'nom'>;

interface Props {
    contacts: Contact[];
    // ✅ 3. L'ID seleccionat ara pot ser un número o null.
    selectedId: number | null;
    onSelect: (contactId: number | null) => void;
}

export const ContactSelector: FC<Props> = ({ contacts, selectedId, onSelect }) => {
    const t = useTranslations('OpportunityDialog');
    const [open, setOpen] = useState(false);

    // La lògica de trobar el contacte seleccionat funciona igual.
    const selectedContact = contacts.find(c => c.id === selectedId);

    return (
        <Popover open={open} onOpenChange={setOpen}>
            <PopoverTrigger asChild>
                <Button variant="outline" role="combobox" className="w-full justify-between">
                    {selectedContact ? selectedContact.nom : t('selectContactPlaceholder')}
                    <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                </Button>
            </PopoverTrigger>
            <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
                <Command>
                    <CommandInput placeholder={t('searchContactPlaceholder')} />
                    <CommandList>
                        <CommandEmpty>{t('noContactFound')}</CommandEmpty>
                        <CommandGroup>
                            {/* Afegim una opció per desseleccionar */}
                            <CommandItem onSelect={() => {
                                onSelect(null);
                                setOpen(false);
                            }}>
                                <Check className={cn("mr-2 h-4 w-4", selectedId === null ? "opacity-100" : "opacity-0")} />
                                {t('noContact')}
                            </CommandItem>
                            {contacts.map(contact => (
                                <CommandItem key={contact.id} value={contact.nom || ''} onSelect={() => {
                                    // ✅ 4. Passem l'ID numèric.
                                    onSelect(contact.id);
                                    setOpen(false);
                                }}>
                                    <Check className={cn("mr-2 h-4 w-4", selectedId === contact.id ? "opacity-100" : "opacity-0")} />
                                    {contact.nom}
                                </CommandItem>
                            ))}
                        </CommandGroup>
                    </CommandList>
                </Command>
            </PopoverContent>
        </Popover>
    );
};

// =================== FILE: src/components/features/tasks/TaskDetailView.tsx ===================

'use client';

import { useState, useEffect, useCallback } from 'react';
import { EnrichedTask } from './TaskDialogManager';
import { DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Checkbox } from '@/components/ui/checkbox';
import { cn } from "@/lib/utils/utils";
import { format } from "date-fns";
import { es } from "date-fns/locale";
import { Calendar, Flag, User, CheckCircle2, Trash2, RotateCcw, Pencil, Contact, Building } from "lucide-react";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog";
import { useTranslations } from "next-intl";
import { deleteTask, updateSimpleTask } from '@/app/actions/tasks/actions';
import { toast } from 'sonner';
import { priorityStyles, TaskPriority } from '@/config/styles/task';
import parse, { domToReact, Element, DOMNode } from 'html-react-parser';

interface TaskDetailViewProps {
    task: EnrichedTask;
    onSetEditMode: () => void;
    // ✅ CANVI 1: Actualitzem la definició per coincidir amb la del pare.
    onTaskMutation: (options?: { closeDialog?: boolean }) => void;
    onClose: () => void;
}

function DetailItem({ icon: Icon, label, children }: { icon: React.ElementType, label: string, children: React.ReactNode }) {
    if (!children) return null;
    return (
        <div className="flex items-start gap-3">
            <Icon className="w-5 h-5 text-muted-foreground mt-0.5 flex-shrink-0" />
            <div className="flex flex-col">
                <span className="text-sm text-muted-foreground">{label}</span>
                <span className="font-semibold">{children}</span>
            </div>
        </div>
    );
}

export function TaskDetailView({ task, onSetEditMode, onTaskMutation, onClose }: TaskDetailViewProps) {
    const t = useTranslations('DashboardClient.taskActions');
    const t2 = useTranslations('DashboardClient.taskDetails');

    const [currentDescription, setCurrentDescription] = useState(task.description || '');

    useEffect(() => {
        setCurrentDescription(task.description || '');
    }, [task.description]);

    const handleToggleTaskItem = useCallback(async (itemIndex: number) => {
        if (!currentDescription) return;

        const parser = new DOMParser();
        const doc = parser.parseFromString(currentDescription, 'text/html');
        const taskItems = doc.querySelectorAll('li[data-type="taskItem"]');
        
        if (itemIndex < taskItems.length) {
            const item = taskItems[itemIndex];
            const isChecked = item.getAttribute('data-checked') === 'true';
            item.setAttribute('data-checked', isChecked ? 'false' : 'true');

            const newHtml = doc.body.innerHTML;
            setCurrentDescription(newHtml);
            
            const { error } = await updateSimpleTask(task.id, { description: newHtml });

            if (error) {
                toast.error("No s'ha pogut actualitzar la llista de tasques.");
                setCurrentDescription(task.description || ''); 
            } else {
                // ✅ CANVI 2: Cridem a la funció amb l'opció per NO tancar el diàleg.
                onTaskMutation({ closeDialog: false });
            }
        }
    }, [task.id, currentDescription, onTaskMutation, task.description]);

    let taskItemIndex = -1;
    const options = {
      replace: (domNode: DOMNode) => {
        if (domNode instanceof Element && domNode.attribs && domNode.attribs['data-type'] === 'taskItem') {
            taskItemIndex++;
            const currentIndex = taskItemIndex;
            const isChecked = domNode.attribs['data-checked'] === 'true';
            
            const contentDiv = domNode.children.find(
                (child): child is Element => child instanceof Element && child.name === 'div'
            );
            
            return (
                <div className="flex items-center gap-3 my-2 first:mt-0 last:mb-0">
                    <Checkbox
                        checked={isChecked}
                        onCheckedChange={() => handleToggleTaskItem(currentIndex)}
                        className="translate-y-[-2px]"
                    />
                    <div className={cn(isChecked && "line-through text-muted-foreground")}>
                        {contentDiv && domToReact(contentDiv.children as DOMNode[], options)}
                    </div>
                </div>
            );
        }
      }
    };

    const handleToggle = async () => {
        const isCompleting = !task.is_completed;
        const updateData = {
            is_completed: isCompleting,
            finish_date: isCompleting ? new Date().toISOString() : null,
        };
        const { error } = await updateSimpleTask(task.id, updateData);
        if (error) {
            toast.error(t('toast.errorTitle'), { description: "No s'ha pogut actualitzar la tasca." });
        } else {
            toast.success("Estat de la tasca actualitzat.");
            // ✅ CANVI 3: També aquí, indiquem que no es tanqui el diàleg.
            onTaskMutation({ closeDialog: false });
        }
    };

    const handleDelete = async () => {
        const { error } = await deleteTask(task.id);
        if (error) {
            const errorMessage = typeof error === 'object' && error !== null && 'message' in error ? (error as { message: string }).message : 'Error desconegut';
            toast.error(t('toast.deleteErrorTitle'), { description: errorMessage });
        } else {
            toast.success(t('toast.deleteSuccessTitle'));
            // Aquí no especifiquem res, així que el pare farà l'acció per defecte (tancar).
            onTaskMutation(); 
            onClose(); // Doble seguretat per tancar en cas d'eliminació.
        }
    };

    return (
        <>
            <DialogHeader className="pr-16 pb-2">
                <DialogTitle className="text-2xl font-bold leading-tight">{task.title}</DialogTitle>
                {task.priority && (
                    <Badge variant="outline" className={cn("absolute top-6 right-6 text-sm py-1 px-3", priorityStyles[task.priority as TaskPriority].badgeClasses)}>
                        <Flag className="w-3.5 h-3.5 mr-2" />
                        {task.priority}
                    </Badge>
                )}
            </DialogHeader>

            <div className="py-4 space-y-6 max-h-[60vh] overflow-y-auto pr-2">
                {currentDescription && (
                    <div className='prose prose-sm dark:prose-invert text-muted-foreground max-w-none'>
                        {parse(currentDescription, options)}
                    </div>
                )}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-6 text-sm border-t pt-6">
                    <DetailItem icon={Calendar} label={t2('limitDay')}>
                        {task.due_date && format(new Date(task.due_date), "EEEE, d 'de' MMMM 'de' yyyy 'a les' HH:mm", { locale: es })}
                    </DetailItem>
                    <DetailItem icon={User} label={t2('assignedTo')}>
                        {task.profiles?.full_name || 'Sense assignar'}
                    </DetailItem>
                    <DetailItem icon={Contact} label="Contacte">
                        {task.contacts?.nom}
                    </DetailItem>
                    <DetailItem icon={Building} label="Departament">
                        {task.departments?.name}
                    </DetailItem>
                </div>
            </div>

            <DialogFooter className="flex-col sm:flex-row sm:justify-between gap-2 border-t pt-4">
                  <div>
                      <Button variant="ghost" onClick={onSetEditMode}>
                          <Pencil className="w-4 h-4 mr-2" />
                          Editar
                      </Button>
                  </div>
                  <div className='flex items-center gap-2'>
                      <AlertDialog>
                          <AlertDialogTrigger asChild>
                              <Button variant="ghost" size="icon" className="text-destructive hover:text-destructive hover:bg-destructive/10">
                                  <Trash2 className="w-4 h-4" />
                              </Button>
                          </AlertDialogTrigger>
                          <AlertDialogContent>
                              <AlertDialogHeader>
                                  <AlertDialogTitle>{t('deleteConfirmTitle')}</AlertDialogTitle>
                                  <AlertDialogDescription>{t('deleteConfirmDescription')}</AlertDialogDescription>
                              </AlertDialogHeader>
                              <AlertDialogFooter>
                                  <AlertDialogCancel>{t2('cancelButton')}</AlertDialogCancel>
                                  <AlertDialogAction onClick={handleDelete} className="bg-destructive text-destructive-foreground hover:bg-destructive/90">
                                      {t('deleteConfirmAction')}
                                  </AlertDialogAction>
                              </AlertDialogFooter>
                          </AlertDialogContent>
                      </AlertDialog>
                      {task.is_completed ? (
                          <Button variant="outline" onClick={handleToggle}>
                              <RotateCcw className="w-4 h-4 mr-2" />
                              {t2('markAsPendingButton')}
                          </Button>
                      ) : (
                          <Button onClick={handleToggle} className="w-full sm:w-auto bg-green-600 hover:bg-green-700">
                              <CheckCircle2 className="w-4 h-4 mr-2" />
                              {t2('markAsCompletedButton')}
                          </Button>
                      )}
                  </div>
            </DialogFooter>
        </>
    );
}

// =================== FILE: src/components/features/tasks/TaskDialogManager.tsx ===================

'use client';

import { useState, useEffect } from 'react';
import { TaskDetailView } from './TaskDetailView';
import { TaskFormView } from './TaskFormView';
import { Dialog, DialogContent } from '@/components/ui/dialog';
import { Tables } from '@/types/supabase';

// Aquest serà el nostre nou tipus de tasca universal
export type EnrichedTask = Tables<'tasks'> & {
    contacts: { id: number; nom: string } | null;
    profiles: { 
        id: string; 
        full_name: string | null; 
        avatar_url: string | null;
    } | null;
    departments: { id: number; name: string } | null;
};

interface TaskDialogManagerProps {
    task: EnrichedTask | null;
    open: boolean;
    onOpenChange: (open: boolean) => void;
    // Llistes de dades necessàries per al formulari
    contacts: Tables<'contacts'>[];
    departments: Tables<'departments'>[];
    teamMembers: { id: string; full_name: string | null }[];
    
    // ✅ CANVI CLAU: Modifiquem la definició de onTaskMutation.
    // Ara pot rebre un objecte opcional amb instruccions.
    onTaskMutation: (options?: { closeDialog?: boolean }) => void;
    
    initialDate?: Date;
}

export function TaskDialogManager({
    task,
    open,
    onOpenChange,
    contacts,
    departments,
    teamMembers,
    onTaskMutation,
    initialDate,
}: TaskDialogManagerProps) {
    // 'isEditing' controla si mostrem la vista de detalls o el formulari
    const [isEditing, setIsEditing] = useState(false);

    // Cada cop que obrim un nou diàleg, resetejem al mode vista (si la tasca ja existeix)
    useEffect(() => {
        if (open) {
            // Si no hi ha tasca (és nova), directament mostrem el formulari
            setIsEditing(!task);
        }
    }, [open, task]);

    if (!open) return null;

    return (
        <Dialog open={open} onOpenChange={onOpenChange}>
            <DialogContent className="sm:max-w-3xl">
                {isEditing ? (
                    <TaskFormView
                        task={task}
                        onSetViewMode={() => setIsEditing(false)}
                        contacts={contacts}
                        departments={departments}
                        teamMembers={teamMembers}
                        // La funció modificada es passa al formulari
                        onTaskMutation={onTaskMutation}
                        initialDate={initialDate}
                    />
                ) : (
                    <TaskDetailView
                        task={task!} // Si no editem, la tasca sempre existeix
                        onSetEditMode={() => setIsEditing(true)}
                        // La funció modificada es passa a la vista de detall
                        onTaskMutation={onTaskMutation}
                        onClose={() => onOpenChange(false)}
                    />
                )}
            </DialogContent>
        </Dialog>
    );
}

// =================== FILE: src/components/features/tasks/TaskFormView.tsx ===================

// TaskFormView.tsx - Versió actualitzada

'use client';

import { useState, useTransition, FormEvent } from 'react';
import { DialogHeader, DialogTitle, DialogFooter, DialogClose } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import EditorWysiwyg from '@/components/ui/EditorWysiwyg';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from '@/components/ui/command';
import { Calendar } from '@/components/ui/calendar';
import { createTask, updateTask } from '@/app/actions/tasks/actions';
import { EnrichedTask } from './TaskDialogManager';
import { toast } from 'sonner';
import { Tables } from '@/types/supabase';
import { ArrowLeft, AlignLeft, Calendar as CalendarIcon, Flag, ListTodo, User, Check, ChevronsUpDown, Building, Clock, Loader2 } from 'lucide-react';
import { format } from 'date-fns';
import { es } from 'date-fns/locale';
import { cn } from '@/lib/utils/utils';

interface TaskFormViewProps {
    task: EnrichedTask | null;
    onSetViewMode: () => void;
    // ✅ CANVI: Actualitzem la definició per coincidir amb la nova lògica.
    onTaskMutation: (options?: { closeDialog?: boolean }) => void;
    contacts: Tables<'contacts'>[];
    departments: Tables<'departments'>[];
    teamMembers: { id: string; full_name: string | null }[];
    initialDate?: Date;
}

function FormActions({ isEditing, onSetViewMode, isPending }: { isEditing: boolean, onSetViewMode: () => void, isPending: boolean }) {
    return (
        <DialogFooter className="sm:justify-between mt-4 pt-4 border-t">
            <div>
                {isEditing && (
                    <Button type="button" variant="ghost" onClick={onSetViewMode} disabled={isPending}>
                        <ArrowLeft className="w-4 h-4 mr-2" />
                        Tornar a la vista
                    </Button>
                )}
            </div>
            <div className="flex gap-2">
                <DialogClose asChild>
                    <Button type="button" variant="secondary" disabled={isPending}>Cancel·lar</Button>
                </DialogClose>
                <Button type="submit" disabled={isPending}>
                    {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                    {isPending
                        ? (isEditing ? 'Guardant...' : 'Creant...')
                        : (isEditing ? 'Guardar Canvis' : 'Crear Tasca')}
                </Button>
            </div>
        </DialogFooter>
    );
}

export function TaskFormView({ task, onSetViewMode, onTaskMutation, contacts, departments, teamMembers, initialDate }: TaskFormViewProps) {
    const [isPending, startTransition] = useTransition();

    // Estats locals
    const getInitialDate = () => initialDate || (task?.due_date ? new Date(task.due_date) : new Date());
    const [dueDate, setDueDate] = useState<Date | undefined>(getInitialDate());
    const [contactComboboxOpen, setContactComboboxOpen] = useState(false);
    const [selectedContactId, setSelectedContactId] = useState<string | null>(task?.contact_id?.toString() ?? null);
    const [teamMemberComboboxOpen, setTeamMemberComboboxOpen] = useState(false);
    const [assignedUserId, setAssignedUserId] = useState<string | null>(task?.user_asign_id ?? null);
    const [descriptionContent, setDescriptionContent] = useState<string>(task?.description ?? '');

    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        const formData = new FormData(event.currentTarget);

        formData.set('description', descriptionContent);

        const action = task ? updateTask : createTask;

        startTransition(async () => {
            const initialState = { success: undefined, error: undefined };
            const result = await action(initialState, formData);

            if (result.error) {
                const errorValues = Object.values(result.error).flat().join('\n');
                toast.error('Hi ha hagut un error', { description: errorValues });
            } else if (result.success) {
                toast.success(task ? 'Tasca actualitzada!' : 'Tasca creada!');
                
                // ✅ CORRECTE: Cridem la funció sense paràmetres.
                // Això farà que el component pare executi l'acció per defecte (tancar el diàleg).
                onTaskMutation();
            }
        });
    };

    return (
        <>
            <DialogHeader>
                <DialogTitle className="text-2xl">{task ? 'Editar Tasca' : 'Crear Nova Tasca'}</DialogTitle>
            </DialogHeader>

            <form onSubmit={handleSubmit}>
                {task && <input type="hidden" name="taskId" value={task.id} />}

                <div className="grid gap-4 py-4 max-h-[60vh] overflow-y-auto pr-4">
                    {/* Títol */}
                    <div className="space-y-2">
                        <Label htmlFor="title" className="flex items-center gap-2"><ListTodo className="w-4 h-4" />Títol</Label>
                        <Input id="title" name="title" defaultValue={task?.title ?? ''} placeholder="Ex: Preparar informe trimestral" required />
                    </div>

                    {/* Descripció */}
                    <div className="space-y-2">
                        <Label htmlFor="description" className="flex items-center gap-2"><AlignLeft className="w-4 h-4" />Descripció</Label>
                        <EditorWysiwyg
                            id="description"
                            name="description"
                            defaultValue={descriptionContent}
                            onChange={(html) => setDescriptionContent(html)}
                        />
                    </div>

                    {/* Resta dels camps del formulari (sense canvis) */}
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div className="space-y-2">
                            <Label className="flex items-center gap-2"><CalendarIcon className="w-4 h-4" />Data de venciment</Label>
                            <Popover>
                                <PopoverTrigger asChild><Button variant={"outline"} className={cn("w-full justify-start text-left font-normal", !dueDate && "text-muted-foreground")}>{dueDate ? format(dueDate, "PPP", { locale: es }) : <span>Selecciona una data</span>}</Button></PopoverTrigger>
                                <PopoverContent className="w-auto p-0"><Calendar mode="single" selected={dueDate} onSelect={setDueDate} autoFocus /></PopoverContent>
                            </Popover>
                            <input type="hidden" name="due_date" value={dueDate ? dueDate.toISOString() : ''} />
                        </div>
                        <div className="space-y-2">
                            <Label htmlFor="priority" className="flex items-center gap-2"><Flag className="w-4 h-4" />Prioritat</Label>
                            <Select name="priority" defaultValue={task?.priority ?? 'Mitjana'}>
                                <SelectTrigger><SelectValue placeholder="Selecciona una prioritat" /></SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="Baixa">Baixa</SelectItem>
                                    <SelectItem value="Mitjana">Mitjana</SelectItem>
                                    <SelectItem value="Alta">Alta</SelectItem>
                                </SelectContent>
                            </Select>
                        </div>
                        <div className="space-y-2">
                            <Label htmlFor="duration" className="flex items-center gap-2"><Clock className="w-4 h-4" />Duració</Label>
                            <Input id="duration" name="duration" type="number" step="0.01" placeholder="Hores (ex: 1.25)" defaultValue={task?.duration ?? ''} />
                        </div>
                    </div>
                    <div className="grid grid-cols-3 gap-4">
                        <div className="col-span-2 space-y-2">
                            <Label className="flex items-center gap-2"><User className="w-4 h-4" />Assignar a</Label>
                            <Popover open={teamMemberComboboxOpen} onOpenChange={setTeamMemberComboboxOpen}>
                                <PopoverTrigger asChild><Button variant="outline" role="combobox" className="w-full justify-between font-normal">{assignedUserId ? teamMembers.find(m => m.id === assignedUserId)?.full_name : "Selecciona un membre"}<ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" /></Button></PopoverTrigger>
                                <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
                                    <Command>
                                        <CommandInput placeholder="Cercar membre..." />
                                        <CommandList><CommandEmpty>No s'ha trobat cap membre.</CommandEmpty>
                                            <CommandGroup>
                                                <CommandItem onSelect={() => { setAssignedUserId(null); setTeamMemberComboboxOpen(false); }}><Check className={cn("mr-2 h-4 w-4", !assignedUserId ? "opacity-100" : "opacity-0")} />Sense assignar</CommandItem>
                                                {teamMembers.map((user) => (<CommandItem key={user.id} value={user.full_name ?? ''} onSelect={() => { setAssignedUserId(user.id); setTeamMemberComboboxOpen(false); }}><Check className={cn("mr-2 h-4 w-4", assignedUserId === user.id ? "opacity-100" : "opacity-0")} />{user.full_name}</CommandItem>))}
                                            </CommandGroup>
                                        </CommandList>
                                    </Command>
                                </PopoverContent>
                                <input type="hidden" name="user_asign_id" value={assignedUserId ?? 'none'} />
                            </Popover>
                        </div>
                        <div className="col-span-1 space-y-2">
                            <Label htmlFor="assignment_date" className="flex items-center gap-2"><CalendarIcon className="w-4 h-4" />Data assignació</Label>
                            <Input id="assignment_date" name="assignment_date" type="text" value={task?.asigned_date ? format(new Date(task.asigned_date), "dd/MM/yyyy") : '-'} readOnly className="bg-muted/50 cursor-not-allowed" />
                        </div>
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="space-y-2">
                            <Label className="flex items-center gap-2"><User className="w-4 h-4" />Contacte associat</Label>
                            <Popover open={contactComboboxOpen} onOpenChange={setContactComboboxOpen}>
                                <PopoverTrigger asChild><Button variant="outline" role="combobox" className="w-full justify-between font-normal">{selectedContactId ? contacts.find(c => c.id.toString() === selectedContactId)?.nom : "Selecciona un contacte"}<ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" /></Button></PopoverTrigger>
                                <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
                                    <Command>
                                        <CommandInput placeholder="Cercar contacte..." />
                                        <CommandList><CommandEmpty>No s'ha trobat cap contacte.</CommandEmpty>
                                            <CommandGroup>
                                                <CommandItem onSelect={() => { setSelectedContactId(null); setContactComboboxOpen(false); }}><Check className={cn("mr-2 h-4 w-4", !selectedContactId ? "opacity-100" : "opacity-0")} />Cap</CommandItem>
                                                {contacts.map((contact) => (<CommandItem key={contact.id} value={contact.nom ?? ''} onSelect={() => { setSelectedContactId(contact.id.toString()); setContactComboboxOpen(false); }}><Check className={cn("mr-2 h-4 w-4", selectedContactId === contact.id.toString() ? "opacity-100" : "opacity-0")} />{contact.nom}</CommandItem>))}
                                            </CommandGroup>
                                        </CommandList>
                                    </Command>
                                </PopoverContent>
                                <input type="hidden" name="contact_id" value={selectedContactId ?? 'none'} />
                            </Popover>
                        </div>
                        <div className="space-y-2">
                            <Label htmlFor="department_id" className="flex items-center gap-2"><Building className="w-4 h-4" />Departament</Label>
                            <Select name="department_id" defaultValue={task?.department_id?.toString() ?? 'none'}>
                                <SelectTrigger><SelectValue placeholder="Selecciona un departament" /></SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="none">Cap</SelectItem>
                                    {departments.map(dep => (<SelectItem key={dep.id} value={dep.id.toString()}>{dep.name}</SelectItem>))}
                                </SelectContent>
                            </Select>
                        </div>
                    </div>
                </div>

                <FormActions isEditing={!!task} onSetViewMode={onSetViewMode} isPending={isPending} />
            </form>
        </>
    );
}

// =================== FILE: src/components/LanguageSwitcher.tsx ===================

// src/components/LanguageSwitcher.tsx (CORREGIT)

"use client";

import { useLocale, useTranslations } from 'next-intl';
import { usePathname, useRouter } from 'next/navigation';
import { useTransition } from 'react';
import { Button } from '@/components/ui/button';

import { cn } from '@/lib/utils/utils';
// 🚀 NOU: Importem la Server Action per a persistència forçada
import { setLocalePersistence } from '@/app/actions/localeActions'; 
// Assumim que la llista d'idiomes es pot extreure o definir aquí si no és possible importar-la directament
// const languages = [{ code: 'ca', label: 'Català' }, { code: 'es', label: 'Espanyol' }, { code: 'en', label: 'Anglès' }];

export function LanguageSwitcher() {
  const t = useTranslations('LanguageSwitcher');
  const [isPending, startTransition] = useTransition();
  const locale = useLocale();
  const router = useRouter();
  const pathname = usePathname();
  
  const languages = [
    { code: 'ca', label: t('catalan') },
    { code: 'es', label: t('spanish') },
    { code: 'en', label: t('english') },
  ];
  
  const handleLanguageChange = (nextLocale: string) => {
    if (locale === nextLocale || isPending) return;
    
    startTransition(async () => {
      // 🔑 PAS CLAU: Forcem l'establiment de la cookie persistent.
      await setLocalePersistence(nextLocale);
      
      // Després de fixar la cookie, naveguem a la nova ruta
      const newPath = pathname.replace(`/${locale}`, `/${nextLocale}`);
      router.replace(newPath);
    });
  };

  return (
    <div className="flex space-x-1 p-1 bg-muted rounded-lg">
      {languages.map((lang) => (
        <Button 
          key={lang.code}
          onClick={() => handleLanguageChange(lang.code)} 
          disabled={isPending}
          className={cn(
            "text-xs px-2 py-1 h-auto transition-all duration-300",
            locale === lang.code 
              ? 'bg-gradient-to-r from-green-400 to-cyan-400 text-black font-semibold shadow-md'
              : 'bg-transparent text-muted-foreground hover:bg-background/50' 
          )}
        >
          {isPending && locale !== lang.code }
          {lang.label}
        </Button>
      ))}
    </div>
  );
}

// =================== FILE: src/components/PWARegistration.tsx ===================

// src/components/PWARegistration.tsx
'use client';

import { useEffect } from 'react';

export function PWARegistration() {
  useEffect(() => {
    // Aquesta lògica només s'executa un cop el component s'ha muntat al client.
    // Comprovem si el navegador suporta Service Workers.
    if ('serviceWorker' in navigator) {
      window.addEventListener('load', () => {
        navigator.serviceWorker
          .register('/sw.js') // Registrem el nostre fitxer sw.js
          .then((registration) => {
            console.log('SW registrat amb èxit:', registration.scope);
          })
          .catch((error) => {
            console.error('Error durant el registre del SW:', error);
          });
      });
    }
  }, []); // L'array buit assegura que l'efecte només s'executa un cop.

  // Aquest component no renderitza res a la UI.
  return null;
}

// =================== FILE: src/components/shared/AccessDenied.tsx ===================

// src/components/shared/AccessDenied.tsx (exemple)
import { useTranslations } from 'next-intl';

// ✅ Defineix les props que el teu component accepta
interface AccessDeniedProps {
  message?: string; // Fes-la opcional amb '?'
}

export function AccessDenied({ message }: AccessDeniedProps) {
  const t = useTranslations('Errors');

  // Fes servir el missatge personalitzat si existeix, si no, un per defecte.
  const displayMessage = message || t('permissionDenied');

  return (
    <div className="text-center p-8 glass-card">
      <h2 className="text-xl font-bold text-destructive">Accés Denegat</h2>
      <p className="text-muted-foreground">{displayMessage}</p>
    </div>
  );
}

// =================== FILE: src/components/shared/ActivityItem.tsx ===================

/**
 * @file ActivityItem.tsx
 * @summary Component presentacional per a un únic ítem al feed d'activitats.
 */
"use client";

import Link from 'next/link';
import { FC, ElementType } from 'react';

interface ActivityItemProps {
  icon: ElementType;
  tone: { bg: string; text: string };
  title: string;
  meta: string;
  href: string;
}

export const ActivityItem: FC<ActivityItemProps> = ({ icon: Icon, tone, title, meta, href }) => (
  <Link href={href} className="block">
    <div className="flex items-start gap-3">
      <div className={`mt-0.5 rounded-full p-2 ${tone.bg} ${tone.text}`}>
        <Icon className="w-4 h-4" />
      </div>
      <div className="flex-1">
        <p className="text-sm">{title}</p>
        <p className="text-xs text-muted-foreground">{meta}</p>
      </div>
    </div>
  </Link>
);

// =================== FILE: src/components/shared/ColumnToggleButton.tsx ===================

// src/components/shared/ColumnToggleButton.tsx
'use client';

import { SlidersHorizontal } from 'lucide-react';
import { useTranslations } from 'next-intl';

import { Button } from '@/components/ui/button';
import { DropdownMenu, DropdownMenuCheckboxItem, DropdownMenuContent, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import { type ColumnDef } from './GenericDataTable'; // Assumint que el tipus està aquí

interface ColumnToggleButtonProps<TData> {
  allColumns: ColumnDef<TData>[];
  columnVisibility: Record<string, boolean>;
  toggleColumnVisibility: (columnKey: string) => void;
}

export function ColumnToggleButton<TData>({
  allColumns,
  columnVisibility,
  toggleColumnVisibility,
}: ColumnToggleButtonProps<TData>) {
  const t = useTranslations('Shared.table');

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="sm" className="h-9">
          <SlidersHorizontal className="mr-2 h-4 w-4 " />
          {t('view')}
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuLabel>{t('toggleColumns')}</DropdownMenuLabel>
        <DropdownMenuSeparator />
        {allColumns
          // Opcional: Filtrem columnes que no volem que l'usuari pugui amagar (com les accions)
          .filter(column => column.accessorKey !== 'actions_edit')
          .map((column) => {
            const columnKey = column.accessorKey.toString();
            return (
              <DropdownMenuCheckboxItem
                key={columnKey}
                className="capitalize"
                checked={columnVisibility[columnKey] ?? true}
                onCheckedChange={() => toggleColumnVisibility(columnKey)}
              >
                {/* Intentem obtenir el header com a string, si no, fem servir la clau */}
                {typeof column.header === 'string' ? column.header : columnKey}
              </DropdownMenuCheckboxItem>
            );
          })}
      </DropdownMenuContent>
    </DropdownMenu>
  );
}

// =================== FILE: src/components/shared/EmptyState.tsx ===================

import { FC } from 'react';

export const EmptyState: FC<{ message: string }> = ({ message }) => (
    <p className="text-center text-muted-foreground py-8">{message}</p>
);

// =================== FILE: src/components/shared/GenericDataTable.tsx ===================

// src/components/shared/GenericDataTable.tsx
"use client";

import React from 'react';
import { motion } from 'framer-motion';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { Button } from '@/components/ui/button';
import { Loader2, Trash2, ArrowUpDown } from 'lucide-react';
import { cn } from '@/lib/utils/utils';
import { useTranslations } from 'next-intl';

// ✅ Pas 1: Importem els components de paginació i les icones
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
} from "@/components/ui/pagination";
import { ChevronLeftIcon, ChevronRightIcon } from '@radix-ui/react-icons';

export type ColumnDef<TData> = {
    accessorKey: keyof TData | string;
    header: React.ReactNode | string;
    cell: (row: TData) => React.ReactNode;
    enableSorting?: boolean;
    cellClassName?: string;
    headerClassName?: string;
};

// ✅ Pas 2: Afegim les noves propietats de paginació a la interfície
interface GenericDataTableProps<TData extends { id: string | number }> {
    data: TData[];
    columns: ColumnDef<TData>[];
    onSort: (column: string) => void;
    currentSortColumn: string | null;
    currentSortOrder: 'asc' | 'desc' | null;
    isPending: boolean;
    onDelete: () => void;
    deleteItem: TData | null;
    setDeleteItem: (item: TData | null) => void;
    deleteTitleKey: string; 
    deleteDescription: React.ReactNode; 
    emptyStateMessage: string;
    className?: string;
    
    // Noves propietats per a la paginació
    page: number;
    totalPages: number;
    onPageChange: (newPage: number) => void;
}

export function GenericDataTable<TData extends { id: string | number }>({
    data,
    columns,
    onSort,
    currentSortColumn,
    currentSortOrder,
    isPending,
    onDelete,
    deleteItem,
    setDeleteItem,
    deleteTitleKey,
    deleteDescription,
    emptyStateMessage,
    className,
    page,
    totalPages,
    onPageChange,
}: GenericDataTableProps<TData>): React.ReactElement {
    const t = useTranslations('Shared'); 

    // ... (Component intern SortableHeader no canvia)
    const SortableHeader = ({ column }: { column: ColumnDef<TData> }) => {
        const key = column.accessorKey.toString();
        const isCurrentSort = currentSortColumn === key;

        return (
            <TableHead 
                onClick={column.enableSorting ? () => onSort(key) : undefined} 
                className={cn(column.enableSorting ? "cursor-pointer hover:bg-muted/50 transition-colors" : "", column.headerClassName)}
            >
                <div className="flex items-center gap-2">
                    {column.header}
                    {column.enableSorting && (
                        isCurrentSort ? (
                            <span className="text-foreground text-xs">{currentSortOrder === 'asc' ? '▲' : '▼'}</span>
                        ) : (
                            <ArrowUpDown className="w-4 h-4 text-muted-foreground/30" />
                        )
                    )}
                </div>
            </TableHead>
        );
    };

    // ✅ Pas 3: Creem el sub-component de paginació DINS de la taula
    const PaginationControls = () => {
        if (totalPages <= 1) return null;

        const handlePageClick = (e: React.MouseEvent<HTMLAnchorElement>, newPage: number) => {
            e.preventDefault();
            onPageChange(newPage);
        };

        const renderPaginationItems = () => {
            const items = [];
            const maxPagesToShow = 3; 
            const startPage = Math.max(2, page - Math.floor(maxPagesToShow / 2));
            const endPage = Math.min(totalPages - 1, page + Math.floor(maxPagesToShow / 2));

            // Primera pàgina
            items.push(
                <PaginationItem key={1}>
                    <PaginationLink 
                        href="#" 
                        onClick={(e) => handlePageClick(e, 1)}
                        isActive={page === 1}
                    >
                        1
                    </PaginationLink>
                </PaginationItem>
            );

            if (startPage > 2) items.push(<PaginationEllipsis key="start-ellipsis" />);

            // Pàgines del mig
            for (let i = startPage; i <= endPage; i++) {
                items.push(
                    <PaginationItem key={i}>
                        <PaginationLink 
                            href="#" 
                            onClick={(e) => handlePageClick(e, i)}
                            isActive={page === i}
                        >
                            {i}
                        </PaginationLink>
                    </PaginationItem>
                );
            }

            if (endPage < totalPages - 1) items.push(<PaginationEllipsis key="end-ellipsis" />);

            // Última pàgina
            if (totalPages > 1) {
                items.push(
                    <PaginationItem key={totalPages}>
                        <PaginationLink 
                            href="#" 
                            onClick={(e) => handlePageClick(e, totalPages)}
                            isActive={page === totalPages}
                        >
                            {totalPages}
                        </PaginationLink>
                    </PaginationItem>
                );
            }
            return items;
        };

        return (
            <Pagination className="mt-4">
                <PaginationContent>
                    {/* ✅ Pas 4: Botó "Previous" NOMÉS amb fletxa */}
                    <PaginationItem>
                        <PaginationLink
                            href="#"
                            size="icon" // <-- La clau és aquí
                            onClick={(e) => handlePageClick(e, page - 1)}
                            className={page === 1 ? "pointer-events-none opacity-50" : undefined}
                            aria-label={t('pagination.previous') || 'Go to previous page'}
                        >
                            <ChevronLeftIcon className="h-4 w-4" />
                        </PaginationLink>
                    </PaginationItem>
                    
                    {renderPaginationItems()}
                    
                    {/* ✅ Pas 4: Botó "Next" NOMÉS amb fletxa */}
                    <PaginationItem>
                        <PaginationLink
                            href="#"
                            size="icon" // <-- La clau és aquí
                            onClick={(e) => handlePageClick(e, page + 1)}
                            className={page === totalPages ? "pointer-events-none opacity-50" : undefined}
                            aria-label={t('pagination.next') || 'Go to next page'}
                        >
                            <ChevronRightIcon className="h-4 w-4" />
                        </PaginationLink>
                    </PaginationItem>
                </PaginationContent>
            </Pagination>
        );
    };


    return (
        <motion.div 
            initial={{ opacity: 0 }} 
            animate={{ opacity: 1 }} 
            className={cn("relative h-full flex flex-col", className, isPending && "opacity-50 pointer-events-none")} 
        >
            {isPending && (<div className="absolute inset-0 flex items-center justify-center bg-background/50 z-20"><Loader2 className="w-8 h-8 animate-spin" /></div>)}

            {/* Contingut de la Taula (Scrollable Area) */}
            <div className="flex-grow overflow-y-auto bg-card rounded-xl shadow-lg border border-border min-h-0"> 
                <Table className="relative">
                    {/* ... (TableHeader i TableBody no canvien) ... */}
                    <TableHeader className="sticky top-0 bg-card z-10 shadow-sm">
                        <TableRow>
                            {columns.map((column, index) => (<SortableHeader key={index} column={column} />))}
                            <TableHead className="text-right">{t('table.actions')}</TableHead>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        {data.length > 0 ? data.map(row => (
                            <TableRow key={row.id}>
                                {columns.map((column, index) => (
                                    <TableCell key={index} className={cn("py-1", column.cellClassName)}>
                                        {column.cell(row)}
                                    </TableCell>
                                ))}
                                <TableCell className="text-right py-1">
                                    <Button 
                                        variant="ghost" 
                                        size="icon" 
                                        title={t('actions.delete')} 
                                        onClick={() => setDeleteItem(row)} 
                                        disabled={isPending}
                                    >
                                        <Trash2 className="w-4 h-4 text-red-500" />
                                    </Button>
                                </TableCell>
                            </TableRow>
                        )) : (
                            <TableRow>
                                <TableCell colSpan={columns.length + 1} className="text-center h-24">{emptyStateMessage}</TableCell>
                            </TableRow>
                        )}
                    </TableBody>
                </Table>
            </div>
            
            {/* ✅ Pas 5: Renderitzem la paginació al final */}
            <PaginationControls />

            {/* Diàleg d'Eliminació (Sense canvis) */}
            <AlertDialog open={!!deleteItem} onOpenChange={() => setDeleteItem(null)}>
                <AlertDialogContent>
                    <AlertDialogHeader>
                        <AlertDialogTitle>{t(deleteTitleKey)}</AlertDialogTitle>
                        <AlertDialogDescription>
                            {deleteDescription}
                        </AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                        <AlertDialogCancel disabled={isPending}>{t('deleteDialog.cancelButton')}</AlertDialogCancel>
                        <AlertDialogAction onClick={onDelete} className="bg-destructive hover:bg-destructive/90" disabled={isPending}>
                            {isPending && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                            {isPending ? t('deleteDialog.deleting') : t('deleteDialog.confirmButton')}
                        </AlertDialogAction>
                    </AlertDialogFooter>
                </AlertDialogContent>
            </AlertDialog>
        </motion.div>
    );
}

// =================== FILE: src/components/shared/PageHeader.tsx ===================

"use client"; // Aquest component té interacció (botó de tornar)

import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { ArrowLeft } from 'lucide-react';

interface PageHeaderProps {
  title: string;
  description?: string;
  showBackButton?: boolean;
  children?: React.ReactNode; // Per a botons d'acció (ex: "Nou Proveïdor")
}

export function PageHeader({ 
  title, 
  description, 
  showBackButton = false, 
  children 
}: PageHeaderProps) {
  const router = useRouter();

  return (
    <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
      <div className="flex items-center gap-3">
        {showBackButton && (
          <Button
            variant="outline"
            size="icon"
            className="h-8 w-8"
            onClick={() => router.back()}
          >
            <ArrowLeft className="h-4 w-4" />
            <span className="sr-only">Tornar</span>
          </Button>
        )}
        <div className="grid gap-1">
          <h1 className="text-2xl md:text-3xl font-bold tracking-tight">
            {title}
          </h1>
          {description && (
            <p className="text-muted-foreground">
              {description}
            </p>
          )}
        </div>
      </div>
      
      {/* Aquí es renderitzaran els botons d'acció */}
      {children && (
        <div className="flex-shrink-0">
          {children}
        </div>
      )}
    </div>
  );
}

// =================== FILE: src/components/shared/PaginationBar.tsx ===================

// src/components/shared/PaginationBar.tsx
"use client";

import { ChevronLeft, ChevronRight, Loader2 } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { useTranslations } from 'next-intl';

interface PaginationBarProps {
    currentPage: number;
    totalPages: number;
    onPageChange: (page: number) => void;
    totalItems: number;
    itemsPerPage: number;
    isLoading: boolean;
    resourceName: string; // Nom del recurs (e.g., 'despeses', 'factures')
}

/**
 * Component reutilitzable per a la barra de paginació.
 * ✅ El Per Què: Encapsula la lògica de navegació i visualització de rang,
 * mantenint la consistència a tota l'aplicació (Quotes, Expenses, Invoices).
 */
export function PaginationBar({
    currentPage,
    totalPages,
    onPageChange,
    totalItems,
    itemsPerPage,
    isLoading,
    resourceName
}: PaginationBarProps) {
    const t = useTranslations('Shared.Pagination'); // Assumint una clau d'i18n

    const startItem = (currentPage - 1) * itemsPerPage + 1;
    const endItem = Math.min(currentPage * itemsPerPage, totalItems);

    return (
        <div className="flex items-center justify-between space-x-6 text-sm text-muted-foreground p-2">
            {/* Informació de Rang */}
            <div className="flex items-center gap-2">
                {isLoading && <Loader2 className="w-4 h-4 animate-spin text-primary" />}
                <span>
                    {t('showing')} {startItem}-{endItem} {t('of')} {totalItems} {resourceName}
                </span>
            </div>

            {/* Controls de Navegació */}
            <div className="flex items-center space-x-2">
                <Button
                    variant="outline"
                    size="icon"
                    onClick={() => onPageChange(currentPage - 1)}
                    disabled={currentPage <= 1 || isLoading}
                >
                    <ChevronLeft className="h-4 w-4" />
                </Button>
                
                <span className="font-medium text-foreground">
                    {currentPage} / {totalPages}
                </span>
                
                <Button
                    variant="outline"
                    size="icon"
                    onClick={() => onPageChange(currentPage + 1)}
                    disabled={currentPage >= totalPages || isLoading}
                >
                    <ChevronRight className="h-4 w-4" />
                </Button>
            </div>
        </div>
    );
}

// =================== FILE: src/components/shared/StatCard.tsx ===================

"use client";
import Link from 'next/link';
import { FC, ElementType } from 'react';
import { ArrowRight } from 'lucide-react';
import { cn } from '@/lib/utils/utils'; // ✅ AFEGEIX AQUESTA LÍNIA

interface StatCardProps {
  href: string;
  icon: ElementType;
  title: string;
  value: string;
  color: string;
  openText: string;
}

export const StatCard: FC<StatCardProps> = ({ href, icon: Icon, title, value, color, openText }) => (
  <Link href={href} className="group block rounded-xl border bg-card text-card-foreground shadow-sm transition-all hover:border-primary/50 hover:shadow-md">
    <div className="p-5">
      <div className="flex items-start justify-between">
        <div className="flex flex-col">
          <p className="text-sm font-medium text-muted-foreground">{title}</p>
          <span className="mt-1 text-2xl font-bold tracking-tight text-foreground">{value}</span>
        </div>
        <div className={cn("rounded-lg p-2", color.replace('text-', 'bg-') + '/10')}>
            <Icon className={cn("h-6 w-6", color)} />
        </div>
      </div>
      <div className="mt-4 flex items-center text-xs font-medium text-muted-foreground transition-colors group-hover:text-primary">
        {openText} <ArrowRight className="w-3.5 h-3.5 ml-1" />
      </div>
    </div>
  </Link>
);

// =================== FILE: src/components/shared/StatusBadge.tsx ===================

/**
 * @file StatusBadge.tsx
 * @summary Muestra una etiqueta de estado coloreada y traducida. Reutilizable para presupuestos, oportunidades, etc.
 */
"use client";

import { FC } from 'react';
import { useTranslations } from 'next-intl';

export const StatusBadge: FC<{ status?: string | null }> = ({ status }) => {
    const t = useTranslations('ContactDetailPage.status');
    
    // 1. Establecemos valores por defecto para el texto y el color.
    let colorClass = 'bg-muted text-muted-foreground';
    let text = status || t('notAvailable');

    // 2. Usamos el 'switch' para asignar el texto traducido y el color a la vez,
    //    basándonos en el valor que viene de la base de datos.
    switch (status?.toLowerCase()) {
        case 'draft':
            text = t('draft');
            colorClass = 'bg-yellow-500/10 text-yellow-500';
            break;
        case 'sent':
            text = t('sent');
            colorClass = 'bg-blue-500/10 text-blue-500';
            break;
        case 'accepted':
        case 'guanyat': // Mantenemos alias si vienen de la BD
        case 'paid':
            text = t('wonPaid');
            colorClass = 'bg-green-500/10 text-green-500';
            break;
        case 'declined':
        case 'perdut':
            text = t('rejected');
            colorClass = 'bg-red-500/10 text-red-500';
            break;
        case 'negociació':
            text = t('negotiation');
            colorClass = 'bg-purple-500/10 text-purple-500';
            break;
        case 'overdue':
            text = t('overdue');
            colorClass = 'bg-orange-500/10 text-orange-500';
            break;
    }

    // 3. Renderizamos el resultado final.
    return <span className={`px-2.5 py-1 text-xs font-bold rounded-full ${colorClass}`}>{text}</span>;
};

// =================== FILE: src/components/shared/SupplierCombobox.tsx ===================

"use client";

import * as React from "react";
import { Check, ChevronsUpDown } from "lucide-react";
import { cn } from "@/lib/utils/utils";
import { Button } from "@/components/ui/button";
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from "@/components/ui/command";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { type Supplier } from '@/types/finances/suppliers';
import { useTranslations } from "next-intl";
// ✅ Assegura't que la ruta d'importació ara apunta a la nova ubicació (suppliers)
import { searchSuppliers } from "@/app/[locale]/(app)/finances/suppliers/actions"; 

interface SupplierComboboxProps {
    // ✅ Props per a Formularis NO CONTROLATS (com el de contactes)
    name?: string; // Per al camp 'hidden' que recollirà FormData
    defaultValue?: string | null; // El valor inicial (supplier_id)

    // ✅ Props per a Formularis CONTROLATS (com el de despeses)
    value?: string | null;
    onChange?: (value: string | null) => void;
    
    // Props generals
    initialSupplier: Pick<Supplier, 'id' | 'nom'> | null;
    disabled?: boolean;
}

export function SupplierCombobox({ 
    name, 
    defaultValue, 
    value: controlledValue, 
    onChange: controlledOnChange, 
    initialSupplier, 
    disabled 
}: SupplierComboboxProps) {
    
    const t = useTranslations('ExpenseDetailPage'); // Pots canviar el context de traducció si vols
    const [open, setOpen] = React.useState(false);
    
    // --- Lògica d'estat (Controlat vs. No Controlat) ---
    // Si 'defaultValue' existeix, el component gestiona el seu propi estat (no controlat)
    const [internalValue, setInternalValue] = React.useState(defaultValue ?? null);
    
    const isControlled = controlledValue !== undefined;
    const value = isControlled ? controlledValue : internalValue;
    
    const setValue = (newValue: string | null) => {
        if (isControlled) {
            controlledOnChange?.(newValue);
        } else {
            setInternalValue(newValue);
        }
    };
    // --- Fi Lògica d'estat ---

    const [suppliers, setSuppliers] = React.useState<Pick<Supplier, 'id' | 'nom'>[]>(
        initialSupplier ? [initialSupplier] : []
    );
    
    // Troba el proveïdor seleccionat (objecte)
    const selectedSupplier = suppliers.find(s => s.id === value) || null;
    
    const [searchTerm, setSearchTerm] = React.useState(initialSupplier?.nom ?? "");

    // Cerca asíncrona (es queda igual que abans)
    React.useEffect(() => {
        if (!open) return;
        const fetchSuppliers = async () => {
            const results = await searchSuppliers(searchTerm);
            if (initialSupplier && !results.find(s => s.id === initialSupplier.id)) {
                 setSuppliers([initialSupplier, ...results]);
            } else {
                 setSuppliers(results);
            }
        };
        const timer = setTimeout(fetchSuppliers, 300);
        return () => clearTimeout(timer);
    }, [searchTerm, open, initialSupplier]);

    return (
        <Popover open={open} onOpenChange={setOpen}>
            
            {/* ✅ AQUESTA ÉS LA PART CLAU PER A FormData */}
            {/* Un camp ocult que desa l'ID seleccionat. El <form> el llegirà. */}
            {name && (
                <input 
                    type="hidden" 
                    name={name} 
                    value={value ?? ""} 
                />
            )}

            <PopoverTrigger asChild>
                <Button
                    variant="outline"
                    role="combobox"
                    aria-expanded={open}
                    className="w-full justify-between"
                    disabled={disabled}
                >
                    {selectedSupplier
                        ? selectedSupplier.nom
                        : t('select.selectSupplier')}
                    <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                </Button>
            </PopoverTrigger>
            <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
                <Command>
                    <CommandInput 
                        placeholder={t('select.searchSupplier')}
                        onValueChange={setSearchTerm}
                    />
                    <CommandList>
                        <CommandEmpty>{t('select.noSupplierFound')}</CommandEmpty>
                        <CommandGroup>
                            <CommandItem
                                onSelect={() => {
                                    setValue(null); // Utilitzem el nostre 'setValue'
                                    setOpen(false);
                                }}
                            >
                                {t('select.noSupplier')}
                            </CommandItem>
                            
                            {suppliers.map((supplier) => (
                                <CommandItem
                                    key={supplier.id}
                                    value={supplier.nom}
                                    onSelect={() => {
                                        setValue(supplier.id); // Utilitzem el nostre 'setValue'
                                        setOpen(false);
                                    }}
                                >
                                    <Check
                                        className={cn(
                                            "mr-2 h-4 w-4",
                                            value === supplier.id ? "opacity-100" : "opacity-0"
                                        )}
                                    />
                                    {supplier.nom}
                                </CommandItem>
                            ))}
                        </CommandGroup>
                    </CommandList>
                </Command>
            </PopoverContent>
        </Popover>
    );
}

// =================== FILE: src/components/theme-provider.tsx ===================

/**
 * @file theme-provider.tsx
 * @summary Aquest fitxer defineix un component embolcall (wrapper) per al proveïdor de temes de 'next-themes'.
 * La seva funció és configurar i proporcionar el context del tema (clar/fosc) a tota l'aplicació.
 * Crear aquest component separat és una bona pràctica recomanada per 'next-themes' per assegurar
 * que només el proveïdor sigui un component de client, permetent que la resta del layout pugui ser un component de servidor.
 */

"use client";

import * as React from "react";
import { ThemeProvider as NextThemesProvider } from "next-themes";

// En lloc de definir els tipus de les propietats manualment, els inferim directament del component
// 'NextThemesProvider'. Això és una pràctica robusta que assegura que els nostres tipus
// sempre estaran sincronitzats amb els de la llibreria.
type ThemeProviderProps = React.ComponentProps<typeof NextThemesProvider>;

/**
 * @function ThemeProvider
 * @summary El component que embolcalla l'aplicació per proporcionar el context del tema.
 * @param {React.ReactNode} children - Els components fills que tindran accés al context del tema.
 * @param {ThemeProviderProps} props - La resta de propietats que es passaran al proveïdor de 'next-themes'.
 */
export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}


// =================== FILE: src/components/ThemeSwitcher.tsx ===================

"use client";

import { useState, useEffect } from "react";
import { useTheme } from "next-themes";
import { Button } from "@/components/ui/button";
import { Sun, Moon } from "lucide-react";

/**
 * @summary Component que renderitza un botó d'icona per canviar entre tema clar i fosc.
 * Està dissenyat per a ser utilitzat en barres de navegació.
 */
export function ThemeSwitcher() {
  const [mounted, setMounted] = useState(false);
  const { theme, setTheme } = useTheme();

  // Aquest efecte assegura que el component només es renderitza al client
  // per evitar errors d'hidratació (hydration mismatch).
  useEffect(() => {
    setMounted(true);
  }, []);

  // Mentre el component no estigui muntat al client, mostrem un espai reservat
  // de la mateixa mida que el botó final per evitar que la interfície "salti".
  if (!mounted) {
    return <div className="h-9 w-9" />;
  }

  return (
    <Button
      variant="ghost"
      size="icon"
      aria-label="Canviar tema"
      onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
    >
      {/* Mostrem el Sol si el tema és fosc, i la Lluna si el tema és clar */}
      <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
      <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
    </Button>
  );
}

// =================== FILE: src/components/ui/accordion.tsx ===================

"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { cn } from "@/lib/utils/utils"
import { ChevronDownIcon } from "@radix-ui/react-icons"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDownIcon className="h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))
AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }


// =================== FILE: src/components/ui/alert-dialog.tsx ===================

"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}


// =================== FILE: src/components/ui/avatar.tsx ===================

"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }


// =================== FILE: src/components/ui/badge.jsx ===================

import * as React from 'react';
import { cva } from 'class-variance-authority';
import { cn } from '@/lib/utils/utils'; // Assegura't que tens aquest arxiu d'ajuda de shadcn

const badgeVariants = cva(
  'inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',
  {
    variants: {
      variant: {
        default: 'border-transparent bg-primary text-primary-foreground hover:bg-primary/80',
        secondary: 'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80',
        destructive: 'border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80',
        outline: 'text-foreground',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
);

function Badge({ className, variant, ...props }) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  );
}

export { Badge, badgeVariants };

// =================== FILE: src/components/ui/button.tsx ===================

"use client";

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        
        // ✅ LÍNIA AFEGIDA PER A LA NOVA VARIANT
        "destructive-outline":
          "border border-destructive bg-transparent text-destructive hover:bg-destructive/10",
        
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants, VariantProps };

// =================== FILE: src/components/ui/calendar.tsx ===================

import * as React from "react"
import {
  ChevronDownIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
} from "lucide-react"
// ✅ 1. IMPORTEM 'CalendarDay' I CANVIEM 'DayModifiers' PER 'Modifiers'
import { DayPicker, getDefaultClassNames, Modifiers, CalendarDay } from "react-day-picker";

import { cn } from "@/lib/utils/utils"
import { Button, buttonVariants, type VariantProps } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker> & {
  buttonVariant?: VariantProps<typeof buttonVariants>["variant"];
};

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  captionLayout = "label",
  buttonVariant = "ghost",
  formatters,
  components,
  ...props
}: CalendarProps) {
  const defaultClassNames = getDefaultClassNames()

  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn(
        "bg-background group/calendar p-3 [--cell-size:2rem] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent",
        String.raw`rtl:**:[.rdp-button\_next>svg]:rotate-180`,
        String.raw`rtl:**:[.rdp-button\_previous>svg]:rotate-180`,
        className
      )}
      captionLayout={captionLayout}
      formatters={{
        formatMonthDropdown: (date) =>
          date.toLocaleString("default", { month: "short" }),
        ...formatters,
      }}
      classNames={{
        root: cn("w-fit", defaultClassNames.root),
        months: cn("relative flex flex-col gap-4 md:flex-row", defaultClassNames.months),
        month: cn("flex w-full flex-col gap-4", defaultClassNames.month),
        nav: cn(
          "absolute inset-x-0 top-0 flex w-full items-center justify-between gap-1",
          defaultClassNames.nav
        ),
        button_previous: cn(
          buttonVariants({ variant: buttonVariant }),
          "h-[--cell-size] w-[--cell-size] select-none p-0 aria-disabled:opacity-50",
          defaultClassNames.button_previous
        ),
        button_next: cn(
          buttonVariants({ variant: buttonVariant }),
          "h-[--cell-size] w-[--cell-size] select-none p-0 aria-disabled:opacity-50",
          defaultClassNames.button_next
        ),
        month_caption: cn(
          "flex h-[--cell-size] w-full items-center justify-center px-[--cell-size]",
          defaultClassNames.month_caption
        ),
        dropdowns: cn(
          "flex h-[--cell-size] w-full items-center justify-center gap-1.5 text-sm font-medium",
          defaultClassNames.dropdowns
        ),
        dropdown_root: cn(
          "has-focus:border-ring border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] relative rounded-md border",
          defaultClassNames.dropdown_root
        ),
        dropdown: cn("bg-popover absolute inset-0 opacity-0", defaultClassNames.dropdown),
        caption_label: cn("select-none font-medium", captionLayout === "label"
          ? "text-sm"
          : "[&>svg]:text-muted-foreground flex h-8 items-center gap-1 rounded-md pl-2 pr-1 text-sm [&>svg]:size-3.5", defaultClassNames.caption_label),
        table: "w-full border-collapse",
        weekdays: cn("flex", defaultClassNames.weekdays),
        weekday: cn(
          "text-muted-foreground flex-1 select-none rounded-md text-[0.8rem] font-normal",
          defaultClassNames.weekday
        ),
        week: cn("mt-2 flex w-full", defaultClassNames.week),
        week_number_header: cn("w-[--cell-size] select-none", defaultClassNames.week_number_header),
        week_number: cn(
          "text-muted-foreground select-none text-[0.8rem]",
          defaultClassNames.week_number
        ),
        day: cn(
          "group/day relative aspect-square h-full w-full select-none p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md",
          defaultClassNames.day
        ),
        range_start: cn("bg-accent rounded-l-md", defaultClassNames.range_start),
        range_middle: cn("rounded-none", defaultClassNames.range_middle),
        range_end: cn("bg-accent rounded-r-md", defaultClassNames.range_end),
        today: cn(
          "bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none",
          defaultClassNames.today
        ),
        outside: cn(
          "text-muted-foreground aria-selected:text-muted-foreground",
          defaultClassNames.outside
        ),
        disabled: cn("text-muted-foreground opacity-50", defaultClassNames.disabled),
        hidden: cn("invisible", defaultClassNames.hidden),
        ...classNames,
      }}
      components={{
        // Dins de calendar.tsx
        Root: ({ className, ...props }) => {
          // 1. Separem 'rootRef' de la resta de props.
          const { rootRef, ...rest } = props as { rootRef?: React.Ref<HTMLDivElement> };
          
          // 2. Usem 'rootRef' a la prop 'ref' i passem la resta de props.
          return (<div ref={rootRef} data-slot="calendar" className={cn(className)} {...rest} />);
        },
        // ✅ 2. AFEGIM "up" A LES ORIENTACIONS PERMESES
        Chevron: ({ className, orientation }: { className?: string; orientation?: "left" | "right" | "down" | "up" }) => {
          if (orientation === "left") {
            return (<ChevronLeftIcon className={cn("size-4", className)} />);
          }
          if (orientation === "right") {
            return (<ChevronRightIcon className={cn("size-4", className)} />);
          }
          if (orientation === "up") {
             // Pots canviar aquesta icona si vols una fletxa cap amunt
            return (<ChevronDownIcon className={cn("size-4 rotate-180", className)} />);
          }
          return (<ChevronDownIcon className={cn("size-4", className)} />);
        },
        DayButton: CalendarDayButton,
        WeekNumber: ({ children, ...props }: { children?: React.ReactNode }) => {
          return (
            <td {...props}>
              <div
                className="flex size-[--cell-size] items-center justify-center text-center">
                {children}
              </div>
            </td>
          );
        },
        ...components,
      }}
      {...props} />
  );
}
Calendar.displayName = "Calendar";


interface CalendarDayButtonProps extends React.HTMLAttributes<HTMLButtonElement> {
  // ✅ 3. CANVIEM 'Date' PER 'CalendarDay'
  day: CalendarDay;
  modifiers: Modifiers;
}

function CalendarDayButton({
  className,
  day,
  modifiers,
  ...props
}: CalendarDayButtonProps) {
  const defaultClassNames = getDefaultClassNames()
  const ref = React.useRef<HTMLButtonElement>(null);

  React.useEffect(() => {
    if (modifiers.focused && ref.current) {
      ref.current.focus();
    }
  }, [modifiers.focused]);

  return (
    <Button
      ref={ref}
      variant="ghost"
      size="icon"
      // ✅ 4. ACCEDIM A LA DATA REAL A TRAVÉS DE 'day.date'
      data-day={day.date.toLocaleDateString()}
      data-selected-single={
        modifiers.selected &&
        !modifiers.range_start &&
        !modifiers.range_end &&
        !modifiers.range_middle
      }
      data-range-start={modifiers.range_start}
      data-range-end={modifiers.range_end}
      data-range-middle={modifiers.range_middle}
      className={cn(
        "data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 flex aspect-square h-auto w-full min-w-[--cell-size] flex-col gap-1 font-normal leading-none data-[range-end=true]:rounded-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] [&>span]:text-xs [&>span]:opacity-70",
        defaultClassNames.day,
        className
      )}
      {...props} />
  );
}
CalendarDayButton.displayName = "CalendarDayButton";

export { Calendar, CalendarDayButton }

// =================== FILE: src/components/ui/card.tsx ===================

import * as React from "react"

import { cn } from "@/lib/utils/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


// =================== FILE: src/components/ui/checkbox.tsx ===================

"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { CheckIcon } from "lucide-react"

import { cn } from "@/lib/utils/utils"

function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {
  return (
    <CheckboxPrimitive.Root
      data-slot="checkbox"
      className={cn(
        "peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <CheckboxPrimitive.Indicator
        data-slot="checkbox-indicator"
        className="flex items-center justify-center text-current transition-none"
      >
        <CheckIcon className="size-3.5" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  )
}

export { Checkbox }


// =================== FILE: src/components/ui/collapsible.tsx ===================

"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }


// =================== FILE: src/components/ui/command.tsx ===================

"use client"

import * as React from "react"
import { Command as CommandPrimitive } from "cmdk"
import { Search as SearchIcon } from "lucide-react"

import { cn } from "@/lib/utils/utils"
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({
  children,
  title = "Command Palette",
  description,
  ...props
}: React.ComponentProps<typeof Dialog> & { title?: string, description?: string }) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        {(title || description) && (
          <DialogHeader className="px-4 pt-4">
            {title && <DialogTitle>{title}</DialogTitle>}
            {description && <DialogDescription>{description}</DialogDescription>}
          </DialogHeader>
        )}
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <SearchIcon className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))
CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))
CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))
CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))
CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled='true']:pointer-events-none data-[disabled='true']:opacity-50",
      className
    )}
    {...props}
  />
))
CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}



// =================== FILE: src/components/ui/dialog.tsx ===================

// Ruta del fitxer: src/components/ui/dialog.tsx
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X as XIcon } from "lucide-react"

import { cn } from "@/lib/utils/utils"

const Dialog = DialogPrimitive.Root
const DialogTrigger = DialogPrimitive.Trigger
const DialogPortal = DialogPrimitive.Portal
const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        // ✅ CORRECCIÓ: Restaurem l'amplada màxima per defecte (max-w-lg)
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <XIcon className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
  DialogClose,
  DialogPortal,
  DialogOverlay
}



// =================== FILE: src/components/ui/drawer.tsx ===================

"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}


// =================== FILE: src/components/ui/dropdown-menu.tsx ===================

"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { cn } from "@/lib/utils/utils"
import { CheckIcon, ChevronRightIcon, DotFilledIcon } from "@radix-ui/react-icons"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRightIcon className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <DotFilledIcon className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


// =================== FILE: src/components/ui/EditorWysiwyg.tsx ===================

// src/components/ui/EditorWysiwyg.tsx

'use client';

import { useCallback } from "react";
// Imports de shadcn/ui
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator } from '@/components/ui/dropdown-menu';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';

// Imports de TipTap
import { useEditor, EditorContent } from '@tiptap/react';
import StarterKit from '@tiptap/starter-kit';
import { Underline } from '@tiptap/extension-underline';
import { Highlight } from '@tiptap/extension-highlight';
import { Subscript } from '@tiptap/extension-subscript';
import { Superscript } from '@tiptap/extension-superscript';
import { TextStyle } from '@tiptap/extension-text-style';
import { FontFamily } from '@tiptap/extension-font-family';
import { Color } from '@tiptap/extension-color';
import { TextAlign } from '@tiptap/extension-text-align';
import { Link } from '@tiptap/extension-link';
import { Image } from '@tiptap/extension-image';
import { Youtube } from '@tiptap/extension-youtube';
import { Table } from '@tiptap/extension-table';
import { TableCell } from '@tiptap/extension-table-cell';
import { TableHeader } from '@tiptap/extension-table-header';
import { TableRow } from '@tiptap/extension-table-row';
import { TaskList } from '@tiptap/extension-task-list';
import { TaskItem } from '@tiptap/extension-task-item';

// Imports d'icones de Lucide React
import {
    Bold, Italic, Underline as UnderlineIcon, Strikethrough, List, ListOrdered, Quote,
    AlignLeft, AlignCenter, AlignRight,
    Link as LinkIcon, Image as ImageIcon, 
    Table as  Undo, Redo, Heading1, Heading2, Heading3, Pilcrow,
    CaseSensitive, Type, Palette,
    CheckSquare,
    Star
} from 'lucide-react';

interface EditorWysiwygProps {
  id: string;
  name: string;
  defaultValue?: string;
  onChange?: (html: string) => void;
}

const FontSizeTextStyle = TextStyle.extend({
    addAttributes() {
        return { ...this.parent?.(), fontSize: { default: null, parseHTML: el => el.style.fontSize, renderHTML: attrs => attrs.fontSize ? { style: `font-size: ${attrs.fontSize}` } : {} } };
    },
});

export default function EditorWysiwyg({ id, name, defaultValue = '', onChange }: EditorWysiwygProps) {
  const editor = useEditor({
    immediatelyRender: false,
    extensions: [
      StarterKit.configure({ 
        heading: { levels: [1, 2, 3] },
        // ✅ CORRECCIÓ: Hem eliminat 'listItem: false'
      }),
      Underline, Highlight, Subscript, Superscript, TextStyle, FontSizeTextStyle, Color, FontFamily,
      TextAlign.configure({ types: ['heading', 'paragraph'] }),
      Link.configure({ openOnClick: false }), Image, Youtube,
      Table.configure({ resizable: true }), TableRow, TableHeader, TableCell,
      TaskList,
      TaskItem.configure({
        nested: true,
      }),
    ],
    content: defaultValue,
    editorProps: { attributes: { class: 'prose dark:prose-invert prose-sm sm:prose-base focus:outline-none min-h-[150px] max-w-none' } },
    onUpdate: ({ editor }) => onChange?.(editor.getHTML()),
  });

  const setLink = useCallback(() => {
    if (!editor) return;
    const url = window.prompt('URL', editor.getAttributes('link').href);
    if (url === null) return;
    if (url === '') { editor.chain().focus().extendMarkRange('link').unsetLink().run(); return; }
    editor.chain().focus().extendMarkRange('link').setLink({ href: url }).run();
  }, [editor]);

  const addImage = useCallback(() => {
    if (!editor) return;
    const url = window.prompt('URL de la imatge');
    if (url) editor.chain().focus().setImage({ src: url }).run();
  }, [editor]);
  
  if (!editor) return null;

  return (
    <TooltipProvider delayDuration={100}>
      <div className="w-full rounded-md border border-input bg-transparent text-sm ring-offset-background">
        <div className="flex flex-wrap items-center gap-1 px-2 py-2 border-b border-input">
          {/* Dropdown de Format (Títols) */}
          <DropdownMenu>
            <Tooltip>
                <TooltipTrigger asChild>
                    <Button type="button" variant="ghost" size="sm" className="w-32 justify-start">
                        {editor.isActive('heading', { level: 1 }) ? <Heading1 className="w-4 h-4 mr-2" /> :
                         editor.isActive('heading', { level: 2 }) ? <Heading2 className="w-4 h-4 mr-2" /> :
                         editor.isActive('heading', { level: 3 }) ? <Heading3 className="w-4 h-4 mr-2" /> :
                         <Pilcrow className="w-4 h-4 mr-2" />}
                        <span>
                            {editor.isActive('heading', { level: 1 }) ? 'Títol 1' :
                             editor.isActive('heading', { level: 2 }) ? 'Títol 2' :
                             editor.isActive('heading', { level: 3 }) ? 'Títol 3' : 'Paràgraf'}
                        </span>
                    </Button>
                </TooltipTrigger>
                <TooltipContent><p>Format de Text</p></TooltipContent>
            </Tooltip>
            <DropdownMenuContent>
              <DropdownMenuItem onClick={() => editor.chain().focus().setParagraph().run()}>Paràgraf</DropdownMenuItem>
              <DropdownMenuItem onClick={() => editor.chain().focus().toggleHeading({ level: 1 }).run()}>Títol 1</DropdownMenuItem>
              <DropdownMenuItem onClick={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}>Títol 2</DropdownMenuItem>
              <DropdownMenuItem onClick={() => editor.chain().focus().toggleHeading({ level: 3 }).run()}>Títol 3</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>

          <div className="w-px h-6 bg-input mx-1"></div>

          {/* Formats Bàsics */}
          <Tooltip><TooltipTrigger asChild><Button type="button" variant="ghost" size="icon" onClick={() => editor.chain().focus().toggleBold().run()} className={editor.isActive('bold') ? 'bg-accent text-accent-foreground' : 'text-muted-foreground hover:bg-accent hover:text-accent-foreground'}><Bold className="w-4 h-4" /></Button></TooltipTrigger><TooltipContent><p>Negreta</p></TooltipContent></Tooltip>
          <Tooltip><TooltipTrigger asChild><Button type="button" variant="ghost" size="icon" onClick={() => editor.chain().focus().toggleItalic().run()} className={editor.isActive('italic') ? 'bg-accent text-accent-foreground' : 'text-muted-foreground hover:bg-accent hover:text-accent-foreground'}><Italic className="w-4 h-4" /></Button></TooltipTrigger><TooltipContent><p>Cursiva</p></TooltipContent></Tooltip>
          <Tooltip><TooltipTrigger asChild><Button type="button" variant="ghost" size="icon" onClick={() => editor.chain().focus().toggleUnderline().run()} className={editor.isActive('underline') ? 'bg-accent text-accent-foreground' : 'text-muted-foreground hover:bg-accent hover:text-accent-foreground'}><UnderlineIcon className="w-4 h-4" /></Button></TooltipTrigger><TooltipContent><p>Subratllat</p></TooltipContent></Tooltip>
          <Tooltip><TooltipTrigger asChild><Button type="button" variant="ghost" size="icon" onClick={() => editor.chain().focus().toggleStrike().run()} className={editor.isActive('strike') ? 'bg-accent text-accent-foreground' : 'text-muted-foreground hover:bg-accent hover:text-accent-foreground'}><Strikethrough className="w-4 h-4" /></Button></TooltipTrigger><TooltipContent><p>Ratllat</p></TooltipContent></Tooltip>
          <Tooltip>
            <TooltipTrigger asChild>
              <Button type="button" variant="ghost" size="icon" onClick={() => editor.chain().focus().toggleHighlight({ color: '#FBBF24' }).run()} className={editor.isActive('highlight') ? 'bg-accent text-accent-foreground' : 'text-muted-foreground hover:bg-accent hover:text-accent-foreground'}>
                <Star className="w-4 h-4" />
              </Button>
            </TooltipTrigger>
            <TooltipContent><p>Ressaltar</p></TooltipContent>
          </Tooltip>

          <div className="w-px h-6 bg-input mx-1"></div>
          
          {/* Mida de Text */}
          <DropdownMenu>
            <Tooltip>
              <TooltipTrigger asChild><Button type="button" variant="ghost" size="icon"><CaseSensitive className="w-4 h-4" /></Button></TooltipTrigger>
              <TooltipContent><p>Mida de Text</p></TooltipContent>
            </Tooltip>
            <DropdownMenuContent>
              {['12px', '14px', '16px', '18px', '24px'].map(size => (<DropdownMenuItem key={size} onSelect={() => editor.chain().focus().setMark('textStyle', { fontSize: size }).run()} className={editor.isActive('textStyle', { fontSize: size }) ? 'bg-accent' : ''}>{size}</DropdownMenuItem>))}
              <DropdownMenuSeparator />
              <DropdownMenuItem onSelect={() => editor.chain().focus().setMark('textStyle', { fontSize: null }).run()}>Reset</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>

          {/* Família de Font */}
          <DropdownMenu>
            <Tooltip>
              <TooltipTrigger asChild><Button type="button" variant="ghost" size="icon"><Type className="w-4 h-4" /></Button></TooltipTrigger>
              <TooltipContent><p>Font</p></TooltipContent>
            </Tooltip>
            <DropdownMenuContent>
              {["Inter", "Arial", "Georgia", "monospace", "serif"].map(font => (<DropdownMenuItem key={font} style={{ fontFamily: font }} onSelect={() => editor.chain().focus().setFontFamily(font).run()} className={editor.isActive('textStyle', { fontFamily: font }) ? 'bg-accent' : ''}>{font}</DropdownMenuItem>))}
              <DropdownMenuSeparator />
              <DropdownMenuItem onSelect={() => editor.chain().focus().unsetFontFamily().run()}>Reset</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>

          {/* Color de Text */}
          <Tooltip>
            <TooltipTrigger asChild>
                <Button type="button" variant="ghost" size="icon" asChild>
                    <label className="cursor-pointer"><Palette className="w-4 h-4" style={{ color: editor.getAttributes('textStyle').color || 'inherit' }} /><Input type="color" className="sr-only" value={editor.getAttributes('textStyle').color || '#000000'} onInput={e => editor.chain().focus().setColor((e.target as HTMLInputElement).value).run()} /></label>
                </Button>
            </TooltipTrigger>
            <TooltipContent><p>Color de Text</p></TooltipContent>
          </Tooltip>
          
          <div className="w-px h-6 bg-input mx-1"></div>

          {/* Llistes i blocs */}
          <Tooltip><TooltipTrigger asChild><Button type="button" variant="ghost" size="icon" onClick={() => editor.chain().focus().toggleBulletList().run()} className={editor.isActive('bulletList') ? 'bg-accent text-accent-foreground' : 'text-muted-foreground hover:bg-accent hover:text-accent-foreground'}><List className="w-4 h-4" /></Button></TooltipTrigger><TooltipContent><p>Llista</p></TooltipContent></Tooltip>
          <Tooltip><TooltipTrigger asChild><Button type="button" variant="ghost" size="icon" onClick={() => editor.chain().focus().toggleOrderedList().run()} className={editor.isActive('orderedList') ? 'bg-accent text-accent-foreground' : 'text-muted-foreground hover:bg-accent hover:text-accent-foreground'}><ListOrdered className="w-4 h-4" /></Button></TooltipTrigger><TooltipContent><p>Llista ordenada</p></TooltipContent></Tooltip>
          <Tooltip><TooltipTrigger asChild><Button type="button" variant="ghost" size="icon" onClick={() => editor.chain().focus().toggleTaskList().run()} className={editor.isActive('taskList') ? 'bg-accent text-accent-foreground' : 'text-muted-foreground hover:bg-accent hover:text-accent-foreground'}><CheckSquare className="w-4 h-4" /></Button></TooltipTrigger><TooltipContent><p>Llista de tasques</p></TooltipContent></Tooltip>
          <Tooltip><TooltipTrigger asChild><Button type="button" variant="ghost" size="icon" onClick={() => editor.chain().focus().toggleBlockquote().run()} className={editor.isActive('blockquote') ? 'bg-accent text-accent-foreground' : 'text-muted-foreground hover:bg-accent hover:text-accent-foreground'}><Quote className="w-4 h-4" /></Button></TooltipTrigger><TooltipContent><p>Cita</p></TooltipContent></Tooltip>
          
          <div className="w-px h-6 bg-input mx-1"></div>

          {/* Alineació, Insercions, Historial... */}
          <Tooltip><TooltipTrigger asChild><Button type="button" variant="ghost" size="icon" onClick={() => editor.chain().focus().setTextAlign('left').run()} className={editor.isActive({ textAlign: 'left' }) ? 'bg-accent text-accent-foreground' : 'text-muted-foreground hover:bg-accent hover:text-accent-foreground'}><AlignLeft className="w-4 h-4" /></Button></TooltipTrigger><TooltipContent><p>Alinear a l'esquerra</p></TooltipContent></Tooltip>
          <Tooltip><TooltipTrigger asChild><Button type="button" variant="ghost" size="icon" onClick={() => editor.chain().focus().setTextAlign('center').run()} className={editor.isActive({ textAlign: 'center' }) ? 'bg-accent text-accent-foreground' : 'text-muted-foreground hover:bg-accent hover:text-accent-foreground'}><AlignCenter className="w-4 h-4" /></Button></TooltipTrigger><TooltipContent><p>Centrar</p></TooltipContent></Tooltip>
          <Tooltip><TooltipTrigger asChild><Button type="button" variant="ghost" size="icon" onClick={() => editor.chain().focus().setTextAlign('right').run()} className={editor.isActive({ textAlign: 'right' }) ? 'bg-accent text-accent-foreground' : 'text-muted-foreground hover:bg-accent hover:text-accent-foreground'}><AlignRight className="w-4 h-4" /></Button></TooltipTrigger><TooltipContent><p>Alinear a la dreta</p></TooltipContent></Tooltip>
          <div className="w-px h-6 bg-input mx-1"></div>
          <Tooltip><TooltipTrigger asChild><Button type="button" variant="ghost" size="icon" onClick={setLink} className={editor.isActive('link') ? 'bg-accent text-accent-foreground' : 'text-muted-foreground hover:bg-accent hover:text-accent-foreground'}><LinkIcon className="w-4 h-4" /></Button></TooltipTrigger><TooltipContent><p>Afegir Enllaç</p></TooltipContent></Tooltip>
          <Tooltip><TooltipTrigger asChild><Button type="button" variant="ghost" size="icon" onClick={addImage}><ImageIcon className="w-4 h-4" /></Button></TooltipTrigger><TooltipContent><p>Afegir Imatge</p></TooltipContent></Tooltip>
          <div className="w-px h-6 bg-input mx-1"></div>
          <Tooltip><TooltipTrigger asChild><Button type="button" variant="ghost" size="icon" onClick={() => editor.chain().focus().undo().run()} disabled={!editor.can().undo()}><Undo className="w-4 h-4" /></Button></TooltipTrigger><TooltipContent><p>Desfer</p></TooltipContent></Tooltip>
          <Tooltip><TooltipTrigger asChild><Button type="button" variant="ghost" size="icon" onClick={() => editor.chain().focus().redo().run()} disabled={!editor.can().redo()}><Redo className="w-4 h-4" /></Button></TooltipTrigger><TooltipContent><p>Refer</p></TooltipContent></Tooltip>

        </div>
        <div className="p-4 rounded-b-md">
          <EditorContent editor={editor} />
          <textarea id={id} name={name} value={editor.getHTML()} className="hidden" readOnly />
        </div>
      </div>
    </TooltipProvider>
  );
}

// =================== FILE: src/components/ui/input.tsx ===================

import * as React from "react"
import { cn } from "@/lib/utils/utils"

// Canviem la interfície buida per un 'type' directe.
// Això soluciona l'error '@typescript-eslint/no-empty-object-type'.
export type InputProps = React.InputHTMLAttributes<HTMLInputElement>

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)

Input.displayName = "Input"

export { Input }

// =================== FILE: src/components/ui/label.tsx ===================

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }


// =================== FILE: src/components/ui/pagination.tsx ===================

import * as React from "react"
import { cn } from "@/lib/utils/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"
import { ChevronLeftIcon, ChevronRightIcon, DotsHorizontalIcon } from "@radix-ui/react-icons"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeftIcon className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRightIcon className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <DotsHorizontalIcon className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationLink,
  PaginationItem,
  PaginationPrevious,
  PaginationNext,
  PaginationEllipsis,
}


// =================== FILE: src/components/ui/popover.tsx ===================

"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils/utils"

function Popover({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Root>) {
  return <PopoverPrimitive.Root data-slot="popover" {...props} />
}

function PopoverTrigger({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {
  return <PopoverPrimitive.Trigger data-slot="popover-trigger" {...props} />
}

function PopoverContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Content>) {
  return (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        data-slot="popover-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden",
          className
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  )
}

function PopoverAnchor({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {
  return <PopoverPrimitive.Anchor data-slot="popover-anchor" {...props} />
}

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }


// =================== FILE: src/components/ui/progress.tsx ===================

"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-primary/20",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }


// =================== FILE: src/components/ui/scroll-area.tsx ===================

"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }


// =================== FILE: src/components/ui/select.tsx ===================

"use client";

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown } from "lucide-react"
import { cn } from "@/lib/utils/utils"

const Select = SelectPrimitive.Root
const SelectGroup = SelectPrimitive.Group
const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
}

// =================== FILE: src/components/ui/separator.tsx ===================

"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }


// =================== FILE: src/components/ui/sheet.tsx ===================

"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils/utils"
import { Cross2Icon } from "@radix-ui/react-icons"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <Cross2Icon className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
      {children}
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}


// =================== FILE: src/components/ui/skeleton.tsx ===================

// Ruta: src/components/ui/skeleton.tsx
import { cn } from "@/lib/utils/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

// =================== FILE: src/components/ui/sonner.tsx ===================

"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }


// =================== FILE: src/components/ui/switch.tsx ===================

"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }


// =================== FILE: src/components/ui/table.tsx ===================

// src/components/ui/table.tsx
"use client"

import * as React from "react"
import { cn } from "@/lib/utils/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

// =================== FILE: src/components/ui/tabs.tsx ===================

"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils/utils"

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props}
    />
  )
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}

export { Tabs, TabsList, TabsTrigger, TabsContent }


// =================== FILE: src/components/ui/textarea.tsx ===================

import * as React from "react"
import { cn } from "@/lib/utils/utils"

// 1. Canviem la interfície buida per un 'type'.
// 2. Renombrem a 'TextareaProps' i heretem de les propietats correctes: React.TextareaHTMLAttributes.
export type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }

// =================== FILE: src/components/ui/toast.tsx ===================

import { toast } from "sonner";

export { toast };

// =================== FILE: src/components/ui/toaster.tsx ===================

"use client"

import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  return (
    <Sonner
      theme="light"
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }

// =================== FILE: src/components/ui/toggle-group.tsx ===================

"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }


// =================== FILE: src/components/ui/toggle.tsx ===================

"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-9 px-2 min-w-9",
        sm: "h-8 px-1.5 min-w-8",
        lg: "h-10 px-2.5 min-w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }


// =================== FILE: src/components/ui/tooltip.tsx ===================

"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Portal>
    <TooltipPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]",
        className
      )}
      {...props}
    />
  </TooltipPrimitive.Portal>
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }


// =================== FILE: src/config/billing.ts ===================

import type { PlanConfig } from '@/types/settings';

/**
 * Configuració centralitzada dels plans de subscripció.
 * El camp 'name' s'utilitzarà com a clau per a les traduccions (en minúscules).
 */
export const plansStructure: PlanConfig[] = [
  {
    id: 'free',
    name: 'Free', // Aquesta serà la clau 'free' per a les traduccions
    iconName: 'Gift',
    priceMonthly: 0,
    priceYearly: 0,
    colors: { border: "border-muted", text: "text-muted-foreground", bg: "bg-muted", hoverBg: "hover:bg-muted/80" }
  },
  {
    id: process.env.PLAN_PLUS_ID || 'plus',
    name: 'Plus', // Aquesta serà la clau 'plus' per a les traduccions
    iconName: 'Star',
    priceMonthly: 29,
    priceYearly: 290,
    isPopular: true,
    colors: { border: "border-primary", text: "text-primary", bg: "bg-primary", hoverBg: "hover:bg-primary/90" }
  },
  {
    id: process.env.PLAN_PREMIUM_ID || 'premium',
    name: 'Premium', // Aquesta serà la clau 'premium' per a les traduccions
    iconName: 'Gem',
    priceMonthly: 79,
    priceYearly: 790,
    colors: { border: "border-teal-500", text: "text-teal-500", bg: "bg-teal-500", hoverBg: "hover:bg-teal-500/90" }
  },
  {
    id: 'custom',
    name: 'Custom', // Aquesta serà la clau 'custom' per a les traduccions
    iconName: 'Settings',
    priceMonthly: null,
    priceYearly: null,
    colors: { border: "border-foreground", text: "text-foreground", bg: "bg-foreground", hoverBg: "hover:bg-foreground/90" }
  },
];



// =================== FILE: src/config/contacts.ts ===================

// src/config/contacts.ts (NOU FITXER)

export const CONTACT_STATUS_MAP = [
  { code: 'L', key: 'Lead' },
  { code: 'P', key: 'Proveidor' },
  { code: 'C', key: 'Client' },
] as const;

export type ContactStatusCode = typeof CONTACT_STATUS_MAP[number]['code'];

// =================== FILE: src/config/inbox.ts ===================

// src/config/inbox.ts (NOU FITXER)

/**
 * @summary Defineix les constants i la lògica de negoci per al mòdul de l'Inbox.
 */

// Mapa d'estats de tiquets. La 'font de la veritat' per als estats possibles.
export const TICKET_STATUS_MAP = [
  { dbValue: 'NoLlegit', key: 'unread' }, 
  { dbValue: 'Llegit', key: 'read' },
  { dbValue: 'Respost', key: 'replied' },
] as const;

// Tipus que representa els possibles valors de l'estat d'un tiquet a la base de dades.
export type TicketStatus = typeof TICKET_STATUS_MAP[number]['dbValue'];

// Tipus per als filtres de la interfície d'usuari.
export type TicketFilter = 'tots' | 'rebuts' | 'enviats' | 'noLlegits';

// =================== FILE: src/config/navigation.ts ===================

import {
  LayoutDashboard,
  Briefcase,
  Landmark,
  Headphones,
  LayoutTemplate,
  Mail,
  Contact,
  FileText,
  Columns,
  Receipt,
  Bot,
  BookPlus,
  Settings,
  Users,
  Workflow,
  Activity,
  CalendarDays, // ✅ Importem la nova icona

  Truck
} from 'lucide-react';


// ✅ PAS 1: Importem la interfície des del nostre nou fitxer de tipus.
import type { NavItem } from '@/types/app/navigation';

export const navModules: NavItem[] = [
  {
    id: 'dashboard',
    labelKey: 'dashboard', // ✅ Canviat
    icon: LayoutDashboard,
    path: '/dashboard',
    isSingle: true
  },
  {
    id: 'crm',
    labelKey: 'crm', // ✅ Canviat
    icon: Briefcase,
    basePath: '/crm',
    path: '/crm/general',
    isSingle: false,
    children: [
      { id: 'general_crm', labelKey: 'crmGeneral', icon: Briefcase, path: '/crm/general', isSingle: true },
      { id: 'contactes', labelKey: 'contacts', icon: Contact, path: '/crm/contactes', isSingle: true },
      { id: 'pipeline', labelKey: 'pipeline', icon: Columns, path: '/crm/pipeline', isSingle: true },
      { id: 'activitats', labelKey: 'activities', icon: Activity, path: '/crm/activitats', isSingle: true },
      { id: 'calendari', labelKey: 'calendar', icon: CalendarDays, path: '/crm/calendari', isSingle: true }

    ]
  },
  {
    id: 'finances',
    labelKey: 'finances', // ✅ Canviat
    icon: Landmark,
    basePath: '/finances',
    path: '/finances/invoices',
    isSingle: false,
    children: [
      { id: 'pressupostos', labelKey: 'quotes', icon: FileText, path: '/crm/quotes', isSingle: true },
      { id: 'conceptes', labelKey: 'concepts', icon: BookPlus, path: '/crm/products', isSingle: true },
      { id: 'facturacio', labelKey: 'invoicing', icon: Receipt, path: '/finances/invoices', isSingle: true },
      { id: 'despeses', labelKey: 'expenses', icon: Landmark, path: '/finances/expenses', isSingle: true },
      { id: 'proveïdors', labelKey: 'suppliers', icon: Truck, path: '/finances/suppliers', isSingle: true },

    ]
  },
  {
    id: 'comunicacio',
    labelKey: 'communication', // ✅ Canviat
    icon: Headphones,
    basePath: '/comunicacio',
    path: '/comunicacio/inbox',
    isSingle: false,
    children: [
      { id: 'inbox', labelKey: 'inbox', icon: Headphones, path: '/comunicacio/inbox', isSingle: true },
      { id: 'templates', labelKey: 'templates', icon: LayoutTemplate, path: '/comunicacio/templates', isSingle: true },
      { id: 'marketing', labelKey: 'marketing', icon: Mail, path: '/comunicacio/marketing', isSingle: true },
      {
        id: 'planificador',
        labelKey: 'planner',
        icon: CalendarDays,
        path: '/comunicacio/planificador',
        // ✅ AQUÍ ESTÀ LA MÀGIA: Especifiquem els plans que tenen accés
        requiredPlan: ['plus', 'premium'],
        isSingle: false
      },
    ]
  },
  {
    id: 'network',
    labelKey: 'network', // ✅ Canviat
    icon: Users,
    path: '/network',
    isSingle: true
  },

  {
    id: 'projectStrocture',
    labelKey: 'architecture', // ✅ Canviat
    icon: Workflow,
    path: '/projectStrocture',
    isSingle: true
  },
];

export const bottomItems: NavItem[] = [
  { id: 'ai', labelKey: 'ai', icon: Bot, path: '#', isSingle: true, notImplemented: true },
  { id: 'settings', labelKey: 'settings', icon: Settings, path: '/settings/profile', isSingle: true },
];

// =================== FILE: src/config/pipeline.ts ===================

export const PIPELINE_STAGES_MAP = [
  { name: 'Prospecte', key: 'prospect' },
  { name: 'Contactat', key: 'contacted' },
  { name: 'Proposta Enviada', key: 'proposalSent' },
  { name: 'Negociació', key: 'negotiation' },
  { name: 'Guanyat', key: 'won' },
  { name: 'Perdut', key: 'lost' },
] as const;
export type PipelineStageName = typeof PIPELINE_STAGES_MAP[number]['name'];

// =================== FILE: src/config/styles/quotes.ts ===================

export const QUOTE_STATUS_MAP = [
  { dbValue: 'Draft',    key: 'draft',    colorClass: 'bg-yellow-900/50 text-yellow-300' },
  { dbValue: 'Sent',     key: 'sent',     colorClass: 'bg-blue-900/50 text-blue-300' },
  { dbValue: 'Accepted', key: 'accepted', colorClass: 'bg-green-900/50 text-green-300' },
  { dbValue: 'Declined', key: 'declined', colorClass: 'bg-red-900/50 text-red-300' },
] as const;


// =================== FILE: src/config/styles/task.ts ===================

export type TaskPriority = 'Baixa' | 'Mitjana' | 'Alta';

interface PriorityStyle {
  badgeClasses: string; // Classes de Tailwind per a les etiquetes
  hexColor: string;     // Color HEX per al calendari i altres elements
}

// ✅ AQUEST ÉS L'ÚNIC LLOC ON HAURÀS DE MODIFICAR ELS COLORS EN EL FUTUR.
export const priorityStyles: Record<TaskPriority, PriorityStyle> = {
  Baixa: {
    badgeClasses: "bg-blue-100 text-blue-800 border-blue-200 dark:bg-blue-900/50 dark:text-blue-300 dark:border-blue-800",
    hexColor: '#3b82f6', // Correspon a tailwind-css blue-500
  },
  Mitjana: {
    badgeClasses: "bg-yellow-100 text-yellow-800 border-yellow-200 dark:bg-yellow-900/50 dark:text-yellow-300 dark:border-yellow-800",
    hexColor: '#f59e0b', // Correspon a tailwind-css yellow-500
  },
  Alta: {
    badgeClasses: "bg-red-100 text-red-800 border-red-200 dark:bg-red-900/50 dark:text-red-300 dark:border-red-800",
    hexColor: '#ef4444', // Correspon a tailwind-css red-500
  },
};

// =================== FILE: src/hooks/useAppNavigation.ts ===================

// Ubicació: /hooks/useAppNavigation.ts

import { useState, useEffect, useCallback } from 'react';
import { usePathname, useRouter } from 'next/navigation';
import { useLocale, useTranslations } from 'next-intl';
import { toast } from 'sonner';
import { useUser } from '@/hooks/useUser';
import { useNavigationStore } from '@/stores/navigationStore';
import { navModules } from '@/config/navigation';
import type { NavItem } from '@/types/app/navigation';

export function useAppNavigation() {
    const pathname = usePathname();
    const router = useRouter();
    const locale = useLocale();
    const t = useTranslations('Navigation');
    const { user, teamRole } = useUser();
    const { setIsNavigating } = useNavigationStore();

    const [activeModule, setActiveModule] = useState<NavItem | null>(null);
    const [isModuleSidebarOpen, setIsModuleSidebarOpen] = useState(false);

    useEffect(() => {
        setIsNavigating(false);
        const prefix = `/${locale}`;
        const pathnameWithoutLocale = pathname.startsWith(prefix) ? pathname.slice(prefix.length) || '/' : pathname;
        
        const currentModule = navModules.find(
            module => !module.isSingle && module.basePath && pathnameWithoutLocale.startsWith(module.basePath)
        );
        
        setActiveModule(currentModule || null);
        if (!currentModule) {
            setIsModuleSidebarOpen(false);
        }
    }, [pathname, locale, setIsNavigating]);
    
    
    // ✅ CORRECCIÓ 1: La funció 't' no canvia durant el cicle de vida del component,
    // per la qual cosa no cal incloure-la a l'array de dependències de 'useCallback'.
    const checkPlanPermission = useCallback((item: NavItem) => {
        const plan = user?.app_metadata?.active_team_plan as string | undefined;
        
        if (item.requiredPlan && item.requiredPlan.length > 0) {
            if (!plan || !item.requiredPlan.includes(plan.toLowerCase())) {
                // ✅ CORRECCIÓ: Obtenim la traducció fora del 'toast'
                const translatedLabel = t(item.labelKey);
                
                toast.info("Funcionalitat Premium", {
                    description: `El mòdul '${translatedLabel}' només està disponible als plans ${item.requiredPlan.join(' o ')}.`,
                    action: {
                        label: "Veure Plans",
                        onClick: () => router.push(`/${locale}/settings/billing`),
                    },
                });
                return false;
            }
        }
        return true;
    }, [user, locale, router, t]); // ✅ Tornem a afegir 't' a les dependències

    // ✅ CORRECCIÓ 2: Simplifiquem aquesta funció.
    // La comprovació de permisos ja es fa a 'handleMainMenuClick' o al 'SocialPlannerPage'.
    // Aquesta funció només s'ha d'encarregar de navegar.
    const handleNavigation = useCallback((item: NavItem) => {
        if (item.allowedRoles && (!teamRole || !item.allowedRoles.includes(teamRole))) {
            toast.error("Accés restringit", { description: "No tens els permisos necessaris per a accedir a aquesta secció." });
            return;
        }

        const targetPath = `/${locale}${item.path}`;
        if (pathname !== targetPath) {
            setIsNavigating(true);
            router.push(targetPath);
        }

        if (activeModule?.children?.some(child => child.id === item.id)) {
            setIsModuleSidebarOpen(false);
        }
    }, [teamRole, pathname, locale, router, setIsNavigating, activeModule]);

    const handleMainMenuClick = useCallback((item: NavItem) => {
        // ✅ CORRECCIÓ CLAU: Aquesta és la lògica que faltava.
        // Si l'ítem és un mòdul (isSingle: false), no fem la comprovació de pla aquí,
        // sinó que simplement obrim el submenú. La comprovació es farà quan es faci
        // clic a l'ítem del submenú (p. ex., 'Planificador') o a la pàgina de destí.
        
        if (item.isSingle) {
            // Si és un enllaç directe (com el Dashboard), comprovem el permís i naveguem.
            if (checkPlanPermission(item)) {
                handleNavigation(item);
            }
        } else {
            // Si és un mòdul amb fills (com Comunicació), només gestionem el submenú.
            if (activeModule?.id === item.id) {
                setIsModuleSidebarOpen(prev => !prev);
            } else {
                setActiveModule(item);
                setIsModuleSidebarOpen(true);
            }
        }
    }, [activeModule, handleNavigation, checkPlanPermission]);

    return {
        activeModule,
        isModuleSidebarOpen,
        setIsModuleSidebarOpen,
        handleNavigation,
        handleMainMenuClick,
    };
}

// =================== FILE: src/hooks/useMediaQuery.ts ===================

/**
 * @file useMediaQuery.ts
 * @summary Aquest fitxer defineix un hook de React personalitzat (`useMediaQuery`) per a la
 * detecció de media queries de CSS al costat del client. És una eina molt útil per
 * crear components que s'adapten o canvien el seu comportament segons la mida de la pantalla
 * (ex: mostrar una vista per a mòbils i una altra per a escriptori).
 */

"use client";

import { useState, useEffect } from 'react';

/**
 * @function useMediaQuery
 * @summary Un hook que retorna 'true' si la 'media query' proporcionada coincideix, i 'false' si no.
 * @param {string} query - La 'media query' de CSS a avaluar (ex: '(max-width: 768px)').
 * @returns {boolean} L'estat de coincidència de la 'media query'.
 */
export function useMediaQuery(query: string) {
  // Inicialitzem l'estat a 'false'. Això és important perquè aquest codi s'executa primer
  // al servidor durant el Server-Side Rendering (SSR), on l'objecte 'window' no existeix.
  // Si l'inicialitzéssim basant-nos en 'window.matchMedia', tindríem un error d'hidratació.
  const [matches, setMatches] = useState(false);

  useEffect(() => {
    // Aquest codi dins de 'useEffect' només s'executa al client (al navegador),
    // on l'objecte 'window' sí que està disponible.
    const media = window.matchMedia(query);

    // Comprovem si l'estat actual de la 'media query' és diferent del nostre estat de React
    // i, si és així, el sincronitzem.
    if (media.matches !== matches) {
      setMatches(media.matches);
    }

    // Creem un oient d'esdeveniments que s'activarà cada vegada que l'estat
    // de la 'media query' canviï (ex: quan l'usuari redimensiona la finestra).
    const listener = () => {
      setMatches(media.matches);
    };

    media.addEventListener('change', listener);
    
    // Funció de neteja: Quan el component que utilitza aquest hook es desmunta,
    // eliminem l'oient d'esdeveniments per evitar fuites de memòria.
    return () => media.removeEventListener('change', listener);
  }, [matches, query]);

  return matches;
}


// =================== FILE: src/hooks/useUser.ts ===================

import { createClient } from '@/lib/supabase/client';
import { type User } from '@supabase/supabase-js';
import { useState, useEffect, useMemo } from 'react';

export function useUser() {
    const [user, setUser] = useState<User | null>(null);
    const [teamRole, setTeamRole] = useState<string | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    
    const supabase = useMemo(() => createClient(), []);

    useEffect(() => {
        const { data: authListener } = supabase.auth.onAuthStateChange(
            (event, session) => {
                const currentUser = session?.user || null;
                // Actualitzem l'usuari immediatament. Això causa una primera re-renderització.
                setUser(currentUser);

                // Imprimim els logs per depurar
                console.log("\n--- onAuthStateChange EVENT (Non-blocking) ---");
                console.log("Event:", event);

                if (currentUser) {
                    const activeTeamId = currentUser.app_metadata?.active_team_id;
                    if (activeTeamId) {
                        // Llança la consulta a la BD, però no l'esperis amb 'await'.
                        // Utilitza .then() per processar el resultat quan arribi.
                        supabase
                            .from('team_members')
                            .select('role')
                            .eq('user_id', currentUser.id)
                            .eq('team_id', activeTeamId)
                            .single()
                            .then(({ data: member }) => {
                                // Quan la consulta acabi, actualitza l'estat del rol.
                                // Això causarà una segona re-renderització, però ja de forma segura.
                                setTeamRole(member?.role || null);
                                setIsLoading(false); // Marquem com a carregat quan tenim tota la info.
                                console.log("Rol obtingut:", member?.role || null);
                                console.log("-----------------------------\n");
                            });
                    } else {
                        // Si no hi ha equip actiu, netegem el rol i finalitzem la càrrega.
                        setTeamRole(null);
                        setIsLoading(false);
                        console.log("No hi ha equip actiu.");
                        console.log("-----------------------------\n");
                    }
                } else {
                    // Si no hi ha usuari, netegem tot i finalitzem la càrrega.
                    setTeamRole(null);
                    setIsLoading(false);
                    console.log("Usuari desconnectat.");
                    console.log("-----------------------------\n");
                }
            }
        );

        return () => {
            authListener?.subscription.unsubscribe();
        };
    }, [supabase]);

    return { user, teamRole, isLoading };
}

// =================== FILE: src/i18n.ts ===================

/**
 * @file src/i18n.ts
 * @summary Configuració central per a la internacionalització (i18n).
 */
import { getRequestConfig } from 'next-intl/server';
import { notFound } from 'next/navigation';

export const locales = ['ca', 'es', 'en'] as const;
export const defaultLocale = 'ca';

// Definim un tipus per als nostres idiomes
type Locale = typeof locales[number];

export default getRequestConfig(async ({ locale }) => {
  // Si `locale` és undefined, utilitzem l'idioma per defecte
  const safeLocale = locale || defaultLocale;

  
  // ✅ CORRECCIÓ: Validació segura de tipus sense 'as any'
  if (!locales.includes(safeLocale as Locale)) {
    notFound();
  }

  return {
    locale: safeLocale, // 👈 Ara és sempre string
    messages: (await import(`../language/${safeLocale}.json`)).default,
  };
});

// =================== FILE: src/lib/actions.ts ===================

"use server";

import { revalidatePath } from "next/cache";
import { validateUserSession } from "@/lib/supabase/session";
import { type ActionResult } from "@/types/shared"; // O la teva definició de ServerActionResult

// Exemple: Acció per esborrar un element
export async function deleteItemAction(itemId: string): Promise<ActionResult> {
    
    // ✅ 1. Validació de la sessió a l'inici.
    const session = await validateUserSession();
    if ('error' in session) {
        return { success: false, message: session.error.message };
    }
    // Desestructurem el que necessitem per a aquesta acció.
    const { supabase, activeTeamId } = session;

    try {
        // ✅ 2. Lògica de negoci.
        // La consulta inclou el filtre de seguretat amb 'activeTeamId'.
        const { error } = await supabase
            .from('items')
            .delete()
            .eq('id', itemId)
            .eq('team_id', activeTeamId);

        if (error) {
            // Si hi ha un error de BBDD, el llancem per ser capturat pel catch.
            throw error;
        }

        // ✅ 3. Revalidació de la memòria cau en cas d'èxit.
        revalidatePath('/items');
        revalidatePath(`/items/${itemId}`);

        // ✅ 4. Retornem una resposta d'èxit.
        return { success: true, message: "Element esborrat correctament." };

    } catch (error: unknown) {
        // ✅ 5. Gestió centralitzada d'errors.
        const message = error instanceof Error ? error.message : "Error desconegut.";
        console.error("Error a deleteItemAction:", message);
        return { success: false, message };
    }
}

// =================== FILE: src/lib/data/dashboard.ts ===================

// src/lib/data/dashboard.ts

import { SupabaseClient } from '@supabase/supabase-js';
import { Database, Tables } from '@/types/supabase';
import { EnrichedTask } from '@/components/features/tasks/TaskDialogManager';

export type ServerActivityIcon = 'fileWarning' | 'checkCircle' | 'clock' | 'users';

export type ServerActivityItem = {
  icon: ServerActivityIcon;
  tone: { bg: string; text: string };
  title: string;
  meta: string;
  href: string;
  date: string | null;
};

// ... (la resta de tipus i funcions de getStats, getTasks, etc. no canvien)
type DashboardStats = {
    total_contacts: number; active_clients: number; opportunities: number; invoiced_current_month: number;
    invoiced_previous_month: number; pending_total: number; expenses_current_month: number; expenses_previous_month: number;
};
export const getStats = async (supabase: SupabaseClient<Database>): Promise<DashboardStats> => {
    const { data, error } = await supabase.rpc('get_dashboard_stats');
    if (error) { console.error('Error fetching dashboard stats:', error); return { total_contacts: 0, active_clients: 0, opportunities: 0, invoiced_current_month: 0, invoiced_previous_month: 0, pending_total: 0, expenses_current_month: 0, expenses_previous_month: 0 }; }
    return data?.[0] || { total_contacts: 0, active_clients: 0, opportunities: 0, invoiced_current_month: 0, invoiced_previous_month: 0, pending_total: 0, expenses_current_month: 0, expenses_previous_month: 0 };
};
export const getTasks = async (supabase: SupabaseClient<Database>, teamId: string): Promise<EnrichedTask[]> => {
    const { data, error } = await supabase.from('tasks').select('*, contacts(id, nom), departments(id, name), profiles:user_asign_id (id, full_name, avatar_url)').eq('team_id', teamId).order('created_at', { ascending: false });
    if (error) { console.error('Error fetching tasks:', error); return []; }
    return data as unknown as EnrichedTask[];
};
export const getOverdueInvoices = async (supabase: SupabaseClient<Database>): Promise<(Tables<'invoices'> & { contacts: { nom: string } | null })[]> => {
    const { data, error } = await supabase.from('invoices').select('*, contacts(nom)').in('status', ['Sent', 'Overdue']).lt('due_date', new Date().toISOString());
    if (error) { console.error('Error fetching overdue invoices:', error); return []; }
    return data ?? [];
};
export const getRecentContacts = async (supabase: SupabaseClient<Database>, teamId: string): Promise<Tables<'contacts'>[]> => {
    const { data, error } = await supabase.from('contacts').select('*').eq('team_id', teamId).order('created_at', { ascending: false });
    if (error) { console.error('Error fetching recent contacts:', error); return []; }
    return data ?? [];
};

export const getRecentActivities = (
    invoices: (Tables<'invoices'> & { contacts: { nom: string } | null })[],
    tasks: EnrichedTask[],
    contacts: Tables<'contacts'>[]
): ServerActivityItem[] => {
    const activities: ServerActivityItem[] = [];

    // ✅ CORRECCIÓ: Augmentem el límit per recollir més dades de cada tipus
    invoices.slice(0, 7).forEach(inv => {
        if (inv.due_date) {
            activities.push({
                icon: 'fileWarning',
                tone: { bg: 'bg-destructive/10', text: 'text-destructive' },
                title: `Factura vençuda: ${inv.contacts?.nom ?? 'client'}`,
                meta: `Vencia el ${new Date(inv.due_date).toLocaleDateString()}`,
                href: '/finances/facturacio',
                date: inv.due_date
            });
        }
    });

    tasks.slice(0, 7).forEach(task => {
        if (task.created_at) {
            activities.push({
                icon: task.is_completed ? 'checkCircle' : 'clock',
                tone: { bg: task.is_completed ? 'bg-success/10' : 'bg-yellow-500/10', text: task.is_completed ? 'text-success' : 'text-yellow-600' },
                title: task.title,
                meta: `Tasca creada el ${new Date(task.created_at).toLocaleDateString()}`,
                href: '/dashboard',
                date: task.created_at
            });
        }
    });

    contacts.slice(0, 7).forEach(c => {
        if (c.created_at) {
            activities.push({
                icon: 'users',
                tone: { bg: 'bg-primary/10', text: 'text-primary' },
                title: `Nou contacte: ${c.nom}`,
                meta: `Afegit el ${new Date(c.created_at).toLocaleDateString()}`,
                href: `/crm/contactes/${c.id}`,
                date: c.created_at
            });
        }
    });

    return activities
        .sort((a, b) => new Date(b.date!).getTime() - new Date(a.date!).getTime())
        // ✅ CORRECCIÓ: Eliminem el .slice(0, 5) per enviar més dades al client.
        // Podem posar un límit superior per seguretat, per exemple, 15.
        .slice(0, 15);
};

// =================== FILE: src/lib/permissions.config.ts ===================

// /src/lib/permissions.config.ts  (AQUEST ÉS EL FITXER UNIVERSAL I SEGUR)

// Definim explícitament els rols per a més seguretat de tipus.
export const ROLES_LIST = ['owner', 'admin', 'member'] as const;
export type Role = typeof ROLES_LIST[number];

// Definim els permisos de manera granular i clara.
export const PERMISSIONS = {
    MANAGE_TEAM_MEMBERS: 'manage_team_members',
    MANAGE_TEAM_ROLES: 'manage_team_roles',
    MANAGE_TEAM_PROFILE: 'manage_team_profile',
    VIEW_BILLING: 'view_billing',
    MANAGE_BILLING: 'manage_billing',
    VIEW_BLACKLIST: 'view_blacklist',
    MANAGE_BLACKLIST: 'manage_blacklist',
    VIEW_TEAM_STATS: 'view_team_stats',
    MANAGE_INTEGRATIONS: 'manage_integrations',
} as const;

export type Permission = typeof PERMISSIONS[keyof typeof PERMISSIONS];

// El nostre mapa de rols a permisos, 100% tipat.
export const ROLES: Record<Role, Permission[]> = {
    owner: [
        PERMISSIONS.MANAGE_TEAM_MEMBERS,
        PERMISSIONS.MANAGE_TEAM_ROLES,
        PERMISSIONS.MANAGE_TEAM_PROFILE,
        PERMISSIONS.VIEW_BILLING,
        PERMISSIONS.MANAGE_BILLING,
        PERMISSIONS.VIEW_BLACKLIST,
        PERMISSIONS.MANAGE_BLACKLIST,
        PERMISSIONS.VIEW_TEAM_STATS,
        PERMISSIONS.MANAGE_INTEGRATIONS,
    ],
    admin: [
        PERMISSIONS.MANAGE_TEAM_MEMBERS,
        PERMISSIONS.MANAGE_TEAM_ROLES,
        PERMISSIONS.MANAGE_TEAM_PROFILE,
        PERMISSIONS.VIEW_BILLING,
        PERMISSIONS.MANAGE_BILLING,
        PERMISSIONS.VIEW_BLACKLIST,
        PERMISSIONS.MANAGE_BLACKLIST,
        PERMISSIONS.VIEW_TEAM_STATS,
        PERMISSIONS.MANAGE_INTEGRATIONS,
    ],
    member: [
        PERMISSIONS.VIEW_BLACKLIST,
    ],
};

/**
 * Funció "pura" que comprova si un rol té un permís.
 * És segura per a ser executada a client i servidor.
 */
export const hasPermission = (role: Role | undefined | null, permission: Permission): boolean => {
    if (!role) return false;
    return ROLES[role]?.includes(permission) || false;
};

// =================== FILE: src/lib/permissions.ts ===================

// /src/lib/permissions.ts (AQUEST FITXER ÉS NOMÉS PER AL SERVIDOR)

import type { SupabaseClient } from "@supabase/supabase-js";
import { validateUserSession, type ValidatedSession, type SessionError } from './supabase/session';

// ✅ Importem les definicions i helpers universals des del nou fitxer de configuració.
import { 
    hasPermission, 
    type Role, 
    type Permission 
} from './permissions.config'; 
export * from './permissions.config'; // Re-exportem tot per a facilitar les importacions

/**
 * Obté el rol d'un usuari en un equip. Aquesta funció necessita la BD,
 * per tant, es considera una funció de servidor.
 */
export async function getUserRoleInTeam(
    supabase: SupabaseClient,
    userId: string,
    teamId: string
): Promise<Role | null> {
    const { data: member } = await supabase
        .from('team_members')
        .select('role')
        .match({ user_id: userId, team_id: teamId })
        .single();
    
    return member?.role as Role | null;
}

// El nostre "guardià de seguretat" per a Server Actions, que depèn del servidor.
type ValidatedSessionWithRole = ValidatedSession & { userRole: Role };

export async function validateSessionAndPermission(
    requiredPermission: Permission
): Promise<ValidatedSessionWithRole | SessionError> {
    const sessionValidation = await validateUserSession();
    if ('error' in sessionValidation) return sessionValidation;
    
    const { supabase, user, activeTeamId } = sessionValidation;
    const userRole = await getUserRoleInTeam(supabase, user.id, activeTeamId);

    if (!hasPermission(userRole, requiredPermission)) {
        return { error: { message: "No tens permisos per a realitzar aquesta acció." } };
    }

    return { supabase, user, activeTeamId, userRole: userRole! };
}

// =================== FILE: src/lib/supabase/admin.ts ===================

// A /lib/supabase/admin.ts
import { createClient } from '@supabase/supabase-js';

// NOTA: Aquest client NOMÉS s'ha d'utilitzar en entorns de servidor (Server Actions, Route Handlers).
// Mai l'exposis al client!
export const createAdminClient = () => {
  if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
    throw new Error('Supabase URL or service role key is missing.');
  }

  return createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY,
    {
      auth: {
        autoRefreshToken: false,
        persistSession: false,
      },
    }
  );
};

// =================== FILE: src/lib/supabase/client.ts ===================

// Aquest arxiu crea un client de Supabase dissenyat per a ser utilitzat de forma segura
// als "Client Components" (arxius amb la directiva "use client").

import { createBrowserClient } from '@supabase/ssr';

/**
 * Funció per crear una instància del client de Supabase per al navegador.
 * Aquesta instància és un "singleton", el que significa que només es crea una vegada
 * i es reutilitza a tota l'aplicació del costat del client.
 */
export function createClient() {
  // 'createBrowserClient' és la funció recomanada de la llibreria '@supabase/ssr'
  // per a la interacció des del navegador. No necessita gestionar les cookies manualment.
  return createBrowserClient(
    // Aquestes són variables d'entorn públiques. El prefix 'NEXT_PUBLIC_'
    // les fa accessibles al codi del navegador. MAI s'han de posar claus
    // secretes amb aquest prefix.
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  );
}


// =================== FILE: src/lib/supabase/server.ts ===================

import { createServerClient} from '@supabase/ssr'
import { cookies } from 'next/headers'
import { createClient as createStandardClient } from "@supabase/supabase-js";
import { Database } from '@/types/supabase'; // Importem el tipus Database

export const createClient = () => {
    const cookieStore = cookies()

    return createServerClient<Database>( // <-- L'únic canvi és afegir <Database> aquí
        process.env.NEXT_PUBLIC_SUPABASE_URL!,
        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
        {
            cookies: {
                // ✅ NOVA IMPLEMENTACIÓ AMB getAll i setAll
                async getAll() {
                    return (await cookieStore).getAll()
                },
                async setAll(cookiesToSet) {
                    try {
                        // Utilitzem un bucle 'for...of' per a gestionar correctament les promeses
                        // si en el futur 'set' fos asíncron.
                        for (const { name, value, options } of cookiesToSet) {
                            (await cookieStore).set(name, value, options)
                        }
                    } catch (error) {
                        // ✅ Ara passem l'objecte 'error' al console.error
                        console.error("Hi ha hagut un error:", error);
                        // Opcionalment, pots mostrar un missatge més específic a l'usuari
                        // toast.error("Error", { description: error.message });
                    }
                },
            },
        }
    )
}

// La funció per a crear el client d'administrador no canvia.
export const createAdminClient = () => {
    return createStandardClient(
        process.env.NEXT_PUBLIC_SUPABASE_URL!,
        process.env.SUPABASE_SERVICE_ROLE_KEY!,
        { auth: { autoRefreshToken: false, persistSession: false } }
    );
};

// =================== FILE: src/lib/supabase/session.ts ===================

import { createClient } from "@/lib/supabase/server";
import { redirect } from "next/navigation";
import type { User, SupabaseClient } from "@supabase/supabase-js";

// Aquest tipus representa una sessió completament validada.
export type ValidatedSession = {
    supabase: SupabaseClient;
    user: User;
    activeTeamId: string;
};

// Aquest tipus representa una resposta d'error estandarditzada.
export type SessionError = {
    error: { message: string };
};

// A /lib/session.ts (o on tinguis aquest codi)

// Funció base que conté la lògica comuna
async function getSessionCore() {
    const supabase = createClient();
    const { data: { user } } = await supabase.auth.getUser();

    if (!user) {
        return { user: null, supabase: null, activeTeamId: null };
    }

    const activeTeamId = user.app_metadata?.active_team_id as string | null;
    return { user, supabase, activeTeamId };
}

// Nova versió per a Server Actions
export async function validateUserSession(): Promise<ValidatedSession | SessionError> {
    const { user, supabase, activeTeamId } = await getSessionCore();

    if (!user || !supabase) {
        return { error: { message: "Usuari no autenticat." } };
    }
    if (!activeTeamId) {
        return { error: { message: "No s'ha pogut determinar l'equip actiu." } };
    }

    // El tipat ens assegura que user i supabase no són nulls aquí
    return { supabase, user, activeTeamId };
}

// Nova versió per a Pàgines
export async function validatePageSession() {
    const { user, supabase, activeTeamId } = await getSessionCore();

    if (!user) {
        redirect('/login');
    }
    if (!activeTeamId) {
        // Redirigim a un lloc on pugui crear o seleccionar un equip
        redirect('/settings/team');
    }

    // El redirect atura l'execució, així que sabem que aquí tot és vàlid
    return { supabase: supabase!, user, activeTeamId };
}

// =================== FILE: src/lib/supabase/teams.ts ===================

import type { SupabaseClient } from "@supabase/supabase-js";
import { createClient } from "@/lib/supabase/server"; // Importem el server client

// Definim el tipus de retorn esperat per a tenir un codi ben tipat
export type TeamMemberWithProfile = {
    role: string;
    profiles: {
        id: string;
        full_name: string | null;
        email: string | null;
        avatar_url: string | null;
    } | null;
};

/**
 * Funció reutilitzable que obté tots els membres d'un equip juntament amb
 * les dades dels seus perfils. Encapsula la lògica del "join manual".
 * @param supabase - La instància del client de Supabase.
 * @param teamId - L'ID de l'equip del qual volem obtenir els membres.
 * @returns Una promesa que resol a una llista de membres amb els seus perfils.
 */
// Aquesta funció es torna molt més simple i ràpida
export async function getTeamMembersWithProfiles(
    supabase: SupabaseClient,
    teamId: string
) {
    // La funció només ha de fer la consulta i retornar la resposta.
    // Aquesta resposta SEMPRE serà un objecte amb format { data, error }.
    const response = await supabase
        .from('team_members_with_profiles')
        .select('*')
        .eq('team_id', teamId);

    // Si hi ha un error, 'response.error' tindrà valor.
    // Si no, 'response.data' tindrà valor. Però el format és el mateix.
    return response;
}


/**
 * Obté les dades completes de l'equip actiu d'un usuari des d'un Server Component.
 * Aquesta versió és robusta i soluciona la 'race condition' del registre.
 *
 * ESTRATÈGIA:
 * 1. (FONT PRIMÀRIA) Intenta obtenir l'ID de l'equip des del token de l'usuari (app_metadata).
 * Això és instantani i fiable després de l'autenticació.
 * 2. (FALLBACK) Si no existeix al token, el busca a la taula de perfils.
 * Això garanteix compatibilitat amb usuaris antics.
 *
 * @returns Una promesa que resol a les dades de l'equip o null si no se'n troba cap.
 */
export async function getActiveTeam() {
  // ✅ CORRECCIÓ: Cridem a la funció sense passar-li el tipus. Ja el porta per defecte.
  const supabase = createClient();

  const { data: { user } } = await supabase.auth.getUser();
  if (!user) {
    return null;
  }

  let activeTeamId: string | null | undefined = user.app_metadata?.active_team_id;

  // Fallback...
  if (!activeTeamId) {
    console.warn("active_team_id no trobat a app_metadata. Fent fallback a la taula de perfils.");
    // Ara 'supabase.from('profiles')' tindrà autocompletat i seguretat de tipus!
    const { data: profile } = await supabase
      .from('profiles')
      .select('active_team_id')
      .eq('id', user.id)
      .single();
    
    activeTeamId = profile?.active_team_id;
  }

  // Si després de tot no tenim un ID, no podem continuar
   if (!activeTeamId) {
    console.error("No s'ha pogut determinar l'equip actiu ni des del token ni des del perfil.");
    return null;
  }

  const { data: team, error: teamError } = await supabase
    .from('teams')
    .select('*')
    .eq('id', activeTeamId)
    .single();

  if (teamError) {
    console.error("Error en obtenir les dades de l'equip actiu:", teamError.message);
    return null;
  }

  return team;
}

// =================== FILE: src/lib/utils/formatters.ts ===================

import { ca, es, enUS } from "date-fns/locale";
import { format } from "date-fns";

/**
 * Obté l'objecte de 'locale' de date-fns basat en l'string del locale actual (ex: 'ca', 'es').
 */
export const getDateLocale = (locale: string) => {
    switch (locale) {
        case 'es': return es;
        case 'en': return enUS;
        default: return ca;
    }
};

/**
 * Formata una data en una cadena de text localitzada.
 * @param date La data a formatar (pot ser string, Date, o null).
 * @param formatString El format desitjat (ex: "PPP", "dd MMM, yyyy").
 * @param currentLocale El locale actual ('ca', 'es', 'en').
 * @returns La data formatada o un guió si la data és nul·la.
 */
export function formatLocalizedDate(
    date: string | Date | null | undefined,
    formatString: string,
    currentLocale: string
): string {
    if (!date) return '-';
    const locale = getDateLocale(currentLocale);
    return format(new Date(date), formatString, { locale });
}

/** Formata una data a un format localitzat (e.g., dd/mm/yyyy) */
export function formatDate(dateStr: string | number | Date, locale: string = 'ca'): string {
    if (!dateStr) return '';
    try {
        return new Date(dateStr).toLocaleDateString(locale, {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
        });
    } catch {
        return String(dateStr);
    }
}

/** Formata una quantitat amb la moneda (e.g., € 1.234,56) */
export function formatCurrency(amount: number | null | undefined, currency: string = 'EUR', locale: string = 'ca'): string {
    if (amount === null || amount === undefined) return '€ 0,00';
    try {
        return amount.toLocaleString(locale, {
            style: 'currency',
            currency: currency,
            minimumFractionDigits: 2,
        });
    } catch {
        return `${currency} ${amount.toFixed(2)}`;
    }
}

// =================== FILE: src/lib/utils/media.ts ===================

// Ubicació: /lib/utils/media.ts (fitxer nou)

/**
 * Genera una miniatura (thumbnail) a partir del primer fotograma d'un fitxer de vídeo.
 * @param file El fitxer de vídeo.
 * @returns Una promesa que resol a un Data URL (string) de la imatge generada.
 */
export const generateVideoThumbnail = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
        const video = document.createElement('video');
        const canvas = document.createElement('canvas');
        const context = canvas.getContext('2d');

        if (!context) {
            return reject(new Error('No es pot obtenir el context del canvas.'));
        }

        // Carreguem el vídeo en memòria
        video.src = URL.createObjectURL(file);
        video.muted = true;

        // Quan el vídeo ha carregat les seves metadades (dimensions, durada)...
        video.onloadedmetadata = () => {
            video.currentTime = 1; // Anem al segon 1 per evitar fotogrames negres
        };

        // Quan el fotograma actual ja es pot renderitzar...
        video.onseeked = () => {
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            context.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);
            
            // Netegem l'objecte URL per alliberar memòria
            URL.revokeObjectURL(video.src);
            
            // Retornem la imatge del canvas com a Data URL
            resolve(canvas.toDataURL('image/jpeg', 0.8));
        };

        video.onerror = () => {
            reject(new Error('Error en carregar el vídeo.'));
        };
    });
};

// =================== FILE: src/lib/utils/templates.ts ===================

// Ubicació: /lib/utils/templates.ts

/**
 * Funció utilitària pura per substituir les variables (ex: {{nom_contacte}}) en un text
 * pels seus valors corresponents.
 * @param templateString El text de la plantilla amb variables.
 * @param values Un objecte amb els valors per a cada variable.
 * @returns El text amb les variables substituïdes.
 */
export const renderTemplate = (templateString: string, values: { [key: string]: string }): string => {
    if (!templateString) return '';
    
    // Utilitza una expressió regular per buscar totes les ocurrències de {{...}}
    return templateString.replace(/\{\{([^}]+)\}\}/g, (_match, varName) => {
        const key = varName.trim();
        // Retorna el valor si existeix, o la variable original si no.
        return values[key] || `{{${key}}}`;
    });
};

// =================== FILE: src/lib/utils/utils.ts ===================

import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";
import DOMPurify from 'dompurify';

/**
 * Funció d'utilitat per fusionar classes de Tailwind CSS de forma intel·ligent.
 */
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

/**
 * Elimina el prefix de l'idioma d'una ruta.
 */
export const getCleanPathname = (pathname: string, locale: string): string => {
    const prefix = `/${locale}`;
    return pathname.startsWith(prefix) ? pathname.slice(prefix.length) || '/' : pathname;
};

/**
 * Saneja una cadena HTML per evitar atacs XSS.
 */
export function sanitizeHtml(html: string | null | undefined, options?: DOMPurify.Config): string {
  if (typeof window === 'undefined' || !html) {
    return '';
  }

  const configToUse = options || { ALLOWED_TAGS: [], ALLOWED_ATTR: [] };
  
  // ✅ SOLUCIÓ CORRECTA: Ignorem l'error de tipus esperat amb @ts-expect-error.
  // Si en el futur l'error desapareix, el compilador ens avisarà.
  // @ts-expect-error TypeScript is confused by the DOMPurify config type in this context.
  return DOMPurify.sanitize(html, configToUse);
}

// =================== FILE: src/middleware.ts ===================

// src/middleware.ts (FIX FINAL DE BUCLE I PERSISTÈNCIA)

import { createServerClient } from '@supabase/ssr';
import { NextResponse, type NextRequest } from 'next/server';
import createIntlMiddleware from 'next-intl/middleware';
import { locales, defaultLocale } from './i18n';

const LOCALE_COOKIE_NAME = 'NEXT_LOCALE';
const isProduction = process.env.NODE_ENV === 'production';
type AppLocale = typeof locales[number];

export async function middleware(request: NextRequest) {

    const allCookies = request.cookies.getAll();
    const localeCookie = allCookies.find(c => c.name === LOCALE_COOKIE_NAME);
    const storedLocale = localeCookie?.value;

    // 🔑 CLAU FIX 1 (TypeScript): Determinem el locale per a la redirecció d'Auth. 
    // Utilitzem la cookie si és un idioma suportat, altrament el default.
    const authRedirectLocale: AppLocale = (storedLocale && locales.includes(storedLocale as AppLocale))
        ? (storedLocale as AppLocale)
        : defaultLocale;

    // 1. Next-intl processa la petició
    const handleI18nRouting = createIntlMiddleware({
        locales,
        defaultLocale,
        localeDetection: true, // Mantenim la detecció de la cookie
        localePrefix: 'always',
        localeCookie: {
            name: LOCALE_COOKIE_NAME,
            path: '/',
            maxAge: 60 * 60 * 24 * 365,
            sameSite: 'lax',
            secure: isProduction,
        }
    });

    const response = handleI18nRouting(request);

    // ----------------------------------------------------------------
    // 🔑 CLAU FIX 2: ATURAR EL BUCLE. Si next-intl ja ha decidit redirigir (canviant l'idioma), 
    // hem d'aturar la nostra lògica d'Auth i deixar que next-intl executi la seva redirecció.
    // ----------------------------------------------------------------
    if (response.headers.get('Location')) {
        // En aquest punt, next-intl ha determinat que l'usuari ha de ser redirigit a un altre URL
        // (p. ex., de / a /ca o de /es a /ca, o viceversa). Deixem que la redirecció es produeixi.
        return response;
    }
    // ----------------------------------------------------------------

    // 2. Extreure dades i executar la lògica de Supabase
    const pathnameWithoutLocale = request.nextUrl.pathname.replace(new RegExp(`^/(${locales.join('|')})`), '') || '/';

    // Cridem Supabase per obtenir l'usuari (necessari per a la redirecció d'Auth)
    const supabase = createServerClient(
        process.env.NEXT_PUBLIC_SUPABASE_URL!,
        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
        {
            cookies: {
                getAll() { return request.cookies.getAll(); },
                setAll(cookiesToSet) {
                    cookiesToSet.forEach(({ name, value, options }) => response.cookies.set(name, value, options));
                },
            },
        }
    );
    const { data: { user } } = await supabase.auth.getUser();


    // 3. Lògica de Redirecció (Auth) - Utilitza el locale fiable
    const publicPrefixes = ['/login', '/signup', '/auth', '/accept-invite', '/quote', '/invitation/accept'];
    const isPublicPath = pathnameWithoutLocale === '/' || publicPrefixes.some(p => pathnameWithoutLocale.startsWith(p));
    const isAppPath = !isPublicPath;

    // --- REGLA 1: Usuari NO autenticat ---
    if (!user && isAppPath) {
        // Redirigim a /<locale_cookie>/login
        return NextResponse.redirect(new URL(`/${authRedirectLocale}/login`, request.url));
    }

    // --- REGLA 2: Usuari SÍ ESTÀ AUTENTICAT ---
    if (user && isPublicPath) {
        // Redirigim de la ruta pública (com / o /login) a /<locale_cookie>/dashboard
        return NextResponse.redirect(new URL(`/${authRedirectLocale}/dashboard`, request.url));
    }

    // Si no hi ha cap redirecció d'Auth, retornem la resposta de next-intl (que farà el rewrite).
    return response;
}

export const config = {
    matcher: ['/((?!api|_next/static|_next/image|.*\\..*).*)'],
};

// =================== FILE: src/stores/navigationStore.ts ===================

import { create } from 'zustand';

interface NavigationState {
  isNavigating: boolean;
  setIsNavigating: (isNavigating: boolean) => void;
  isChatbotOpen: boolean; // ✅ Nou estat
  toggleChatbot: () => void; // ✅ Nova acció
}

export const useNavigationStore = create<NavigationState>((set) => ({
  isNavigating: false,
  setIsNavigating: (isNavigating) => set({ isNavigating }),
  isChatbotOpen: false, // Per defecte, està tancat
  toggleChatbot: () => set((state) => ({ isChatbotOpen: !state.isChatbotOpen })),
}));

// =================== FILE: src/types/app/navigation.ts ===================

// src/types/navigation.ts
import type { LucideIcon } from 'lucide-react';

/**
 * @summary Aquesta constant defineix TOTES les claus de traducció possibles per a la navegació.
 * És la nostra font única de la veritat. Si afegeixes un nou element al menú,
 * has d'afegir la seva 'labelKey' aquí primer.
 */
export const NAVIGATION_KEYS = [
  'dashboard', 'crm', 'finances', 'communication', 'network', 'architecture',
  'crmGeneral', 'contacts', 'pipeline', 'quotes', 'concepts', 'activities', // ✅ 'concepts' i 'activities' afegits
  'invoicing', 'expenses', 'inbox', 'templates', 'marketing', 'profile', 'customization',
  'ai', 'settings', 'planner', 'calendar', 'projects', 'tasks', 'reports', 'suppliers' // ✅ 'suppliers' afegit
] as const;

/**
 * @summary Aquest tipus es genera automàticament a partir de la constant de dalt.
 * Crea una unió de tots els possibles valors: 'dashboard' | 'crm' | 'finances' | ...
 */
export type NavigationKey = typeof NAVIGATION_KEYS[number];

/**
 * @summary Aquesta és la interfície per a cada element de navegació.
 * Ara utilitza 'NavigationKey' per assegurar que 'labelKey' sempre sigui un valor vàlid.
 */
export interface NavItem {
  id: string;
  labelKey: NavigationKey; // ✅ Ara és totalment segur i tipat.
  descKey?: NavigationKey; // ✅ NOU: Clau per a la descripció (opcional).
  icon: LucideIcon;
  path: string;
  isSingle: boolean;
  basePath?: string;
  children?: NavItem[];
  notImplemented?: boolean;
  // ✅ AQUÍ AFEGIM LA NOVA PROPIETAT
  // És opcional ('?') perquè no tots els enllaços requeriran un pla específic.
  // Serà un array de strings, ex: ['plus', 'premium'].
  requiredPlan?: string[];
  allowedRoles?: string[]; // Rols que poden accedir (ex: ['owner', 'admin'])


}

// =================== FILE: src/types/comunicacio/inbox.ts ===================

/**
 * @file src/types/crm/inbox.ts
 * @summary Defineix els tipus de dades per a l'Inbox (Tiquets, Plantilles) i Activitats.
 */

import { z } from 'zod';
import type { Contact } from '../crm/index';

// --- MAPA I TIPUS D'ESTAT DE TIQUET ---


export const TICKET_STATUS_MAP = [
  // ✅ CANVI: D'"Obert" a "NoLlegit"
  { dbValue: 'NoLlegit', key: 'unread' }, 
  { dbValue: 'Llegit', key: 'read' },
  { dbValue: 'Respost', key: 'replied' },
] as const;
export type TicketStatus = typeof TICKET_STATUS_MAP[number]['dbValue'];

// --- TIPUS PRINCIPALS (AMB ZOD PER A MÉS SEGURETAT) ---
export type TicketFilter = 'tots' | 'rebuts' | 'enviats' | 'noLlegits';

// Esquema de validació per a un Tiquet
export const ticketSchema = z.object({
  id: z.number(),
  user_id: z.string().uuid(),
  contact_id: z.string().uuid().nullable(),
  
  sender_name: z.string().nullable(),
  sender_email: z.string().email(), // L'email ha de ser un string vàlid
  subject: z.string().nullable(),
  preview: z.string().nullable(),
  
  sent_at: z.string().datetime(),
  status: z.custom<TicketStatus>(), // Ha de ser 'Obert', 'Llegit', o 'Respost'
  type: z.enum(['rebut', 'enviat']), // Ha de ser 'rebut' o 'enviat'
  body: z.string().optional().nullable(),
  contacts: z.custom<Contact>().nullable(),
});

export type Ticket = z.infer<typeof ticketSchema>;

// Tipus que representa les dades en brut que arriben de la funció RPC
export type TicketFromRpc = {
  id: number;
  user_id: string;
  subject: string | null;
  body: string | null;
  status: string | null;
  provider_message_id: string | null;
  type: string | null;
  preview: string | null;
  sent_at: string | null;
  sender_name: string | null;
  sender_email: string | null;
  created_at: string;
  contact_id: string | null;
  provider: string | null;
  attachments: unknown;
  // ✅ CORRECCIÓ: AFEGIT el camp 'empresa' per coincidir amb la funció SQL
  contacts: { id: string; nom: string; email: string; empresa: string | null; } | null;
  assignment: { deal_id: string | null } | null;
};


/**
 * ✅ NOU: Funció transformadora que converteix de manera segura un objecte RPC a un tipus Ticket.
 * Aquesta funció és la clau per resoldre tots els errors de tipus.
 */
export function transformRpcToTicket(t: TicketFromRpc): Ticket {
  // Llista de valors permesos per a 'status'
  const validStatusValues = TICKET_STATUS_MAP.map(s => s.dbValue);

  return {
    ...t,
    // --- Normalització de camps que no poden ser nuls a Zod ---
    sender_email: t.sender_email ?? 'desconegut@email.com',
    sent_at: t.sent_at ?? new Date().toISOString(),

    // --- Normalització de camps amb valors restringits (enums) ---
    status: (validStatusValues.includes(t.status as TicketStatus) ? t.status : 'Obert') as TicketStatus,
    type: (t.type === 'enviat' ? 'enviat' : 'rebut'), // Si no és 'enviat', per defecte és 'rebut'
    
    // --- Assegurem que els camps que poden ser nuls es mantinguin ---
    sender_name: t.sender_name,
    subject: t.subject,
    preview: t.preview,
    contact_id: t.contact_id,
    body: t.body,
    contacts: t.contacts,
  };
}

// ... (la resta de tipus com templateSchema, activitySchema, etc. es mantenen iguals)
export const templateSchema = z.object({
  id: z.number(),
  name: z.string(),
  subject: z.string(),
  body: z.string(),
  variables: z.array(z.string()).nullable(),
});
export type Template = z.infer<typeof templateSchema>;

export const activitySchema = z.object({
    id: z.string(),
    created_at: z.string(),
    type: z.string(),
    content: z.string(),
    is_read: z.boolean(),
    contact_id: z.string().nullable(),
    contact_name: z.string().nullable(),
    contact_email: z.string().nullable(),
    contacts: z.object({ nom: z.string().nullable() }).nullable(),
});
export type Activity = z.infer<typeof activitySchema>;

// =================== FILE: src/types/comunicacio/SocialPost.ts ===================

// ✅ NOU: Tipus per a una publicació social, tal com la guardem a la base de dades.
export interface SocialPost {
  id: number;
  user_id: string;
  provider: string[];
  content: string | null;
  media_url: string | null;
  media_type: string | null;
  // ✅ NOU: Afegim 'partial_success' als estats possibles.
  status: 'draft' | 'scheduled' | 'published' | 'failed' | 'partial_success';
  scheduled_at: string | null;
  created_at: string;
}

// =================== FILE: src/types/crm/calendar.ts ===================

import { Tables } from '@/types/supabase';

// Aquest tipus ara defineix 'profiles' amb les dues propietats que seleccionem a la consulta,
// fent-lo més precís i ajudant a TypeScript.
export type TaskWithAssignee = Omit<Tables<'tasks'>, 'user_id'> & {
  profiles: {
    id: string;
    full_name: string | null;
    avatar_url: string | null; // ✅ SOLUCIÓ: Afegim la propietat que faltava.

  } | null;
  user_id: string | null; // Mantenim user_id per al diàleg d'edició
};


// src/types/crm/index.ts (o el teu fitxer de tipus)

export interface CalendarEvent {
  id: number | string; // ✅ SOLUCIÓ 1: Ara pot ser un número o un text.
  title: string;
  start: Date;
  end: Date;
  allDay?: boolean;
  resource?: unknown; // Use 'unknown' for a safer alternative to 'any'.
  eventType?: 'task' | 'quote' | 'email' | 'receivedEmail' | 'skeleton'; // ✅ SOLUCIÓ 2: Afegim 'skeleton' com a tipus vàlid.
}

// 🧠 Definició centralitzada de l'estat dels filtres (ActiveSources)
// Aquest tipus és el contracte entre el Client Component i la Server Action.
export type ActiveSources = {
    tasks: boolean;
    quotes: boolean;
    emails: boolean;
    receivedEmails: boolean;
};

// Tipus per a l'estat del formulari
export type FormState = {
  error?: {
    form?: string;
    db?: string;
    title?: string[];
    description?: string[];
    due_date?: string[];
    priority?: string[];
    user_id?: string[];
  };
  success?: boolean;
};

// =================== FILE: src/types/crm/contacts.ts ===================

/**
 * @file src/types/crm/contacts.ts
 * @summary Defineix els tipus de dades per als Contactes i el Dashboard General del CRM.
 */

// Importem tipus d'altres mòduls a través del fitxer 'index.ts' per evitar errors de dependència circular.
import type { Activity, Quote, Opportunity, Invoice, Task , CrmNotification} from './index';

// --- MAPA I TIPUS D'ESTAT DE CONTACTE ---

export const CONTACT_STATUS_MAP = [
  { code: 'L', key: 'Lead' },
  { code: 'P', key: 'Proveidor' },
  { code: 'C', key: 'Client' },
] as const;

type ContactStatusCode = typeof CONTACT_STATUS_MAP[number]['code'];

// --- TIPUS PRINCIPALS ---

export type Contact = {
  id: string;
  nom: string;
  nif?: string | null;
  empresa: string | null;
  created_at?: string;
  email?: string | null;
  telefon?: string | null;
  estat?: ContactStatusCode;
  valor?: number | null;
  user_id?: string;
  job_title?: string | null;
  industry?: string | null;
  lead_source?: string | null;
  birthday?: string | null;
  notes?: string | null;
  children_count?: number | null;
  partner_name?: string | null;
  hobbies?: string[] | null;
  address?: { city: string | null } | null;
  social_media?: { linkedin: string | null } | null;
  ubicacio?: string | null;
  last_interaction_at?: string | null;


};

// Tipus Mestre per a les dades relacionades d'un contacte
export type ContactRelatedData = {
  quotes: Quote[];
  opportunities: Opportunity[];
  invoices: Invoice[];
  activities: Activity[];
}

// Tipus mestre per a les dades del Dashboard General
export type CrmData = {
  stats: {
    totalContacts: number;
    newContactsThisMonth: number;
    opportunities: number;
    pipelineValue: number;
    avgRevenuePerClient: number;
    avgConversionTimeDays: number;
  };
  funnel: {
    leads: number;
    quoted: number;
    clients: number;
  };
  topClients: {
    id: string;
    nom: string;
    total_invoiced: number;
  }[];
  coldContacts: {
    id: string;
    nom: string;
    last_interaction_at: string;
  }[];
  bestMonths: {
    month: string;
    total: number;
  }[];
  unreadActivities: Activity[];
};

// Interfície per a les estadístiques principals del Dashboard
export interface DashboardStats {
  totalContacts: number;
  activeClients: number;
  opportunities: number;
  invoiced: number;
  pending: number;
  expenses: number;
  invoicedChange: string;
  expensesChange: string;
  invoicedIsPositive: boolean;
  expensesIsPositive: boolean;
}

// Interfície per al conjunt de dades inicials que el Dashboard rep
export interface DashboardInitialData {
  stats: DashboardStats;
  tasks: Task[]; // Assegura't que Task s'importi des de './index'
  contacts: Contact[];
  overdueInvoices: Invoice[];
  attentionContacts: Contact[];
  notifications: CrmNotification[]; // ✅ Assegura't que aquí també s'usa el nou nom
}

// =================== FILE: src/types/crm/deals.ts ===================

// Dins de /types/crm/deals.ts (per exemple)

export interface Stage {
  id: string;
  name: string;
  position: number; 
 
}

// També pots exportar altres tipus relacionats aquí
export interface Deal {
  id: string;
  title: string;
  value: number;
  stage_id: string;
 
}

// =================== FILE: src/types/crm/general.ts ===================


// ✅ NOU: Tipus per a les dades inicials del diàleg de composició de correu
export type ComposeEmailData = {
  contactId: string;
  to: string;
  subject: string;
  body: string;
};
export type CompanyProfileObject = {
  id: string;
  user_id: string;
  company_name?: string | null;
  company_tax_id?: string | null;
  company_address?: string | null;
  company_email?: string | null;
  company_phone?: string | null;
  logo_url?: string | null;
};
// ✅ NOU: Definim i exportem el tipus per a una Tasca (Task)
export type Task = {
  id: string; // O number, depenent de la teva BD
  created_at: string;
  title: string;
  is_completed: boolean;
  contact_id: string | null;
  user_id: string;

  // ✅ NOU CAMP: Pot ser un objecte Contact o null si no hi ha cap contacte associat.
  contacts: {
    id: string;
    nom: string;
  } | null;

  // ✅ NOUS CAMPS AFEGITS
  description: string | null;
  due_date: string | null; // El tipus 'date' de SQL es representa com a string (YYYY-MM-DD)
  priority: 'Baixa' | 'Mitjana' | 'Alta' | null;
};
export type CompanyProfile = CompanyProfileObject | null;

// =================== FILE: src/types/crm/index.ts ===================

/**
 * @file src/types/crm/index.ts
 * @summary Aquest és un "fitxer barril" que re-exporta tots els tipus del domini CRM.
 * Això permet que la resta de l'aplicació importi qualsevol tipus del CRM des d'un sol lloc,
 * mantenint l'organització interna en mòduls.
 * * @example
 * import type { Contact, Quote, Ticket } from '@/types/crm';
 */
export * from './opportunitys';
export * from './contacts';
export * from '../comunicacio/inbox';
export * from './general';
export * from './products';
export * from './deals';
export * from './quotes';
export * from './pipelines';
export * from '../shared/notification';
export * from './calendar';

// =================== FILE: src/types/crm/opportunitys.ts ===================

import type {PipelineStageName} from "@/types/crm";
import type { Contact } from "./contacts";  

export type OpportunityPipline = { 
  id: string; 
  name: string; 
  stage_name: PipelineStageName;
  value: number | null;
  close_date?: string | null;
  description?: string | null;
  contact_id: string;
  contacts?: { id: string; nom: string | null; } | null;
};

//Oportunitat _hooks useOpportunityForm i usePipeline
export type Opportunity= {
  id: string;
  name: string;
  stage_name: string;
  value: number | null;
  close_date: string | null;
  description: string | null;
  contact_id: string;
  contacts: Contact | null;
};

// =================== FILE: src/types/crm/pipelines.ts ===================

export const PIPELINE_STAGES_MAP = [
  { name: 'Prospecte', key: 'prospect' },
  { name: 'Contactat', key: 'contacted' },
  { name: 'Proposta Enviada', key: 'proposalSent' },
  { name: 'Negociació', key: 'negotiation' },
  { name: 'Guanyat', key: 'won' },
  { name: 'Perdut', key: 'lost' },
] as const;
export type PipelineStageName = typeof PIPELINE_STAGES_MAP[number]['name'];

// =================== FILE: src/types/crm/products.ts ===================

// Ja no necessitem definir el tipus 'Product' aquí, ja que ve del fitxer central.
// ✅ AFEGEIX L'EXPORTACIÓ DELS TIPUS AQUÍ
export type Product = {
  id: number;
  name: string;
  price: number;
  description: string | null;
  category: string | null;
  unit: string | null;
  iva: number | null;
  discount: number | null; // És una bona idea incloure tots els camps possibles
  is_active: boolean;
};

// =================== FILE: src/types/crm/quotes.ts ===================

/**
 * @file src/types/crm/quotes.ts
 * @summary Defineix els tipus de dades per a Pressupostos, Oportunitats, Factures i Pipeline.
 */


import type {Contact} from "@/types/crm";
import type { Team as CompanyProfile } from "@/types/settings/team";
// --- MAPES I TIPUS D'ESTATS ---


export const QUOTE_STATUS_MAP = [
  { dbValue: 'Draft',    key: 'draft',    colorClass: 'bg-yellow-900/50 text-yellow-300' },
  { dbValue: 'Sent',     key: 'sent',     colorClass: 'bg-blue-900/50 text-blue-300' },
  { dbValue: 'Accepted', key: 'accepted', colorClass: 'bg-green-900/50 text-green-300' },
  { dbValue: 'Declined', key: 'declined', colorClass: 'bg-red-900/50 text-red-300' },
] as const;
type QuoteStatus = typeof QUOTE_STATUS_MAP[number]['dbValue'];

export const INVOICE_STATUS_MAP = [
  { dbValue: 'Draft',     key: 'draft' },
  { dbValue: 'Sent',      key: 'sent' },
  { dbValue: 'Paid',      key: 'paid' },
  { dbValue: 'Overdue',   key: 'overdue' },
  { dbValue: 'Cancelled', key: 'cancelled' },
] as const;
type InvoiceStatus = typeof INVOICE_STATUS_MAP[number]['dbValue'];

// --- TIPUS PRINCIPALS ---

export type QuoteItem = {
  id?: number;
  product_id: number | null;
  description: string;
  quantity: number;
  unit_price: number;
  user_id: string; // Added user_id property
  tax_rate: number;
  total: number;
};

export type Quote = {
  id: string | 'new';
  contact_id: string | null;
  opportunity_id?: number | null;
  quote_number: string;
  sequence_number: number; // ✅ Nova propietat per al número seqüencial
  issue_date: string;
  expiry_date?: string | null;
  status: QuoteStatus;
  notes: string | null;
  discount: number;
  subtotal: number;
  tax: number;
  tax_percent: number; // ✅ Afegeix la nova propietat
  total: number;
  sent_at?: string | null;
  items: QuoteItem[];
  user_id?: string;
  contacts?: { nom: string | null; } | null;
  secure_id?: string;
  show_quantity?: boolean; // ✅ AFEGEIX AQUESTA LÍNIA

};



export type Invoice = { 
  id: string; 
  invoice_number: string; 
  status: InvoiceStatus;
  total: number;
  contact_id: string;
  contacts?: { nom: string | null; } | null;
  due_date: string; // ✅ Ha de ser obligatori

};


export type QuoteDataFromServer = Quote & {
  contacts: Contact | null;
  team: CompanyProfile | null;
  quote_items: QuoteItem[];
  secure_id: string;
 
};



// =================== FILE: src/types/dashboard/types.ts ===================

import { Database, Tables } from "@/types/supabase";

export type TaskPriority = Database['public']['Enums']['task_priority'];

// Aquest tipus és per a la CREACIÓ. Enviem només els IDs.
export type NewTaskPayload = {
  title: string;
  description: string | null;
  due_date: string | null;
  priority: TaskPriority | null;
  contact_id: number | null;
  department_id: number | null; // ✅ CORRECCIÓ: Afegeix el camp per a l'ID del departament
  duration: number | null; // ✅ CORRECCIÓ: Afegeix el camp per a la durada
  user_asign_id: string | null; // ✅ CORRECCIÓ: Nom de columna correcte
  asigned_date: string | null; // ✅ CORRECCIÓ: Nom de columna correcte
};

// Aquest tipus és per a la VISUALITZACIÓ. Rebem els objectes niuats.
export type TaskWithContact = Tables<'tasks'> & {
  contacts: { id: number; nom: string; } | null;
  departments: { id: number; name: string; } | null; // ✅ CORRECCIÓ: Afegeix l'objecte department
};

// =================== FILE: src/types/db.ts ===================

// src/types/db.ts
import { type Database } from './supabase'; // Importem el gegant

// --- Àlies Generals ---
// Tipus per a una fila completa d'una taula o vista
export type DbTableRow<
  T extends keyof (Database['public']['Tables'] & Database['public']['Views'])
> = (Database['public']['Tables'] & Database['public']['Views'])[T]['Row'];

// Tipus per a una nova inserció
export type DbTableInsert<T extends keyof Database['public']['Tables']> =
  Database['public']['Tables'][T]['Insert'];

// Tipus per a una actualització
export type DbTableUpdate<T extends keyof Database['public']['Tables']> =
  Database['public']['Tables'][T]['Update'];

// --- Àlies per a Funcions RPC ---
export type DbFunction<T extends keyof Database['public']['Functions']> =
  Database['public']['Functions'][T]['Returns'];

// --- Exportacions Específiques (Les més usades) ---
export type Contact = DbTableRow<'contacts'>;
export type Opportunity = DbTableRow<'opportunities'>;
export type Invoice = DbTableRow<'invoices'>;
export type Profile = DbTableRow<'profiles'>;
export type Team = DbTableRow<'teams'>;
export type Product = DbTableRow<'products'>;
export type Quote = DbTableRow<'quotes'>;
export type Template = DbTableRow<'email_templates'>;
export type Activity = DbTableRow<'activities'>;

// ✨ TIPUS ESPECÍFICS PER A L'INBOX (CORREGITS I COMPLETATS) ✨
// Aquest és el tipus principal per als tiquets, basat en la vista que ja inclou dades del contacte i perfil.
export type EnrichedTicket = DbTableRow<'enriched_tickets'>;
// Tipus per als membres de l'equip amb les dades del seu perfil.
export type TeamMemberWithProfile = DbTableRow<'team_members_with_profiles'>;
// Tipus per a la taula de permisos de l'inbox.
export type InboxPermission = DbTableRow<'inbox_permissions'>;
// Tipus base d'un tiquet (de la taula 'tickets'), per si es necessita.
export type Ticket = DbTableRow<'tickets'>;


// Tipus d'Enums
export type InvoiceStatus = Database['public']['Enums']['invoice_status'];
export type OpportunityStage = Database['public']['Enums']['opportunity_stage'];

// Aquest tipus és local de la UI, no ve de la DB, així que el podem mantenir aquí o en un fitxer de UI.
export type TicketFilter = 'tots' | 'rebuts' | 'noLlegits' | 'enviats';

// =================== FILE: src/types/declarations/mapbox.d.ts ===================

// mapbox.d.ts

declare module '@mapbox/search-js-react' {
    import * as React from 'react';
    import type { Geometry } from 'geojson'; // Tipus oficial GeoJSON
  
    export type MapboxContext = {
      id: string;
      name: string;
    };
  
    export type MapboxFeature = {
      geometry: Geometry; // ✅ Substituïm 'any' per GeoJSON.Geometry
      properties: {
        address: string;
        context?: MapboxContext[];
      };
    };
  
    export type MapboxRetrieveResponse = {
      features: MapboxFeature[];
    };
  
    export interface AddressAutofillProps {
      accessToken: string;
      onRetrieve?: (res: MapboxRetrieveResponse) => void;
      children?: React.ReactNode;
    }
  
    export const AddressAutofill: React.FC<AddressAutofillProps>;
  }
  

// =================== FILE: src/types/declarations/prism.d.ts ===================

// src/types/prism.d.ts

declare module 'prismjs/components/prism-core';
declare module 'prismjs/components/prism-clike';
declare module 'prismjs/components/prism-javascript';
declare module 'prismjs/components/prism-markup';

// =================== FILE: src/types/declarations.d.ts ===================

// src/types/declarations.d.ts
declare module 'imap-simple';

// =================== FILE: src/types/finances/expenses.ts ===================

// src/types/finances/expenses.ts (Versió consolidada i tipada)

import { Contact } from '@/types/crm/contacts'; // Per a la relació amb el Proveïdor
// import { Database } from '@/types/supabase'; // Si l'SDK ho genera automàticament

// --- 1. Tipus d'Elements (Basats en les teves definicions) ---

export type ExpenseItem = {
    id?: number; // bigint (opcional per a la creació, present per a l'actualització)
    expense_id: number; // Clau forana, afegida aquí per claredat en la sincronització
    description: string;
    quantity: number;
    unit_price: number;
    total: number; // Afegit per consistència amb el càlcul
};

export type ExpenseAttachment = {
    id: string; // UUID de l'adjunt
    file_path: string;
    filename: string;
    mime_type: string;
    expense_id: number;
};

// --- 2. Tipus Base de Despesa (Taula `expenses`) ---

// ✅ NOU: Definim el tipus per a l'estat de la despesa, basat en l'ENUM de la DB
export type ExpenseStatus = 'pending' | 'paid' | 'overdue' | 'cancelled';

export interface Expense {
    id: number;
    user_id: string;
    team_id: string;
    description: string;
    total_amount: number;
    expense_date: string; // format YYYY-MM-DD
    category: string | null;
    created_at: string;
    invoice_number: string | null;
    tax_amount: number | null;
    subtotal: number | null;
    discount_amount: number | null;
    notes: string | null;
    tax_rate: number | null;
    supplier_id: string | null;
    
    // ✅ NOU: Camps afegits
    status: ExpenseStatus;
    payment_date: string | null; // format YYYY-MM-DD
    payment_method: string | null;
    is_billable: boolean;
    project_id: string | null;
    is_reimbursable: boolean;
}
// --- 3. Tipus Compostos (per a les vistes i accions) ---

// Tipus usat a la llista (només amb el nom del proveïdor)
export type ExpenseWithContact = Expense & {
    suppliers: Pick<Contact, 'id' | 'nom'> | null; 
};

// Tipus per a la vista de detall (totes les dades relacionals)
export type ExpenseDetail = ExpenseWithContact & {
    suppliers: Pick<Contact, 'id' | 'nom' | 'nif'> | null; // Tipus de detall del proveïdor
    expense_items: ExpenseItem[];
    expense_attachments: ExpenseAttachment[];
};


// Tipus que s'envia a `saveExpenseAction`
// Exclou camps de DB auto-generats/gestionats per la sessió (user_id, team_id, created_at)
// Exclou camps de relació que no van a la taula principal (suppliers, attachments)
export type ExpenseFormDataForAction = Omit<
  Expense,
  'id' | 'created_at' | 'user_id' | 'team_id' | 'suppliers' // 'suppliers' s'elimina
> & {
    id?: string | number | null; // L'ID pot ser opcional o string/number
    expense_items?: ExpenseItem[]; // Els ítems venen separats
};


// Mapeig d'Estatus de Despeses (configuració d'UI, utilitzat a ExpensesClient)
export const EXPENSE_STATUS_MAP = [
    { dbValue: 'pending', key: 'pending', colorClass: 'bg-yellow-100' },
    { dbValue: 'paid', key: 'paid', colorClass: 'bg-green-600' },
    { dbValue: 'reimbursed', key: 'reimbursed', colorClass: 'bg-blue-100' },
    { dbValue: 'rejected', key: 'rejected', colorClass: 'bg-red-600' },
];

// =================== FILE: src/types/finances/index.ts ===================

export * from './invoices';
export * from './expenses';
export * from './scheams';

// =================== FILE: src/types/finances/invoices.ts ===================

// src/types/finances/invoices.ts
import { type Database } from '@/types/supabase';

// --- Tipus Base (Reflectint Supabase - S'actualitzaran amb 'npx supabase gen types...') ---
export type InvoiceRow = Database['public']['Tables']['invoices']['Row'];
export type InvoiceItemRow = Database['public']['Tables']['invoice_items']['Row'];
export type InvoiceAttachmentRow = Database['public']['Tables']['invoice_attachments']['Row'];
// --- Constants i Tipus per a Status ---

// Mapa de dades per als estats (basat en el teu exemple)
// Adaptat per coincidir amb els valors ENUM de Supabase si els tens,
// o els valors 'text' que fas servir a la columna 'status'.
export const INVOICE_STATUS_MAP = [
 { dbValue: 'Draft',     key: 'draft',   colorClass: 'bg-gray-500/10 text-gray-400 border border-gray-400/30' },
 { dbValue: 'Sent',      key: 'sent',    colorClass: 'bg-blue-500/10 text-blue-400 border border-blue-400/30' }, // Canviat de Issued a Sent per coincidir amb ENUM
 { dbValue: 'Paid',      key: 'paid',    colorClass: 'bg-green-500/10 text-green-400 border border-green-400/30' },
 { dbValue: 'Overdue',   key: 'overdue', colorClass: 'bg-red-500/10 text-red-400 border border-red-400/30' },
 { dbValue: 'Cancelled', key: 'cancelled', colorClass: 'bg-yellow-500/10 text-yellow-400 border border-yellow-400/30' }, // Canviat de Cancelled per consistència
] as const;


// Tipus per a l'estat, derivat del mapa o de l'ENUM de Supabase
// Si 'status' a Supabase és ENUM 'invoice_status', pots usar:
// export type InvoiceStatus = Database['public']['Enums']['invoice_status'];
// Si és 'text', definim els valors esperats:
export type InvoiceStatus = 'Draft' | 'Sent' | 'Paid' | 'Overdue' | 'Cancelled';

// --- Tipus Enriquits ---

// Línia de factura - Ara inclou els nous camps
export interface InvoiceItem extends InvoiceItemRow {
    // InvoiceItemRow ja té id: string (UUID), product_id: number | null, etc.
    // Només afegim/modifiquem si és estrictament necessari per a la UI
    // ✅ CORRECCIÓ: Assegurem que els tipus opcionals coincideixen amb InvoiceItemRow (probablement number | null)
    discount_percentage: number | null; // Assegurem que no és undefined si InvoiceItemRow no ho permet
    discount_amount: number | null; // Assegurem que no és undefined si InvoiceItemRow no ho permet
    reference_sku: string | null; // Ja és string | null a InvoiceItemRow
}

// Adjunt de factura
export interface InvoiceAttachment extends InvoiceAttachmentRow {
  // L'ID és UUID (string)
  id: string;
}

// Contacte relacionat (si fas servir contact_id com a FK)
// L'ID a la taula contacts és bigint (number)
export type RelatedContact = {
  id: number;
  nom: string | null;
  // Afegeix altres camps si cal (nif, email...)
} | null; // Permetem null si no hi ha contacte vinculat

// Factura completa per a la vista de detall - Ara inclou els nous camps de InvoiceRow
export interface InvoiceDetail extends InvoiceRow {
    // InvoiceRow ja té id: number (bigint), contact_id: number | null, etc.
    // ✅ CORRECCIÓ: project_id ara és string | null (UUID)
    project_id: string | null; // InvoiceRow té UUID, que és string | null
    invoice_items: InvoiceItem[];
    invoice_attachments: InvoiceAttachment[];
    contacts?: RelatedContact; // Manté la relació opcional
    // Els altres nous camps (terms, currency, etc.) venen d'InvoiceRow
}
// --- Tipus per a Formularis i Accions ---

// Tipus per a l'estat del formulari del client
// Ometem IDs/timestamps/camps de servidor/Verifactu.
// Mantenim camps calculats (totals) perquè la UI els necessita.
// Tipus per a l'estat del formulari del client
// Inclou els nous camps editables. Ometem timestamps específics com paid_at, sent_at
// Tipus per a l'estat del formulari del client
export interface InvoiceFormData extends Omit < InvoiceRow,
    'id' |
    'created_at' | 'updated_at' | 'user_id' | 'team_id' |
    'verifactu_uuid' | 'verifactu_qr_data' | 'verifactu_signature' | 'verifactu_previous_signature' |
    'paid_at' | 'sent_at' |
    'invoice_items' |
    'invoice_attachments' |
    // Excloem camps calculats que no es guarden directament des del formulari base
    'subtotal' | 'tax_amount' | 'total_amount'
    > {
    // Redefinim camps necessaris per al formulari amb tipus específics o opcionalitat
    id?: number; // Permetem ID opcional (bigint és number)
    invoice_items: InvoiceItem[];
    status: InvoiceStatus; // Usem el tipus estricte per al formulari
    issue_date: string; // Format YYYY-MM-DD
    due_date: string | null; // Format YYYY-MM-DD
    contact_id: number | null; // bigint és number
    budget_id: number | null; // bigint és number
    quote_id: number | null; // bigint és number
    // ✅ CORRECCIÓ: project_id és string | null
    project_id: string | null; // UUID és string
    // Camps per a l'edició/càlcul a la UI
    discount_amount: number; // Descompte GENERAL (number, no null)
    tax_rate: number; // Taxa GENERAL (number, no null)
    shipping_cost: number; // Cost enviament (number, no null)
    // Camps calculats (necessaris per a la UI, però exclosos de l'Omit base)
    subtotal: number;
    tax_amount: number;
    total_amount: number;
    // La resta de camps de InvoiceRow (terms, currency, language, etc.)
    // heretats via Omit haurien de tenir el tipus correcte (string | null, string, etc.)
    // ✅ CORRECCIÓ: Assegurem que els camps que poden ser null a InvoiceRow també ho puguin ser aquí
    terms: string | null;
    currency: string; // A la BD és NOT NULL
    language: string; // A la BD és NOT NULL
    payment_details: string | null;
    company_logo_url: string | null; // Assegurem que coincideix (string | null)
    client_reference: string | null;
    // tax i discount (de InvoiceRow) són number | null
    tax: number | null;
    discount: number | null;
    // Camps denormalitzats (són string | null a InvoiceRow)
    client_name: string | null;
    client_tax_id: string | null;
    client_address: string | null;
    client_email: string | null;
    company_name: string | null;
    company_tax_id: string | null;
    company_address: string | null;
    company_email: string | null;
    // extra_data (jsonb | null)
    extra_data: Database['public']['Tables']['invoices']['Row']['extra_data'];
}

// Dades que s'envien a l'acció saveInvoiceAction
// Excloem camps calculats, IDs, timestamps, camps només lectura, etc.
export type InvoiceFormDataForAction = Omit < InvoiceFormData,
    'id' | 'invoice_items' |
    // 'created_at' | 'updated_at' | 'user_id' | 'team_id' | // Ja exclosos per Omit base
    'subtotal' | 'tax_amount' | 'total_amount' | // Es recalculen al servidor
    // 'verifactu_uuid' | ... | // Ja exclosos
    // 'paid_at' | 'sent_at' | // Ja exclosos
    // Camps denormalitzats (s'omplen al servidor si cal)
    'client_name' | 'client_tax_id' | 'client_address' | 'client_email' |
    'company_name' | 'company_tax_id' | 'company_address' | 'company_email'
    // company_logo_url podria venir d'un altre lloc (configuració d'empresa)
    // tax/discount són redundants si ja tenim rate/amount
    // 'tax' | 'discount'
>;


// --- Tipus per a Llistes i Filtres ---

// Columnes seleccionades per a la taula de llista
// Inclou camps de 'invoices' i opcionalment 'contacts.nom'
export type InvoiceListRow = Pick<InvoiceRow,
    'id' | 'invoice_number' | 'issue_date' | 'due_date' | 'total_amount' | 'status' | 'client_name' | 'contact_id'
> & {
    // Relació opcional per mostrar el nom del contacte si fas JOIN
     contacts?: { nom: string | null } | null
};

// Resposta paginada per a l'acció fetchPaginatedInvoices
export interface PaginatedInvoicesResponse {
  data: InvoiceListRow[];
  count: number;
}

// Filtres per a l'acció fetchPaginatedInvoices
export interface InvoiceFilters {
  searchTerm?: string;
  status?: InvoiceStatus | 'all';
  contactId?: number | 'all'; // bigint és number
   // ✅ Corregit: sortBy hauria d'incloure els nous camps si vols ordenar per ells
   //    i ajustar-se als tipus reals (project_id és string, etc.)
  sortBy?: keyof Pick<InvoiceRow, 'invoice_number' | 'issue_date' | 'due_date' | 'total_amount' | 'status' | 'client_name' | 'currency' /* afegeix més si cal */ > | 'contacts.nom';
  sortOrder?: 'asc' | 'desc';
  limit?: number;
  offset?: number;
}

// =================== FILE: src/types/finances/scheams.ts ===================

import { z } from 'zod';

// Definim aquí els esquemes, que seran la nostra font de veritat

export const expenseItemSchema = z.object({
  description: z.string().min(1, "La descripció de l'ítem és necessària."),
  quantity: z.number().min(0),
  unit_price: z.number().min(0),
  total: z.number().min(0),
});

export const expenseSchema = z.object({
  description: z.string().min(3, "La descripció ha de tenir almenys 3 caràcters."),
  total_amount: z.number().positive("L'import total ha de ser un número positiu."),
  expense_date: z.string().regex(/^\d{4}-\d{2}-\d{2}$/, "El format de la data ha de ser AAAA-MM-DD."),
  supplier_id: z.string().uuid("L'ID del proveïdor no és vàlid.").optional().nullable(),
  category: z.string().optional().nullable(),
  invoice_number: z.string().optional().nullable(),
  tax_amount: z.number().min(0).optional().nullable(),
  subtotal: z.number().min(0).optional().nullable(),
  discount_amount: z.number().min(0).optional().nullable(),
  notes: z.string().optional().nullable(),
  tax_rate: z.number().min(0).optional().nullable(),
  extra_data: z.any().optional().nullable(),
  expense_items: z.array(expenseItemSchema).optional(),
});

// Definim el tipus de TypeScript a partir de l'esquema per poder-lo reutilitzar
export type ExpenseFormData = z.infer<typeof expenseSchema>;

// =================== FILE: src/types/finances/suppliers.ts ===================

// src/types/finances/suppliers.ts

/**
 * Representa l'estructura completa d'un proveïdor, tal com està a la base de dades.
 */
export interface Supplier {
  id: string; // Correspon al tipus 'uuid' de Supabase
  user_id: string;
  team_id: string;
  nom: string;
  email?: string | null;
  telefon?: string | null;
  nif?: string | null;
  created_at: string; // Correspon al tipus 'timestamp with time zone'
}

/**
 * Un tipus més simple per a llistes o selectors, per optimitzar les dades que es transfereixen.
 */
export type SupplierForSelector = Pick<Supplier, 'id' | 'nom'>;

// =================== FILE: src/types/network/network.ts ===================

// types/network.ts
export interface PublicProfile {
  id: string;
  full_name: string | null; // ✅ AFEGIT: Camp que faltava
  company_name: string;
  logo_url: string | null;
  summary: string | null;
  services: string[] | null;
  website_url: string | null;
  latitude: number;
  longitude: number;
}

// =================== FILE: src/types/settings/blackListRule.ts ===================

/**
 * Defineix l'estructura d'una regla de la llista negra (blacklist)
 * tal com es guarda a la base de dades i s'utilitza a l'aplicació.
 */
export type BlacklistRule = {
  id: string;
  value: string;
  rule_type: 'email' | 'domain';
  created_at: string;
  user_id: string; // ID de l'usuari que va crear la regla
  team_id: string; // ID de l'equip al qual pertany la regla
};


// =================== FILE: src/types/settings/index.ts ===================


export * from './profiles';
export * from './team';
export * from './subscription';
export * from './blackListRule';

// =================== FILE: src/types/settings/profiles.ts ===================

// Definim un tipus de dades estricte per a l'entrada de la funció
export type ProfileData = {
    full_name: string;
    company_name: string;
    summary: string;
    company_phone: string;
    services: string[];
    street: string;
    city: string;
    postal_code: string;
    region: string;
    country: string;
    latitude?: number;
    longitude?: number;
};

export type Profile = {
    id: string; // Coincideix amb auth.users.id
    full_name: string | null;
    phone: string | null;
    avatar_url: string | null;
    job_title: string | null;
    onboarding_completed: boolean;
};

// =================== FILE: src/types/settings/subscription.ts ===================

// /src/types/crm.ts (o on tinguis els teus tipus centrals)

/**
 * Representa les propietats VISUALS d'un pla de preus.
 * Aquesta és la informació que es mostra a la interfície.
 */
export type Plan = {
    id: string; // Ex: 'free', 'plus', 'premium'
    name: string;
    iconName: string;
    priceMonthly: number | null;
    priceYearly: number | null;
    description: string;
    features: string[];
    isPopular?: boolean;
    isCurrent?: boolean; // Aquesta propietat s'afegeix dinàmicament
    colors: { border: string; text: string; bg: string; hoverBg: string; }
};

/**
 * Representa la subscripció d'un EQUIP guardada a la base de dades.
 */
export type Subscription = {
    id: string;
    team_id: string;
    plan_id: string;
    status: 'active' | 'trialing' | 'canceled';
    current_period_end: string; // Data en format ISO string
    // ... altres camps de Stripe si els tens
};

// ✅ Defineix i exporta el tipus PlanConfig
export type PlanConfig = {
    id: string;
    name: string;
    iconName: string;
    priceMonthly: number | null;
    priceYearly: number | null;
    isPopular?: boolean; // Opcional, ja que no tots els plans ho tenen
    colors: {
        border: string;
        text: string;
        bg: string;
        hoverBg: string;
    };
};



// =================== FILE: src/types/settings/team.ts ===================

import { Profile } from "./profiles";

/**
 * Representa les dades d'una EMPRESA o EQUIP.
 * Aquesta informació es mostra a factures, pressupostos, etc.
 */
export type Team = {
    id: string; // UUID de l'equip
    name: string; // Nom de l'empresa
    owner_id: string; // Qui és el propietari
    
    // Dades de contacte i fiscals
    tax_id: string | null;
    address: string | null;
    phone: string | null;
    email: string | null;
    website: string | null;
    logo_url: string | null;

    // Dades descriptives
    summary: string | null;
    sector: string | null;
    services: string[] | null; // Guardat com a JSONB a la base de dades

    // Dades d'adreça estructurada (si les tens separades)
    street?: string | null;
    city?: string | null;
    postal_code?: string | null;
    region?: string | null;
    country?: string | null;
    
    // Geolocalització
    latitude: number | null;
    longitude: number | null;
};

/**
 * Representa la relació entre un usuari i un equip.
 * Aquest tipus s'utilitza quan carreguem la llista de membres.
 */
export type TeamMember = {
    role: 'owner' | 'admin' | 'member';
    // Quan fem una consulta, podem incloure el perfil complet de l'usuari
    profiles: Pick<Profile, 'id' | 'full_name'> & { email: string | null };
};

/**
 * Representa una invitació pendent.
 */
export type Invitation = {
    id: string;
    email: string;
    role: string;
};

// Aquest tipus representa les dades tal com venen de la taula 'teams' de Supabase
export type TeamData = {
    id: string;
    name: string | null;
    tax_id: string | null;
    address: string | null;
    phone: string | null;
    email: string | null;
    logo_url: string | null;
    // afegeix altres camps de la taula 'teams' que necessitis
};

// Aquest tipus representa les dades tal com les esperen els components de React.
// És el format que volem obtenir DESPRÉS de mapejar les dades de 'teams'.
export type CompanyProfile = {
    id: string;
    user_id?: string; // El fem opcional per si no sempre hi és
    company_name: string | null;
    company_tax_id: string | null;
    company_address: string | null;
    company_email: string | null;
    company_phone: string | null;
    logo_url: string | null;
};

// =================== FILE: src/types/shared/actionResult.ts ===================

// En un fitxer de tipus compartit, com src/types/shared/index.ts

export type ActionResult<T = unknown> = {
    success: boolean;
    message: string;
    data?: T; // <-- Aquí està la clau. 'T' serà el tipus de les dades que retornem.
};

// =================== FILE: src/types/shared/address.ts ===================

export interface DetailedAddress {
  street: string;
  city: string;
  postcode: string;
  region: string;
  country: string;
  latitude: number | null;
  longitude: number | null;
}


// =================== FILE: src/types/shared/index.ts ===================

export * from './address';
export * from './notification';
export * from './actionResult';



// =================== FILE: src/types/shared/notification.ts ===================

export interface CrmNotification { // ✅ Nom canviat
    id: number;
    user_id: string;
    message: string;
    type?: string;
    is_read: boolean;
    created_at: string;
  }

// =================== FILE: src/types/supabase.ts ===================

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  // Allows to automatically instantiate createClient with right options
  // instead of createClient<Database, { PostgrestVersion: 'XX' }>(URL, KEY)
  __InternalSupabase: {
    PostgrestVersion: "12.2.12 (cd3cf9e)"
  }
  graphql_public: {
    Tables: {
      [_ in never]: never
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      graphql: {
        Args: {
          extensions?: Json
          operationName?: string
          query?: string
          variables?: Json
        }
        Returns: Json
      }
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
  public: {
    Tables: {
      activities: {
        Row: {
          contact_id: number | null
          content: string
          created_at: string | null
          id: number
          is_read: boolean | null
          opportunity_id: number | null
          quote_id: number | null
          team_id: string | null
          type: string
          user_id: string | null
        }
        Insert: {
          contact_id?: number | null
          content: string
          created_at?: string | null
          id?: never
          is_read?: boolean | null
          opportunity_id?: number | null
          quote_id?: number | null
          team_id?: string | null
          type: string
          user_id?: string | null
        }
        Update: {
          contact_id?: number | null
          content?: string
          created_at?: string | null
          id?: never
          is_read?: boolean | null
          opportunity_id?: number | null
          quote_id?: number | null
          team_id?: string | null
          type?: string
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "activities_contact_id_fkey"
            columns: ["contact_id"]
            isOneToOne: false
            referencedRelation: "contacts"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "activities_opportunity_id_fkey"
            columns: ["opportunity_id"]
            isOneToOne: false
            referencedRelation: "opportunities"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "activities_quote_id_fkey"
            columns: ["quote_id"]
            isOneToOne: false
            referencedRelation: "quotes"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "activities_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
        ]
      }
      blacklist_rules: {
        Row: {
          created_at: string
          id: number
          rule_type: string
          team_id: string | null
          user_id: string
          value: string
        }
        Insert: {
          created_at?: string
          id?: number
          rule_type: string
          team_id?: string | null
          user_id: string
          value: string
        }
        Update: {
          created_at?: string
          id?: number
          rule_type?: string
          team_id?: string | null
          user_id?: string
          value?: string
        }
        Relationships: [
          {
            foreignKeyName: "blacklist_rules_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
        ]
      }
      campaign_templates: {
        Row: {
          content: string | null
          created_at: string
          goal: string | null
          id: number
          name: string
          target_audience: string | null
          type: string | null
          user_id: string
        }
        Insert: {
          content?: string | null
          created_at?: string
          goal?: string | null
          id?: number
          name: string
          target_audience?: string | null
          type?: string | null
          user_id: string
        }
        Update: {
          content?: string | null
          created_at?: string
          goal?: string | null
          id?: number
          name?: string
          target_audience?: string | null
          type?: string | null
          user_id?: string
        }
        Relationships: []
      }
      campaigns: {
        Row: {
          campaign_date: string
          content: string | null
          created_at: string | null
          goal: string | null
          id: number
          metrics: Json | null
          name: string
          sent_at: string | null
          status: string | null
          subject: string | null
          target_audience: string | null
          team_id: string | null
          type: string
          user_id: string
        }
        Insert: {
          campaign_date: string
          content?: string | null
          created_at?: string | null
          goal?: string | null
          id?: number
          metrics?: Json | null
          name: string
          sent_at?: string | null
          status?: string | null
          subject?: string | null
          target_audience?: string | null
          team_id?: string | null
          type: string
          user_id: string
        }
        Update: {
          campaign_date?: string
          content?: string | null
          created_at?: string | null
          goal?: string | null
          id?: number
          metrics?: Json | null
          name?: string
          sent_at?: string | null
          status?: string | null
          subject?: string | null
          target_audience?: string | null
          team_id?: string | null
          type?: string
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "campaigns_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
        ]
      }
      contact_tags: {
        Row: {
          color: string | null
          created_at: string | null
          id: number
          name: string
          team_id: string | null
          user_id: string
        }
        Insert: {
          color?: string | null
          created_at?: string | null
          id?: number
          name: string
          team_id?: string | null
          user_id: string
        }
        Update: {
          color?: string | null
          created_at?: string | null
          id?: number
          name?: string
          team_id?: string | null
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "contact_tags_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
        ]
      }
      contacts: {
        Row: {
          address: Json | null
          birthday: string | null
          children_count: number | null
          created_at: string | null
          email: string
          empresa: string | null
          estat: string | null
          hobbies: string[] | null
          id: number
          industry: string | null
          job_title: string | null
          last_interaction_at: string | null
          lead_source: string | null
          marital_status: string | null
          nom: string
          notes: string | null
          partner_name: string | null
          social_media: Json | null
          supplier_id: string | null
          team_id: string | null
          telefon: string | null
          ubicacio: string | null
          ultim_contacte: string | null
          user_id: string | null
          valor: number | null
        }
        Insert: {
          address?: Json | null
          birthday?: string | null
          children_count?: number | null
          created_at?: string | null
          email: string
          empresa?: string | null
          estat?: string | null
          hobbies?: string[] | null
          id?: number
          industry?: string | null
          job_title?: string | null
          last_interaction_at?: string | null
          lead_source?: string | null
          marital_status?: string | null
          nom: string
          notes?: string | null
          partner_name?: string | null
          social_media?: Json | null
          supplier_id?: string | null
          team_id?: string | null
          telefon?: string | null
          ubicacio?: string | null
          ultim_contacte?: string | null
          user_id?: string | null
          valor?: number | null
        }
        Update: {
          address?: Json | null
          birthday?: string | null
          children_count?: number | null
          created_at?: string | null
          email?: string
          empresa?: string | null
          estat?: string | null
          hobbies?: string[] | null
          id?: number
          industry?: string | null
          job_title?: string | null
          last_interaction_at?: string | null
          lead_source?: string | null
          marital_status?: string | null
          nom?: string
          notes?: string | null
          partner_name?: string | null
          social_media?: Json | null
          supplier_id?: string | null
          team_id?: string | null
          telefon?: string | null
          ubicacio?: string | null
          ultim_contacte?: string | null
          user_id?: string | null
          valor?: number | null
        }
        Relationships: [
          {
            foreignKeyName: "contacts_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "fk_contact_supplier"
            columns: ["supplier_id"]
            isOneToOne: false
            referencedRelation: "suppliers"
            referencedColumns: ["id"]
          },
        ]
      }
      departments: {
        Row: {
          created_at: string | null
          id: number
          name: string
          team_id: string
        }
        Insert: {
          created_at?: string | null
          id?: never
          name: string
          team_id: string
        }
        Update: {
          created_at?: string | null
          id?: never
          name?: string
          team_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "departments_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
        ]
      }
      documents: {
        Row: {
          content: string | null
          embedding: string | null
          id: number
          metadata: Json | null
        }
        Insert: {
          content?: string | null
          embedding?: string | null
          id?: number
          metadata?: Json | null
        }
        Update: {
          content?: string | null
          embedding?: string | null
          id?: number
          metadata?: Json | null
        }
        Relationships: []
      }
      email_templates: {
        Row: {
          body: string | null
          created_at: string
          id: number
          name: string
          subject: string | null
          team_id: string | null
          user_id: string
          variables: Json | null
        }
        Insert: {
          body?: string | null
          created_at?: string
          id?: number
          name: string
          subject?: string | null
          team_id?: string | null
          user_id: string
          variables?: Json | null
        }
        Update: {
          body?: string | null
          created_at?: string
          id?: number
          name?: string
          subject?: string | null
          team_id?: string | null
          user_id?: string
          variables?: Json | null
        }
        Relationships: [
          {
            foreignKeyName: "email_templates_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
        ]
      }
      expense_attachments: {
        Row: {
          expense_id: number
          file_path: string
          filename: string
          id: string
          mime_type: string | null
          team_id: string | null
          uploaded_at: string | null
          user_id: string | null
        }
        Insert: {
          expense_id: number
          file_path: string
          filename: string
          id?: string
          mime_type?: string | null
          team_id?: string | null
          uploaded_at?: string | null
          user_id?: string | null
        }
        Update: {
          expense_id?: number
          file_path?: string
          filename?: string
          id?: string
          mime_type?: string | null
          team_id?: string | null
          uploaded_at?: string | null
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "expense_attachments_expense_id_fkey"
            columns: ["expense_id"]
            isOneToOne: false
            referencedRelation: "expenses"
            referencedColumns: ["id"]
          },
        ]
      }
      expense_items: {
        Row: {
          created_at: string | null
          description: string
          expense_id: number
          id: string
          quantity: number
          team_id: string | null
          total: number | null
          unit_price: number
          user_id: string | null
        }
        Insert: {
          created_at?: string | null
          description: string
          expense_id: number
          id?: string
          quantity?: number
          team_id?: string | null
          total?: number | null
          unit_price?: number
          user_id?: string | null
        }
        Update: {
          created_at?: string | null
          description?: string
          expense_id?: number
          id?: string
          quantity?: number
          team_id?: string | null
          total?: number | null
          unit_price?: number
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "expense_items_expense_id_fkey"
            columns: ["expense_id"]
            isOneToOne: false
            referencedRelation: "expenses"
            referencedColumns: ["id"]
          },
        ]
      }
      expenses: {
        Row: {
          category: string | null
          created_at: string
          description: string
          discount_amount: number | null
          expense_date: string
          extra_data: Json | null
          id: number
          invoice_number: string | null
          is_billable: boolean
          is_reimbursable: boolean
          notes: string | null
          payment_date: string | null
          payment_method: string | null
          project_id: string | null
          status: Database["public"]["Enums"]["expense_status"]
          subtotal: number | null
          supplier_id: string | null
          tax_amount: number | null
          tax_rate: number | null
          team_id: string | null
          total_amount: number
          user_id: string
        }
        Insert: {
          category?: string | null
          created_at?: string
          description: string
          discount_amount?: number | null
          expense_date: string
          extra_data?: Json | null
          id?: number
          invoice_number?: string | null
          is_billable?: boolean
          is_reimbursable?: boolean
          notes?: string | null
          payment_date?: string | null
          payment_method?: string | null
          project_id?: string | null
          status?: Database["public"]["Enums"]["expense_status"]
          subtotal?: number | null
          supplier_id?: string | null
          tax_amount?: number | null
          tax_rate?: number | null
          team_id?: string | null
          total_amount: number
          user_id: string
        }
        Update: {
          category?: string | null
          created_at?: string
          description?: string
          discount_amount?: number | null
          expense_date?: string
          extra_data?: Json | null
          id?: number
          invoice_number?: string | null
          is_billable?: boolean
          is_reimbursable?: boolean
          notes?: string | null
          payment_date?: string | null
          payment_method?: string | null
          project_id?: string | null
          status?: Database["public"]["Enums"]["expense_status"]
          subtotal?: number | null
          supplier_id?: string | null
          tax_amount?: number | null
          tax_rate?: number | null
          team_id?: string | null
          total_amount?: number
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "expenses_project_id_fkey"
            columns: ["project_id"]
            isOneToOne: false
            referencedRelation: "projects"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "expenses_supplier_id_fkey"
            columns: ["supplier_id"]
            isOneToOne: false
            referencedRelation: "suppliers"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "expenses_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
        ]
      }
      inbox_permissions: {
        Row: {
          created_at: string | null
          grantee_user_id: string
          id: string
          target_user_id: string
          team_id: string
        }
        Insert: {
          created_at?: string | null
          grantee_user_id: string
          id?: string
          target_user_id: string
          team_id: string
        }
        Update: {
          created_at?: string | null
          grantee_user_id?: string
          id?: string
          target_user_id?: string
          team_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "inbox_permissions_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
        ]
      }
      invitations: {
        Row: {
          created_at: string | null
          email: string
          id: string
          inviter_name: string | null
          role: string
          status: string | null
          team_id: string | null
          team_name: string | null
          token: string
          user_id: string | null
        }
        Insert: {
          created_at?: string | null
          email: string
          id?: string
          inviter_name?: string | null
          role: string
          status?: string | null
          team_id?: string | null
          team_name?: string | null
          token?: string
          user_id?: string | null
        }
        Update: {
          created_at?: string | null
          email?: string
          id?: string
          inviter_name?: string | null
          role?: string
          status?: string | null
          team_id?: string | null
          team_name?: string | null
          token?: string
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "invitations_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
        ]
      }
      invoice_attachments: {
        Row: {
          file_path: string
          filename: string
          id: string
          invoice_id: number
          mime_type: string | null
          uploaded_at: string | null
        }
        Insert: {
          file_path: string
          filename: string
          id?: string
          invoice_id: number
          mime_type?: string | null
          uploaded_at?: string | null
        }
        Update: {
          file_path?: string
          filename?: string
          id?: string
          invoice_id?: number
          mime_type?: string | null
          uploaded_at?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "invoice_attachments_invoice_id_fkey"
            columns: ["invoice_id"]
            isOneToOne: false
            referencedRelation: "invoices"
            referencedColumns: ["id"]
          },
        ]
      }
      invoice_items: {
        Row: {
          created_at: string | null
          description: string
          discount_amount: number | null
          discount_percentage: number | null
          id: string
          invoice_id: number
          product_id: number | null
          quantity: number
          reference_sku: string | null
          tax_rate: number | null
          team_id: string | null
          total: number | null
          unit_price: number
          user_id: string | null
        }
        Insert: {
          created_at?: string | null
          description: string
          discount_amount?: number | null
          discount_percentage?: number | null
          id?: string
          invoice_id: number
          product_id?: number | null
          quantity?: number
          reference_sku?: string | null
          tax_rate?: number | null
          team_id?: string | null
          total?: number | null
          unit_price?: number
          user_id?: string | null
        }
        Update: {
          created_at?: string | null
          description?: string
          discount_amount?: number | null
          discount_percentage?: number | null
          id?: string
          invoice_id?: number
          product_id?: number | null
          quantity?: number
          reference_sku?: string | null
          tax_rate?: number | null
          team_id?: string | null
          total?: number | null
          unit_price?: number
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "invoice_items_invoice_id_fkey"
            columns: ["invoice_id"]
            isOneToOne: false
            referencedRelation: "invoices"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "invoice_items_product_id_fkey"
            columns: ["product_id"]
            isOneToOne: false
            referencedRelation: "products"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "invoice_items_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
        ]
      }
      invoices: {
        Row: {
          budget_id: number | null
          client_address: string | null
          client_email: string | null
          client_name: string | null
          client_reference: string | null
          client_tax_id: string | null
          company_address: string | null
          company_email: string | null
          company_logo_url: string | null
          company_name: string | null
          company_tax_id: string | null
          contact_id: number | null
          created_at: string
          currency: string
          discount: number | null
          discount_amount: number | null
          due_date: string | null
          extra_data: Json | null
          id: number
          invoice_number: string | null
          issue_date: string
          language: string
          notes: string | null
          paid_at: string | null
          payment_details: string | null
          project_id: string | null
          quote_id: number | null
          sent_at: string | null
          shipping_cost: number | null
          status: string
          subtotal: number | null
          tax: number | null
          tax_amount: number | null
          tax_rate: number | null
          team_id: string | null
          terms: string | null
          total_amount: number
          updated_at: string | null
          user_id: string
          verifactu_previous_signature: string | null
          verifactu_qr_data: string | null
          verifactu_signature: string | null
          verifactu_uuid: string | null
        }
        Insert: {
          budget_id?: number | null
          client_address?: string | null
          client_email?: string | null
          client_name?: string | null
          client_reference?: string | null
          client_tax_id?: string | null
          company_address?: string | null
          company_email?: string | null
          company_logo_url?: string | null
          company_name?: string | null
          company_tax_id?: string | null
          contact_id?: number | null
          created_at?: string
          currency?: string
          discount?: number | null
          discount_amount?: number | null
          due_date?: string | null
          extra_data?: Json | null
          id?: number
          invoice_number?: string | null
          issue_date: string
          language?: string
          notes?: string | null
          paid_at?: string | null
          payment_details?: string | null
          project_id?: string | null
          quote_id?: number | null
          sent_at?: string | null
          shipping_cost?: number | null
          status: string
          subtotal?: number | null
          tax?: number | null
          tax_amount?: number | null
          tax_rate?: number | null
          team_id?: string | null
          terms?: string | null
          total_amount: number
          updated_at?: string | null
          user_id: string
          verifactu_previous_signature?: string | null
          verifactu_qr_data?: string | null
          verifactu_signature?: string | null
          verifactu_uuid?: string | null
        }
        Update: {
          budget_id?: number | null
          client_address?: string | null
          client_email?: string | null
          client_name?: string | null
          client_reference?: string | null
          client_tax_id?: string | null
          company_address?: string | null
          company_email?: string | null
          company_logo_url?: string | null
          company_name?: string | null
          company_tax_id?: string | null
          contact_id?: number | null
          created_at?: string
          currency?: string
          discount?: number | null
          discount_amount?: number | null
          due_date?: string | null
          extra_data?: Json | null
          id?: number
          invoice_number?: string | null
          issue_date?: string
          language?: string
          notes?: string | null
          paid_at?: string | null
          payment_details?: string | null
          project_id?: string | null
          quote_id?: number | null
          sent_at?: string | null
          shipping_cost?: number | null
          status?: string
          subtotal?: number | null
          tax?: number | null
          tax_amount?: number | null
          tax_rate?: number | null
          team_id?: string | null
          terms?: string | null
          total_amount?: number
          updated_at?: string | null
          user_id?: string
          verifactu_previous_signature?: string | null
          verifactu_qr_data?: string | null
          verifactu_signature?: string | null
          verifactu_uuid?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "fk_invoices_quote_id"
            columns: ["quote_id"]
            isOneToOne: false
            referencedRelation: "quotes"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "invoices_budget_id_fkey"
            columns: ["budget_id"]
            isOneToOne: false
            referencedRelation: "quotes"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "invoices_contact_id_fkey"
            columns: ["contact_id"]
            isOneToOne: false
            referencedRelation: "contacts"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "invoices_project_id_fkey"
            columns: ["project_id"]
            isOneToOne: false
            referencedRelation: "projects"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "invoices_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
        ]
      }
      notifications: {
        Row: {
          created_at: string
          id: number
          is_read: boolean
          message: string
          type: string | null
          user_id: string
        }
        Insert: {
          created_at?: string
          id?: number
          is_read?: boolean
          message: string
          type?: string | null
          user_id: string
        }
        Update: {
          created_at?: string
          id?: number
          is_read?: boolean
          message?: string
          type?: string | null
          user_id?: string
        }
        Relationships: []
      }
      opportunities: {
        Row: {
          close_date: string | null
          contact_id: number | null
          created_at: string | null
          description: string | null
          id: number
          last_updated_at: string | null
          name: string
          pipeline_stage_id: number | null
          probability: number | null
          source: string | null
          stage_name: string | null
          team_id: string | null
          user_id: string
          value: number | null
        }
        Insert: {
          close_date?: string | null
          contact_id?: number | null
          created_at?: string | null
          description?: string | null
          id?: number
          last_updated_at?: string | null
          name: string
          pipeline_stage_id?: number | null
          probability?: number | null
          source?: string | null
          stage_name?: string | null
          team_id?: string | null
          user_id: string
          value?: number | null
        }
        Update: {
          close_date?: string | null
          contact_id?: number | null
          created_at?: string | null
          description?: string | null
          id?: number
          last_updated_at?: string | null
          name?: string
          pipeline_stage_id?: number | null
          probability?: number | null
          source?: string | null
          stage_name?: string | null
          team_id?: string | null
          user_id?: string
          value?: number | null
        }
        Relationships: [
          {
            foreignKeyName: "opportunities_contact_id_fkey"
            columns: ["contact_id"]
            isOneToOne: false
            referencedRelation: "contacts"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "opportunities_pipeline_stage_id_fkey"
            columns: ["pipeline_stage_id"]
            isOneToOne: false
            referencedRelation: "pipeline_stages"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "opportunities_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
        ]
      }
      pipeline_stages: {
        Row: {
          created_at: string | null
          id: number
          name: string
          position: number
          team_id: string | null
          user_id: string
        }
        Insert: {
          created_at?: string | null
          id?: number
          name: string
          position: number
          team_id?: string | null
          user_id: string
        }
        Update: {
          created_at?: string | null
          id?: number
          name?: string
          position?: number
          team_id?: string | null
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "pipeline_stages_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
        ]
      }
      prices: {
        Row: {
          active: boolean | null
          currency: string | null
          description: string | null
          id: string
          interval: string | null
          interval_count: number | null
          metadata: Json | null
          product_id: string | null
          trial_period_days: number | null
          type: string | null
          unit_amount: number | null
        }
        Insert: {
          active?: boolean | null
          currency?: string | null
          description?: string | null
          id: string
          interval?: string | null
          interval_count?: number | null
          metadata?: Json | null
          product_id?: string | null
          trial_period_days?: number | null
          type?: string | null
          unit_amount?: number | null
        }
        Update: {
          active?: boolean | null
          currency?: string | null
          description?: string | null
          id?: string
          interval?: string | null
          interval_count?: number | null
          metadata?: Json | null
          product_id?: string | null
          trial_period_days?: number | null
          type?: string | null
          unit_amount?: number | null
        }
        Relationships: []
      }
      products: {
        Row: {
          category: string | null
          created_at: string
          description: string | null
          discount: number | null
          id: number
          is_active: boolean
          iva: number | null
          name: string
          price: number
          team_id: string | null
          unit: string | null
          user_id: string
        }
        Insert: {
          category?: string | null
          created_at?: string
          description?: string | null
          discount?: number | null
          id?: number
          is_active?: boolean
          iva?: number | null
          name: string
          price: number
          team_id?: string | null
          unit?: string | null
          user_id: string
        }
        Update: {
          category?: string | null
          created_at?: string
          description?: string | null
          discount?: number | null
          id?: number
          is_active?: boolean
          iva?: number | null
          name?: string
          price?: number
          team_id?: string | null
          unit?: string | null
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "products_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
        ]
      }
      profiles: {
        Row: {
          active_team_id: string | null
          avatar_url: string | null
          billing_address: Json | null
          email: string | null
          full_name: string | null
          id: string
          is_public_profile: boolean | null
          job_title: string | null
          logo_url: string | null
          onboarding_completed: boolean
          payment_method: Json | null
          phone: string | null
          services: Json | null
          summary: string | null
          website_url: string | null
        }
        Insert: {
          active_team_id?: string | null
          avatar_url?: string | null
          billing_address?: Json | null
          email?: string | null
          full_name?: string | null
          id: string
          is_public_profile?: boolean | null
          job_title?: string | null
          logo_url?: string | null
          onboarding_completed?: boolean
          payment_method?: Json | null
          phone?: string | null
          services?: Json | null
          summary?: string | null
          website_url?: string | null
        }
        Update: {
          active_team_id?: string | null
          avatar_url?: string | null
          billing_address?: Json | null
          email?: string | null
          full_name?: string | null
          id?: string
          is_public_profile?: boolean | null
          job_title?: string | null
          logo_url?: string | null
          onboarding_completed?: boolean
          payment_method?: Json | null
          phone?: string | null
          services?: Json | null
          summary?: string | null
          website_url?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "profiles_active_team_id_fkey"
            columns: ["active_team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
        ]
      }
      project_layouts: {
        Row: {
          created_at: string
          id: number
          node_id: string
          position_x: number
          position_y: number
          user_id: string
        }
        Insert: {
          created_at?: string
          id?: number
          node_id: string
          position_x: number
          position_y: number
          user_id: string
        }
        Update: {
          created_at?: string
          id?: number
          node_id?: string
          position_x?: number
          position_y?: number
          user_id?: string
        }
        Relationships: []
      }
      projects: {
        Row: {
          created_at: string
          description: string | null
          end_date: string | null
          id: string
          name: string
          start_date: string | null
          status: string | null
          team_id: string
        }
        Insert: {
          created_at?: string
          description?: string | null
          end_date?: string | null
          id?: string
          name: string
          start_date?: string | null
          status?: string | null
          team_id: string
        }
        Update: {
          created_at?: string
          description?: string | null
          end_date?: string | null
          id?: string
          name?: string
          start_date?: string | null
          status?: string | null
          team_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "projects_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
        ]
      }
      quote_items: {
        Row: {
          description: string
          id: number
          product_id: number | null
          quantity: number
          quote_id: number
          team_id: string
          total: number
          unit_price: number
          user_id: string | null
        }
        Insert: {
          description: string
          id?: number
          product_id?: number | null
          quantity: number
          quote_id: number
          team_id: string
          total: number
          unit_price: number
          user_id?: string | null
        }
        Update: {
          description?: string
          id?: number
          product_id?: number | null
          quantity?: number
          quote_id?: number
          team_id?: string
          total?: number
          unit_price?: number
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "quote_items_product_id_fkey"
            columns: ["product_id"]
            isOneToOne: false
            referencedRelation: "products"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "quote_items_quote_id_fkey"
            columns: ["quote_id"]
            isOneToOne: false
            referencedRelation: "quotes"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "quote_items_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
        ]
      }
      quotes: {
        Row: {
          contact_id: number | null
          created_at: string | null
          discount: number | null
          expiry_date: string | null
          id: number
          issue_date: string
          notes: string | null
          opportunity_id: number | null
          quote_number: string
          rejection_reason: string | null
          secure_id: string
          send_at: string | null
          sent_at: string | null
          sequence_number: number | null
          show_quantity: boolean
          status: Database["public"]["Enums"]["quote_status"] | null
          subtotal: number
          tax: number | null
          tax_percent: number | null
          team_id: string | null
          theme_color: string | null
          total: number
          user_id: string
        }
        Insert: {
          contact_id?: number | null
          created_at?: string | null
          discount?: number | null
          expiry_date?: string | null
          id?: number
          issue_date: string
          notes?: string | null
          opportunity_id?: number | null
          quote_number: string
          rejection_reason?: string | null
          secure_id?: string
          send_at?: string | null
          sent_at?: string | null
          sequence_number?: number | null
          show_quantity?: boolean
          status?: Database["public"]["Enums"]["quote_status"] | null
          subtotal: number
          tax?: number | null
          tax_percent?: number | null
          team_id?: string | null
          theme_color?: string | null
          total: number
          user_id: string
        }
        Update: {
          contact_id?: number | null
          created_at?: string | null
          discount?: number | null
          expiry_date?: string | null
          id?: number
          issue_date?: string
          notes?: string | null
          opportunity_id?: number | null
          quote_number?: string
          rejection_reason?: string | null
          secure_id?: string
          send_at?: string | null
          sent_at?: string | null
          sequence_number?: number | null
          show_quantity?: boolean
          status?: Database["public"]["Enums"]["quote_status"] | null
          subtotal?: number
          tax?: number | null
          tax_percent?: number | null
          team_id?: string | null
          theme_color?: string | null
          total?: number
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "quotes_contact_id_fkey"
            columns: ["contact_id"]
            isOneToOne: false
            referencedRelation: "contacts"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "quotes_opportunity_id_fkey"
            columns: ["opportunity_id"]
            isOneToOne: false
            referencedRelation: "opportunities"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "quotes_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "quotes_user_id_fkey1"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "quotes_user_id_fkey1"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "team_members_with_profiles"
            referencedColumns: ["user_id"]
          },
        ]
      }
      services: {
        Row: {
          id: number
          name: string
        }
        Insert: {
          id?: never
          name: string
        }
        Update: {
          id?: never
          name?: string
        }
        Relationships: []
      }
      social_posts: {
        Row: {
          content: string | null
          created_at: string
          error_message: string | null
          id: number
          media_type: string | null
          media_url: string[] | null
          provider: string[]
          published_at: string | null
          scheduled_at: string | null
          status: string
          team_id: string | null
          updated_at: string
          user_id: string
        }
        Insert: {
          content?: string | null
          created_at?: string
          error_message?: string | null
          id?: number
          media_type?: string | null
          media_url?: string[] | null
          provider: string[]
          published_at?: string | null
          scheduled_at?: string | null
          status?: string
          team_id?: string | null
          updated_at?: string
          user_id: string
        }
        Update: {
          content?: string | null
          created_at?: string
          error_message?: string | null
          id?: number
          media_type?: string | null
          media_url?: string[] | null
          provider?: string[]
          published_at?: string | null
          scheduled_at?: string | null
          status?: string
          team_id?: string | null
          updated_at?: string
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "social_posts_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
        ]
      }
      spatial_ref_sys: {
        Row: {
          auth_name: string | null
          auth_srid: number | null
          proj4text: string | null
          srid: number
          srtext: string | null
        }
        Insert: {
          auth_name?: string | null
          auth_srid?: number | null
          proj4text?: string | null
          srid: number
          srtext?: string | null
        }
        Update: {
          auth_name?: string | null
          auth_srid?: number | null
          proj4text?: string | null
          srid?: number
          srtext?: string | null
        }
        Relationships: []
      }
      subscriptions: {
        Row: {
          created_at: string | null
          current_period_end: string | null
          id: string
          plan_id: string
          status: string
          stripe_customer_id: string | null
          stripe_subscription_id: string | null
          team_id: string
        }
        Insert: {
          created_at?: string | null
          current_period_end?: string | null
          id?: string
          plan_id: string
          status: string
          stripe_customer_id?: string | null
          stripe_subscription_id?: string | null
          team_id: string
        }
        Update: {
          created_at?: string | null
          current_period_end?: string | null
          id?: string
          plan_id?: string
          status?: string
          stripe_customer_id?: string | null
          stripe_subscription_id?: string | null
          team_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "subscriptions_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: true
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
        ]
      }
      suppliers: {
        Row: {
          created_at: string | null
          email: string | null
          id: string
          nif: string | null
          nom: string
          team_id: string | null
          telefon: string | null
          user_id: string
        }
        Insert: {
          created_at?: string | null
          email?: string | null
          id?: string
          nif?: string | null
          nom: string
          team_id?: string | null
          telefon?: string | null
          user_id: string
        }
        Update: {
          created_at?: string | null
          email?: string | null
          id?: string
          nif?: string | null
          nom?: string
          team_id?: string | null
          telefon?: string | null
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "suppliers_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
        ]
      }
      tasks: {
        Row: {
          asigned_date: string | null
          contact_id: number | null
          created_at: string
          department_id: number | null
          description: string | null
          due_date: string | null
          duration: number | null
          finish_date: string | null
          id: number
          is_completed: boolean
          priority: Database["public"]["Enums"]["task_priority"] | null
          team_id: string | null
          time_tracking_log: Json | null
          title: string
          user_asign_id: string | null
          user_id: string
        }
        Insert: {
          asigned_date?: string | null
          contact_id?: number | null
          created_at?: string
          department_id?: number | null
          description?: string | null
          due_date?: string | null
          duration?: number | null
          finish_date?: string | null
          id?: number
          is_completed?: boolean
          priority?: Database["public"]["Enums"]["task_priority"] | null
          team_id?: string | null
          time_tracking_log?: Json | null
          title: string
          user_asign_id?: string | null
          user_id: string
        }
        Update: {
          asigned_date?: string | null
          contact_id?: number | null
          created_at?: string
          department_id?: number | null
          description?: string | null
          due_date?: string | null
          duration?: number | null
          finish_date?: string | null
          id?: number
          is_completed?: boolean
          priority?: Database["public"]["Enums"]["task_priority"] | null
          team_id?: string | null
          time_tracking_log?: Json | null
          title?: string
          user_asign_id?: string | null
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "tasks_contact_id_fkey"
            columns: ["contact_id"]
            isOneToOne: false
            referencedRelation: "contacts"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "tasks_department_id_fkey"
            columns: ["department_id"]
            isOneToOne: false
            referencedRelation: "departments"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "tasks_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "tasks_user_asign_id_fkey"
            columns: ["user_asign_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "tasks_user_asign_id_fkey"
            columns: ["user_asign_id"]
            isOneToOne: false
            referencedRelation: "team_members_with_profiles"
            referencedColumns: ["user_id"]
          },
        ]
      }
      team_credentials: {
        Row: {
          access_token: string | null
          connected_by_user_id: string | null
          created_at: string | null
          expires_at: string | null
          id: string
          provider: string
          provider_page_id: string | null
          provider_page_name: string | null
          provider_user_id: string | null
          refresh_token: string | null
          team_id: string
          user_id: string | null
        }
        Insert: {
          access_token?: string | null
          connected_by_user_id?: string | null
          created_at?: string | null
          expires_at?: string | null
          id?: string
          provider: string
          provider_page_id?: string | null
          provider_page_name?: string | null
          provider_user_id?: string | null
          refresh_token?: string | null
          team_id: string
          user_id?: string | null
        }
        Update: {
          access_token?: string | null
          connected_by_user_id?: string | null
          created_at?: string | null
          expires_at?: string | null
          id?: string
          provider?: string
          provider_page_id?: string | null
          provider_page_name?: string | null
          provider_user_id?: string | null
          refresh_token?: string | null
          team_id?: string
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "team_credentials_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
        ]
      }
      team_members: {
        Row: {
          created_at: string | null
          role: string
          team_id: string
          user_id: string
        }
        Insert: {
          created_at?: string | null
          role: string
          team_id: string
          user_id: string
        }
        Update: {
          created_at?: string | null
          role?: string
          team_id?: string
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "team_members_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
        ]
      }
      teams: {
        Row: {
          address: string | null
          city: string | null
          country: string | null
          created_at: string | null
          email: string | null
          id: string
          latitude: number | null
          logo_url: string | null
          longitude: number | null
          name: string
          owner_id: string
          phone: string | null
          postal_code: string | null
          region: string | null
          sector: string | null
          services: Json | null
          street: string | null
          summary: string | null
          tax_id: string | null
          website: string | null
        }
        Insert: {
          address?: string | null
          city?: string | null
          country?: string | null
          created_at?: string | null
          email?: string | null
          id?: string
          latitude?: number | null
          logo_url?: string | null
          longitude?: number | null
          name: string
          owner_id: string
          phone?: string | null
          postal_code?: string | null
          region?: string | null
          sector?: string | null
          services?: Json | null
          street?: string | null
          summary?: string | null
          tax_id?: string | null
          website?: string | null
        }
        Update: {
          address?: string | null
          city?: string | null
          country?: string | null
          created_at?: string | null
          email?: string | null
          id?: string
          latitude?: number | null
          logo_url?: string | null
          longitude?: number | null
          name?: string
          owner_id?: string
          phone?: string | null
          postal_code?: string | null
          region?: string | null
          sector?: string | null
          services?: Json | null
          street?: string | null
          summary?: string | null
          tax_id?: string | null
          website?: string | null
        }
        Relationships: []
      }
      ticket_assignments: {
        Row: {
          created_at: string
          deal_id: number | null
          id: number
          team_id: string
          ticket_id: number
        }
        Insert: {
          created_at?: string
          deal_id?: number | null
          id?: number
          team_id: string
          ticket_id: number
        }
        Update: {
          created_at?: string
          deal_id?: number | null
          id?: number
          team_id?: string
          ticket_id?: number
        }
        Relationships: [
          {
            foreignKeyName: "ticket_assignments_deal_id_fkey"
            columns: ["deal_id"]
            isOneToOne: false
            referencedRelation: "opportunities"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "ticket_assignments_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "ticket_assignments_ticket_id_fkey"
            columns: ["ticket_id"]
            isOneToOne: false
            referencedRelation: "enriched_tickets"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "ticket_assignments_ticket_id_fkey"
            columns: ["ticket_id"]
            isOneToOne: false
            referencedRelation: "tickets"
            referencedColumns: ["id"]
          },
        ]
      }
      tickets: {
        Row: {
          attachments: Json | null
          body: string | null
          contact_id: number | null
          created_at: string | null
          id: number
          preview: string | null
          provider: string | null
          provider_message_id: string | null
          sender_email: string | null
          sender_name: string | null
          sent_at: string | null
          status: string | null
          subject: string | null
          type: string | null
          user_id: string | null
        }
        Insert: {
          attachments?: Json | null
          body?: string | null
          contact_id?: number | null
          created_at?: string | null
          id?: number
          preview?: string | null
          provider?: string | null
          provider_message_id?: string | null
          sender_email?: string | null
          sender_name?: string | null
          sent_at?: string | null
          status?: string | null
          subject?: string | null
          type?: string | null
          user_id?: string | null
        }
        Update: {
          attachments?: Json | null
          body?: string | null
          contact_id?: number | null
          created_at?: string | null
          id?: number
          preview?: string | null
          provider?: string | null
          provider_message_id?: string | null
          sender_email?: string | null
          sender_name?: string | null
          sent_at?: string | null
          status?: string | null
          subject?: string | null
          type?: string | null
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "tickets_contact_id_fkey"
            columns: ["contact_id"]
            isOneToOne: false
            referencedRelation: "contacts"
            referencedColumns: ["id"]
          },
        ]
      }
      user_credentials: {
        Row: {
          access_token: string | null
          config: Json | null
          created_at: string | null
          encrypted_password: string | null
          expires_at: string | null
          id: number
          provider: string
          provider_page_id: string | null
          provider_user_id: string | null
          refresh_token: string | null
          team_id: string | null
          updated_at: string | null
          user_id: string | null
        }
        Insert: {
          access_token?: string | null
          config?: Json | null
          created_at?: string | null
          encrypted_password?: string | null
          expires_at?: string | null
          id?: number
          provider: string
          provider_page_id?: string | null
          provider_user_id?: string | null
          refresh_token?: string | null
          team_id?: string | null
          updated_at?: string | null
          user_id?: string | null
        }
        Update: {
          access_token?: string | null
          config?: Json | null
          created_at?: string | null
          encrypted_password?: string | null
          expires_at?: string | null
          id?: number
          provider?: string
          provider_page_id?: string | null
          provider_user_id?: string | null
          refresh_token?: string | null
          team_id?: string | null
          updated_at?: string | null
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "user_credentials_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
        ]
      }
    }
    Views: {
      enriched_tickets: {
        Row: {
          attachments: Json | null
          body: string | null
          contact_email: string | null
          contact_id: number | null
          contact_nom: string | null
          created_at: string | null
          id: number | null
          preview: string | null
          profile_avatar_url: string | null
          profile_full_name: string | null
          provider: string | null
          provider_message_id: string | null
          sender_email: string | null
          sender_name: string | null
          sent_at: string | null
          status: string | null
          subject: string | null
          type: string | null
          user_id: string | null
        }
        Relationships: [
          {
            foreignKeyName: "tickets_contact_id_fkey"
            columns: ["contact_id"]
            isOneToOne: false
            referencedRelation: "contacts"
            referencedColumns: ["id"]
          },
        ]
      }
      geography_columns: {
        Row: {
          coord_dimension: number | null
          f_geography_column: unknown | null
          f_table_catalog: unknown | null
          f_table_name: unknown | null
          f_table_schema: unknown | null
          srid: number | null
          type: string | null
        }
        Relationships: []
      }
      geometry_columns: {
        Row: {
          coord_dimension: number | null
          f_geometry_column: unknown | null
          f_table_catalog: string | null
          f_table_name: unknown | null
          f_table_schema: unknown | null
          srid: number | null
          type: string | null
        }
        Insert: {
          coord_dimension?: number | null
          f_geometry_column?: unknown | null
          f_table_catalog?: string | null
          f_table_name?: unknown | null
          f_table_schema?: unknown | null
          srid?: number | null
          type?: string | null
        }
        Update: {
          coord_dimension?: number | null
          f_geometry_column?: unknown | null
          f_table_catalog?: string | null
          f_table_name?: unknown | null
          f_table_schema?: unknown | null
          srid?: number | null
          type?: string | null
        }
        Relationships: []
      }
      team_members_with_profiles: {
        Row: {
          avatar_url: string | null
          email: string | null
          full_name: string | null
          role: string | null
          team_id: string | null
          user_id: string | null
        }
        Relationships: [
          {
            foreignKeyName: "team_members_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
        ]
      }
    }
    Functions: {
      _postgis_deprecate: {
        Args: { newname: string; oldname: string; version: string }
        Returns: undefined
      }
      _postgis_index_extent: {
        Args: { col: string; tbl: unknown }
        Returns: unknown
      }
      _postgis_pgsql_version: {
        Args: Record<PropertyKey, never>
        Returns: string
      }
      _postgis_scripts_pgsql_version: {
        Args: Record<PropertyKey, never>
        Returns: string
      }
      _postgis_selectivity: {
        Args: { att_name: string; geom: unknown; mode?: string; tbl: unknown }
        Returns: number
      }
      _st_3dintersects: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      _st_bestsrid: {
        Args: { "": unknown }
        Returns: number
      }
      _st_contains: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      _st_containsproperly: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      _st_coveredby: {
        Args:
          | { geog1: unknown; geog2: unknown }
          | { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      _st_covers: {
        Args:
          | { geog1: unknown; geog2: unknown }
          | { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      _st_crosses: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      _st_dwithin: {
        Args: {
          geog1: unknown
          geog2: unknown
          tolerance: number
          use_spheroid?: boolean
        }
        Returns: boolean
      }
      _st_equals: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      _st_intersects: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      _st_linecrossingdirection: {
        Args: { line1: unknown; line2: unknown }
        Returns: number
      }
      _st_longestline: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: unknown
      }
      _st_maxdistance: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: number
      }
      _st_orderingequals: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      _st_overlaps: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      _st_pointoutside: {
        Args: { "": unknown }
        Returns: unknown
      }
      _st_sortablehash: {
        Args: { geom: unknown }
        Returns: number
      }
      _st_touches: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      _st_voronoi: {
        Args: {
          clip?: unknown
          g1: unknown
          return_polygons?: boolean
          tolerance?: number
        }
        Returns: unknown
      }
      _st_within: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      accept_invitation: {
        Args: { invitation_token: string }
        Returns: undefined
      }
      accept_invitation_and_set_active_team: {
        Args: { invite_token: string }
        Returns: Json
      }
      accept_personal_invitation: {
        Args: { invitation_id: string }
        Returns: Json
      }
      addauth: {
        Args: { "": string }
        Returns: boolean
      }
      addgeometrycolumn: {
        Args:
          | {
              catalog_name: string
              column_name: string
              new_dim: number
              new_srid_in: number
              new_type: string
              schema_name: string
              table_name: string
              use_typmod?: boolean
            }
          | {
              column_name: string
              new_dim: number
              new_srid: number
              new_type: string
              schema_name: string
              table_name: string
              use_typmod?: boolean
            }
          | {
              column_name: string
              new_dim: number
              new_srid: number
              new_type: string
              table_name: string
              use_typmod?: boolean
            }
        Returns: string
      }
      box: {
        Args: { "": unknown } | { "": unknown }
        Returns: unknown
      }
      box2d: {
        Args: { "": unknown } | { "": unknown }
        Returns: unknown
      }
      box2d_in: {
        Args: { "": unknown }
        Returns: unknown
      }
      box2d_out: {
        Args: { "": unknown }
        Returns: unknown
      }
      box2df_in: {
        Args: { "": unknown }
        Returns: unknown
      }
      box2df_out: {
        Args: { "": unknown }
        Returns: unknown
      }
      box3d: {
        Args: { "": unknown } | { "": unknown }
        Returns: unknown
      }
      box3d_in: {
        Args: { "": unknown }
        Returns: unknown
      }
      box3d_out: {
        Args: { "": unknown }
        Returns: unknown
      }
      box3dtobox: {
        Args: { "": unknown }
        Returns: unknown
      }
      bytea: {
        Args: { "": unknown } | { "": unknown }
        Returns: string
      }
      create_new_organization: {
        Args: { org_name: string }
        Returns: string
      }
      create_team_with_defaults: {
        Args: { team_name: string }
        Returns: string
      }
      delete_user_credential: {
        Args: { provider_name: string }
        Returns: undefined
      }
      disablelongtransactions: {
        Args: Record<PropertyKey, never>
        Returns: string
      }
      dropgeometrycolumn: {
        Args:
          | {
              catalog_name: string
              column_name: string
              schema_name: string
              table_name: string
            }
          | { column_name: string; schema_name: string; table_name: string }
          | { column_name: string; table_name: string }
        Returns: string
      }
      dropgeometrytable: {
        Args:
          | { catalog_name: string; schema_name: string; table_name: string }
          | { schema_name: string; table_name: string }
          | { table_name: string }
        Returns: string
      }
      enablelongtransactions: {
        Args: Record<PropertyKey, never>
        Returns: string
      }
      equals: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      geography: {
        Args: { "": string } | { "": unknown }
        Returns: unknown
      }
      geography_analyze: {
        Args: { "": unknown }
        Returns: boolean
      }
      geography_gist_compress: {
        Args: { "": unknown }
        Returns: unknown
      }
      geography_gist_decompress: {
        Args: { "": unknown }
        Returns: unknown
      }
      geography_out: {
        Args: { "": unknown }
        Returns: unknown
      }
      geography_send: {
        Args: { "": unknown }
        Returns: string
      }
      geography_spgist_compress_nd: {
        Args: { "": unknown }
        Returns: unknown
      }
      geography_typmod_in: {
        Args: { "": unknown[] }
        Returns: number
      }
      geography_typmod_out: {
        Args: { "": number }
        Returns: unknown
      }
      geometry: {
        Args:
          | { "": string }
          | { "": string }
          | { "": unknown }
          | { "": unknown }
          | { "": unknown }
          | { "": unknown }
          | { "": unknown }
          | { "": unknown }
        Returns: unknown
      }
      geometry_above: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      geometry_analyze: {
        Args: { "": unknown }
        Returns: boolean
      }
      geometry_below: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      geometry_cmp: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: number
      }
      geometry_contained_3d: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      geometry_contains: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      geometry_contains_3d: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      geometry_distance_box: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: number
      }
      geometry_distance_centroid: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: number
      }
      geometry_eq: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      geometry_ge: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      geometry_gist_compress_2d: {
        Args: { "": unknown }
        Returns: unknown
      }
      geometry_gist_compress_nd: {
        Args: { "": unknown }
        Returns: unknown
      }
      geometry_gist_decompress_2d: {
        Args: { "": unknown }
        Returns: unknown
      }
      geometry_gist_decompress_nd: {
        Args: { "": unknown }
        Returns: unknown
      }
      geometry_gist_sortsupport_2d: {
        Args: { "": unknown }
        Returns: undefined
      }
      geometry_gt: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      geometry_hash: {
        Args: { "": unknown }
        Returns: number
      }
      geometry_in: {
        Args: { "": unknown }
        Returns: unknown
      }
      geometry_le: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      geometry_left: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      geometry_lt: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      geometry_out: {
        Args: { "": unknown }
        Returns: unknown
      }
      geometry_overabove: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      geometry_overbelow: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      geometry_overlaps: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      geometry_overlaps_3d: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      geometry_overleft: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      geometry_overright: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      geometry_recv: {
        Args: { "": unknown }
        Returns: unknown
      }
      geometry_right: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      geometry_same: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      geometry_same_3d: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      geometry_send: {
        Args: { "": unknown }
        Returns: string
      }
      geometry_sortsupport: {
        Args: { "": unknown }
        Returns: undefined
      }
      geometry_spgist_compress_2d: {
        Args: { "": unknown }
        Returns: unknown
      }
      geometry_spgist_compress_3d: {
        Args: { "": unknown }
        Returns: unknown
      }
      geometry_spgist_compress_nd: {
        Args: { "": unknown }
        Returns: unknown
      }
      geometry_typmod_in: {
        Args: { "": unknown[] }
        Returns: number
      }
      geometry_typmod_out: {
        Args: { "": number }
        Returns: unknown
      }
      geometry_within: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      geometrytype: {
        Args: { "": unknown } | { "": unknown }
        Returns: string
      }
      geomfromewkb: {
        Args: { "": string }
        Returns: unknown
      }
      geomfromewkt: {
        Args: { "": string }
        Returns: unknown
      }
      get_active_team_id: {
        Args: Record<PropertyKey, never>
        Returns: string
      }
      get_column_valid_values: {
        Args: { p_column_name: string; p_ref_table_name: string }
        Returns: {
          value: string
        }[]
      }
      get_crm_dashboard_data: {
        Args: Record<PropertyKey, never>
        Returns: Json
      }
      get_crm_overview: {
        Args: Record<PropertyKey, never>
        Returns: Json
      }
      get_current_jwt_claims: {
        Args: Record<PropertyKey, never>
        Returns: string
      }
      get_current_team_id: {
        Args: Record<PropertyKey, never>
        Returns: string
      }
      get_dashboard_stats: {
        Args: Record<PropertyKey, never>
        Returns: {
          active_clients: number
          expenses_current_month: number
          expenses_previous_month: number
          invoiced_current_month: number
          invoiced_previous_month: number
          opportunities: number
          pending_total: number
          total_contacts: number
        }[]
      }
      get_dashboard_stats_for_team: {
        Args: { p_team_id: string }
        Returns: {
          active_clients: number
          expenses_current_month: number
          expenses_previous_month: number
          invoiced_current_month: number
          invoiced_previous_month: number
          opportunities: number
          pending_total: number
          total_contacts: number
          total_value: number
        }[]
      }
      get_financial_summary: {
        Args: Record<PropertyKey, never>
        Returns: {
          despeses: number
          facturat: number
          pendent: number
        }[]
      }
      get_inbox_received_count: {
        Args: { p_visible_user_ids: string[] }
        Returns: number
      }
      get_inbox_sent_count: {
        Args: { p_visible_user_ids: string[] }
        Returns: number
      }
      get_inbox_tickets: {
        Args: {
          p_active_filter: string
          p_limit: number
          p_offset: number
          p_search_term: string
          p_team_id: string
          p_user_id: string
          p_visible_user_ids: string[]
        }
        Returns: {
          attachments: Json
          body: string
          contact_email: string
          contact_id: number
          contact_nom: string
          created_at: string
          id: number
          preview: string
          profile_avatar_url: string
          profile_full_name: string
          provider: string
          provider_message_id: string
          sender_email: string
          sender_name: string
          sent_at: string
          status: string
          subject: string
          type: string
          user_id: string
        }[]
      }
      get_marketing_kpis: {
        Args: Record<PropertyKey, never>
        Returns: {
          conversion_rate: number
          total_leads: number
        }[]
      }
      get_marketing_page_data: {
        Args: { p_team_id: string }
        Returns: Json
      }
      get_my_team_id: {
        Args: Record<PropertyKey, never>
        Returns: string
      }
      get_my_team_ids: {
        Args: Record<PropertyKey, never>
        Returns: string[]
      }
      get_my_teams: {
        Args: Record<PropertyKey, never>
        Returns: string[]
      }
      get_proj4_from_srid: {
        Args: { "": number }
        Returns: string
      }
      get_public_profiles: {
        Args: Record<PropertyKey, never>
        Returns: {
          company_name: string
          id: string
          latitude: number
          logo_url: string
          longitude: number
          services: Json
          summary: string
          website_url: string
        }[]
      }
      get_quote_details: {
        Args: { p_quote_id: number }
        Returns: Json
      }
      get_table_columns: {
        Args: { table_name_param: string }
        Returns: {
          column_name: string
        }[]
      }
      get_table_columns_excluding_security: {
        Args: { p_table_name: string }
        Returns: string[]
      }
      get_table_columns_info: {
        Args: { p_table_name: string }
        Returns: {
          column_name: string
          data_type: string
        }[]
      }
      get_user_id_by_email: {
        Args: { email_to_check: string }
        Returns: string
      }
      gettransactionid: {
        Args: Record<PropertyKey, never>
        Returns: unknown
      }
      gidx_in: {
        Args: { "": unknown }
        Returns: unknown
      }
      gidx_out: {
        Args: { "": unknown }
        Returns: unknown
      }
      increment_invoice_sequence: {
        Args: { p_series: string; p_user_id: string }
        Returns: number
      }
      is_team_member: {
        Args: { team_id_to_check: string }
        Returns: boolean
      }
      json: {
        Args: { "": unknown }
        Returns: Json
      }
      jsonb: {
        Args: { "": unknown }
        Returns: Json
      }
      longtransactionsenabled: {
        Args: Record<PropertyKey, never>
        Returns: boolean
      }
      match_documents: {
        Args: {
          match_count: number
          match_threshold: number
          query_embedding: string
        }
        Returns: {
          content: string
          id: number
          metadata: Json
          similarity: number
        }[]
      }
      path: {
        Args: { "": unknown }
        Returns: unknown
      }
      pgis_asflatgeobuf_finalfn: {
        Args: { "": unknown }
        Returns: string
      }
      pgis_asgeobuf_finalfn: {
        Args: { "": unknown }
        Returns: string
      }
      pgis_asmvt_finalfn: {
        Args: { "": unknown }
        Returns: string
      }
      pgis_asmvt_serialfn: {
        Args: { "": unknown }
        Returns: string
      }
      pgis_geometry_clusterintersecting_finalfn: {
        Args: { "": unknown }
        Returns: unknown[]
      }
      pgis_geometry_clusterwithin_finalfn: {
        Args: { "": unknown }
        Returns: unknown[]
      }
      pgis_geometry_collect_finalfn: {
        Args: { "": unknown }
        Returns: unknown
      }
      pgis_geometry_makeline_finalfn: {
        Args: { "": unknown }
        Returns: unknown
      }
      pgis_geometry_polygonize_finalfn: {
        Args: { "": unknown }
        Returns: unknown
      }
      pgis_geometry_union_parallel_finalfn: {
        Args: { "": unknown }
        Returns: unknown
      }
      pgis_geometry_union_parallel_serialfn: {
        Args: { "": unknown }
        Returns: string
      }
      point: {
        Args: { "": unknown }
        Returns: unknown
      }
      polygon: {
        Args: { "": unknown }
        Returns: unknown
      }
      populate_geometry_columns: {
        Args:
          | { tbl_oid: unknown; use_typmod?: boolean }
          | { use_typmod?: boolean }
        Returns: string
      }
      postgis_addbbox: {
        Args: { "": unknown }
        Returns: unknown
      }
      postgis_constraint_dims: {
        Args: { geomcolumn: string; geomschema: string; geomtable: string }
        Returns: number
      }
      postgis_constraint_srid: {
        Args: { geomcolumn: string; geomschema: string; geomtable: string }
        Returns: number
      }
      postgis_constraint_type: {
        Args: { geomcolumn: string; geomschema: string; geomtable: string }
        Returns: string
      }
      postgis_dropbbox: {
        Args: { "": unknown }
        Returns: unknown
      }
      postgis_extensions_upgrade: {
        Args: Record<PropertyKey, never>
        Returns: string
      }
      postgis_full_version: {
        Args: Record<PropertyKey, never>
        Returns: string
      }
      postgis_geos_noop: {
        Args: { "": unknown }
        Returns: unknown
      }
      postgis_geos_version: {
        Args: Record<PropertyKey, never>
        Returns: string
      }
      postgis_getbbox: {
        Args: { "": unknown }
        Returns: unknown
      }
      postgis_hasbbox: {
        Args: { "": unknown }
        Returns: boolean
      }
      postgis_index_supportfn: {
        Args: { "": unknown }
        Returns: unknown
      }
      postgis_lib_build_date: {
        Args: Record<PropertyKey, never>
        Returns: string
      }
      postgis_lib_revision: {
        Args: Record<PropertyKey, never>
        Returns: string
      }
      postgis_lib_version: {
        Args: Record<PropertyKey, never>
        Returns: string
      }
      postgis_libjson_version: {
        Args: Record<PropertyKey, never>
        Returns: string
      }
      postgis_liblwgeom_version: {
        Args: Record<PropertyKey, never>
        Returns: string
      }
      postgis_libprotobuf_version: {
        Args: Record<PropertyKey, never>
        Returns: string
      }
      postgis_libxml_version: {
        Args: Record<PropertyKey, never>
        Returns: string
      }
      postgis_noop: {
        Args: { "": unknown }
        Returns: unknown
      }
      postgis_proj_version: {
        Args: Record<PropertyKey, never>
        Returns: string
      }
      postgis_scripts_build_date: {
        Args: Record<PropertyKey, never>
        Returns: string
      }
      postgis_scripts_installed: {
        Args: Record<PropertyKey, never>
        Returns: string
      }
      postgis_scripts_released: {
        Args: Record<PropertyKey, never>
        Returns: string
      }
      postgis_svn_version: {
        Args: Record<PropertyKey, never>
        Returns: string
      }
      postgis_type_name: {
        Args: {
          coord_dimension: number
          geomname: string
          use_new_name?: boolean
        }
        Returns: string
      }
      postgis_typmod_dims: {
        Args: { "": number }
        Returns: number
      }
      postgis_typmod_srid: {
        Args: { "": number }
        Returns: number
      }
      postgis_typmod_type: {
        Args: { "": number }
        Returns: string
      }
      postgis_version: {
        Args: Record<PropertyKey, never>
        Returns: string
      }
      postgis_wagyu_version: {
        Args: Record<PropertyKey, never>
        Returns: string
      }
      save_expense_with_items: {
        Args: {
          expense_data: Json
          items_data: Json
          p_expense_id_to_update?: number
          p_team_id: string
          p_user_id: string
        }
        Returns: {
          category: string | null
          created_at: string
          description: string
          discount_amount: number | null
          expense_date: string
          extra_data: Json | null
          id: number
          invoice_number: string | null
          is_billable: boolean
          is_reimbursable: boolean
          notes: string | null
          payment_date: string | null
          payment_method: string | null
          project_id: string | null
          status: Database["public"]["Enums"]["expense_status"]
          subtotal: number | null
          supplier_id: string | null
          tax_amount: number | null
          tax_rate: number | null
          team_id: string | null
          total_amount: number
          user_id: string
        }[]
      }
      save_refresh_token: {
        Args: { provider_name: string; refresh_token_value: string }
        Returns: undefined
      }
      search_expenses: {
        Args:
          | {
              p_category?: string
              p_limit?: number
              p_offset?: number
              p_search_term?: string
              p_sort_by?: string
              p_sort_order?: string
              p_status?: string
              p_team_id: string
            }
          | {
              p_category?: string
              p_search_term?: string
              p_sort_by?: string
              p_sort_order?: string
              p_team_id: string
            }
        Returns: {
          category: string
          description: string
          expense_date: string
          id: number
          invoice_number: string
          is_billable: boolean
          is_reimbursable: boolean
          payment_date: string
          project_id: string
          status: string
          supplier_id: string
          supplier_nom: string
          total_amount: number
        }[]
      }
      search_paginated_invoices: {
        Args: {
          contact_id_param: number
          limit_param: number
          offset_param: number
          search_term_param: string
          sort_by_param: string
          sort_order_param: string
          status_param: string
          team_id_param: string
        }
        Returns: {
          client_name: string
          contact_id: number
          contact_nom: string
          due_date: string
          id: number
          invoice_number: string
          issue_date: string
          status: string
          total_amount: number
          total_count: number
        }[]
      }
      spheroid_in: {
        Args: { "": unknown }
        Returns: unknown
      }
      spheroid_out: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_3dclosestpoint: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: unknown
      }
      st_3ddistance: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: number
      }
      st_3dintersects: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      st_3dlength: {
        Args: { "": unknown }
        Returns: number
      }
      st_3dlongestline: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: unknown
      }
      st_3dmakebox: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: unknown
      }
      st_3dmaxdistance: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: number
      }
      st_3dperimeter: {
        Args: { "": unknown }
        Returns: number
      }
      st_3dshortestline: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: unknown
      }
      st_addpoint: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: unknown
      }
      st_angle: {
        Args:
          | { line1: unknown; line2: unknown }
          | { pt1: unknown; pt2: unknown; pt3: unknown; pt4?: unknown }
        Returns: number
      }
      st_area: {
        Args:
          | { "": string }
          | { "": unknown }
          | { geog: unknown; use_spheroid?: boolean }
        Returns: number
      }
      st_area2d: {
        Args: { "": unknown }
        Returns: number
      }
      st_asbinary: {
        Args: { "": unknown } | { "": unknown }
        Returns: string
      }
      st_asencodedpolyline: {
        Args: { geom: unknown; nprecision?: number }
        Returns: string
      }
      st_asewkb: {
        Args: { "": unknown }
        Returns: string
      }
      st_asewkt: {
        Args: { "": string } | { "": unknown } | { "": unknown }
        Returns: string
      }
      st_asgeojson: {
        Args:
          | { "": string }
          | { geog: unknown; maxdecimaldigits?: number; options?: number }
          | { geom: unknown; maxdecimaldigits?: number; options?: number }
          | {
              geom_column?: string
              maxdecimaldigits?: number
              pretty_bool?: boolean
              r: Record<string, unknown>
            }
        Returns: string
      }
      st_asgml: {
        Args:
          | { "": string }
          | {
              geog: unknown
              id?: string
              maxdecimaldigits?: number
              nprefix?: string
              options?: number
            }
          | {
              geog: unknown
              id?: string
              maxdecimaldigits?: number
              nprefix?: string
              options?: number
              version: number
            }
          | {
              geom: unknown
              id?: string
              maxdecimaldigits?: number
              nprefix?: string
              options?: number
              version: number
            }
          | { geom: unknown; maxdecimaldigits?: number; options?: number }
        Returns: string
      }
      st_ashexewkb: {
        Args: { "": unknown }
        Returns: string
      }
      st_askml: {
        Args:
          | { "": string }
          | { geog: unknown; maxdecimaldigits?: number; nprefix?: string }
          | { geom: unknown; maxdecimaldigits?: number; nprefix?: string }
        Returns: string
      }
      st_aslatlontext: {
        Args: { geom: unknown; tmpl?: string }
        Returns: string
      }
      st_asmarc21: {
        Args: { format?: string; geom: unknown }
        Returns: string
      }
      st_asmvtgeom: {
        Args: {
          bounds: unknown
          buffer?: number
          clip_geom?: boolean
          extent?: number
          geom: unknown
        }
        Returns: unknown
      }
      st_assvg: {
        Args:
          | { "": string }
          | { geog: unknown; maxdecimaldigits?: number; rel?: number }
          | { geom: unknown; maxdecimaldigits?: number; rel?: number }
        Returns: string
      }
      st_astext: {
        Args: { "": string } | { "": unknown } | { "": unknown }
        Returns: string
      }
      st_astwkb: {
        Args:
          | {
              geom: unknown[]
              ids: number[]
              prec?: number
              prec_m?: number
              prec_z?: number
              with_boxes?: boolean
              with_sizes?: boolean
            }
          | {
              geom: unknown
              prec?: number
              prec_m?: number
              prec_z?: number
              with_boxes?: boolean
              with_sizes?: boolean
            }
        Returns: string
      }
      st_asx3d: {
        Args: { geom: unknown; maxdecimaldigits?: number; options?: number }
        Returns: string
      }
      st_azimuth: {
        Args:
          | { geog1: unknown; geog2: unknown }
          | { geom1: unknown; geom2: unknown }
        Returns: number
      }
      st_boundary: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_boundingdiagonal: {
        Args: { fits?: boolean; geom: unknown }
        Returns: unknown
      }
      st_buffer: {
        Args:
          | { geom: unknown; options?: string; radius: number }
          | { geom: unknown; quadsegs: number; radius: number }
        Returns: unknown
      }
      st_buildarea: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_centroid: {
        Args: { "": string } | { "": unknown }
        Returns: unknown
      }
      st_cleangeometry: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_clipbybox2d: {
        Args: { box: unknown; geom: unknown }
        Returns: unknown
      }
      st_closestpoint: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: unknown
      }
      st_clusterintersecting: {
        Args: { "": unknown[] }
        Returns: unknown[]
      }
      st_collect: {
        Args: { "": unknown[] } | { geom1: unknown; geom2: unknown }
        Returns: unknown
      }
      st_collectionextract: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_collectionhomogenize: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_concavehull: {
        Args: {
          param_allow_holes?: boolean
          param_geom: unknown
          param_pctconvex: number
        }
        Returns: unknown
      }
      st_contains: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      st_containsproperly: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      st_convexhull: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_coorddim: {
        Args: { geometry: unknown }
        Returns: number
      }
      st_coveredby: {
        Args:
          | { geog1: unknown; geog2: unknown }
          | { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      st_covers: {
        Args:
          | { geog1: unknown; geog2: unknown }
          | { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      st_crosses: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      st_curvetoline: {
        Args: { flags?: number; geom: unknown; tol?: number; toltype?: number }
        Returns: unknown
      }
      st_delaunaytriangles: {
        Args: { flags?: number; g1: unknown; tolerance?: number }
        Returns: unknown
      }
      st_difference: {
        Args: { geom1: unknown; geom2: unknown; gridsize?: number }
        Returns: unknown
      }
      st_dimension: {
        Args: { "": unknown }
        Returns: number
      }
      st_disjoint: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      st_distance: {
        Args:
          | { geog1: unknown; geog2: unknown; use_spheroid?: boolean }
          | { geom1: unknown; geom2: unknown }
        Returns: number
      }
      st_distancesphere: {
        Args:
          | { geom1: unknown; geom2: unknown }
          | { geom1: unknown; geom2: unknown; radius: number }
        Returns: number
      }
      st_distancespheroid: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: number
      }
      st_dump: {
        Args: { "": unknown }
        Returns: Database["public"]["CompositeTypes"]["geometry_dump"][]
      }
      st_dumppoints: {
        Args: { "": unknown }
        Returns: Database["public"]["CompositeTypes"]["geometry_dump"][]
      }
      st_dumprings: {
        Args: { "": unknown }
        Returns: Database["public"]["CompositeTypes"]["geometry_dump"][]
      }
      st_dumpsegments: {
        Args: { "": unknown }
        Returns: Database["public"]["CompositeTypes"]["geometry_dump"][]
      }
      st_dwithin: {
        Args: {
          geog1: unknown
          geog2: unknown
          tolerance: number
          use_spheroid?: boolean
        }
        Returns: boolean
      }
      st_endpoint: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_envelope: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_equals: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      st_expand: {
        Args:
          | { box: unknown; dx: number; dy: number }
          | { box: unknown; dx: number; dy: number; dz?: number }
          | { dm?: number; dx: number; dy: number; dz?: number; geom: unknown }
        Returns: unknown
      }
      st_exteriorring: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_flipcoordinates: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_force2d: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_force3d: {
        Args: { geom: unknown; zvalue?: number }
        Returns: unknown
      }
      st_force3dm: {
        Args: { geom: unknown; mvalue?: number }
        Returns: unknown
      }
      st_force3dz: {
        Args: { geom: unknown; zvalue?: number }
        Returns: unknown
      }
      st_force4d: {
        Args: { geom: unknown; mvalue?: number; zvalue?: number }
        Returns: unknown
      }
      st_forcecollection: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_forcecurve: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_forcepolygonccw: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_forcepolygoncw: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_forcerhr: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_forcesfs: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_generatepoints: {
        Args:
          | { area: unknown; npoints: number }
          | { area: unknown; npoints: number; seed: number }
        Returns: unknown
      }
      st_geogfromtext: {
        Args: { "": string }
        Returns: unknown
      }
      st_geogfromwkb: {
        Args: { "": string }
        Returns: unknown
      }
      st_geographyfromtext: {
        Args: { "": string }
        Returns: unknown
      }
      st_geohash: {
        Args:
          | { geog: unknown; maxchars?: number }
          | { geom: unknown; maxchars?: number }
        Returns: string
      }
      st_geomcollfromtext: {
        Args: { "": string }
        Returns: unknown
      }
      st_geomcollfromwkb: {
        Args: { "": string }
        Returns: unknown
      }
      st_geometricmedian: {
        Args: {
          fail_if_not_converged?: boolean
          g: unknown
          max_iter?: number
          tolerance?: number
        }
        Returns: unknown
      }
      st_geometryfromtext: {
        Args: { "": string }
        Returns: unknown
      }
      st_geometrytype: {
        Args: { "": unknown }
        Returns: string
      }
      st_geomfromewkb: {
        Args: { "": string }
        Returns: unknown
      }
      st_geomfromewkt: {
        Args: { "": string }
        Returns: unknown
      }
      st_geomfromgeojson: {
        Args: { "": Json } | { "": Json } | { "": string }
        Returns: unknown
      }
      st_geomfromgml: {
        Args: { "": string }
        Returns: unknown
      }
      st_geomfromkml: {
        Args: { "": string }
        Returns: unknown
      }
      st_geomfrommarc21: {
        Args: { marc21xml: string }
        Returns: unknown
      }
      st_geomfromtext: {
        Args: { "": string }
        Returns: unknown
      }
      st_geomfromtwkb: {
        Args: { "": string }
        Returns: unknown
      }
      st_geomfromwkb: {
        Args: { "": string }
        Returns: unknown
      }
      st_gmltosql: {
        Args: { "": string }
        Returns: unknown
      }
      st_hasarc: {
        Args: { geometry: unknown }
        Returns: boolean
      }
      st_hausdorffdistance: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: number
      }
      st_hexagon: {
        Args: { cell_i: number; cell_j: number; origin?: unknown; size: number }
        Returns: unknown
      }
      st_hexagongrid: {
        Args: { bounds: unknown; size: number }
        Returns: Record<string, unknown>[]
      }
      st_interpolatepoint: {
        Args: { line: unknown; point: unknown }
        Returns: number
      }
      st_intersection: {
        Args: { geom1: unknown; geom2: unknown; gridsize?: number }
        Returns: unknown
      }
      st_intersects: {
        Args:
          | { geog1: unknown; geog2: unknown }
          | { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      st_isclosed: {
        Args: { "": unknown }
        Returns: boolean
      }
      st_iscollection: {
        Args: { "": unknown }
        Returns: boolean
      }
      st_isempty: {
        Args: { "": unknown }
        Returns: boolean
      }
      st_ispolygonccw: {
        Args: { "": unknown }
        Returns: boolean
      }
      st_ispolygoncw: {
        Args: { "": unknown }
        Returns: boolean
      }
      st_isring: {
        Args: { "": unknown }
        Returns: boolean
      }
      st_issimple: {
        Args: { "": unknown }
        Returns: boolean
      }
      st_isvalid: {
        Args: { "": unknown }
        Returns: boolean
      }
      st_isvaliddetail: {
        Args: { flags?: number; geom: unknown }
        Returns: Database["public"]["CompositeTypes"]["valid_detail"]
      }
      st_isvalidreason: {
        Args: { "": unknown }
        Returns: string
      }
      st_isvalidtrajectory: {
        Args: { "": unknown }
        Returns: boolean
      }
      st_length: {
        Args:
          | { "": string }
          | { "": unknown }
          | { geog: unknown; use_spheroid?: boolean }
        Returns: number
      }
      st_length2d: {
        Args: { "": unknown }
        Returns: number
      }
      st_letters: {
        Args: { font?: Json; letters: string }
        Returns: unknown
      }
      st_linecrossingdirection: {
        Args: { line1: unknown; line2: unknown }
        Returns: number
      }
      st_linefromencodedpolyline: {
        Args: { nprecision?: number; txtin: string }
        Returns: unknown
      }
      st_linefrommultipoint: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_linefromtext: {
        Args: { "": string }
        Returns: unknown
      }
      st_linefromwkb: {
        Args: { "": string }
        Returns: unknown
      }
      st_linelocatepoint: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: number
      }
      st_linemerge: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_linestringfromwkb: {
        Args: { "": string }
        Returns: unknown
      }
      st_linetocurve: {
        Args: { geometry: unknown }
        Returns: unknown
      }
      st_locatealong: {
        Args: { geometry: unknown; leftrightoffset?: number; measure: number }
        Returns: unknown
      }
      st_locatebetween: {
        Args: {
          frommeasure: number
          geometry: unknown
          leftrightoffset?: number
          tomeasure: number
        }
        Returns: unknown
      }
      st_locatebetweenelevations: {
        Args: { fromelevation: number; geometry: unknown; toelevation: number }
        Returns: unknown
      }
      st_longestline: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: unknown
      }
      st_m: {
        Args: { "": unknown }
        Returns: number
      }
      st_makebox2d: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: unknown
      }
      st_makeline: {
        Args: { "": unknown[] } | { geom1: unknown; geom2: unknown }
        Returns: unknown
      }
      st_makepolygon: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_makevalid: {
        Args: { "": unknown } | { geom: unknown; params: string }
        Returns: unknown
      }
      st_maxdistance: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: number
      }
      st_maximuminscribedcircle: {
        Args: { "": unknown }
        Returns: Record<string, unknown>
      }
      st_memsize: {
        Args: { "": unknown }
        Returns: number
      }
      st_minimumboundingcircle: {
        Args: { inputgeom: unknown; segs_per_quarter?: number }
        Returns: unknown
      }
      st_minimumboundingradius: {
        Args: { "": unknown }
        Returns: Record<string, unknown>
      }
      st_minimumclearance: {
        Args: { "": unknown }
        Returns: number
      }
      st_minimumclearanceline: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_mlinefromtext: {
        Args: { "": string }
        Returns: unknown
      }
      st_mlinefromwkb: {
        Args: { "": string }
        Returns: unknown
      }
      st_mpointfromtext: {
        Args: { "": string }
        Returns: unknown
      }
      st_mpointfromwkb: {
        Args: { "": string }
        Returns: unknown
      }
      st_mpolyfromtext: {
        Args: { "": string }
        Returns: unknown
      }
      st_mpolyfromwkb: {
        Args: { "": string }
        Returns: unknown
      }
      st_multi: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_multilinefromwkb: {
        Args: { "": string }
        Returns: unknown
      }
      st_multilinestringfromtext: {
        Args: { "": string }
        Returns: unknown
      }
      st_multipointfromtext: {
        Args: { "": string }
        Returns: unknown
      }
      st_multipointfromwkb: {
        Args: { "": string }
        Returns: unknown
      }
      st_multipolyfromwkb: {
        Args: { "": string }
        Returns: unknown
      }
      st_multipolygonfromtext: {
        Args: { "": string }
        Returns: unknown
      }
      st_ndims: {
        Args: { "": unknown }
        Returns: number
      }
      st_node: {
        Args: { g: unknown }
        Returns: unknown
      }
      st_normalize: {
        Args: { geom: unknown }
        Returns: unknown
      }
      st_npoints: {
        Args: { "": unknown }
        Returns: number
      }
      st_nrings: {
        Args: { "": unknown }
        Returns: number
      }
      st_numgeometries: {
        Args: { "": unknown }
        Returns: number
      }
      st_numinteriorring: {
        Args: { "": unknown }
        Returns: number
      }
      st_numinteriorrings: {
        Args: { "": unknown }
        Returns: number
      }
      st_numpatches: {
        Args: { "": unknown }
        Returns: number
      }
      st_numpoints: {
        Args: { "": unknown }
        Returns: number
      }
      st_offsetcurve: {
        Args: { distance: number; line: unknown; params?: string }
        Returns: unknown
      }
      st_orderingequals: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      st_orientedenvelope: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_overlaps: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      st_perimeter: {
        Args: { "": unknown } | { geog: unknown; use_spheroid?: boolean }
        Returns: number
      }
      st_perimeter2d: {
        Args: { "": unknown }
        Returns: number
      }
      st_pointfromtext: {
        Args: { "": string }
        Returns: unknown
      }
      st_pointfromwkb: {
        Args: { "": string }
        Returns: unknown
      }
      st_pointm: {
        Args: {
          mcoordinate: number
          srid?: number
          xcoordinate: number
          ycoordinate: number
        }
        Returns: unknown
      }
      st_pointonsurface: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_points: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_pointz: {
        Args: {
          srid?: number
          xcoordinate: number
          ycoordinate: number
          zcoordinate: number
        }
        Returns: unknown
      }
      st_pointzm: {
        Args: {
          mcoordinate: number
          srid?: number
          xcoordinate: number
          ycoordinate: number
          zcoordinate: number
        }
        Returns: unknown
      }
      st_polyfromtext: {
        Args: { "": string }
        Returns: unknown
      }
      st_polyfromwkb: {
        Args: { "": string }
        Returns: unknown
      }
      st_polygonfromtext: {
        Args: { "": string }
        Returns: unknown
      }
      st_polygonfromwkb: {
        Args: { "": string }
        Returns: unknown
      }
      st_polygonize: {
        Args: { "": unknown[] }
        Returns: unknown
      }
      st_project: {
        Args: { azimuth: number; distance: number; geog: unknown }
        Returns: unknown
      }
      st_quantizecoordinates: {
        Args: {
          g: unknown
          prec_m?: number
          prec_x: number
          prec_y?: number
          prec_z?: number
        }
        Returns: unknown
      }
      st_reduceprecision: {
        Args: { geom: unknown; gridsize: number }
        Returns: unknown
      }
      st_relate: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: string
      }
      st_removerepeatedpoints: {
        Args: { geom: unknown; tolerance?: number }
        Returns: unknown
      }
      st_reverse: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_segmentize: {
        Args: { geog: unknown; max_segment_length: number }
        Returns: unknown
      }
      st_setsrid: {
        Args: { geog: unknown; srid: number } | { geom: unknown; srid: number }
        Returns: unknown
      }
      st_sharedpaths: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: unknown
      }
      st_shiftlongitude: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_shortestline: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: unknown
      }
      st_simplifypolygonhull: {
        Args: { geom: unknown; is_outer?: boolean; vertex_fraction: number }
        Returns: unknown
      }
      st_split: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: unknown
      }
      st_square: {
        Args: { cell_i: number; cell_j: number; origin?: unknown; size: number }
        Returns: unknown
      }
      st_squaregrid: {
        Args: { bounds: unknown; size: number }
        Returns: Record<string, unknown>[]
      }
      st_srid: {
        Args: { geog: unknown } | { geom: unknown }
        Returns: number
      }
      st_startpoint: {
        Args: { "": unknown }
        Returns: unknown
      }
      st_subdivide: {
        Args: { geom: unknown; gridsize?: number; maxvertices?: number }
        Returns: unknown[]
      }
      st_summary: {
        Args: { "": unknown } | { "": unknown }
        Returns: string
      }
      st_swapordinates: {
        Args: { geom: unknown; ords: unknown }
        Returns: unknown
      }
      st_symdifference: {
        Args: { geom1: unknown; geom2: unknown; gridsize?: number }
        Returns: unknown
      }
      st_symmetricdifference: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: unknown
      }
      st_tileenvelope: {
        Args: {
          bounds?: unknown
          margin?: number
          x: number
          y: number
          zoom: number
        }
        Returns: unknown
      }
      st_touches: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      st_transform: {
        Args:
          | { from_proj: string; geom: unknown; to_proj: string }
          | { from_proj: string; geom: unknown; to_srid: number }
          | { geom: unknown; to_proj: string }
        Returns: unknown
      }
      st_triangulatepolygon: {
        Args: { g1: unknown }
        Returns: unknown
      }
      st_union: {
        Args:
          | { "": unknown[] }
          | { geom1: unknown; geom2: unknown }
          | { geom1: unknown; geom2: unknown; gridsize: number }
        Returns: unknown
      }
      st_voronoilines: {
        Args: { extend_to?: unknown; g1: unknown; tolerance?: number }
        Returns: unknown
      }
      st_voronoipolygons: {
        Args: { extend_to?: unknown; g1: unknown; tolerance?: number }
        Returns: unknown
      }
      st_within: {
        Args: { geom1: unknown; geom2: unknown }
        Returns: boolean
      }
      st_wkbtosql: {
        Args: { wkb: string }
        Returns: unknown
      }
      st_wkttosql: {
        Args: { "": string }
        Returns: unknown
      }
      st_wrapx: {
        Args: { geom: unknown; move: number; wrap: number }
        Returns: unknown
      }
      st_x: {
        Args: { "": unknown }
        Returns: number
      }
      st_xmax: {
        Args: { "": unknown }
        Returns: number
      }
      st_xmin: {
        Args: { "": unknown }
        Returns: number
      }
      st_y: {
        Args: { "": unknown }
        Returns: number
      }
      st_ymax: {
        Args: { "": unknown }
        Returns: number
      }
      st_ymin: {
        Args: { "": unknown }
        Returns: number
      }
      st_z: {
        Args: { "": unknown }
        Returns: number
      }
      st_zmax: {
        Args: { "": unknown }
        Returns: number
      }
      st_zmflag: {
        Args: { "": unknown }
        Returns: number
      }
      st_zmin: {
        Args: { "": unknown }
        Returns: number
      }
      text: {
        Args: { "": unknown }
        Returns: string
      }
      unlockrows: {
        Args: { "": string }
        Returns: number
      }
      update_contact_last_interaction: {
        Args: { contact_id_to_update: number }
        Returns: undefined
      }
      updategeometrysrid: {
        Args: {
          catalogn_name: string
          column_name: string
          new_srid_in: number
          schema_name: string
          table_name: string
        }
        Returns: string
      }
      upsert_expense_with_items: {
        Args: {
          p_expense_details: Json
          p_expense_id: number
          p_expense_items: Json
          p_team_id: string
          p_user_id: string
        }
        Returns: {
          category: string
          created_at: string
          description: string
          discount_amount: number
          expense_date: string
          extra_data: Json
          id: number
          invoice_number: string
          notes: string
          subtotal: number
          supplier_id: string
          tax_amount: number
          tax_rate: number
          team_id: string
          total_amount: number
          user_id: string
        }[]
      }
      upsert_invoice_with_items: {
        Args: {
          invoice_data: Json
          items_data: Json
          team_id: string
          user_id: string
        }
        Returns: {
          generated_invoice_id: number
        }[]
      }
      upsert_quote_with_items: {
        Args: { quote_payload: Json }
        Returns: Json
      }
    }
    Enums: {
      expense_status: "pending" | "paid" | "overdue" | "cancelled"
      invoice_status: "Draft" | "Sent" | "Paid" | "Overdue" | "Cancelled"
      opportunity_stage:
        | "Nou Lead"
        | "Contactat"
        | "Proposta Enviada"
        | "Negociaci├│"
        | "Guanyat"
        | "Perdut"
      quote_status: "Draft" | "Sent" | "Accepted" | "Declined" | "Invoiced"
      task_priority: "Baixa" | "Mitjana" | "Alta"
      ticket_filter: "tots" | "rebuts" | "enviats" | "noLlegits"
      ticket_status:
        | "Obert"
        | "En progr├®s"
        | "Esperant resposta"
        | "Tancat"
        | "Llegit"
      ticket_type: "rebut" | "enviat"
    }
    CompositeTypes: {
      geometry_dump: {
        path: number[] | null
        geom: unknown | null
      }
      valid_detail: {
        valid: boolean | null
        reason: string | null
        location: unknown | null
      }
    }
  }
}

type DatabaseWithoutInternals = Omit<Database, "__InternalSupabase">

type DefaultSchema = DatabaseWithoutInternals[Extract<keyof Database, "public">]

export type Tables<
  DefaultSchemaTableNameOrOptions extends
    | keyof (DefaultSchema["Tables"] & DefaultSchema["Views"])
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
        DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
      DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema["Tables"] &
        DefaultSchema["Views"])
    ? (DefaultSchema["Tables"] &
        DefaultSchema["Views"])[DefaultSchemaTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  DefaultSchemaEnumNameOrOptions extends
    | keyof DefaultSchema["Enums"]
    | { schema: keyof DatabaseWithoutInternals },
  EnumName extends DefaultSchemaEnumNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = DefaultSchemaEnumNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema["Enums"]
    ? DefaultSchema["Enums"][DefaultSchemaEnumNameOrOptions]
    : never

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof DefaultSchema["CompositeTypes"]
    | { schema: keyof DatabaseWithoutInternals },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
    : never = never,
> = PublicCompositeTypeNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema["CompositeTypes"]
    ? DefaultSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
    : never

export const Constants = {
  graphql_public: {
    Enums: {},
  },
  public: {
    Enums: {
      expense_status: ["pending", "paid", "overdue", "cancelled"],
      invoice_status: ["Draft", "Sent", "Paid", "Overdue", "Cancelled"],
      opportunity_stage: [
        "Nou Lead",
        "Contactat",
        "Proposta Enviada",
        "Negociaci├│",
        "Guanyat",
        "Perdut",
      ],
      quote_status: ["Draft", "Sent", "Accepted", "Declined", "Invoiced"],
      task_priority: ["Baixa", "Mitjana", "Alta"],
      ticket_filter: ["tots", "rebuts", "enviats", "noLlegits"],
      ticket_status: [
        "Obert",
        "En progr├®s",
        "Esperant resposta",
        "Tancat",
        "Llegit",
      ],
      ticket_type: ["rebut", "enviat"],
    },
  },
} as const
