ESTRUCTURA DEL PROJECTE (./src)

├── app
│   ├── actions
│   │   ├── chatbotActions.ts
│   │   ├── exportActions.ts
│   │   └── invitationActions.ts
│   ├── api
│   │   ├── chatbot
│   │   │   └── route.ts
│   │   └── oauth
│   │       └── callback
│   │           └── [provider]
│   │               └── route.ts
│   ├── globals.css
│   ├── layout.tsx
│   ├── page.tsx
│   └── [locale]
│       ├── (app)
│       │   ├── comunicacio
│       │   │   ├── inbox
│       │   │   │   ├── actions.ts
│       │   │   │   ├── page.tsx
│       │   │   │   ├── _components
│       │   │   │   │   ├── ComposeDialog.tsx
│       │   │   │   │   ├── ContactPanel.tsx
│       │   │   │   │   ├── EmailEditorToolbar.tsx
│       │   │   │   │   ├── InboxClient.tsx
│       │   │   │   │   ├── InboxData.tsx
│       │   │   │   │   ├── InboxSkeleton.tsx
│       │   │   │   │   ├── MobileDetailView.tsx
│       │   │   │   │   ├── SafeEmailRenderer.tsx
│       │   │   │   │   ├── TicketDetail.tsx
│       │   │   │   │   └── ticketList
│       │   │   │   │       ├── index.tsx
│       │   │   │   │       ├── TicketListFilters.tsx
│       │   │   │   │       ├── TicketListHeader.tsx
│       │   │   │   │       └── TicketListItem.tsx
│       │   │   │   └── _hooks
│       │   │   │       ├── useCompose.ts
│       │   │   │       └── useInbox.ts
│       │   │   ├── marketing
│       │   │   │   ├── actions.ts
│       │   │   │   ├── page.tsx
│       │   │   │   ├── _components
│       │   │   │   │   ├── AICampaignWizard.tsx
│       │   │   │   │   ├── CampaignCalendar.tsx
│       │   │   │   │   ├── CampaignDetailDialog.tsx
│       │   │   │   │   ├── CampaignList.tsx
│       │   │   │   │   ├── marketing-client.tsx
│       │   │   │   │   ├── MarketingData.tsx
│       │   │   │   │   ├── MarketingSkeleton.tsx
│       │   │   │   │   ├── MetricCard.tsx
│       │   │   │   │   └── wizard
│       │   │   │   │       ├── WizardStep1_Goal.tsx
│       │   │   │   │       ├── WizardStep2_SelectStrategy.tsx
│       │   │   │   │       └── WizardStep3_Finalize.tsx
│       │   │   │   └── _hooks
│       │   │   │       ├── useAICampaignWizard.ts
│       │   │   │       └── useMarketing.ts
│       │   │   ├── planificador
│       │   │   │   ├── actions.ts
│       │   │   │   ├── page.tsx
│       │   │   │   ├── types.ts
│       │   │   │   ├── _components
│       │   │   │   │   ├── CreatePostDialog.tsx
│       │   │   │   │   ├── PostCard.tsx
│       │   │   │   │   ├── PostPreview.tsx
│       │   │   │   │   ├── SchedulePostDialog.tsx
│       │   │   │   │   ├── SocialPlannerClient.tsx
│       │   │   │   │   └── ViewPostDialog.tsx
│       │   │   │   └── _hooks
│       │   │   │       ├── useCreatePost.ts
│       │   │   │       └── useSocialPlanner.ts
│       │   │   └── templates
│       │   │       ├── actions.ts
│       │   │       ├── page.tsx
│       │   │       ├── _components
│       │   │       │   ├── TemplateEditor.tsx
│       │   │       │   ├── TemplateList.tsx
│       │   │       │   ├── templates-client.tsx
│       │   │       │   ├── TemplatesData.tsx
│       │   │       │   ├── TemplatesSkeleton.tsx
│       │   │       │   └── TemplateVariables.tsx
│       │   │       └── _hooks
│       │   │           └── useTemplates.ts
│       │   ├── crm
│       │   │   ├── activitats
│       │   │   │   ├── page.tsx
│       │   │   │   └── _components
│       │   │   │       ├── activitats-client.tsx
│       │   │   │       ├── ActivitiesData.tsx
│       │   │   │       └── ActivitiesSkeleton.tsx
│       │   │   ├── contactes
│       │   │   │   ├── actions.ts
│       │   │   │   ├── page.tsx
│       │   │   │   ├── [contactId]
│       │   │   │   │   ├── actions.ts
│       │   │   │   │   ├── page.tsx
│       │   │   │   │   ├── _components
│       │   │   │   │   │   ├── contact-detail-client.tsx
│       │   │   │   │   │   ├── ContactDetailData.tsx
│       │   │   │   │   │   ├── ContactDetailHeader.tsx
│       │   │   │   │   │   ├── ContactDetailSkeleton.tsx
│       │   │   │   │   │   ├── ContactDetailTabs.tsx
│       │   │   │   │   │   ├── DeleteConfirmationDialog.tsx
│       │   │   │   │   │   ├── EditableField.tsx
│       │   │   │   │   │   ├── shared
│       │   │   │   │   │   │   └── TabTriggerWithCount.tsx
│       │   │   │   │   │   └── tabs
│       │   │   │   │   │       ├── ActivitiesTab.tsx
│       │   │   │   │   │       ├── DetailsTab.tsx
│       │   │   │   │   │       ├── GeneralInfoSection.tsx
│       │   │   │   │   │       ├── NotesSection.tsx
│       │   │   │   │   │       ├── PersonalInfoSection.tsx
│       │   │   │   │   │       └── RelatedDataTable.tsx
│       │   │   │   │   └── _hooks
│       │   │   │   │       └── useContactDetail.ts
│       │   │   │   ├── _components
│       │   │   │   │   ├── ContactCard.tsx
│       │   │   │   │   ├── ContactDialog.tsx
│       │   │   │   │   ├── contacts-client.tsx
│       │   │   │   │   ├── ContactsData.tsx
│       │   │   │   │   ├── ContactsSkeleton.tsx
│       │   │   │   │   └── ContactTable.tsx
│       │   │   │   └── _hooks
│       │   │   │       └── useContactFilters.ts
│       │   │   ├── general
│       │   │   │   ├── page.tsx
│       │   │   │   └── _components
│       │   │   │       ├── ActivityItem.tsx
│       │   │   │       ├── ComposeEmailDialog.tsx
│       │   │   │       ├── crm-client.tsx
│       │   │   │       ├── CrmData.tsx
│       │   │   │       ├── CrmSkeleton.tsx
│       │   │   │       ├── FunnelBar.tsx
│       │   │   │       ├── ListItem.tsx
│       │   │   │       ├── send-email-action.ts
│       │   │   │       └── StatCard.tsx
│       │   │   ├── pipeline
│       │   │   │   ├── actions.ts
│       │   │   │   ├── loading.tsx
│       │   │   │   ├── page.tsx
│       │   │   │   ├── pipeline-client.tsx
│       │   │   │   ├── _components
│       │   │   │   │   ├── ColumnsView.tsx
│       │   │   │   │   ├── OportunityCard.tsx
│       │   │   │   │   ├── OportunityRowCard.tsx
│       │   │   │   │   ├── OpportunityDialog.tsx
│       │   │   │   │   ├── PipelineData.tsx
│       │   │   │   │   ├── PipelineSkeleton.tsx
│       │   │   │   │   ├── RowsView.tsx
│       │   │   │   │   └── StageColumn.tsx
│       │   │   │   └── _hooks
│       │   │   │       ├── useOpportunityForm.ts
│       │   │   │       └── usePipeline.ts
│       │   │   ├── products
│       │   │   │   ├── actions.ts
│       │   │   │   ├── page.tsx
│       │   │   │   ├── _components
│       │   │   │   │   ├── ProductForm.tsx
│       │   │   │   │   ├── ProductsCardView.tsx
│       │   │   │   │   ├── ProductsClient.tsx
│       │   │   │   │   ├── ProductsData.tsx
│       │   │   │   │   ├── ProductsSkeleton.tsx
│       │   │   │   │   └── ProductsTableView.tsx
│       │   │   │   └── _hooks
│       │   │   │       └── useProducts.ts
│       │   │   └── quotes
│       │   │       ├── actions.ts
│       │   │       ├── page.tsx
│       │   │       ├── [id]
│       │   │       │   ├── actions.ts
│       │   │       │   ├── page.tsx
│       │   │       │   ├── _components
│       │   │       │   │   ├── CompanyProfileDialog.tsx
│       │   │       │   │   ├── QuoteEditorClient.tsx
│       │   │       │   │   ├── QuoteEditorData.tsx
│       │   │       │   │   ├── QuoteEditorSkeleton.tsx
│       │   │       │   │   ├── QuoteItems.tsx
│       │   │       │   │   ├── QuoteMeta.tsx
│       │   │       │   │   ├── QuotePreview.tsx
│       │   │       │   │   ├── QuoteTotals.tsx
│       │   │       │   │   └── StatCardsGrid.tsx
│       │   │       │   └── _hooks
│       │   │       │       ├── useQuoteEditor.ts
│       │   │       │       └── useQuoteItems.ts
│       │   │       ├── _components
│       │   │       │   ├── QuotesClient.tsx
│       │   │       │   ├── QuotesData.tsx
│       │   │       │   └── QuotesSkeleton.tsx
│       │   │       └── _hooks
│       │   │           └── useQuotes.ts
│       │   ├── dashboard
│       │   │   ├── dashboard-client.tsx
│       │   │   ├── page.tsx
│       │   │   ├── _components
│       │   │   │   ├── AddTaskDialog.tsx
│       │   │   │   ├── Agenda.tsx
│       │   │   │   ├── AIOracle.tsx
│       │   │   │   ├── AIOracleSkeleton.tsx
│       │   │   │   ├── DashboardBottomGrid.tsx
│       │   │   │   ├── DashboardData.tsx
│       │   │   │   ├── DashboardMainGrid.tsx
│       │   │   │   ├── DashboardSkeleton.tsx
│       │   │   │   ├── QuickAccess.tsx
│       │   │   │   ├── Radar.tsx
│       │   │   │   ├── RecentActivities.tsx
│       │   │   │   ├── SalesPerformance.tsx
│       │   │   │   └── StatCardsGrid.tsx
│       │   │   └── _hooks
│       │   │       ├── useAddTask.ts
│       │   │       ├── useDashboardTasks.tsx
│       │   │       └── useTaskManager.ts
│       │   ├── excel
│       │   │   ├── actions.ts
│       │   │   └── ExcelDropdownButton.tsx
│       │   ├── finances
│       │   │   ├── despeses
│       │   │   │   ├── actions.ts
│       │   │   │   ├── error.tsx
│       │   │   │   ├── page.tsx
│       │   │   │   └── _components
│       │   │   │       ├── expenses
│       │   │   │       │   ├── ExpenseDetailDrawer.tsx
│       │   │   │       │   ├── ExpenseDialog.tsx
│       │   │   │       │   └── ExpenseTable.tsx
│       │   │   │       ├── expenses-client.tsx
│       │   │   │       ├── ExpensesData.tsx
│       │   │   │       └── ExpensesSkeleton.tsx
│       │   │   └── facturacio
│       │   │       ├── actions.ts
│       │   │       ├── page.tsx
│       │   │       └── _components
│       │   │           ├── FacturacioClient.tsx
│       │   │           ├── FacturacioData.tsx
│       │   │           ├── FacturacioSkeleton.tsx
│       │   │           └── InvoiceDialog.tsx
│       │   ├── layout.tsx
│       │   ├── loading.tsx
│       │   ├── network
│       │   │   ├── actions.ts
│       │   │   ├── loading.tsx
│       │   │   ├── page.tsx
│       │   │   ├── types.ts
│       │   │   └── _components
│       │   │       ├── AddressAutocomplete.tsx
│       │   │       ├── MapContainer.tsx
│       │   │       ├── NetworkClient.tsx
│       │   │       ├── NetworkData.tsx
│       │   │       ├── NetworkSkeleton.tsx
│       │   │       ├── ProfileCard.tsx
│       │   │       └── ProfileList.tsx
│       │   ├── projectStrocture
│       │   │   ├── actions.ts
│       │   │   ├── page.tsx
│       │   │   └── _components
│       │   │       └── ArchitectureVisualizer.tsx
│       │   ├── redirecting
│       │   │   └── page.tsx
│       │   ├── settings
│       │   │   ├── billing
│       │   │   │   ├── actions.ts
│       │   │   │   ├── page.tsx
│       │   │   │   └── _components
│       │   │   │       ├── BillingClient.tsx
│       │   │   │       ├── BillingData.tsx
│       │   │   │       ├── BillingSkeleton.tsx
│       │   │   │       └── UpgradePlanNotice.tsx
│       │   │   ├── blacklist
│       │   │   │   ├── action.ts
│       │   │   │   ├── page.tsx
│       │   │   │   └── _components
│       │   │   │       ├── BlacklistClient.tsx
│       │   │   │       ├── BlacklistData.tsx
│       │   │   │       └── BlacklistSkeleton.tsx
│       │   │   ├── customization
│       │   │   │   ├── page.tsx
│       │   │   │   └── _components
│       │   │   │       ├── CustomizationClient.tsx
│       │   │   │       ├── CustomizationData.tsx
│       │   │   │       └── CustomizationSkeleton.tsx
│       │   │   ├── integrations
│       │   │   │   ├── actions.ts
│       │   │   │   ├── page.tsx
│       │   │   │   └── _components
│       │   │   │       ├── IntegrationsClient.tsx
│       │   │   │       ├── IntegrationsData.tsx
│       │   │   │       └── IntegrationsSkeleton.tsx
│       │   │   ├── layout.tsx
│       │   │   ├── page.tsx
│       │   │   ├── permissions
│       │   │   │   ├── actions.ts
│       │   │   │   ├── page.tsx
│       │   │   │   └── _components
│       │   │   │       └── PermissionsClient.tsx
│       │   │   ├── profile
│       │   │   │   ├── actions.ts
│       │   │   │   ├── page.tsx
│       │   │   │   └── _components
│       │   │   │       ├── ProfileData.tsx
│       │   │   │       ├── ProfileForm.tsx
│       │   │   │       └── ProfileSkeleton.tsx
│       │   │   ├── team
│       │   │   │   ├── actions.ts
│       │   │   │   ├── page.tsx
│       │   │   │   ├── _components
│       │   │   │   │   ├── ActiveTeamManagerData.tsx
│       │   │   │   │   ├── TeamClient.tsx
│       │   │   │   │   ├── TeamDashboard.tsx
│       │   │   │   │   ├── TeamData.tsx
│       │   │   │   │   ├── TeamHub.tsx
│       │   │   │   │   ├── TeamSelectorData.tsx
│       │   │   │   │   ├── TeamSkeleton.tsx
│       │   │   │   │   └── TeamStateCorrector.tsx
│       │   │   │   └── _hooks
│       │   │   │       ├── useTeamHub.ts
│       │   │   │       └── useTeamManagement.ts
│       │   │   └── _components
│       │   │       ├── settings-nav.tsx
│       │   │       └── SettingsSkeleton.tsx
│       │   └── _components
│       │       ├── AppClientLayout.tsx
│       │       ├── main-sidebar.tsx
│       │       ├── MobileMenu.tsx
│       │       ├── module-sidebar.tsx
│       │       ├── NavItem.tsx
│       │       └── ui
│       │           └── redirect-animation.tsx
│       ├── (auth)
│       │   ├── auth
│       │   │   ├── actions.ts
│       │   │   ├── callback
│       │   │   │   └── route.ts
│       │   │   ├── check-email
│       │   │   │   └── page.tsx
│       │   │   └── reset-password
│       │   │       └── page.tsx
│       │   ├── login
│       │   │   ├── page.tsx
│       │   │   ├── _components
│       │   │   │   ├── ForgotPasswordDialog.tsx
│       │   │   │   └── LoginClient.tsx
│       │   │   └── _hooks
│       │   │       └── useLoginForm.ts
│       │   └── signup
│       │       ├── page.tsx
│       │       ├── _components
│       │       │   └── SignupClient.tsx
│       │       └── _hooks
│       │           └── useSignupForm.ts
│       ├── accept-invite
│       │   └── route.ts
│       ├── invitation
│       │   └── accept
│       │       ├── page.tsx
│       │       └── _components
│       │           └── InvitedSignupForm.tsx
│       ├── layout.tsx
│       ├── onboarding
│       │   ├── actions.ts
│       │   ├── page.tsx
│       │   ├── _components
│       │   │   ├── OnboardingClient.tsx
│       │   │   ├── OnboardingContext.tsx
│       │   │   ├── OnboardingData.tsx
│       │   │   ├── OnboardingLayout.tsx
│       │   │   ├── OnboardingSkeleton.tsx
│       │   │   ├── ServiceSelectionModal.tsx
│       │   │   └── steps
│       │   │       ├── index.ts
│       │   │       ├── Step1.tsx
│       │   │       ├── Step2.tsx
│       │   │       └── Step3.tsx
│       │   └── _hooks
│       │       └── useOnboardingForm.ts
│       ├── page.tsx
│       ├── quote
│       │   └── [secureId]
│       │       ├── actions.ts
│       │       ├── page.tsx
│       │       ├── _components
│       │       │   ├── PublicQuoteClient.tsx
│       │       │   ├── PublicQuoteView.tsx
│       │       │   ├── QuoteStatusScreeen.tsx
│       │       │   └── RejectionDialog.tsx
│       │       └── _hooks
│       │           └── usePublicQuote.ts
│       └── _components
│           ├── AddressSearch.tsx
│           ├── CountdownView.tsx
│           ├── FeaturesPanel.tsx
│           ├── LandingClient.tsx
│           ├── LandingNav.tsx
│           ├── MainLandingView.tsx
│           └── ParticleBackground.tsx
├── components
│   ├── chatbot
│   │   └── Chatbot.tsx
│   ├── features
│   │   └── contactes
│   │       └── ContactSelector.tsx
│   ├── LanguageSwitcher.tsx
│   ├── shared
│   │   ├── AccessDenied.tsx
│   │   ├── ActivityItem.tsx
│   │   ├── EmptyState.tsx
│   │   ├── StatCard.tsx
│   │   └── StatusBadge.tsx
│   ├── theme-provider.tsx
│   ├── ThemeSwitcher.tsx
│   └── ui
│       ├── accordion.tsx
│       ├── alert-dialog.tsx
│       ├── avatar.tsx
│       ├── badge.jsx
│       ├── button.tsx
│       ├── calendar.tsx
│       ├── card.tsx
│       ├── checkbox.tsx
│       ├── command.tsx
│       ├── dialog.tsx
│       ├── drawer.tsx
│       ├── dropdown-menu.tsx
│       ├── input.tsx
│       ├── label.tsx
│       ├── popover.tsx
│       ├── progress.tsx
│       ├── select.tsx
│       ├── separator.tsx
│       ├── sheet.tsx
│       ├── skeleton.tsx
│       ├── sonner.tsx
│       ├── switch.tsx
│       ├── table.tsx
│       ├── tabs.tsx
│       ├── textarea.tsx
│       ├── toast.tsx
│       ├── toaster.tsx
│       ├── toggle-group.tsx
│       ├── toggle.tsx
│       └── tooltip.tsx
├── config
│   ├── billing.ts
│   └── navigation.ts
├── hooks
│   ├── useAppNavigation.ts
│   ├── useMediaQuery.ts
│   └── useUser.ts
├── i18n.ts
├── lib
│   ├── actions.ts
│   ├── permissions.config.ts
│   ├── permissions.ts
│   ├── supabase
│   │   ├── admin.ts
│   │   ├── client.ts
│   │   ├── server.ts
│   │   ├── session.ts
│   │   └── teams.ts
│   └── utils
│       ├── formatters.ts
│       ├── media.ts
│       ├── templates.ts
│       └── utils.ts
├── middleware.ts
├── stores
│   └── navigationStore.ts
└── types
    ├── app
    │   └── navigation.ts
    ├── comunicacio
    │   ├── inbox.ts
    │   └── SocialPost.ts
    ├── crm
    │   ├── contacts.ts
    │   ├── general.ts
    │   ├── index.ts
    │   ├── products.ts
    │   └── quotes.ts
    ├── declarations
    │   ├── index.ts
    │   ├── mapbox.d.ts
    │   └── prism.d.ts
    ├── finances
    │   ├── despeses.ts
    │   ├── factures.ts
    │   ├── index.ts
    │   └── scheams.ts
    ├── network
    │   └── network.ts
    ├── settings
    │   ├── blackListRule.ts
    │   ├── index.ts
    │   ├── profiles.ts
    │   ├── subscription.ts
    │   └── team.ts
    ├── shared
    │   ├── actionResult.ts
    │   ├── address.ts
    │   ├── index.ts
    │   └── notification.ts
    └── socialPost


CONTINGUT DELS FITXERS


// =================== FILE: src/app/actions/chatbotActions.ts ===================

"use server";

import { createClient } from "@/lib/supabase/server";

interface DocumentMatch {
  id: number;
  metadata: Record<string, unknown>;
  embedding: number[]; // Tipus ajustat per reflectir la resposta de l'API
  content: string;
}

export async function chatbotAction(question: string): Promise<{ data: string | null, error: string | null }> {
  if (!process.env.GEMINI_API_KEY) {
    return { data: null, error: "La clau de l'API de Gemini no està configurada." };
  }

  try {
    // 🔹 1. Recuperem documents similars de Supabase
    const supabase = createClient();

    const { data: matches, error: dbError } = await supabase.rpc("match_documents", {
      query_embedding: await embedQuestion(question),
      match_threshold: 0.7,
      match_count: 3,
    });

    if (dbError) throw dbError;

    console.log("[Chatbot] Documents trobats:", matches?.length);

    const context = matches?.map((doc: DocumentMatch) => doc.content).join("\n\n") || "";
    console.log("[Chatbot] Context generat:", context);

    // 🔹 2. Preparem el prompt per a Gemini
    const prompt = `
      Ets un assistent útil.
      Pregunta de l'usuari: "${question}"
      Context de la base de dades:
      ${context}
      Respon en català, de manera clara i concisa.
    `;

    const payload = { contents: [{ role: "user", parts: [{ text: prompt }] }] };

    // 🔹 3. Cridem Gemini directament via fetch
    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-09-2025:generateContent?key=${process.env.GEMINI_API_KEY}`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      }
    );

    if (!response.ok) throw new Error("Error de l'API de Gemini");

    const result = await response.json();
    const answer: string = result.candidates[0].content.parts[0].text;

    return { data: answer, error: null };
  } catch (error: unknown) {
    const message = error instanceof Error ? error.message : "Error desconegut";
    console.error("Error al chatbot:", message);
    return { data: null, error: message };
  }
}

async function embedQuestion(question: string): Promise<number[]> {
  const response = await fetch("https://api.openai.com/v1/embeddings", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
    },
    body: JSON.stringify({
      model: "text-embedding-3-small",
      input: question,
    }),
  });

  if (!response.ok) throw new Error("Error generant embedding amb OpenAI");
  const data = await response.json();
  return data.data[0].embedding;
}


// =================== FILE: src/app/actions/exportActions.ts ===================



// =================== FILE: src/app/actions/invitationActions.ts ===================

"use server";

import { redirect } from "next/navigation";
import { createClient, createAdminClient } from "@/lib/supabase/server";

export async function resolveInvitationAction(token: string) {
  if (!token) {
    return redirect('/login?message=Token d\'invitació invàlid.');
  }

  const supabaseAdmin = createAdminClient();
  const { data: invitation } = await supabaseAdmin.from('invitations').select('email').eq('token', token).single();
  if (!invitation) {
    return redirect('/login?message=La teva invitació és invàlida o ha caducat.');
  }

  // ✅ CORRECCIÓ: Obtenim la llista completa i la filtrem a la memòria.
  const { data: { users }, error: listError } = await supabaseAdmin.auth.admin.listUsers();
  if (listError) {
    console.error("Error en obtenir la llista d'usuaris:", listError);
    return redirect('/login?message=Hi ha hagut un error al servidor.');
  }

  const existingUser = users.find(u => u.email === invitation.email);

  if (existingUser) {
    redirect(`/login?invite_token=${token}&email=${encodeURIComponent(invitation.email)}`);
  } else {
    redirect(`/invitation/accept?invite_token=${token}&email=${encodeURIComponent(invitation.email)}`);
  }
}

export async function acceptInviteAction(token: string) {
  const supabase = createClient();
  const supabaseAdmin = createAdminClient();
  const { data: { user } } = await supabase.auth.getUser();

  if (!user) {
    return redirect(`/login?invite_token=${token}&message=Has d'iniciar sessió per acceptar.`);
  }

  try {
    const { data: invitation } = await supabase.from('invitations').select('*').eq('token', token).single().throwOnError();
    if (invitation.email !== user.email) {
      throw new Error("Aquesta invitació està destinada a un altre usuari.");
    }

    await supabase.from('team_members').insert({ 
      team_id: invitation.team_id, 
      user_id: user.id, 
      role: invitation.role 
    }).throwOnError();
    
    const { data: subscription } = await supabase.from('subscriptions').select('plan_id, status').eq('team_id', invitation.team_id).single();
    const teamPlan = (subscription?.status === 'active') ? subscription.plan_id : 'free';

    await supabaseAdmin.auth.admin.updateUserById(
        user.id,
        {
            app_metadata: {
                ...user.app_metadata,
                active_team_id: invitation.team_id,
                active_team_plan: teamPlan
            }
        }
    );
    await supabase.auth.refreshSession();
    await supabase.from('invitations').delete().eq('id', invitation.id);
  } catch (error) {
    if (error instanceof Error && error.message.includes('duplicate key value')) {
        console.log("L'usuari ja era membre, procedint a actualitzar el seu token...");
    } else {
        const message = error instanceof Error ? error.message : "Error en processar la invitació.";
        return redirect(`/dashboard?message=${encodeURIComponent(message)}`);
    }
  }

  redirect('/settings/team');
}



// =================== FILE: src/app/api/chatbot/route.ts ===================

import { chatbotAction } from '../../actions/chatbotActions';

export async function POST(req: Request) {
  try {
    const { question } = await req.json();
    if (!question) {
      return new Response(JSON.stringify({ error: "La pregunta és obligatòria." }), { status: 400 });
    }

    const { data, error } = await chatbotAction(question);

    if (error) {
      return new Response(JSON.stringify({ error }), { status: 500 });
    }

    return new Response(JSON.stringify({ data }), { status: 200 });
  } catch (err) {
    const message = err instanceof Error ? err.message : "Error desconegut";
    return new Response(JSON.stringify({ error: message }), { status: 500 });
  }
}


// =================== FILE: src/app/api/oauth/callback/[provider]/route.ts ===================

import { createClient, createAdminClient } from "@/lib/supabase/server";
import { cookies } from "next/headers";
import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";

export const dynamic = "force-dynamic";

// Interfície per a les dades que desarem a la base de dades
interface CredentialData {
    user_id: string;
    provider: string;
    access_token: string;
    refresh_token?: string | null;
    expires_at: string | null;
    provider_user_id: string | null;
    // Propietats opcionals per a les pàgines de Meta
    provider_page_id?: string | null;
    provider_page_name?: string | null;
}

// Funció auxiliar per a decodificar el payload d'un JWT (id_token)
function decodeJwtPayload(token: string) {
    try {
        const payloadBase64 = token.split('.')[1];
        const base64 = payloadBase64.replace(/-/g, '+').replace(/_/g, '/');
        const decodedPayload = atob(base64);
        return JSON.parse(decodedPayload);
    } catch (e) {
        console.error("Error decodificant el JWT (id_token):", e);
        return null;
    }
}

export async function GET(
    request: NextRequest,
    { params }: { params: Promise<{ provider: string }> }
) {
    const { provider } = await params;
    const url = new URL(request.url);
    const code = url.searchParams.get("code");
    const state = url.searchParams.get("state");

    const cookieStore = cookies();
    const savedState = (await cookieStore).get("oauth_state")?.value;
    (await cookieStore).delete("oauth_state");

    if (!code || !state || state !== savedState) {
        return NextResponse.redirect(new URL("/settings/integrations?error=auth_failed", request.url));
    }

    const supabase = createClient(cookieStore);
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) return NextResponse.redirect(new URL('/login', request.url));

    try {
        let tokenUrl = '';
        const body = new URLSearchParams();
        const redirectUri = `${process.env.NEXT_PUBLIC_SITE_URL}/api/oauth/callback/${provider}`;

        // La teva lògica 'switch' per a construir el body és correcta
        switch (provider) {
            case 'google':
                tokenUrl = 'https://oauth2.googleapis.com/token';
                body.append('client_id', process.env.GOOGLE_CLIENT_ID!);
                body.append('client_secret', process.env.GOOGLE_CLIENT_SECRET!);
                body.append('code', code);
                body.append('grant_type', 'authorization_code');
                body.append('redirect_uri', redirectUri);
                break;

            case 'linkedin':
                tokenUrl = 'https://www.linkedin.com/oauth/v2/accessToken';
                body.append('grant_type', 'authorization_code');
                body.append('code', code);
                body.append('redirect_uri', redirectUri);
                body.append('client_id', process.env.LINKEDIN_CLIENT_ID!);
                body.append('client_secret', process.env.LINKEDIN_CLIENT_SECRET!);
                break;

            case 'microsoft':
                tokenUrl = 'https://login.microsoftonline.com/common/oauth2/v2.0/token';
                body.append('client_id', process.env.AZURE_CLIENT_ID!);
                body.append('client_secret', process.env.AZURE_CLIENT_SECRET!);
                body.append('scope', 'openid email offline_access User.Read Mail.Read Mail.Send');
                body.append('code', code);
                body.append('redirect_uri', redirectUri);
                body.append('grant_type', 'authorization_code');
                break;
            // ✅ NOU: AFEGIM EL CAS PER A FACEBOOK
            case 'facebook':
                tokenUrl = 'https://graph.facebook.com/v19.0/oauth/access_token';
                body.append('client_id', process.env.FACEBOOK_CLIENT_ID!);
                body.append('client_secret', process.env.FACEBOOK_CLIENT_SECRET!);
                body.append('redirect_uri', redirectUri);
                body.append('code', code);
                break;
        }

        const tokenResponse = await fetch(tokenUrl, { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, body });
        if (!tokenResponse.ok) throw new Error(`Error en obtenir el token de ${provider}: ${await tokenResponse.text()}`);
        const tokens = await tokenResponse.json();

        // --- ARQUITECTURA HÍBRIDA FINAL ---
        const isTeamIntegration = ['linkedin', 'facebook', 'instagram'].includes(provider);
        const isPersonalIntegration = ['google', 'microsoft'].includes(provider);
        const supabaseAdmin = createAdminClient();
        const activeTeamId = user.app_metadata?.active_team_id;

        if (!activeTeamId) {
            throw new Error("S'ha de seleccionar un equip actiu abans de connectar una integració.");
        }

        const baseDataToUpsert: CredentialData = {
            user_id: user.id,
            provider: provider,
            access_token: tokens.access_token,
            refresh_token: tokens.refresh_token || null,
            expires_at: tokens.expires_in ? new Date(Date.now() + (tokens.expires_in * 1000)).toISOString() : null,
            provider_user_id: tokens.id_token ? decodeJwtPayload(tokens.id_token)?.sub : null,
        };

        if (isTeamIntegration) {
            // ✅ LÒGICA MILLORADA PER A META (FACEBOOK + INSTAGRAM)
            if (provider === 'facebook') {
                // 1. Busquem la primera pàgina de Facebook que gestiona l'usuari
                const pagesRes = await fetch(`https://graph.facebook.com/v19.0/me/accounts?access_token=${tokens.access_token}`);
                const pagesData = await pagesRes.json();
                const page = pagesData.data?.[0];
                if (!page) throw new Error("No s'ha trobat cap pàgina de Facebook per a gestionar.");

                // Preparem les dades específiques de la pàgina de Facebook
                const facebookData = { ...baseDataToUpsert, provider_page_id: page.id, provider_page_name: page.name, access_token: page.access_token };
                await supabaseAdmin.from('team_credentials').upsert({ ...facebookData, team_id: activeTeamId }, { onConflict: 'team_id, provider' });
                console.log(`Credencial de FACEBOOK desada per a la pàgina ${page.name}`);

                // 2. Busquem si aquesta pàgina té un compte d'Instagram de negoci associat
                const igRes = await fetch(`https://graph.facebook.com/v19.0/${page.id}?fields=instagram_business_account{name}&access_token=${page.access_token}`);
                const igData = await igRes.json();
                const instagramAccount = igData.instagram_business_account;

                // ✅ VERIFICACIÓ EXPLÍCITA
                // Creem les dues credencials i les desem en paral·lel
                const facebookCredential = { ...baseDataToUpsert, provider: 'facebook', team_id: activeTeamId, provider_page_id: page.id, provider_page_name: page.name, access_token: page.access_token };

                const queries = [
                    supabaseAdmin.from('team_credentials').upsert(facebookCredential, { onConflict: 'team_id, provider' })
                ];

                if (instagramAccount) {
                    const instagramCredential = { ...baseDataToUpsert, provider: 'instagram', team_id: activeTeamId, provider_page_id: instagramAccount.id, provider_page_name: instagramAccount.name, access_token: page.access_token };
                    queries.push(supabaseAdmin.from('team_credentials').upsert(instagramCredential, { onConflict: 'team_id, provider' }));
                }
                
                const results = await Promise.all(queries);
                // Comprovem si alguna de les operacions ha donat error
                const dbError = results.find(res => res.error);
                if (dbError) throw dbError.error;
            
            } else { // Per a LinkedIn
                await supabaseAdmin.from('team_credentials').upsert({ ...baseDataToUpsert, team_id: activeTeamId }, { onConflict: 'team_id, provider' });
            }
        } else if (isPersonalIntegration) {
            // Per a Google/Outlook, guardem a 'user_credentials' amb el team_id associat
            await supabaseAdmin.from('user_credentials').upsert({ ...baseDataToUpsert, team_id: activeTeamId }, { onConflict: 'user_id, provider, team_id' });
            console.log(`Credencials PERSONALS (${provider}) desades per a l'usuari ${user.id} a l'equip ${activeTeamId}`);
        }

    } catch (error) {
        console.error(`Error en el callback de ${provider}:`, error);
        const errorMessage = error instanceof Error ? error.message : 'Unknown error';
        return NextResponse.redirect(new URL(`/settings/integrations?error=callback_failed&message=${encodeURIComponent(errorMessage)}`, request.url));
    }

    return NextResponse.redirect(new URL('/settings/integrations?success=true', request.url));
}

// =================== FILE: src/app/globals.css ===================

@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');

/* Aquestes són les directives de Tailwind CSS. Injecten els estils base,
   els components i les utilitats de Tailwind al teu projecte. */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* === COLORS I VARIABLES === */
/* La directiva '@layer base' ens permet definir estils base o per defecte. */
@layer base {
  /* ':root' defineix variables CSS globals per al tema clar (light mode).
     Aquestes variables són compatibles amb el sistema de theming de shadcn/ui.
     Estan definides en format HSL (Hue, Saturation, Lightness) sense les unitats,
     perquè Tailwind/shadcn pugui aplicar opacitat dinàmicament (ex: bg-primary/50). */
     :root {
      /* Fons: Un gris molt clar en lloc de blanc pur (menys brillant) */
      --background: 220 20% 97%;
      /* Text principal: Un gris molt fosc, gairebé negre, per a un millor contrast */
      --foreground: 220 15% 15%;
      
      /* Targetes: Blanques, però el fons general apagat fa que no siguin tan cridaneres */
      --card: 0 0% 100%;
      --card-foreground: 220 15% 15%;
      
      /* Popovers: Un gris lleugerament més fosc que el fons */
      --popover: 220 20% 95%;
      --popover-foreground: 220 15% 15%;
      
      /* Colors d'accentuació (els mantenim vibrants) */
      --primary: 262 83% 58%;
      --primary-foreground: 0 0% 100%;
      
      /* Secundari: Grisos més definits per a botons i fons */
      --secondary: 220 15% 90%;
      --secondary-foreground: 220 15% 20%;
      
      /* Silenciat (Muted): Tons de gris per a textos menys importants */
      --muted: 220 15% 92%;
      --muted-foreground: 220 10% 45%;
      
      /* Colors d'èmfasi */
      --accent: 262 80% 95%;
      --accent-foreground: 262 83% 50%;
      
      /* Destructiu (vermell per a eliminacions) */
      --destructive: 0 84.2% 50%;
      --destructive-foreground: 0 0% 100%;
  
      /* Vores i camps d'entrada */
      --border: 220 15% 88%;
      --input: 220 15% 88%;
      --ring: 262 83% 58%;
      --radius: 0.75rem;
    }

  /* La classe '.dark' s'aplica a l'etiqueta <html> quan el tema fosc està actiu.
  Aquí sobreescrivim les mateixes variables CSS amb els seus valors per al tema fosc. */
  .dark {
    --background: 230 15% 8%;
    --foreground: 230 15% 92%;
    --card: 230 15% 10%;
    --card-foreground: 230 15% 95%;
    --popover: 230 15% 12%;
    --popover-foreground: 230 15% 90%;
    --primary: 262 83% 58%;
    --primary-foreground: 0 0% 100%;
    --secondary: 230 15% 18%;
    --secondary-foreground: 230 15% 80%;
    --muted: 230 15% 14%;
    --muted-foreground: 230 15% 60%;
    --accent: 262 70% 30%;
    --accent-foreground: 262 70% 95%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 100%;
    --border: 230 15% 22%;
    --input: 230 15% 22%;
    --ring: 262 83% 58%;
  }

  /* Estils globals per a les etiquetes principals. */
  html,
  body,
  #root {
    height: 100%;
    width: 100%;
    overflow-x: hidden; /* Evita el scroll horitzontal no desitjat */
  }
  /* ================================ */
  
  /* Apliquem la vora per defecte a tots els elements i un desplaçament suau. */
  * {
    @apply border-border scroll-smooth;
  }
  
  /* Estils per al <body> de l'aplicació. */
  body {
    @apply bg-background text-foreground antialiased;
    font-family: 'Inter', sans-serif;
    /* Hem tret min-h-screen perquè ara tenim height: 100% a dalt */
  }
}
/* === EFECTES I ESTILS PERSONALITZATS === */
/* Aquestes són classes personalitzades que pots utilitzar a qualsevol lloc de l'aplicació. */

/* === EFECTES I ESTILS PERSONALITZATS === */
@layer components {
  /* ✅ EFECTE DE VIDRE (GLASSMORPHISM) ADAPTAT PER AL TEMA CLAR */
  .glass-effect {
    /* Tema clar per defecte */
    @apply backdrop-blur-xl border border-black/10 rounded-xl bg-white/50;
  }
  .dark .glass-effect {
    /* Tema fosc */
    @apply bg-white/5 border-white/10;
  }
}

  /* Efecte de vidre translúcid (Glassmorphism). */
/* === GLASS & GRADIENTS === */
.glass-effect {
  @apply backdrop-blur-xl border border-black/10 rounded-xl bg-white/5;
}
.dark .glass-effect {
  @apply bg-white/5 border-white/10;
}

.gradient-text {
  @apply bg-gradient-to-r from-purple-500 via-pink-500 to-blue-500 bg-clip-text text-transparent;
}

.futuristic-shadow {
  @apply shadow-[0_4px_30px_rgba(0,0,0,0.1)];
}

.card-hover {
  @apply transition-all duration-300 hover:scale-105 hover:shadow-[0_15px_30px_rgba(102,126,234,0.3)];
}

/* === SIDEBAR === */
/* === COMPONENTS PERSONALITZATS === */
/* Aquí definim classes per a components reutilitzables que no formen part de shadcn/ui. */

/* Estil per a un element de la barra lateral. */
.sidebar-item {
  @apply flex items-center gap-3 px-4 py-3 rounded-xl transition-all duration-200 bg-white/5 hover:bg-white/10 cursor-pointer;
}
.sidebar-item.active {
  @apply bg-gradient-to-r from-purple-500 to-blue-500 text-white;
}

/* === COMPONENTS VISUALS === */
.metric-card {
  @apply glass-effect p-6 card-hover;
}

.contact-card {
  @apply glass-effect p-4 card-hover cursor-pointer;
}

.search-input {
  @apply glass-effect px-4 py-3 w-full text-white placeholder-gray-300 border-0 focus:ring-2 focus:ring-purple-500 focus:outline-none;
}

.empty-state {
  @apply flex flex-col items-center justify-center py-16 text-center text-muted-foreground;
}

/* === BADGES === */
.status-badge {
  @apply px-3 py-1 rounded-full text-xs font-semibold uppercase tracking-wide;
}
.status-c {
  @apply bg-green-500/10 text-green-400 border border-green-400/30;
}
.status-l {
  @apply bg-blue-500/10 text-blue-400 border border-blue-400/30;
}
.status-p {
  @apply bg-purple-500/10 text-purple-400 border border-purple-400/30;
}
.status-pending {
  @apply bg-yellow-500/10 text-yellow-400 border border-yellow-400/30;
}

/* Animació per als títols amb degradat */
@keyframes gradient-shift {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

.animate-gradient-shift {
  background-size: 200% auto;
  animation: gradient-shift 6s ease infinite;
}
.animate-gradient-slow {
  background-size: 400% 400%;
  animation: gradient-shift 8s ease infinite;
}

/* Classe per a activar les funcionalitats en fer scroll */
.feature-block.opacity-100 {
  opacity: 1;
}

/* Popup del mapa fosc (si el fas servir en altres llocs) */
.mapboxgl-popup-content {
  background-color: #2d3748;
  color: #edf2f7;
  border-radius: 8px;
  padding: 10px 15px;
}
.mapboxgl-popup-close-button {
  color: #edf2f7;
}

/* === EFECTES ANIMATS === */
/* === EFECTES ANIMATS === */
/* Definim animacions reutilitzables amb keyframes. */

/* Animació per fer que un element "floti" amunt i avall. */
.floating-animation {
  animation: floating 6s ease-in-out infinite;
}

@keyframes floating {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-12px); }
}
/* Animació que crea una brillantor que palpita. */
.pulse-glow {
  animation: pulse-glow 2s ease-in-out infinite alternate;
}
@keyframes pulse-glow {
  from { box-shadow: 0 0 10px rgba(102, 126, 234, 0.4); }
  to { box-shadow: 0 0 25px rgba(102, 126, 234, 0.8); }
}

/* === BOTONS DE FILTRE === */
.filter-button {
  @apply px-4 py-2 rounded-lg transition-all duration-200 text-sm font-medium;
}
.filter-button.active {
  @apply bg-gradient-to-r from-purple-600 to-blue-500 text-white shadow-md;
}
.filter-button:not(.active) {
  @apply bg-white/10 text-gray-300 hover:bg-white/20;
}
/* === ESTILS PER A LLIBRERIES EXTERNES === */

/* Estils per personalitzar els popups de la llibreria MapboxGL. */
.mapboxgl-popup-content {
  background-color: #1f2937; /* Un gris fosc, ajusta'l al teu color */
  color: #ffffff;
  border-radius: 8px;
  padding: 8px 12px;
}

.mapboxgl-popup-tip {
  border-top-color: #1f2937 !important;
}

.mapboxgl-popup-close-button {
  color: #ffffff !important;
}
/* src/app/globals.css */

/* Estil per al popup de Mapbox en tema fosc */
.popup-dark .mapboxgl-popup-content {
  background-color: #1f2937; /* gray-800 */
  color: #d1d5db; /* gray-300 */
  border-radius: 8px;
  padding: 12px;
  box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
  font-family: inherit;
}
.popup-dark .mapboxgl-popup-tip {
  border-top-color: #1f2937 !important;
}
.popup-dark .mapboxgl-popup-close-button {
  color: #9ca3af; /* gray-400 */
}
.popup-dark .mapboxgl-popup-close-button:hover {
  background-color: #374151; /* gray-700 */
}

/* Estil personalitzat per a les barres de desplaçament (scrollbars). */
.custom-scrollbar::-webkit-scrollbar {
  width: 8px;
}
.custom-scrollbar::-webkit-scrollbar-track {
  background: transparent;
}
.custom-scrollbar::-webkit-scrollbar-thumb {
  background: #4b5563; /* gray-600 */
  border-radius: 4px;
}
.custom-scrollbar::-webkit-scrollbar-thumb:hover {
  background: #6b7280; /* gray-500 */
}
/* === SLIDERS FUTURISTES === */
input[type="range"].slider {
  -webkit-appearance: none;
  appearance: none;
  background: transparent;
  cursor: ew-resize;
}
input[type="range"].slider::-webkit-slider-runnable-track {
  background: hsl(var(--muted));
  height: 0.5rem;
  border-radius: 9999px;
}
input[type="range"].slider::-moz-range-track {
  background: hsl(var(--muted));
  height: 0.5rem;
  border-radius: 9999px;
}
input[type="range"].slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  background: hsl(var(--primary));
  height: 1rem;
  width: 1rem;
  border-radius: 50%;
  border: 2px solid hsl(var(--primary-foreground));
  margin-top: -0.25rem;
  transition: all 0.2s ease;
}
input[type="range"].slider::-moz-range-thumb {
  background: hsl(var(--primary));
  height: 1rem;
  width: 1rem;
  border-radius: 50%;
  border: 2px solid hsl(var(--primary-foreground));
  transition: all 0.2s ease;
}

.text-muted-strong {
  color: hsl(220, 10%, 35%);
}
/* === ESTILS PER AL CONTINGUT HTML (Ex: Emails, Previsualitzacions) === */
/* La directiva '@layer components' s'utilitza per definir classes de components més complexes. */
@layer components {
  /* La classe 'prose-email' està dissenyada per estilitzar contingut HTML
     que no controlem directament (com el cos d'un correu electrònic). */
  .prose-email {
    /* NOU: Forcem que les paraules llargues es puguin trencar */
    @apply break-words;
  }
  .prose-email a {
    @apply text-blue-500 hover:underline;
  }
  .prose-email p {
    @apply mb-4 leading-relaxed;
  }
  .prose-email blockquote {
    @apply border-l-4 border-border pl-4 italic text-muted-foreground;
  }
  .prose-email ul, .prose-email ol {
    @apply list-inside list-disc pl-4;
  }

  /* ===== NOU: Regles per domesticar el contingut intern ===== */

  /* Regles per assegurar que imatges, vídeos o taules dins d'un correu
     no siguin més grans que el seu contenidor i es vegin bé. */
  .prose-email img,
  .prose-email video,
  .prose-email iframe {
    @apply max-w-full h-auto rounded-md;
  }

  /* Les taules ocuparan el 100% de l'amplada i no més */
  .prose-email table {
    @apply w-full table-fixed;
  }

  /* El text pre-formatat (sovint codi) farà salts de línia */
  .prose-email pre {
    @apply whitespace-pre-wrap break-words;
  }
}


// =================== FILE: src/app/layout.tsx ===================

/**
 * @file src/app/layout.tsx
 * @summary Layout raíz que solo actúa como un contenedor vacío.
 * No debe renderizar etiquetas <html> o <body>.
 */
import './globals.css';
import { ReactNode } from 'react';

export default function RootLayout({ children }: { children: ReactNode }) {
  // Simplemente devuelve los hijos sin añadir ninguna etiqueta.
  // El layout de [locale] se encargará del <html> y <body>.
  return children;
}

// =================== FILE: src/app/page.tsx ===================

/**
 * @file src/app/page.tsx (Root Page)
 * @summary Aquesta pàgina no renderitza res. El middleware s'activa abans.
 */
export default function RootPage() {
  return null;
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/actions.ts ===================

/**
 * actions.ts (Inbox) - Server Actions
 */
"use server";

import { revalidatePath } from "next/cache";
import { transformRpcToTicket, type Ticket, type TicketFromRpc } from "@/types/comunicacio/inbox";
import type { TicketFilter } from "@/types/comunicacio/inbox";
import { validateUserSession } from "@/lib/supabase/session"; // ✅ Importem la nostra funció central


interface ActionResult {
  success: boolean;
  message?: string;
}


/**
 * Retorna el cos d'un tiquet.
 */
export async function getTicketBodyAction(ticketId: number): Promise<{ body: string }> {
  // Aquesta acció és només de lectura i la RLS ja la protegeix,
  // però per consistència, també validem la sessió.
  const session = await validateUserSession();
  if ('error' in session) return { body: `<p>Error: ${session.error.message}</p>` };
  const { supabase } = session;

  const { data, error } = await supabase
    .from("tickets")
    .select("body")
    .eq("id", ticketId)
    .single();

  if (error) {
    console.error("Error fetching ticket body:", error);
    return { body: "<p>Error carregant el cos del tiquet.</p>" };
  }
  return { body: data.body ?? "<p>(Sense contingut)</p>" };
}


/**
 * Elimina un tiquet.
 */
export async function deleteTicketAction(ticketId: number): Promise<ActionResult> {
  const session = await validateUserSession();
  if ('error' in session) return { success: false, message: session.error.message };
  const { supabase } = session;

  // La RLS ja s'encarrega de la seguretat, només permet esborrar els tiquets permesos.
  const { error } = await supabase.from("tickets").delete().eq("id", ticketId);
  if (error) {
    return { success: false, message: "No s'ha pogut eliminar el tiquet." };
  }
  revalidatePath("/comunicacio/inbox");
  return { success: true, message: "Tiquet eliminat." };
}

/**
 * Marca un tiquet com a llegit.
 */
export async function markTicketAsReadAction(ticketId: number): Promise<ActionResult> {
  const session = await validateUserSession();
  if ('error' in session) return { success: false, message: session.error.message };
  const { supabase } = session;

  const { error } = await supabase.from("tickets").update({ status: "Llegit" }).eq("id", ticketId);
  if (error) {
    return { success: false, message: "No s'ha pogut marcar com a llegit." };
  }
  revalidatePath("/comunicacio/inbox", 'page');
  return { success: true };
}



/**
 * sendEmailAction
 */
interface SendEmailParams {
  contactId: string;
  subject: string;
  htmlBody: string;
  isReply: boolean;
}

export async function sendEmailAction({
  contactId,
  subject,
  htmlBody,
  isReply,
}: SendEmailParams): Promise<ActionResult> {
  const session = await validateUserSession();
  if ('error' in session) return { success: false, message: session.error.message };
  const { supabase, activeTeamId } = session;

  try {
    // La RLS de 'contacts' verificará que el contacto pertenezca al equipo activo
    const { data: contact } = await supabase.from('contacts').select('id').eq('id', contactId).maybeSingle();
    if (!contact) return { success: false, message: "El contacto no pertenece a tu equipo activo." };

    await supabase.functions.invoke("send-email", { body: { contactId, subject, htmlBody } });


    if (isReply) {
      const { data: existingOpportunities } = await supabase
        .from("opportunities")
        .select("id")
        .eq("contact_id", contactId)
        .limit(1);

      if (!existingOpportunities || existingOpportunities.length === 0) {
        await supabase.from("opportunities").insert({
          team_id: activeTeamId,
          contact_id: contactId,
          name: `Oportunitat: ${subject}`,
          stage_name: "Contactat",
          source: "Resposta Email",
          value: 0,
        });
      }
    }

    revalidatePath("/comunicacio/inbox");
    return { success: true, message: "Correu enviat correctament." };
  } catch (error: unknown) {
    const message = error instanceof Error ? error.message : "Error desconegut";
    console.error("Error en enviar l'email:", message);
    return { success: false, message: `Error en la Server Action: ${message}` };
  }
}


/**
 * loadAllTicketsAction - retorna TOTS els tiquets (sense límit) segons el filtre.
 * Útil quan l'usuari fa click a "Tots" i vol veure absolutament tot.
 */
export async function loadAllTicketsAction(filter: TicketFilter): Promise<Ticket[]> {
  const session = await validateUserSession();
  if ('error' in session) return [];
  const { supabase, user } = session;

  let query = supabase
    .from("tickets")
    .select(`id, user_id, contact_id, sender_name, sender_email, subject, preview, sent_at, status, type, contacts(*)`)
    .eq("user_id", user.id)
    .order("sent_at", { ascending: false });

  if (filter === "rebuts" || filter === "noLlegits") {
    query = query.or("type.eq.rebut,type.is.null");
  } else if (filter === "enviats") {
    query = query.eq("type", "enviat");
  }

  const { data, error } = await query;
  if (error) {
    console.error("Error loading all tickets:", error);
    return [];
  }

  return (data as unknown) as Ticket[];
}

/**
 * Assigna un tiquet a un tracte (opportunity).
 */
export async function assignTicketAction(ticketId: number, dealId: string): Promise<ActionResult> {
  const session = await validateUserSession();
  if ('error' in session) return { success: false, message: session.error.message };
  const { supabase, activeTeamId } = session;

  const { error } = await supabase.from('ticket_assignments').insert({
    ticket_id: ticketId,
    team_id: activeTeamId,
    deal_id: dealId
  });

  if (error) {
    console.error("Error en assignar el tiquet:", error);
    return { success: false, message: "No s'ha pogut assignar el tiquet." };
  }

  revalidatePath("/comunicacio/inbox");
  return { success: true, message: "Tiquet assignat." };
}

/**
 * Carga més tiquets de forma paginada.
 */
export async function loadMoreTicketsAction(page: number, filter: TicketFilter, inboxOwnerId: string): Promise<Ticket[]> {
  // Aquesta funció ja estava ben refactoritzada i utilitzava 'getInboxPermissionContext'.
  // La podem mantenir així o adaptar-la a 'validateUserSession' si vols unificar-ho tot.
  // De moment, la deixem com estava, ja que funciona i està ben estructurada.

  const session = await validateUserSession();
  if ('error' in session) return [];
  const { supabase, user, activeTeamId } = session;

  const { data: permissions } = await supabase
    .from('inbox_permissions')
    .select('target_user_id')
    .eq('team_id', activeTeamId)
    .eq('grantee_user_id', user.id);

  const allVisibleUserIds = [user.id, ...(permissions?.map(p => p.target_user_id).filter(Boolean) || [])];

  const visibleUserIds = inboxOwnerId === 'all' ? allVisibleUserIds : [inboxOwnerId];

  const ITEMS_PER_PAGE = 50;
  const offset = (page - 1) * ITEMS_PER_PAGE;

  const { data: ticketsData, error } = await supabase.rpc('get_inbox_tickets', {
    p_user_id: user.id,
    p_team_id: activeTeamId,
    p_visible_user_ids: visibleUserIds,
    p_limit: ITEMS_PER_PAGE,
    p_offset: offset,
    p_search_term: ''
  });

  if (error) {
    console.error("Error loading more tickets via RPC:", error);
    return [];
  }

  const tickets: Ticket[] = (ticketsData as TicketFromRpc[] || []).map(transformRpcToTicket);

  // Filtratge final al client
  if (filter === 'rebuts' || filter === 'noLlegits') {
    return tickets.filter(t => t.type === 'rebut' || !t.type);
  }
  if (filter === 'enviats') {
    return tickets.filter(t => t.type === 'enviat');
  }

  return tickets;
}

/**
 * Afegeix un email a la llista negra.
 */
export async function addToBlacklistAction(emailToBlock: string): Promise<ActionResult> {
  const session = await validateUserSession();
  if ('error' in session) return { success: false, message: session.error.message };
  const { supabase, user, activeTeamId } = session;

  const cleanedEmail = emailToBlock.trim().toLowerCase();
  if (!cleanedEmail) return { success: false, message: "L'email no pot estar buit." };

  try {
    await supabase.from('blacklist_rules').insert({
      team_id: activeTeamId,
      user_id: user.id,
      value: cleanedEmail,
      rule_type: 'email',
    }).throwOnError();

    revalidatePath("/comunicacio/inbox");
    return { success: true, message: `${cleanedEmail} ha estat afegit a la llista negra.` };

  } catch (error) {
    if (error instanceof Error && error.message.includes('duplicate key value')) {
      return { success: false, message: "Aquest correu ja és a la llista negra." };
    }
    console.error("Error afegint a la blacklist:", error);
    const message = error instanceof Error ? error.message : "Error desconegut.";
    return { success: false, message };
  }
}

/**
 * Nova acció que vincula tots els tiquets d'un remitent a un contacte existent.
 */
export async function linkTicketsToContactAction(contactId: string, senderEmail: string): Promise<ActionResult> {
  const session = await validateUserSession();
  if ('error' in session) return { success: false, message: session.error.message };
  const { supabase, user } = session;

  try {
      await supabase
          .from("tickets")
          .update({ contact_id: contactId })
          .eq("user_id", user.id)
          .eq("sender_email", senderEmail.toLowerCase());

      revalidatePath("/comunicacio/inbox");
      return { success: true, message: "Contacte vinculat correctament." };
  } catch (error: unknown) {
      const message = error instanceof Error ? error.message : "Error desconegut al vincular tiquets.";
      return { success: false, message };
  }
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/page.tsx ===================

/**
 * @file src/app/[locale]/(app)/comunicacio/inbox/page.tsx
 */
import { Suspense } from 'react';
import type { Metadata } from 'next';
import { InboxData } from './_components/InboxData';
import { InboxSkeleton } from './_components/InboxSkeleton';
import type { Ticket, Template } from '@/types/comunicacio/inbox';
import type { Contact } from '@/types/crm/contacts';
export const metadata: Metadata = {
  title: 'Bandeja de Entrada | Ribot',
};

// Re-exportem els tipus per a la importació centralitzada
export type { Ticket, Template, Contact };

// ✅ 1. Definim el tipus de les propietats, indicant que 'searchParams' ÉS una promesa.
interface InboxPageProps {
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>;
}

/**
 * @summary La página principal del Inbox, que ara gestiona els paràmetres de manera asíncrona.
 */
// ✅ 2. La funció principal rep 'props' i és 'async'.
export default async function InboxPage(props: InboxPageProps) {
  // ✅ 3. Aquesta és la línia clau: fem 'await' per resoldre la promesa i obtenir els paràmetres.
  const searchParams = await props.searchParams;
  
  // A partir d'aquí, 'searchParams' ja és un objecte normal i podem treballar amb ell.
  const searchTerm = typeof searchParams?.q === 'string' ? searchParams.q : '';
  
  return (
    <Suspense key={searchTerm} fallback={<InboxSkeleton />}>
      {/* Passem el 'searchTerm' ja processat i segur com un string. */}
      <InboxData searchTerm={searchTerm} />
    </Suspense>
  );
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_components/ComposeDialog.tsx ===================

// Ubicació: /app/(app)/comunicacio/inbox/_components/ComposeDialog.tsx

"use client";

import React from 'react';
import { useTranslations } from 'next-intl';
import { EditorContent } from '@tiptap/react';
import { Loader2, Send, FileText, Variable, User, Mail, Search } from 'lucide-react';

// Components de UI
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { EmailEditorToolbar } from './EmailEditorToolbar'; // ✅ Importem el sub-component
import type { Contact } from '@/types/crm';

// Hook i Tipus
import { useCompose } from '../_hooks/useCompose';
import type { Template } from '@/types/comunicacio/inbox';

// Tipus per a les dades inicials
export type InitialData = {
    contactId?: string | null;
    to?: string | null;
    subject?: string | null;
    body?: string | null;
};

interface ComposeDialogProps {
    open: boolean;
    onOpenChange: (isOpen: boolean) => void;
    onEmailSent: () => void;
    initialData: InitialData | null;
    templates: Template[];
    contacts: Contact[]; // ✅ Rep la llista de contactes
}

export const ComposeDialog = (props: ComposeDialogProps) => {
    const { open, onOpenChange, onEmailSent, initialData, templates, contacts } = props;
    const t = useTranslations('InboxPage');

    // ✅ Tota la lògica complexa ve del nostre hook!
    const {
        editor,
        subject, setSubject,
        selectedContactId, setSelectedContactId,
        contactSearch, setContactSearch,
        selectedTemplate, handleTemplateSelect,
        variableValues, setVariableValues,
        finalHtmlBody,
        filteredContacts,
        isSending,
        handleSend,
    } = useCompose({
        templates,
        contacts,
        initialData,
        onClose: () => onOpenChange(false),
        onEmailSent,
    });

    return (
        <Dialog open={open} onOpenChange={onOpenChange}>
            <DialogContent className="max-w-6xl h-[90vh] flex flex-col">
                <DialogHeader>
                    <DialogTitle>{t('composeDialogTitle')}</DialogTitle>
                    <DialogDescription>{t('composeDialogDescription')}</DialogDescription>
                </DialogHeader>

                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 flex-1 min-h-0">
                    <div className="lg:col-span-2 flex flex-col gap-4 min-h-0">
                        {/* Editor i Assumpte */}
                        <div className="relative">
                            <Mail className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground" />
                            <Input placeholder={t('subjectPlaceholder')} value={subject} onChange={e => setSubject(e.target.value)} className="pl-9" />
                        </div>
                        <div className="flex-1 flex flex-col gap-2 min-h-0">
                            {!selectedTemplate && <EmailEditorToolbar editor={editor} />}
                            {selectedTemplate ? (
                                <div className="border rounded-md flex-1 bg-white">
                                    <iframe srcDoc={finalHtmlBody} title={t('previewTitle')} className="w-full h-full border-0" />
                                </div>
                            ) : (
                                <EditorContent editor={editor} className="flex-1 overflow-y-auto" />
                            )}
                        </div>
                    </div>

                    <div className="lg:col-span-1 flex flex-col gap-6 bg-muted/30 p-4 rounded-lg overflow-y-auto">
                        {/* Panell lateral: Contacte, Plantilla, Variables */}
                        <div className="space-y-2">
                            <Label htmlFor="contact-select" className="flex items-center gap-2 font-semibold"><User className="w-4 h-4" />{t('recipientLabel')}</Label>
                            <div className="relative">
                                <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground" />
                                <Input id="contact-search" placeholder={t('searchContactPlaceholder')} value={contactSearch} onChange={(e) => setContactSearch(e.target.value)} className="pl-9 mb-2" />
                            </div>
                            <Select onValueChange={setSelectedContactId} value={selectedContactId}>
                                <SelectTrigger id="contact-select"><SelectValue placeholder={t('selectContactPlaceholder')} /></SelectTrigger>
                                <SelectContent>
                                    {filteredContacts.length > 0 ? filteredContacts.map(contact => <SelectItem key={contact.id} value={contact.id}>{contact.nom} ({contact.email})</SelectItem>) : <p className="p-4 text-sm text-muted-foreground">{t('noContactsFound')}</p>}
                                </SelectContent>
                            </Select>
                        </div>

                        <div className="space-y-2">
                            <Label htmlFor="template-select" className="flex items-center gap-2 font-semibold"><FileText className="w-4 h-4" />{t('templateLabel')}</Label>
                            <Select onValueChange={handleTemplateSelect} defaultValue="none" disabled={templates.length === 0}>
                                <SelectTrigger id="template-select"><SelectValue placeholder={t('selectTemplatePlaceholder')} /></SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="none">{t('noTemplateOption')}</SelectItem>
                                    {templates.map(template => <SelectItem key={template.id} value={template.id.toString()}>{template.name}</SelectItem>)}
                                </SelectContent>
                            </Select>
                        </div>

                        {selectedTemplate?.variables && selectedTemplate.variables.length > 0 && (
                            <div className="space-y-4">
                                <Label className="flex items-center gap-2 font-semibold">
                                    <Variable className="w-4 h-4 text-primary" />{t('variablesLabel')}
                                </Label>
                                <div className="space-y-3">
                                    {/* ✅ CORRECCIÓ:
                Com que la condició exterior ja assegura que .variables és un array amb elements,
                ara podem fer el .map() amb total seguretat. El teu codi original ja era gairebé correcte,
                això només ho fa més explícit per a TypeScript. */}
                                    {selectedTemplate.variables.map(varName => (
                                        <div key={varName} className="space-y-1.5">
                                            <label htmlFor={`var-${varName}`} className="text-xs font-medium text-muted-foreground">{`{{${varName}}}`}</label>
                                            <Input
                                                id={`var-${varName}`}
                                                value={variableValues[varName] || ''}
                                                onChange={e => setVariableValues(prev => ({ ...prev, [varName]: e.target.value }))}
                                                placeholder={t('variablePlaceholder', { varName })}
                                            />
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )}
                    </div>
                </div>
                <DialogFooter className="pt-4 border-t">
                    <Button variant="ghost" onClick={() => onOpenChange(false)}>{t('cancelButton')}</Button>
                    <Button onClick={handleSend} disabled={isSending}>
                        {isSending ? <Loader2 className="w-4 h-4 mr-2 animate-spin" /> : <Send className="w-4 h-4 mr-2" />}
                        {t('sendButton')}
                    </Button>
                </DialogFooter>
            </DialogContent>
        </Dialog>
    );
};

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_components/ContactPanel.tsx ===================

"use client";

import React, { useMemo, useTransition } from 'react';
import { Button } from '@/components/ui/button';
import { User, Building, UserPlus, Mail, Phone, MapPin, ExternalLink, Euro, Ban, Loader2 } from 'lucide-react';
import type { Ticket } from '../page';
import Link from 'next/link';
import { ContactDialog } from '@/app/[locale]/(app)/crm/contactes/_components/ContactDialog';
import type { Contact } from '@/types/crm';
import { addToBlacklistAction } from '../actions';
import { toast } from 'sonner';

interface ContactPanelProps {
    ticket: Ticket | null;
    isPendingSave: boolean;
    // ✅ CORRECCIÓ 1: Actualitzem la signatura de la funció que esperem rebre.
    // Ara accepta el contacte nou i el tiquet original.
    onSaveContact: (newlyCreatedContact: Contact, originalTicket: Ticket) => void;
    allTeamContacts: Contact[];
}

export const ContactPanel: React.FC<ContactPanelProps> = ({ ticket, isPendingSave, onSaveContact, allTeamContacts }) => {

    const [isPending, startTransition] = useTransition();
    // La teva funció de traduccions (la deixo aquí per si la vols ampliar)
    const t = (key: string) => {
        const translations: { [key: string]: string } = {
            'noContactAssociated': "Selecciona un tiquet per veure'n els detalls.",
            'contactDetailsTitle': "Detalls del Contacte",
            'viewFullProfile': "Veure fitxa completa",
            'emailLabel': "Correu",
            'phoneLabel': "Telèfon",
            'locationLabel': "Ubicació",
            'valueLabel': "Valor",
            'statusLabel': "Estat",
            'notSpecified': "No especificat",
            'saveContactButton': "Desa com a contacte"
        };
        return translations[key] || key;
    };

    const handleBlacklist = () => {
        if (!ticket || !ticket.sender_email) return;
        if (confirm(`Estàs segur que vols bloquejar ${ticket.sender_email}? Tots els seus correus no es descarregaran de nous.`)) {
            startTransition(async () => {
                const result = await addToBlacklistAction(ticket.sender_email);
                if (result.success) {
                    toast.success(result.message);
                } else {
                    toast.error("Error", { description: result.message });
                }
            });
        }
    };
    // ✅ LÒGICA CLAU: Utilitzem 'useMemo' per a determinar si el contacte existeix.
    // Aquesta comprovació només es re-executa si el 'ticket' o la llista de contactes canvien.
    const contactToShow = useMemo(() => {
        if (!ticket) return null;

        // Prioritat 1: El tiquet ja està vinculat a un contacte.
        if (ticket.contacts) {
            console.log("%c[DEBUG] Cas 1: El tiquet ja estava vinculat.", "color: green", ticket.contacts);

            return ticket.contacts;
        }

        // --- INICI DE LA ZONA DE DEPURACIÓ ---
        console.group(`[DEBUG] Buscant contacte per a: "${ticket.sender_email}"`);
        console.log("Llista de contactes de l'equip:", allTeamContacts);

        const existingContact = allTeamContacts.find(contact => {
            // Comprovem que ambdós emails existeixen abans de comparar
            if (!contact.email || !ticket.sender_email) return false;

            const contactEmail = contact.email.trim().toLowerCase();
            const ticketEmail = ticket.sender_email.trim().toLowerCase();

            // Log de cada comparació per veure exactament què passa
            console.log(`Comparant: "${ticketEmail}" === "${contactEmail}" -> ${contactEmail === ticketEmail}`);

            return contactEmail === ticketEmail;
        });

        if (existingContact) {
            console.log("%c[DEBUG] Cas 2: S'ha trobat un contacte existent per email.", "color: blue", existingContact);
        } else {
            console.log("%c[DEBUG] Cas 3: No s'ha trobat cap contacte. S'hauria de mostrar el botó de desar.", "color: orange");
        }
        console.groupEnd();
        // --- FI DE LA ZONA DE DEPURACIÓ ---



        return existingContact || null;
    }, [ticket, allTeamContacts]);
    return (
        <div className="flex flex-col h-full border-l border-border bg-background/95">
            {!ticket ? (
                // --- VISTA INICIAL QUAN NO HI HA CAP TIQUET SELECCIONAT ---
                <div className="flex-1 flex flex-col items-center justify-center text-center p-4">
                    <User className="w-16 h-16 text-muted-foreground mb-4" />
                    <p className="text-muted-foreground">{t('noContactAssociated')}</p>
                </div>
            ) : contactToShow ? ( // ✅ ARA LA CONDICIÓ ÉS 'contactToShow'
                // --- VISTA MILLORADA QUAN EL CONTACTE JA EXISTEIX ---
                <>
                    <div className="p-4 border-b flex justify-between items-center flex-shrink-0">
                        <h2 className="text-xl font-bold">Detalls del Contacte</h2>
                        <Button asChild variant="secondary" size="sm">
                            <Link href={`/crm/contactes/${contactToShow.id}`}>
                                Veure fitxa completa <ExternalLink className="w-4 h-4 ml-2" />
                            </Link>
                        </Button>
                    </div>
                    <div className="flex-1 overflow-y-auto p-6 space-y-4">
                        <div className="flex items-center gap-4">
                            <div className="w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center">
                                <User className="w-8 h-8 text-primary" />
                            </div>
                            <div>
                                <h3 className="text-lg font-semibold">{contactToShow.nom}</h3>
                                {contactToShow.empresa && (
                                    <p className="text-sm text-muted-foreground flex items-center gap-1.5">
                                        <Building className="w-4 h-4" />{contactToShow.empresa}
                                    </p>
                                )}
                            </div>
                        </div>
                        <div className="space-y-3 text-sm pt-4">
                            <div className="flex items-center gap-3">
                                <Mail className="w-4 h-4 text-muted-foreground flex-shrink-0" />
                                <a href={`mailto:${contactToShow.email}`} className="hover:underline truncate">{contactToShow.email}</a>
                            </div>
                            <div className="flex items-center gap-3">
                                <Phone className="w-4 h-4 text-muted-foreground flex-shrink-0" />
                                <span>{contactToShow.telefon || "No especificat"}</span>
                            </div>
                            <div className="flex items-center gap-3">
                                <MapPin className="w-4 h-4 text-muted-foreground flex-shrink-0" />
                                <span>{contactToShow.ubicacio || "No especificada"}</span>
                            </div>
                            <div className="flex items-center gap-3">
                                <Euro className="w-4 h-4 text-muted-foreground flex-shrink-0" />
                                <span>Valor: {contactToShow.valor ?? 0} €</span>
                            </div>
                            <div className="flex items-center gap-3">
                                <UserPlus className="w-4 h-4 text-muted-foreground flex-shrink-0" />
                                <span>Estat: <span className="font-medium">{contactToShow.estat}</span></span>
                            </div>
                        </div>
                    </div>
                </>
            ) : (
                // --- VISTA QUAN EL CONTACTE NO EXISTEIX ---
                <div className="flex-1 flex flex-col items-center justify-center text-center p-4">
                    <User className="w-16 h-16 text-muted-foreground mb-4" />
                    <p className="font-semibold">{ticket.sender_name}</p>
                    <p className="text-sm text-muted-foreground mb-4">{ticket.sender_email}</p>
                    <ContactDialog
                        trigger={
                            <Button disabled={isPendingSave}>
                                <UserPlus className="w-4 h-4 mr-2" />
                                Desa com a contacte
                            </Button>
                        }
                        initialData={{
                            nom: ticket.sender_name,
                            email: ticket.sender_email
                        }}
                        // ✅ CORRECCIÓ 2: La lògica aquí ara és correcta, ja que 'onSaveContact' espera dos paràmetres.
                        onContactSaved={(newContact) => onSaveContact(newContact as Contact, ticket)}
                    />
                </div>

            )}
            {ticket && (
                <div className="p-4 border-t mt-auto flex-shrink-0">
                    <Button 
                        variant="destructive" 
                        size="sm" 
                        className="w-full" 
                        onClick={handleBlacklist} 
                        // ✅ CORRECCIÓ 2: Utilitzem 'isPending' per a desactivar el botó
                        disabled={isPendingSave || isPending}
                    >
                        {isPending ? (
                            <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                        ) : (
                            <Ban className="w-4 h-4 mr-2" />
                        )}
                        {isPending ? 'Bloquejant...' : 'Afegeix remitent a la llista negra'}
                    </Button>
                </div>
            )}
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_components/EmailEditorToolbar.tsx ===================

// Ubicació: /app/(app)/comunicacio/inbox/_components/EmailEditorToolbar.tsx

"use client";

import { type Editor } from '@tiptap/react';
import { Toggle } from '@/components/ui/toggle';
import { Bold, Italic, Strikethrough, List, ListOrdered, Heading2 } from 'lucide-react';

interface EmailEditorToolbarProps {
    editor: Editor | null;
}

export const EmailEditorToolbar = ({ editor }: EmailEditorToolbarProps) => {
    if (!editor) return null;

    return (
        <div className="border border-input bg-transparent rounded-md p-1 flex gap-1 flex-wrap">
            <Toggle size="sm" pressed={editor.isActive('bold')} onPressedChange={() => editor.chain().focus().toggleBold().run()}>
                <Bold className="h-4 w-4" />
            </Toggle>
            <Toggle size="sm" pressed={editor.isActive('italic')} onPressedChange={() => editor.chain().focus().toggleItalic().run()}>
                <Italic className="h-4 w-4" />
            </Toggle>
            <Toggle size="sm" pressed={editor.isActive('strike')} onPressedChange={() => editor.chain().focus().toggleStrike().run()}>
                <Strikethrough className="h-4 w-4" />
            </Toggle>
            <Toggle size="sm" pressed={editor.isActive('heading', { level: 2 })} onPressedChange={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}>
                <Heading2 className="h-4 w-4" />
            </Toggle>
            <Toggle size="sm" pressed={editor.isActive('bulletList')} onPressedChange={() => editor.chain().focus().toggleBulletList().run()}>
                <List className="h-4 w-4" />
            </Toggle>
            <Toggle size="sm" pressed={editor.isActive('orderedList')} onPressedChange={() => editor.chain().focus().toggleOrderedList().run()}>
                <ListOrdered className="h-4 w-4" />
            </Toggle>
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_components/InboxClient.tsx ===================

/**
 * @file src/app/[locale]/(app)/comunicacio/inbox/_components/inbox-client.tsx
 */
"use client";

import React from 'react';

import { AnimatePresence } from 'framer-motion';
import { useMediaQuery } from '@/hooks/useMediaQuery';
import { useTranslations } from 'next-intl';
import { type Contact } from '@/types/crm'; // Assegura't d'importar el tipus Contact
import { useInbox } from '../_hooks/useInbox'; // ✅ Importem el nostre nou hook!


import type { Ticket, Template } from '@/types/comunicacio/inbox';

// Components
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { TicketList } from './ticketList/index';
import { TicketDetail } from './TicketDetail';
import { ContactPanel } from './ContactPanel';
import { ComposeDialog } from './ComposeDialog';
import { MobileDetailView } from './MobileDetailView';
import type { User } from '@supabase/supabase-js'; // Importem el tipus User

// ✅ PAS 1: Definim el tipus per als membres de l'equip que rebrem.
type TeamMember = {
  profiles: {
    id: string;
    full_name: string | null;
    avatar_url: string | null;
  } | null;
};
type Permission = { target_user_id: string };

// Tipamos las props del componente correctamente
export function InboxClient(props: {
  user: User;
  initialTickets: Ticket[];
  initialTemplates: Template[];
  initialReceivedCount: number;
  initialSentCount: number;
  initialSelectedTicket: Ticket | null;
  initialSelectedTicketBody: string | null;
  teamMembers: TeamMember[]; // ✅ Corregido
  permissions: Permission[]; // ✅ Corregido
  allTeamContacts: Contact[];
}) {
  const t = useTranslations('InboxPage');
  const isDesktop = useMediaQuery('(min-width: 1024px)');

  // ✅ TOTA la lògica i estats venen d'aquí!
  const {
      selectedTicket, ticketToDelete, activeFilter, composeState, selectedTicketBody,
      isBodyLoading, hasMore, searchTerm, isPending, isContactPanelOpen, inboxFilter,
      counts, enrichedTickets,
      setTicketToDelete, setActiveFilter, setComposeState, setSearchTerm,
      setIsContactPanelOpen, setInboxFilter, handleSelectTicket, handleDeleteTicket,
      handleLoadMore, handleSaveContact, handleComposeNew, handleReply, handleRefresh,
  } = useInbox({ ...props, t });

  return (
      <>
          <ComposeDialog
              open={composeState.open}
              onOpenChange={(isOpen) => setComposeState({ ...composeState, open: isOpen })}
              onEmailSent={handleRefresh} // Podem reutilitzar handleRefresh!
              initialData={composeState.initialData}
              templates={props.initialTemplates}
              contacts={props.allTeamContacts}
          />
          <AlertDialog open={!!ticketToDelete} onOpenChange={() => setTicketToDelete(null)}>
              <AlertDialogContent>
                  <AlertDialogHeader><AlertDialogTitle>{t("deleteConfirmTitle")}</AlertDialogTitle><AlertDialogDescription>{t("deleteConfirmDescription")}</AlertDialogDescription></AlertDialogHeader>
                  <AlertDialogFooter><AlertDialogCancel disabled={isPending}>{t("cancelButton")}</AlertDialogCancel><AlertDialogAction onClick={handleDeleteTicket} disabled={isPending}>{t("confirmDeleteButton")}</AlertDialogAction></AlertDialogFooter>
              </AlertDialogContent>
          </AlertDialog>

          <div
              className="h-[calc(100vh-var(--header-height,64px))] w-full grid transition-all duration-300 ease-in-out"
              style={{ gridTemplateColumns: isDesktop ? `384px 1fr minmax(0, ${isContactPanelOpen ? '320px' : '0px'})` : '1fr' }}
          >
              {(!isDesktop && selectedTicket) ? null : (
                  <div className="min-h-0">
                      <TicketList
                          user={props.user}
                          teamMembers={props.teamMembers}
                          permissions={props.permissions}
                          tickets={enrichedTickets}
                          selectedTicketId={selectedTicket?.id ?? null}
                          activeFilter={activeFilter}
                          inboxFilter={inboxFilter}
                          onSetInboxFilter={setInboxFilter}
                          unreadCount={counts.unread}
                          sentCount={counts.sent}
                          totalCount={counts.received}
                          onSetFilter={setActiveFilter}
                          onDeleteTicket={setTicketToDelete}
                          onSelectTicket={handleSelectTicket}
                          onComposeNew={handleComposeNew}
                          onRefresh={handleRefresh}
                          hasMore={hasMore}
                          onLoadMore={handleLoadMore}
                          isPendingRefresh={isPending}
                          searchTerm={searchTerm}
                          onSearchChange={setSearchTerm}
                      />
                  </div>
              )}

              {isDesktop && (
                  <div className="min-h-0">
                      <TicketDetail
                          ticket={selectedTicket}
                          body={selectedTicketBody}
                          isLoading={isBodyLoading}
                          onReply={handleReply}
                          isContactPanelOpen={isContactPanelOpen}
                          onToggleContactPanel={() => setIsContactPanelOpen(prev => !prev)}
                      />
                  </div>
              )}
              
              {isDesktop && isContactPanelOpen && (
                  <div className="overflow-hidden min-h-0">
                      <ContactPanel
                          ticket={selectedTicket}
                          onSaveContact={handleSaveContact}
                          isPendingSave={isPending}
                          allTeamContacts={props.allTeamContacts}
                      />
                  </div>
              )}

              <AnimatePresence>
                  {!isDesktop && selectedTicket && (
                      <MobileDetailView
                          ticket={selectedTicket}
                          body={selectedTicketBody}
                          isLoading={isBodyLoading}
                          isPending={isPending}
                          onClose={() => handleSelectTicket(null)}
                          onReply={handleReply}
                          onSaveContact={handleSaveContact}
                      />
                  )}
              </AnimatePresence>
          </div>
      </>
  );
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_components/InboxData.tsx ===================


import { redirect } from 'next/navigation';
import { InboxClient } from "./InboxClient";
import { transformRpcToTicket, type Ticket, type Template, type TicketFromRpc } from "@/types/comunicacio/inbox";
import { getTicketBodyAction } from "../actions";
import { getTeamMembersWithProfiles } from "@/lib/supabase/teams";
import { validateUserSession } from "@/lib/supabase/session";
import { headers } from "next/headers";
import { type Contact } from '@/types/crm';

export async function InboxData({ searchTerm }: { searchTerm: string }) {
    const session = await validateUserSession();
    const locale = (await headers()).get('x-next-intl-locale') || 'ca';
    if ('error' in session) {
        redirect(`/${locale}/login`);
    }
    const { supabase, user, activeTeamId } = session;

    const { data: permissions, error: permissionsError } = await supabase
        .from('inbox_permissions')
        .select('target_user_id')
        .eq('team_id', activeTeamId)
        .eq('grantee_user_id', user.id);

    if (permissionsError) console.error("Error en carregar els permisos de l'inbox:", permissionsError);

    const visibleUserIds = [user.id, ...(permissions?.map(p => p.target_user_id).filter(Boolean) || [])];

    const [
        teamMembers,
        allTeamContactsRes, // El resultat de la promesa dels contactes
        templatesRes,
        receivedCountRes,
        sentCountRes,
        ticketsRes
    ] = await Promise.all([
        getTeamMembersWithProfiles(supabase, activeTeamId).then(response =>
            // Accedeix a l'array dins de .data i posa un valor per defecte ([])
            (response.data || []).map(member => ({
                ...member,
                profiles: {
                    id: member.user_id,
                    full_name: member.full_name || null,
                    avatar_url: member.avatar_url || null,
                },
            }))
        ),
        supabase.from('contacts').select('*').eq('team_id', activeTeamId),
        supabase.from("email_templates").select("*").eq('team_id', activeTeamId),
        supabase.rpc('get_inbox_received_count', { p_visible_user_ids: visibleUserIds }),
        supabase.rpc('get_inbox_sent_count', { p_visible_user_ids: visibleUserIds }),
        supabase.rpc('get_inbox_tickets', {
            p_user_id: user.id,
            p_team_id: activeTeamId,
            p_visible_user_ids: visibleUserIds,
            p_limit: 50,
            p_offset: 0,
            p_search_term: searchTerm
        })
    ]);

    if (ticketsRes.error) console.error("Error RPC (get_inbox_tickets):", ticketsRes.error);

    // ✅ CORRECCIÓ: Declarem 'allTeamContacts' aquí, a partir del resultat de la promesa.
    const allTeamContacts: Contact[] = allTeamContactsRes.data || [];
    const tickets: Ticket[] = ((ticketsRes.data as TicketFromRpc[]) || []).map(transformRpcToTicket);
    const templates: Template[] = templatesRes.data || [];
    const receivedCount = receivedCountRes.data || 0;
    const sentCount = sentCountRes.data || 0;

    let initialSelectedTicketBody: string | null = null;
    if (tickets.length > 0) {
        const { body } = await getTicketBodyAction(tickets[0].id);
        initialSelectedTicketBody = body;
    }

    return (
        <InboxClient
            user={user}
            initialTickets={tickets}
            initialTemplates={templates}
            initialReceivedCount={receivedCount}
            initialSentCount={sentCount}
            initialSelectedTicket={tickets.length > 0 ? tickets[0] : null}
            initialSelectedTicketBody={initialSelectedTicketBody}
            teamMembers={teamMembers}
            permissions={permissions || []}
            allTeamContacts={allTeamContacts} // ✅ Ara la variable existeix i té el valor correcte.
        />
    );
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_components/InboxSkeleton.tsx ===================

"use client";

/**
 * @summary Mostra un esquelet de càrrega per a la pàgina de l'Inbox.
 */
export function InboxSkeleton() {
  return (
    <div className="flex flex-row h-full w-full animate-pulse">
      {/* Esquelet de la llista de tiquets */}
      <div className="w-80 lg:w-96 flex-shrink-0 border-r border-border glass-card p-4 space-y-4">
        <div className="h-8 w-1/2 bg-gray-700/50 rounded-md"></div>
        <div className="flex gap-2">
          <div className="h-8 w-24 bg-gray-700/50 rounded-md"></div>
          <div className="h-8 w-24 bg-gray-700/50 rounded-md"></div>
        </div>
        <div className="space-y-4 pt-2">
          {[...Array(8)].map((_, i) => (
            <div key={i} className="h-16 bg-gray-800/50 rounded-md"></div>
          ))}
        </div>
      </div>
      
      {/* Esquelet del detall del tiquet */}
      <div className="flex-1 p-6 space-y-4">
        <div className="h-8 w-3/4 bg-gray-700/50 rounded-md"></div>
        <div className="h-4 w-full bg-gray-700/50 rounded-md"></div>
        <div className="h-4 w-full bg-gray-700/50 rounded-md"></div>
        <div className="h-4 w-5/6 bg-gray-700/50 rounded-md"></div>
      </div>

      {/* Esquelet del panell de contacte */}
      <div className="w-80 lg:w-96 flex-shrink-0 border-l border-border glass-card p-4 space-y-4 hidden lg:block">
        <div className="h-8 w-1/2 bg-gray-700/50 rounded-md"></div>
        <div className="flex items-center gap-4">
          <div className="w-16 h-16 bg-gray-700/50 rounded-full"></div>
          <div className="flex-1 space-y-2">
            <div className="h-5 w-full bg-gray-700/50 rounded-md"></div>
            <div className="h-4 w-3/4 bg-gray-700/50 rounded-md"></div>
          </div>
        </div>
        <div className="h-4 w-full bg-gray-700/50 rounded-md"></div>
        <div className="h-4 w-full bg-gray-700/50 rounded-md"></div>
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_components/MobileDetailView.tsx ===================

/**
 * @file MobileDetailView.tsx
 * @summary Vista de detall que llisca en dispositius mòbils.
 */
"use client";

import { motion } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { X, Reply, Info, UserPlus, Loader2 } from 'lucide-react'; 
import type { Ticket } from '@/types/comunicacio/inbox';
import React from 'react';
import type { Contact } from '@/types/crm';
import { ContactDialog } from '../../../crm/contactes/_components/ContactDialog';

// ✅ SOLUCIÓ: S'ha redissenyat aquest component per a ser més simple.
// Ara no calcula l'alçada, sinó que omple el seu contenidor i gestiona el seu propi scroll intern.
const SafeEmailRenderer: React.FC<{ htmlBody: string }> = ({ htmlBody }) => {
    // Estils per assegurar que l'iframe i el seu contingut es comportin correctament.
    const documentSource = `
        <!DOCTYPE html>
        <html>
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <style>
                    :root { color-scheme: dark light; }
                    body {
                        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", sans-serif;
                        margin: 0;
                        padding: 1rem; /* Padding intern per al contingut */
                        word-wrap: break-word;
                        overflow-wrap: break-word;
                    }
                    img, video, iframe, embed, object { max-width: 100%; height: auto; }
                    table { table-layout: fixed; width: 100%; max-width: 100%; }
                    td, th { word-break: break-word; }
                </style>
            </head>
            <body>
                ${htmlBody}
            </body>
        </html>
    `;

    return (
        <iframe
            srcDoc={documentSource}
            style={{ width: '100%', height: '100%', border: 'none' }}
            sandbox="allow-popups allow-popups-to-escape-sandbox allow-same-origin"
            title="email-content"
        />
    );
};


interface MobileDetailViewProps {
    ticket: Ticket;
    body: string | null;
    isLoading: boolean;
    isPending: boolean;
    onClose: () => void;
    onReply: (ticket: Ticket) => void;
    onSaveContact: (newlyCreatedContact: Contact, originalTicket: Ticket) => void;
}

export function MobileDetailView({ ticket, body, isLoading, isPending, onClose, onReply, onSaveContact }: MobileDetailViewProps) {
    const t = (key: string) => {
        const translations: { [key: string]: string } = {
            'closeButton': "Tanca", 'fromLabel': "De", 'replyButton': "Respon",
            'senderDetailsLabel': "Detalls del remitent", 'nameLabel': "Nom", 'emailLabel': "Correu",
            'saveContactButton': "Desa com a contacte"
        };
        return translations[key] || key;
    };
    
    return (
        <motion.div 
            key={ticket.id} 
            initial={{ x: '100%' }} 
            animate={{ x: 0 }} 
            exit={{ x: '100%' }} 
            transition={{ type: 'tween', ease: 'easeInOut', duration: 0.3 }} 
            className="absolute inset-0 flex flex-col bg-background z-20"
        >
            <div className="p-2 border-b border-border flex justify-between items-center flex-shrink-0">
            <div className="flex items-center min-w-0">
                    <Button variant="ghost" size="icon" onClick={onClose} className="flex-shrink-0" aria-label={t('closeButton')}>
                        <X className="w-5 h-5" />
                    </Button>
                    <div className="ml-2 truncate">
                        {/* ✅ CORRECCIÓ 1: Assegurem que el title no sigui null */}
                        <p className="font-semibold truncate" title={ticket.subject ?? undefined}>{ticket.subject}</p>
                        
                        {/* ✅ CORRECCIÓ 2: La més important. Convertim el possible 'null' a 'undefined'. */}
                        <p className="text-sm text-muted-foreground truncate" title={(ticket.contacts?.nom || ticket.sender_name) ?? undefined}>
                            {t('fromLabel')}: {ticket.contacts?.nom || ticket.sender_name}
                        </p>
                    </div>
                </div>
                <Button size="sm" variant="outline" className="mr-2 flex-shrink-0" onClick={() => onReply(ticket)}>
                    <Reply className="mr-2 h-4 w-4" />
                    {t('replyButton')}
                </Button>
            </div>
            
            {/* ✅ SOLUCIÓ: Aquest contenidor principal ara és flex-col. No té scroll. */}
            <div className="flex-1 min-h-0 flex flex-col">
                {/* La secció de detalls no creix i forma part del scroll general si fos necessari (ara no ho és). */}
                <div className="p-4 md:p-6 flex-shrink-0">
                    <details className="border rounded-lg p-3 bg-muted/50">
                        <summary className="cursor-pointer font-semibold flex items-center gap-2 text-sm">
                            <Info className="w-4 h-4 text-primary" /> {t('senderDetailsLabel')}
                        </summary>
                        <div className="mt-3 pt-3 border-t space-y-2 text-sm">
                            <p><strong>{t('nameLabel')}:</strong> {ticket.contacts?.nom || ticket.sender_name}</p>
                            <p><strong>{t('emailLabel')}:</strong> {ticket.contacts?.email || ticket.sender_email}</p>
                            {!ticket.contacts && (
                                // ✅ 2. Substituïm el botó simple pel nostre diàleg reutilitzable.
                                <ContactDialog
                                    trigger={
                                        <Button size="sm" className="w-full mt-2" disabled={isPending}>
                                            <UserPlus className="w-4 h-4 mr-2"/>
                                            {t('saveContactButton')}
                                        </Button>
                                    }
                                    initialData={{
                                        nom: ticket.sender_name,
                                        email: ticket.sender_email
                                    }}
                                    // Passem la funció 'onSaveContact' de la mateixa manera que al panell d'escriptori.
                                    onContactSaved={(newContact) => onSaveContact(newContact as Contact, ticket)}
                                />
                            )}
                        </div>
                    </details>
                </div>
                {/* ✅ SOLUCIÓ: Aquest nou contenidor ocupa l'espai restant ('flex-1') i conté l'iframe. */}
                <div className="flex-1 relative">
                    {isLoading ? (
                        <div className="absolute inset-0 flex items-center justify-center">
                            <Loader2 className="w-8 h-8 animate-spin text-primary" />
                        </div>
                    ) : (
                        <div className="absolute inset-0">
                             <SafeEmailRenderer htmlBody={body || ''} />
                        </div>
                    )}
                </div>
            </div>
        </motion.div>
    );
}



// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_components/SafeEmailRenderer.tsx ===================

// src/app/[locale]/(app)/comunicacio/inbox/_components/SafeEmailRenderer.tsx
"use client";

import React, { useMemo, useRef, useState, useEffect } from 'react';

interface SafeEmailRendererProps {
    htmlBody: string;
}

// ====================================================================================
// CSS v4.0: MÀXIMA COMPATIBILITAT I FIDELITAT
// ====================================================================================
const compatibilityStyles = `
    /* --- 1. PREPARACIÓ DE L'ENTORN --- */
    :root {
        color-scheme: dark light;
    }
    body {
        background-color: transparent;
        color: hsl(var(--foreground));
        margin: 0;
        /* ✅ NOU: El padding es posa aquí, dins de l'iframe, no fora. */
        padding: 0; /* ✅ CANVI: El padding ara anirà al wrapper */
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
        /* ✅ NOU: Assegurem que paraules llargues (URLs, etc.) no trenquin el layout */
        word-wrap: break-word;
        overflow-wrap: break-word;
    }
    * {
        box-sizing: border-box;
    }

    /* --- 2. REGLES DE SEGURETAT ESTRUCTURAL (NO NEGOCIABLE) --- */
    img, video, iframe, embed, object {
        max-width: 100% !important;
        height: auto !important;
        width: auto; /* Permet que s'encongeixi si cal */
    }

    table {
        /* ✅ MILLORAT: Forcem un layout que respecti l'amplada màxima */
        table-layout: fixed;
        width: 100% !important; /* Molts correus antics no ho fan bé */
        max-width: 100% !important;
    }
    
    td, th {
       /* ✅ NOU: Permet que el text dins les cel·les es trenqui correctament */
       word-break: break-word;
    }

    /* --- 3. SOLUCIÓ AL PROBLEMA DEL TEXT FOSC SOBRE FONS FOSC (MANTINGUT) --- */
    [style*="color:#000"]:not([style*="background"]),
    [style*="color:black"]:not([style*="background"]),
    [style*="color:#000000"]:not([style*="background"]) {
        color: hsl(var(--foreground)) !important;
    }

    /* --- 4. MILLORES DE VISUALITZACIÓ --- */
    a {
        /* ✅ NOU: Donem un color als enllaços per defecte, si el correu no ho fa */
        color: hsl(var(--primary));
    }
           /* ✅ NOU: El wrapper que actua com a llenç per al correu */
    #email-wrapper {
        background-color: #ffffff; /* Fons blanc garantit */
        color: #000000; /* Color de text per defecte negre */
        padding: 1.5rem; /* El padding que abans teníem al body */
    }
`;

export const SafeEmailRenderer: React.FC<SafeEmailRendererProps> = ({ htmlBody }) => {
    const iframeRef = useRef<HTMLIFrameElement>(null);
    // ✅ MILLORAT: Comencem amb '100%' per evitar salts visuals mentre es calcula l'alçada real
    const [iframeHeight, setIframeHeight] = useState<string | number>('100%');

    const documentSource = useMemo(() => {
        return `
            <!DOCTYPE html>
            <html>
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <style>${compatibilityStyles}</style>
                </head>
                <body>
                    <div id="email-wrapper">
                        ${htmlBody}
                    </div>
                    <script>
                        document.addEventListener('DOMContentLoaded', () => {
                            const body = document.body;
                            const html = document.documentElement;
                            const sendHeight = () => {
                                // Utilitzem el màxim de diverses propietats per ser més robustos
                                const height = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);
                                window.parent.postMessage({ type: 'iframeResize', height: height }, '*');
                            };
                            
                         // ✅ LÒGICA DEBOUNCE:
                            // Aquesta funció embolcalla 'sendHeight' i s'assegura que no es cridi
                            // massa ràpidament, esperant 150ms d'inactivitat.
                            const debouncedSendHeight = () => {
                                clearTimeout(debounceTimeout);
                                debounceTimeout = setTimeout(sendHeight, 150);
                            };


                            // Observem canvis en el cos (imatges que es carreguen, contingut dinàmic)
                            const resizeObserver = new ResizeObserver(sendHeight);
                            resizeObserver.observe(body);

                            // Un últim intent quan tots els recursos (imatges) s'han carregat
                            window.addEventListener('load', sendHeight);
                        });
                    </script>
                </body>
            </html>
        `;
    }, [htmlBody]);

    useEffect(() => {
        const handleMessage = (event: MessageEvent) => {
            if (
                iframeRef.current &&
                event.source === iframeRef.current.contentWindow &&
                event.data.type === 'iframeResize' &&
                event.data.height > 0
            ) {
                // Li donem un píxel extra per evitar problemes d'arrodoniment
                setIframeHeight(event.data.height + 1);
            }
        };

        window.addEventListener('message', handleMessage);
        return () => window.removeEventListener('message', handleMessage);
    }, []);

    // ✅ SOLUCIÓ: Retornem directament l'iframe, sense la 'div' que el limitava.
    return (
        <iframe
            ref={iframeRef}
            srcDoc={documentSource}
            title="Contingut del correu"
            sandbox="allow-scripts"
            width="100%"
            height={iframeHeight}
            style={{
                border: 'none',
                display: 'block',
                background: 'transparent',
                // ✅ Afegim un alçada mínima per evitar que es col·lapsi a 0px mentre carrega
                minHeight: '200px'
            }}
            scrolling="no"
        />
    );
};

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_components/TicketDetail.tsx ===================

"use client";

import React from 'react';
import { Button } from '@/components/ui/button';
import { Reply, Inbox, PanelRightClose, PanelRightOpen, Loader2 } from 'lucide-react';
import type { Ticket } from '../page';
// ✅ IMPORTANT: Ara importarem el renderer des del seu propi fitxer.
import { SafeEmailRenderer } from './SafeEmailRenderer';

interface TicketDetailProps {
    ticket: Ticket | null;
    body: string | null;
    isLoading: boolean;
    onReply: (ticket: Ticket) => void;
    isContactPanelOpen: boolean;
    onToggleContactPanel: () => void;
}

export const TicketDetail: React.FC<TicketDetailProps> = ({ ticket, body, isLoading, onReply, isContactPanelOpen, onToggleContactPanel }) => {
    const t = (key: string) => {
        const translations: { [key: string]: string } = {
            'selectConversationTitle': "Selecciona una conversa",
            'selectConversationDescription': "Tria un element de la llista per veure'n el contingut.",
            'replyButton': "Respon",
            'hideContactPanel': "Amaga el panell de contacte",
            'showContactPanel': "Mostra el panell de contacte"
        };
        return translations[key] || key;
    };

    if (!ticket) {
        return (
            <div className="flex-1 h-full flex flex-col items-center justify-center text-center p-4">
                <Inbox className="w-16 h-16 text-muted-foreground mb-4" />
                <h2 className="text-xl font-semibold">{t('selectConversationTitle')}</h2>
                <p className="text-muted-foreground">{t('selectConversationDescription')}</p>
            </div>
        );
    }

    return (
        // ✅ CANVI: Hem eliminat la classe 'bg-muted/30' d'aquest div
        <div className="flex flex-col h-full min-w-0">
            <div className="p-4 border-b flex justify-between items-center flex-shrink-0">
                <h2 className="text-xl lg:text-2xl font-bold truncate">{ticket.subject}</h2>
                <div className="flex items-center gap-2">
                    <Button variant="outline" onClick={() => onReply(ticket)}>
                        <Reply className="mr-2 h-4 w-4" />{t('replyButton')}
                    </Button>
                    <Button variant="ghost" size="icon" onClick={onToggleContactPanel} title={isContactPanelOpen ? t('hideContactPanel') : t('showContactPanel')}>
                        {isContactPanelOpen ? <PanelRightClose className="h-5 w-5" /> : <PanelRightOpen className="h-5 w-5" />}
                    </Button>
                </div>
            </div>

            <div className="flex-1 min-h-0 relative">
                {isLoading ? (
                    <div className="absolute inset-0 flex items-center justify-center">
                        <Loader2 className="w-8 h-8 animate-spin text-primary" />
                    </div>
                ) : (
                    // El renderer omple tot l'espai i ell mateix gestiona el seu fons
                    <div className="absolute inset-0">
                        <SafeEmailRenderer htmlBody={body || ''} />
                    </div>
                )}
            </div>
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_components/ticketList/index.tsx ===================

"use client";

import React from 'react';
import { Button } from '@/components/ui/button';
import { Inbox } from 'lucide-react';

import type { Ticket, TicketFilter } from '@/types/comunicacio/inbox';
import type { User } from '@supabase/supabase-js';

import { TicketListHeader } from './TicketListHeader';
import { TicketListFilters } from './TicketListFilters';
import { TicketListItem } from './TicketListItem';

// Definim els tipus necessaris per a les props
export type EnrichedTicket = Ticket & {
    owner?: { full_name: string | null; avatar_url: string | null; } | null;
    ownerColorClass?: string;
};
export type TeamMember = { profiles: { id: string; full_name: string | null; avatar_url: string | null; } | null; };
export type Permission = { target_user_id: string };


interface TicketListProps {
    user: User;
    teamMembers: TeamMember[];
    permissions: Permission[];
    tickets: EnrichedTicket[];
    selectedTicketId: number | null;
    activeFilter: string;
    inboxFilter: string;
    onSetInboxFilter: (userId: string) => void;
    unreadCount: number;
    sentCount: number;
    isPendingRefresh: boolean;
    totalCount: number;
    onSelectTicket: (ticket: Ticket) => void;
    onDeleteTicket: (ticket: Ticket) => void;
    onSetFilter: (filter: TicketFilter) => void;
    onComposeNew: () => void;
    onRefresh: () => void;
    hasMore: boolean;
    onLoadMore: () => void;
    // ✅ CORRECCIÓ: Afegim les props que faltaven per a la cerca
    searchTerm: string;
    onSearchChange: (value: string) => void;
}

export const TicketList: React.FC<TicketListProps> = (props) => {
    const { tickets, selectedTicketId, onSelectTicket, onDeleteTicket, hasMore, onLoadMore, isPendingRefresh } = props;

    return (
        <div className="w-full h-full flex flex-col flex-shrink-0 border-r border-border glass-card">
            {/* ✅ Passem totes les props necessàries a la capçalera */}
            <TicketListHeader {...props} />
            <TicketListFilters {...props} />
            
            <div className="flex-1 h-0 overflow-y-auto">
                {tickets.length > 0 ? (
                    tickets.map(ticket => (
                        <TicketListItem
                            key={ticket.id}
                            ticket={ticket}
                            isSelected={selectedTicketId === ticket.id}
                            onSelectTicket={onSelectTicket}
                            onDeleteTicket={onDeleteTicket}
                        />
                    ))
                ) : (
                    <div className="flex flex-col items-center justify-center h-full p-4 text-center">
                        <Inbox className="w-12 h-12 text-muted-foreground mb-2" />
                        <p className="text-muted-foreground">Safata d'entrada buida.</p>
                    </div>
                )}
            </div>
            
            {hasMore && (
                <div className="p-4 border-t border-border flex-shrink-0">
                    <Button variant="outline" className="w-full" onClick={onLoadMore} disabled={isPendingRefresh}>
                        {isPendingRefresh ? "Carregant..." : "Carregar més"}
                    </Button>
                </div>
            )}
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_components/ticketList/TicketListFilters.tsx ===================

"use client";

import React from 'react';
import { Button } from '@/components/ui/button';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { LayoutGrid, Inbox, Mail, Send } from "lucide-react";
import type { TicketFilter } from '@/types/comunicacio/inbox';

interface TicketListFiltersProps {
    activeFilter: string;
    onSetFilter: (filter: TicketFilter) => void;
    totalCount: number;
    sentCount: number;
    unreadCount: number;
}

export const TicketListFilters: React.FC<TicketListFiltersProps> = ({ activeFilter, onSetFilter, totalCount, sentCount, unreadCount }) => {
    const filters: { id: TicketFilter, label: string, icon: React.ElementType, count?: number | string }[] = [
        { id: 'tots', label: 'Tots', icon: LayoutGrid, count: totalCount },
        { id: 'rebuts', label: 'Rebuts', icon: Inbox, count: totalCount - sentCount },
        { id: 'noLlegits', label: 'No llegits', icon: Mail, count: unreadCount },
        { id: 'enviats', label: 'Enviats', icon: Send, count: sentCount },
    ];

    return (
        <TooltipProvider delayDuration={0}>
            <div className="p-2 grid grid-cols-4 gap-2 border-b border-border flex-shrink-0">
                {filters.map(filter => (
                    <Tooltip key={filter.id}>
                        <TooltipTrigger asChild>
                            <Button variant={activeFilter === filter.id ? 'secondary' : 'ghost'} size="sm" onClick={() => onSetFilter(filter.id)} className="w-full flex items-center justify-center gap-2">
                                <filter.icon className="h-4 w-4" />
                                {filter.id === 'noLlegits' ? (
                                    <span className={`text-xs px-2 py-0.5 rounded-full ${unreadCount > 0 ? 'bg-primary text-primary-foreground' : 'text-muted-foreground bg-muted'}`}>{filter.count}</span>
                                ) : (
                                    <span className="text-xs text-muted-foreground">{filter.count}</span>
                                )}
                            </Button>
                        </TooltipTrigger>
                        <TooltipContent><p>{filter.label}</p></TooltipContent>
                    </Tooltip>
                ))}
            </div>
        </TooltipProvider>
    );
};

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_components/ticketList/TicketListHeader.tsx ===================

"use client";

import React, { useMemo } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { PenSquare, RefreshCw, ChevronDown, Search } from 'lucide-react';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import type { User } from '@supabase/supabase-js';
import type { TeamMember, Permission } from './index';

interface TicketListHeaderProps {
    user: User;
    teamMembers: TeamMember[];
    permissions: Permission[];
    inboxFilter: string;
    onSetInboxFilter: (userId: string) => void;
    onComposeNew: () => void;
    onRefresh: () => void;
    isPendingRefresh: boolean;
    searchTerm: string;
    onSearchChange: (value: string) => void;
}

export const TicketListHeader: React.FC<TicketListHeaderProps> = ({
    user,
    teamMembers,
    permissions,
    inboxFilter,
    onSetInboxFilter,
    onComposeNew,
    onRefresh,
    isPendingRefresh,
    searchTerm,       // ✅ CORRECCIÓ: Afegeix les props que faltaven aquí
    onSearchChange    // ✅ CORRECCIÓ: Afegeix les props que faltaven aquí
}) => {
    const permittedMembers = useMemo(() => {
        const permittedIds = new Set(permissions.map(p => p.target_user_id));
        return teamMembers.filter(m => m.profiles && m.profiles.id !== user.id && permittedIds.has(m.profiles.id));
    }, [permissions, teamMembers, user.id]);

    const selectedInboxName = useMemo(() => {
        if (inboxFilter === 'all') return "Totes les bústies";
        if (inboxFilter === user.id) return "Els meus correus";
        const member = teamMembers.find(m => m.profiles?.id === inboxFilter);
        return member?.profiles?.full_name || "Bústia desconeguda";
    }, [inboxFilter, teamMembers, user.id]);

    return (
        <>
            <div className="p-4 border-b border-border flex justify-between items-center flex-shrink-0">
                <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                        <Button variant="ghost" className="text-lg font-bold p-2 -ml-2">
                            {selectedInboxName}
                            <ChevronDown className="w-5 h-5 ml-2 text-muted-foreground" />
                        </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="start">
                        <DropdownMenuItem onClick={() => onSetInboxFilter('all')}>Totes les bústies</DropdownMenuItem>
                        <DropdownMenuItem onClick={() => onSetInboxFilter(user.id)}>Els meus correus</DropdownMenuItem>
                        {permittedMembers.length > 0 && <DropdownMenuSeparator />}
                        {permittedMembers.map(member => (
                            member.profiles && (
                                <DropdownMenuItem key={member.profiles.id} onClick={() => onSetInboxFilter(member.profiles!.id)}>
                                    {member.profiles.full_name || 'Usuari sense nom'}
                                </DropdownMenuItem>
                            )
                        ))}
                    </DropdownMenuContent>
                </DropdownMenu>
                <div className="flex items-center gap-1">
                    <Button variant="ghost" size="icon" onClick={onComposeNew} title="Redacta"><PenSquare className="w-4 h-4" /></Button>
                    <Button variant="ghost" size="icon" onClick={onRefresh} disabled={isPendingRefresh} title="Actualitza"><RefreshCw className={`w-4 h-4 ${isPendingRefresh ? 'animate-spin' : ''}`} /></Button>
                </div>
            </div>
            
            {/* La barra de cerca ara funciona correctament */}
            <div className="p-2 border-b border-border">
                <div className="relative">
                    <Search className="absolute left-2 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                    <Input
                        placeholder="Cerca a la bústia..."
                        className="pl-8"
                        value={searchTerm}
                        onChange={(e) => onSearchChange(e.target.value)}
                    />
                </div>
            </div>
        </>
    );
};

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_components/ticketList/TicketListItem.tsx ===================

"use client";

import React from 'react';
import { Button } from '@/components/ui/button';
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Trash2 } from 'lucide-react';
import type { Ticket } from '@/types/comunicacio/inbox';
import type { EnrichedTicket } from './index';

const formatTicketDate = (dateString: string) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    const now = new Date();
    const startOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    if (date >= startOfToday) {
        return date.toLocaleTimeString('ca-ES', { hour: '2-digit', minute: '2-digit' });
    } else {
        return date.toLocaleDateString('ca-ES', { day: 'numeric', month: 'short' });
    }
};

const getInitials = (name: string | null | undefined) => {
    if (!name) return '??';
    return name.split(' ').map(n => n[0]).slice(0, 2).join('').toUpperCase();
};

interface TicketListItemProps {
    ticket: EnrichedTicket;
    isSelected: boolean;
    onSelectTicket: (ticket: Ticket) => void;
    onDeleteTicket: (ticket: Ticket) => void;
}

export const TicketListItem: React.FC<TicketListItemProps> = ({ ticket, isSelected, onSelectTicket, onDeleteTicket }) => {
    return (
        <div
            onClick={() => onSelectTicket(ticket)}
            className={`group cursor-pointer border-l-4 relative 
                ${isSelected 
                    ? 'border-primary bg-muted' 
                    : `${ticket.ownerColorClass || 'border-transparent'} hover:bg-muted/50`
                }`
            }
        >
            <div className="p-4 flex items-start gap-4">
                <Avatar className="h-8 w-8 mt-1 flex-shrink-0">
                    <AvatarImage src={ticket.owner?.avatar_url ?? undefined} />
                    <AvatarFallback>{getInitials(ticket.owner?.full_name)}</AvatarFallback>
                </Avatar>
                <div className="flex-1 min-w-0">
                    <div className="flex justify-between items-center mb-1">
                        <p className={`truncate font-semibold ${ticket.status !== 'NoLlegit' ? 'font-normal text-muted-foreground' : ''}`}>{ticket.contacts?.nom || ticket.sender_name || 'Remitent desconegut'}</p>
                        <div className="flex items-center gap-3 text-xs flex-shrink-0 ml-2">
                            {ticket.status === 'NoLlegit' && <span className="w-2 h-2 rounded-full bg-primary animate-pulse"></span>}
                            <span className="text-muted-foreground">{formatTicketDate(ticket.sent_at)}</span>
                        </div>
                    </div>
                    <p className="text-sm font-medium truncate">{ticket.subject}</p>
                    <p className="text-sm text-muted-foreground truncate mt-1">{ticket.preview}</p>
                </div>
            </div>
            <Button variant="ghost" size="icon" className="absolute top-2 right-2 h-7 w-7 opacity-0 group-hover:opacity-100" onClick={(e) => { e.stopPropagation(); onDeleteTicket(ticket); }} title="Elimina">
                <Trash2 className="w-4 h-4 text-destructive" />
            </Button>
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_hooks/useCompose.ts ===================

// Ubicació: /app/(app)/comunicacio/inbox/_hooks/useCompose.ts

import { useState, useEffect, useMemo, useTransition } from 'react';
import { useEditor } from '@tiptap/react';
import StarterKit from '@tiptap/starter-kit';
import TextAlign from '@tiptap/extension-text-align';
import { toast } from "sonner";
import { useTranslations } from 'next-intl';

import { renderTemplate } from '@/lib/utils/templates';
import { sendEmailAction } from '../actions';
import type { Template } from '@/types/comunicacio/inbox';
import type { Contact } from '@/types/crm';
import type { InitialData } from '../_components/ComposeDialog';

// Propietats que el hook necessita del component
interface UseComposeProps {
    templates: Template[];
    contacts: Contact[]; // ✅ Ara rebem els contactes, no els busquem aquí
    initialData: InitialData | null;
    onClose: () => void;
    onEmailSent: () => void;
}

export function useCompose({ templates, contacts, initialData, onClose, onEmailSent }: UseComposeProps) {
    const t = useTranslations('InboxPage');
    const [isSending, startSendTransition] = useTransition();

    const editor = useEditor({
        immediatelyRender: false,
        extensions: [StarterKit, TextAlign.configure({ types: ['heading', 'paragraph'] })],
        editorProps: {
            attributes: {
                class: 'prose dark:prose-invert max-w-none text-base p-4 focus:outline-none h-full border border-input rounded-md min-h-[400px]',
            },
        },
    });

    const [subject, setSubject] = useState('');
    const [selectedContactId, setSelectedContactId] = useState('');
    const [contactSearch, setContactSearch] = useState('');
    const [selectedTemplate, setSelectedTemplate] = useState<Template | null>(null);
    const [variableValues, setVariableValues] = useState<{ [key: string]: string }>({});
    const [debouncedVariableValues, setDebouncedVariableValues] = useState<{ [key: string]: string }>({});

    // Efecte per inicialitzar el diàleg
    useEffect(() => {
        setSelectedContactId(initialData?.contactId || '');
        setSubject(initialData?.subject || '');
        editor?.commands.setContent(initialData?.body || '');
        setSelectedTemplate(null);
        setVariableValues({});
        setDebouncedVariableValues({});
        setContactSearch('');
    }, [initialData, editor]);

    // Efecte debounce per a les variables
    useEffect(() => {
        const handler = setTimeout(() => setDebouncedVariableValues(variableValues), 500);
        return () => clearTimeout(handler);
    }, [variableValues]);

    // Efecte per actualitzar l'assumpte amb la plantilla
    useEffect(() => {
        if (selectedTemplate) {
            setSubject(renderTemplate(selectedTemplate.subject, debouncedVariableValues));
        }
    }, [selectedTemplate, debouncedVariableValues]);

    const finalHtmlBody = useMemo(() => {
        if (selectedTemplate) {
            return renderTemplate(selectedTemplate.body, debouncedVariableValues);
        }
        return editor?.getHTML() || '';
    }, [selectedTemplate, debouncedVariableValues, editor]);

    const filteredContacts = useMemo(() => {
        if (!contactSearch) return contacts;

        // ✅ CORRECCIÓ: Codi més segur i llegible
        const search = contactSearch.toLowerCase();

        return contacts.filter(contact => {
            const hasMatchingName = contact.nom.toLowerCase().includes(search);

            // Comprovem si l'email existeix I si coincideix amb la cerca
            const hasMatchingEmail = !!contact.email && contact.email.toLowerCase().includes(search);

            return hasMatchingName || hasMatchingEmail;
        });
    }, [contacts, contactSearch]);

    const handleTemplateSelect = (templateId: string) => {
        if (!templateId || templateId === 'none') {
            setSelectedTemplate(null);
            setVariableValues({});
            setSubject(initialData?.subject || '');
            editor?.commands.setContent(initialData?.body || '');
            return;
        }
        const template = templates.find(t => t.id.toString() === templateId);
        if (template) {
            setSelectedTemplate(template);
            setVariableValues({});
        }
    };

    const handleSend = () => {
        if (!selectedContactId || !subject || !finalHtmlBody.replace(/<p><\/p>/g, '').trim()) {
            toast.error(t('requiredFieldsErrorTitle'), { description: t('requiredFieldsErrorDescription') });
            return;
        }

        startSendTransition(async () => {
            const result = await sendEmailAction({
                contactId: selectedContactId,
                subject,
                htmlBody: finalHtmlBody,
                isReply: !!initialData?.contactId,
            });

            if (result.success) {
                toast.success(t('toastSuccessTitle'), { description: result.message });
                onClose();
                onEmailSent();
            } else {
                toast.error(t('toastErrorTitle'), { description: result.message });
            }
        });
    };

    // Retornem tots els estats i funcions que el component de UI necessitarà
    return {
        editor,
        subject, setSubject,
        selectedContactId, setSelectedContactId,
        contactSearch, setContactSearch,
        selectedTemplate, handleTemplateSelect,
        variableValues, setVariableValues,
        finalHtmlBody,
        filteredContacts,
        isSending,
        handleSend,
    };
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/inbox/_hooks/useInbox.ts ===================

// Ubicació: /app/(app)/comunicacio/inbox/_hooks/useInbox.ts

import { useState, useEffect, useMemo, useTransition, useCallback } from 'react';
import { usePathname, useRouter, useSearchParams } from 'next/navigation';
import { toast } from "sonner";
import { useDebounce } from 'use-debounce';
import type { User } from '@supabase/supabase-js';
import type { Contact } from '@/types/crm'; // Importa el tipus Contact

import {
    deleteTicketAction,
    markTicketAsReadAction,
    linkTicketsToContactAction, // ✅ Importem la nova acció
    getTicketBodyAction,
    loadMoreTicketsAction,
} from '../actions';
import type { Ticket, Template, TicketFilter } from '@/types/comunicacio/inbox';
import type { InitialData as ComposeInitialData } from '../_components/ComposeDialog';

// ✅ Definim un tipus clar per als membres de l'equip
type TeamMember = {
    profiles: {
        id: string;
        full_name: string | null;
        avatar_url: string | null;
    } | null;
};

// Tipus per a les props que el hook necessita
type UseInboxProps = {
    user: User;
    initialTickets: Ticket[];
    initialTemplates: Template[];
    initialReceivedCount: number;
    initialSentCount: number;
    initialSelectedTicket: Ticket | null;
    initialSelectedTicketBody: string | null;
    teamMembers: TeamMember[]; // ✅ Canviem 'any[]' pel nostre tipus
    t: (key: string, values?: Record<string, string | number | Date>) => string;
};

// Funció auxiliar per a obtenir les inicials
const getInitials = (name: string | null | undefined): string => {
    if (!name) return '??';
    return name.split(' ').map(n => n[0]).slice(0, 2).join('').toUpperCase();
};

export function useInbox({
    user,
    initialTickets,
    initialReceivedCount,
    initialSentCount,
    initialSelectedTicket,
    initialSelectedTicketBody,
    teamMembers,
    t
}: UseInboxProps) {
    const router = useRouter();
    const pathname = usePathname();
    const searchParams = useSearchParams();

    // --- ESTATS ---
    const [tickets, setTickets] = useState<Ticket[]>(initialTickets || []);
    const [selectedTicket, setSelectedTicket] = useState<Ticket | null>(initialSelectedTicket);
    const [ticketToDelete, setTicketToDelete] = useState<Ticket | null>(null);
    const [activeFilter, setActiveFilter] = useState<TicketFilter>('rebuts');
    const [composeState, setComposeState] = useState<{ open: boolean; initialData: ComposeInitialData | null }>({ open: false, initialData: null });
    const [selectedTicketBody, setSelectedTicketBody] = useState<string | null>(initialSelectedTicketBody);
    const [isBodyLoading, setIsBodyLoading] = useState(false);
    const [page, setPage] = useState(2);
    const [hasMore, setHasMore] = useState(initialTickets.length > 0);
    const [searchTerm, setSearchTerm] = useState(searchParams.get('q') || '');
    const [debouncedSearchTerm] = useDebounce(searchTerm, 500);
    const [isPending, startTransition] = useTransition();
    const [isContactPanelOpen, setIsContactPanelOpen] = useState(false);
    const [inboxFilter, setInboxFilter] = useState<string>(user.id); // Per defecte, la bústia de l'usuari


    // --- DADES MEMORITZADES ---
    const counts = useMemo(() => ({
        unread: tickets.filter(t => (t.type === 'rebut' || !t.type) && t.status === 'NoLlegit').length,
        received: initialReceivedCount,
        sent: initialSentCount,
    }), [tickets, initialReceivedCount, initialSentCount]);

    const filteredTickets = useMemo(() => {
        let displayTickets = tickets;
        if (inboxFilter !== 'all') {
            displayTickets = displayTickets.filter(t => t.user_id === inboxFilter);
        }
        if (activeFilter === 'rebuts') return displayTickets.filter(t => t.type === 'rebut' || !t.type);
        if (activeFilter === 'enviats') return displayTickets.filter(t => t.type === 'enviat');
        if (activeFilter === 'noLlegits') return displayTickets.filter(t => (t.type === 'rebut' || !t.type) && t.status === 'NoLlegit');
        return displayTickets;
    }, [tickets, activeFilter, inboxFilter]);

    const userColorMap = useMemo(() => {
        const map = new Map<string, string>();
        const colors = ['border-blue-500', 'border-green-500', 'border-yellow-500', 'border-purple-500', 'border-pink-500', 'border-indigo-500'];
        teamMembers.forEach((member, index) => {
            if (member.profiles?.id) {
                map.set(member.profiles.id, colors[index % colors.length]);
            }
        });
        return map;
    }, [teamMembers]);

    const enrichedTickets = useMemo(() => {
        return filteredTickets.map(ticket => {
            const ownerProfile = teamMembers.find(m => m.profiles?.id === ticket.user_id)?.profiles;
            const owner = ownerProfile ? {
                full_name: ownerProfile.full_name,
                avatar_url: ownerProfile.avatar_url,
                initials: getInitials(ownerProfile.full_name)
            } : null;
            return { ...ticket, owner, ownerColorClass: ownerProfile ? userColorMap.get(ownerProfile.id) : 'border-transparent' };
        });
    }, [filteredTickets, teamMembers, userColorMap]);

    const handleSelectTicket = useCallback(async (ticket: Ticket | null) => {
        // Cas 1: Si es passa 'null', netegem la selecció (útil per a vistes mòbils).
        if (!ticket) {
            setSelectedTicket(null);
            setSelectedTicketBody(null);
            return;
        }

        // Cas 2: Si es fa clic al mateix tiquet que ja està seleccionat, no fem res.
        if (selectedTicket?.id === ticket.id) {
            return;
        }

        // Cas 3: Seleccionem un nou tiquet.
        setSelectedTicket(ticket);
        setIsBodyLoading(true);
        setSelectedTicketBody(null);

        // Carreguem el cos del correu de manera asíncrona.
        try {
            const { body } = await getTicketBodyAction(ticket.id);
            setSelectedTicketBody(body);
        } catch (error) {
            console.error("Error en carregar el cos del tiquet:", error);
            setSelectedTicketBody(`<p>${t('errorLoadingBody')}</p>`);
        } finally {
            setIsBodyLoading(false);
        }

        // Si el tiquet estava com a 'NoLlegit', l'actualitzem.
        if (ticket.status === 'NoLlegit') {
            // Acció optimista: actualitzem la UI a l'instant.
            setTickets(currentTickets =>
                currentTickets.map(t =>
                    t.id === ticket.id ? { ...t, status: 'Llegit' } : t
                )
            );
            // Acció del servidor: enviem el canvi a la base de dades.
            markTicketAsReadAction(ticket.id);
        }
    }, [selectedTicket?.id, t]); // Les dependències són correctes.

    const handleDeleteTicket = useCallback(() => {
        if (!ticketToDelete) return;
        startTransition(async () => {
            const result = await deleteTicketAction(ticketToDelete.id);
            if (result.success) {
                toast.success(t('toast.success'), { description: result.message });
                setTickets(prev => prev.filter(t => t.id !== ticketToDelete.id));
                if (selectedTicket?.id === ticketToDelete.id) {
                    setSelectedTicket(null);
                    setSelectedTicketBody(null);
                }
                setTicketToDelete(null);
            } else {
                toast.error(t('toast.error'), { description: result.message });
            }
        });
    }, [ticketToDelete, selectedTicket?.id, t]);

    const handleLoadMore = useCallback(() => {
        startTransition(async () => {
            const effectiveFilter = activeFilter === "noLlegits" ? "rebuts" : activeFilter;
            const newTickets = await loadMoreTicketsAction(page, effectiveFilter, inboxFilter);
            if (newTickets.length > 0) {
                setTickets(p => [...p, ...newTickets]);
                setPage(p => p + 1);
            } else {
                setHasMore(false);
            }
        });
    }, [page, activeFilter, inboxFilter]);

    // ✅ LÒGICA CORREGIDA
    const handleSaveContact = useCallback((newlyCreatedContact: Contact, originalTicket: Ticket) => {
        // Aquesta funció ara rep el contacte que s'acaba de crear
        // i el tiquet original per a saber quin email ha de vincular.
        startTransition(async () => {
            const result = await linkTicketsToContactAction(newlyCreatedContact.id, originalTicket.sender_email);

            toast[result.success ? 'success' : 'error'](result.message);

            // Important: refresquem les dades des del servidor per a actualitzar tota la UI
            if (result.success) {
                router.refresh();
            }
        });
    }, [router]);

    const handleComposeNew = useCallback(() => setComposeState({ open: true, initialData: null }), []);

    const handleReply = useCallback((ticket: Ticket) => {
        const date = new Date(ticket.sent_at).toLocaleString("ca-ES");
        const name = ticket.contacts?.nom || ticket.sender_name || "";
        const quotedBody = `<br><br><p>${t("replyHeader", { date, name })}</p><blockquote>${selectedTicketBody ?? ""}</blockquote>`;
        setComposeState({
            open: true,
            initialData: {
                contactId: ticket.contact_id ?? "",
                to: ticket.contacts?.email ?? ticket.sender_email ?? "",
                subject: `Re: ${ticket.subject}`,
                body: quotedBody,
            },
        });
    }, [selectedTicketBody, t]);

    const handleRefresh = useCallback(() => {
        startTransition(() => {
            router.refresh();
            toast.info(t("inboxUpdatedToast"));
        });
    }, [router, t]);

    // --- EFECTES SECUNDARIS ---
    useEffect(() => {
        const params = new URLSearchParams(Array.from(searchParams.entries()));
        if (debouncedSearchTerm) {
            params.set('q', debouncedSearchTerm);
        } else {
            params.delete('q');
        }
        startTransition(() => router.replace(`${pathname}?${params.toString()}`));
    }, [debouncedSearchTerm, pathname, router, searchParams]);

    // --- VALORS RETORNATS ---
    return {
        // Estats
        selectedTicket,
        ticketToDelete,
        activeFilter,
        composeState,
        selectedTicketBody,
        isBodyLoading,
        hasMore,
        searchTerm,
        isPending,
        isContactPanelOpen,
        inboxFilter,

        // Dades processades
        counts,
        enrichedTickets,

        // Setters i Handlers
        setTicketToDelete,
        setActiveFilter,
        setComposeState,
        setSearchTerm,
        setIsContactPanelOpen,
        setInboxFilter,
        handleSelectTicket,
        handleDeleteTicket,
        handleLoadMore,
        handleSaveContact,
        handleComposeNew,
        handleReply,
        handleRefresh,
    };
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/actions.ts ===================

// Ubicació: /app/(app)/comunicacio/marketing/actions.ts

"use server";

import { revalidatePath } from "next/cache";
import { validateUserSession } from "@/lib/supabase/session"; // ✅ Importem el nostre helper!
import type { Campaign } from '../page';

// ... (El teu tipus 'Strategy' es manté igual) ...
interface Strategy {
    name: string;
    type: string;
    target_audience: string;
    description: string;
}

/**
 * @summary Funció d'ajuda interna per centralitzar les crides a l'API de Gemini.
 * @private
 */
async function _callGeminiApi(prompt: string): Promise<{ data: string | null, error: string | null }> {
    if (!process.env.GEMINI_API_KEY) {
        return { data: null, error: "La clau de l'API de Gemini no està configurada." };
    }
    try {
        const payload = { contents: [{ role: "user", parts: [{ text: prompt }] }] };
        const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${process.env.GEMINI_API_KEY}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });

        if (!response.ok) {
            console.error("Error de l'API de Gemini:", await response.text());
            throw new Error(`Error de l'API de Gemini: ${response.statusText}`);
        }

        const result = await response.json();
        
        // Assegurem que la resposta té el format esperat abans d'accedir-hi
        const content = result?.candidates?.[0]?.content?.parts?.[0]?.text;
        if (typeof content !== 'string') {
            throw new Error("La resposta de l'API de Gemini no té el format esperat.");
        }

        return { data: content, error: null };
    } catch (error: unknown) {
        const message = error instanceof Error ? error.message : 'Error desconegut';
        console.error("Error en la crida a Gemini:", message);
        return { data: null, error: message };
    }
}

/**
 * @summary Genera idees d'estratègies de màrqueting. Ara és molt més simple.
 */
export async function generateStrategiesAction(goal: string): Promise<{ data: Strategy[] | null, error: string | null }> {
    const prompt = `
        Ets un director de màrqueting expert per a autònoms i PIMES.
        Un client té aquest objectiu: "${goal}".
        Proposa 3 estratègies de campanya de màrqueting diferents i creatives.
        Respon només amb un array JSON amb camps: 'name', 'type', 'target_audience', 'description'.
    `;
    
    const { data: rawText, error } = await _callGeminiApi(prompt);
    if (error || !rawText) {
        return { data: null, error: error || "No s'ha rebut resposta de l'IA." };
    }

    try {
        // ✅ CORRECCIÓ: Netejem la resposta de l'IA abans de parsejar-la.
        const cleanedJson = rawText.replace(/```json|```/g, '').trim();
        const strategies: Strategy[] = JSON.parse(cleanedJson);
        return { data: strategies, error: null };
    } catch (parseError) {
        console.error("Error en parsejar la resposta JSON de l'IA:", parseError);
        return { data: null, error: "La resposta de l'IA no tenia un format JSON vàlid." };
    }
}

/**
 * @summary Redacta el contingut d'una campanya. Ara també utilitza el helper.
 */
export async function draftContentAction(goal: string, strategy: Strategy): Promise<{ data: string | null, error: string | null }> {
    const prompt = `Basant-te en l'objectiu "${goal}" i l'estratègia "${strategy.name}", escriu el contingut complet per a la campanya de tipus "${strategy.type}".`;
    
    // La crida retorna directament el que necessitem
    return await _callGeminiApi(prompt);
}


/**
 * @summary Desa una nova campanya, ara utilitzant el helper de sessió.
 */
export async function saveCampaignAction(campaignData: Partial<Campaign>, goal: string) {
    // ✅ Utilitzem el helper per validar la sessió i obtenir les dades.
    const sessionResult = await validateUserSession();
    if ('error' in sessionResult) {
        return { data: null, error: sessionResult.error };
    }
    const { supabase, user, activeTeamId } = sessionResult;

    const dataToInsert = {
        user_id: user.id,
        team_id: activeTeamId,
        name: campaignData.name,
        type: campaignData.type,
        status: 'Planificat' as const, // Assegurem el tipus
        campaign_date: new Date().toISOString().split('T')[0],
        goal: goal,
        target_audience: campaignData.target_audience,
        content: campaignData.content,
    };

    const { data, error } = await supabase
        .from('campaigns')
        .insert(dataToInsert)
        .select()
        .single();
        
    revalidatePath('/comunicacio/marketing');
    return { data, error };
}

// updateCampaignAction es manté pràcticament igual, ja és prou simple.
export async function updateCampaignAction(campaignId: string, name: string, content: string) {
    const sessionResult = await validateUserSession();
     if ('error' in sessionResult) {
        return { data: null, error: sessionResult.error };
    }
    const { supabase } = sessionResult;

    const { error } = await supabase
        .from('campaigns')
        .update({ name, content })
        .eq('id', campaignId);
        
    revalidatePath('/comunicacio/marketing');
    return { error };
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/page.tsx ===================

/**
 * @file page.tsx (Marketing)
 * @summary Punt d'entrada per a la pàgina de Màrqueting, implementant React Suspense.
 */

import { Suspense } from 'react';
import type { Metadata } from 'next';
import { MarketingData } from './_components/MarketingData';
import { MarketingSkeleton } from './_components/MarketingSkeleton';

// Les metadades es queden igual.
export const metadata: Metadata = {
  title: 'Marketing | Ribot',
};

// --- Definició de Tipus de Dades ---
// Aquests tipus asseguren la consistència de les dades entre el servidor, el client i la base de dades.

export type Campaign = {
  id: string;
  name: string;
  type: string;
  status: 'Completat' | 'Actiu' | 'Planificat';
  campaign_date: string; // Utilitzem string per a una fàcil serialització.
  goal: string;
  target_audience: string;
  content: string;
};

export type Kpis = {
  totalLeads: number;
  conversionRate: number;
};

/**
* @function MarketingPage
* @summary Aquesta pàgina ja no és 'async'. Mostra un esquelet de càrrega
* mentre el component 'MarketingData' va a buscar les dades al servidor.
*/
export default function MarketingPage() {
 return (
   <Suspense fallback={<MarketingSkeleton />}>
     <MarketingData />
   </Suspense>
 );
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/_components/AICampaignWizard.tsx ===================

// Ubicació: /app/(app)/comunicacio/marketing/_components/AICampaignWizard.tsx

"use client";

import React from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { AnimatePresence } from "framer-motion";
import { useTranslations } from 'next-intl';
import { Wand2 } from "lucide-react";

import { useAICampaignWizard } from "../_hooks/useAICampaignWizard";
import { WizardStep1_Goal } from "./wizard/WizardStep1_Goal";
import { WizardStep2_SelectStrategy } from "./wizard/WizardStep2_SelectStrategy";
import { WizardStep3_Finalize } from "./wizard/WizardStep3_Finalize";

interface AICampaignWizardProps {
    open: boolean;
    onOpenChange: (open: boolean) => void;
    onCampaignCreated: () => void;
}

const WizardProgressBar = ({ step }: { step: number }) => (
    <div className="flex items-center pt-4">
        {[1, 2, 3].map((s) => (
            <React.Fragment key={s}>
                <div className="flex flex-col items-center">
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center transition-all ${step >= s ? "bg-primary text-primary-foreground" : "bg-muted"}`}>
                        {s}
                    </div>
                </div>
                {s < 3 && <div className={`flex-1 h-0.5 transition-all ${step > s ? "bg-primary" : "bg-muted"}`} />}
            </React.Fragment>
        ))}
    </div>
);

export const AICampaignWizard: React.FC<AICampaignWizardProps> = ({ open, onOpenChange, onCampaignCreated }) => {
  const t = useTranslations('AICampaignWizard');
  const {
      step, goal, strategies, selectedStrategy, isPending, processingIndex,
      setStep, setGoal, setSelectedStrategy, resetWizard,
      handleGenerateStrategies, handleDraftContent, handleSaveCampaign
  } = useAICampaignWizard({ 
      onCampaignCreated, 
      onClose: () => onOpenChange(false), 
      t 
  });

  return (
      <Dialog open={open} onOpenChange={(isOpen) => { if (!isOpen) resetWizard(); onOpenChange(isOpen); }}>
          <DialogContent className="glass-effect max-w-2xl min-h-[400px]">
              <DialogHeader>
                  <DialogTitle className="flex items-center gap-2 text-2xl">
                      <Wand2 className="text-primary" /> {t('title')}
                  </DialogTitle>
                  <WizardProgressBar step={step} />
              </DialogHeader>

              <AnimatePresence mode="wait">
                  {step === 1 && (
                      <WizardStep1_Goal
                          goal={goal}
                          setGoal={setGoal}
                          onGenerate={handleGenerateStrategies}
                          isPending={isPending}
                          t={t}
                      />
                  )}

                  {step === 2 && (
                      <WizardStep2_SelectStrategy
                          strategies={strategies}
                          onSelect={handleDraftContent}
                          onBack={() => setStep(1)}
                          isPending={isPending}
                          processingIndex={processingIndex}
                          t={t}
                      />
                  )}
                  
                  {step === 3 && selectedStrategy && (
                      <WizardStep3_Finalize
                          strategy={selectedStrategy}
                          // ✅ CORRECCIÓ: Passem directament la funció 'setSelectedStrategy'
                          // que ve del hook 'useState'.
                          onStrategyChange={setSelectedStrategy}
                          onSave={handleSaveCampaign}
                          onBack={() => setStep(2)}
                          isPending={isPending}
                          t={t}
                      />
                  )}
              </AnimatePresence>
          </DialogContent>
      </Dialog>
  );
};

// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/_components/CampaignCalendar.tsx ===================

/**
 * @file CampaignCalendar.tsx
 * @summary Component de client que renderitza un calendari visual per a les campanyes de màrqueting.
 * Permet a l'usuari veure les campanyes organitzades per mes i seleccionar-ne una per veure'n els detalls.
 */

"use client"; // És un component de client perquè gestiona l'estat del mes actual i la interacció de l'usuari.

import React, { useState, useMemo, FC } from 'react';
import { Button } from '@/components/ui/button';
import { ChevronLeft, ChevronRight } from 'lucide-react';
// Importem funcions de la llibreria 'date-fns' per a la manipulació de dates. És molt potent i lleugera.
import { format, startOfMonth, endOfMonth, startOfWeek, endOfWeek, eachDayOfInterval, isSameMonth, isSameDay, addMonths, subMonths } from 'date-fns';
import { ca, es, enUS } from 'date-fns/locale';
import { type Campaign } from '../page'; // Tipus de dades per a una campanya.
import { useLocale, useTranslations } from 'next-intl';

// Interfície de propietats del component.
interface CampaignCalendarProps {
  campaigns: Campaign[]; // Llista de campanyes a mostrar.
  onCampaignSelect: (campaign: Campaign) => void; // Funció per notificar quan es fa clic a una campanya.
}

export const CampaignCalendar: FC<CampaignCalendarProps> = ({ campaigns, onCampaignSelect }) => {
  // Estat per controlar quin mes s'està visualitzant actualment.
  const [currentMonth, setCurrentMonth] = useState(new Date());
  const t = useTranslations('CampaignCalendar');
  const locale = useLocale();

  // --- Càlculs de dates per construir la graella del calendari ---
  const monthStart = startOfMonth(currentMonth);
  const monthEnd = endOfMonth(monthStart);
  // Per tenir una graella completa, calculem des de l'inici de la primera setmana fins al final de l'última.
  const startDate = startOfWeek(monthStart, { weekStartsOn: 1 }); // Comencem la setmana en dilluns.
  const endDate = endOfWeek(monthEnd, { weekStartsOn: 1 });
  // Generem un array amb tots els dies que s'han de mostrar a la graella.
  const days = eachDayOfInterval({ start: startDate, end: endDate });

  /**
   * @constant campaignsByDate
   * @summary Memoitzem el càlcul per agrupar les campanyes per data.
   * `useMemo` evita que aquest càlcul es torni a fer en cada renderització si les campanyes no han canviat.
   * El resultat és un objecte on cada clau és una data (ex: '2025-09-15') i el valor és un array de campanyes.
   */
  const campaignsByDate = useMemo(() => {
    return campaigns.reduce((acc, campaign) => {
      const date = format(new Date(campaign.campaign_date), 'yyyy-MM-dd');
      if (!acc[date]) acc[date] = [];
      acc[date].push(campaign);
      return acc;
    }, {} as Record<string, Campaign[]>);
  }, [campaigns]);
  // ✅ 3. Funció per obtenir l'objecte de localització correcte per a 'date-fns'.
  const getDateLocale = () => {
    switch (locale) {
      case 'es': return es;
      case 'en': return enUS;
      default: return ca;
    }
  }
  // ✅ 4. Obtenim els dies de la setmana traduïts.
  const daysOfWeek = [
    t('daysOfWeek.monday'), t('daysOfWeek.tuesday'), t('daysOfWeek.wednesday'),
    t('daysOfWeek.thursday'), t('daysOfWeek.friday'), t('daysOfWeek.saturday'),
    t('daysOfWeek.sunday')
  ];
  return (
        <div className="glass-effect rounded-xl p-4">
          <div className="flex justify-between items-center mb-4">
            <Button variant="ghost" size="icon" onClick={() => setCurrentMonth(subMonths(currentMonth, 1))}><ChevronLeft /></Button>
            {/* ✅ 5. Utilitzem la localització correcta per al format de la data. */}
            <h3 className="text-lg font-semibold capitalize">{format(currentMonth, "MMMM yyyy", { locale: getDateLocale() })}</h3>
            <Button variant="ghost" size="icon" onClick={() => setCurrentMonth(addMonths(currentMonth, 1))}><ChevronRight /></Button>
          </div>
          <div className="grid grid-cols-7 gap-1 text-center text-xs text-muted-foreground">
            {/* ✅ 6. Renderitzem els dies de la setmana traduïts. */}
            {daysOfWeek.map(day => <div key={day} className="font-bold">{day}</div>)}
          </div>
          <div className="grid grid-cols-7 gap-1 mt-2">
            {days.map(day => (
              <div key={day.toString()} className={`h-24 rounded-lg p-1 overflow-hidden ${isSameMonth(day, monthStart) ? 'bg-background/20' : 'bg-background/5'}`}>
                <time dateTime={format(day, 'yyyy-MM-dd')} className={`text-xs ${isSameDay(day, new Date()) ? 'font-bold text-primary' : ''}`}>{format(day, 'd')}</time>
                <div className="mt-1 space-y-1">
                  {(campaignsByDate[format(day, 'yyyy-MM-dd')] || []).map(campaign => (
                    <div key={campaign.id} onClick={() => onCampaignSelect(campaign)} className="text-xs bg-primary/20 text-primary-foreground p-1 rounded truncate cursor-pointer hover:bg-primary/40">{campaign.name}</div>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>
      );
    };

// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/_components/CampaignDetailDialog.tsx ===================

// Ubicació: /app/(app)/comunicacio/marketing/_components/CampaignDetailDialog.tsx

"use client";

import React, { useState, useEffect, useTransition, FC } from 'react';
import { toast } from "sonner";
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Loader2 } from 'lucide-react';
import { type Campaign } from '../page';
import { updateCampaignAction } from '../actions';
import { format } from 'date-fns';
import { ca, es, enUS } from 'date-fns/locale';
import { useTranslations } from 'next-intl';
import { useLocale } from 'next-intl';

interface CampaignDetailDialogProps {
    campaign: Campaign | null;
    open: boolean;
    onOpenChange: (open: boolean) => void;
    onCampaignUpdated: () => void;
}

export const CampaignDetailDialog: FC<CampaignDetailDialogProps> = ({ campaign, open, onOpenChange, onCampaignUpdated }) => {
    const t = useTranslations('Marketing');
    const locale = useLocale();

    const [editedCampaign, setEditedCampaign] = useState<Campaign | null>(null);
    const [isPending, startTransition] = useTransition();

    useEffect(() => {
        // ✅ CORRECCIÓ: Només actualitzem l'estat intern si la 'prop' 'campaign' canvia.
        // Això evita que l'estat local es reseteji a cada render.
        setEditedCampaign(campaign);
    }, [campaign]);

    const handleSave = () => {
        if (!editedCampaign) return;
        startTransition(async () => {
            const { error } = await updateCampaignAction(editedCampaign.id, editedCampaign.name, editedCampaign.content);
            if (error) {
                toast.error('Error', { description: t('toastErrorUpdate') });
            } else {
                toast.success('Èxit!', { description: t('toastSuccessUpdate') });
                onCampaignUpdated();
                onOpenChange(false);
            }
        });
    };

    const getDateLocale = () => {
        switch(locale) {
            case 'es': return es;
            case 'en': return enUS;
            default: return ca;
        }
    }

    // ✅ CORRECCIÓ: No fem un retorn anticipat de 'null' si la campanya no existeix.
    // El component Dialog s'encarrega de no renderitzar el contingut si 'open' és fals.
    // Això garanteix que les animacions de sortida del diàleg funcionin correctament.

    return (
        <Dialog open={open} onOpenChange={onOpenChange}>
            <DialogContent className="glass-effect max-w-4xl h-[90vh] flex flex-col">
                {/* Només renderitzem el contingut si tenim una campanya per editar */}
                {editedCampaign && (
                    <>
                        <DialogHeader>
                            <DialogTitle className="text-2xl">{t('detailDialogTitle')}</DialogTitle>
                            <div className="flex items-center gap-4 pt-2 text-sm text-muted-foreground">
                                <Badge variant="outline" className={undefined}>{editedCampaign.type}</Badge>
                                <span>|</span>
                                <span>{t('detailDialogScheduledFor')}: {format(new Date(editedCampaign.campaign_date), "d MMMM yyyy", { locale: getDateLocale() })}</span>
                            </div>
                        </DialogHeader>
                        <div className="flex-1 flex flex-col gap-6 overflow-y-auto pr-2 py-4">
                            <div className="space-y-2">
                                <Label htmlFor="campaignName" className="font-semibold">{t('detailDialogNameLabel')}</Label>
                                <Input
                                    id="campaignName"
                                    value={editedCampaign.name}
                                    onChange={(e) => setEditedCampaign(c => c ? { ...c, name: e.target.value } : null)}
                                    className="text-lg"
                                />
                            </div>
                            <div className="space-y-2">
                                <Label htmlFor="campaignAudience" className="font-semibold">{t('detailDialogAudienceLabel')}</Label>
                                <Input
                                    id="campaignAudience"
                                    value={editedCampaign.target_audience}
                                    disabled
                                />
                            </div>
                            <div className="space-y-2 flex-1 flex flex-col">
                                <Label htmlFor="campaignContent" className="font-semibold">{t('detailDialogContentLabel')}</Label>
                                <Textarea
                                    id="campaignContent"
                                    value={editedCampaign.content}
                                    onChange={(e) => setEditedCampaign(c => c ? { ...c, content: e.target.value } : null)}
                                    className="flex-1 text-base"
                                    rows={15}
                                />
                            </div>
                        </div>
                        <DialogFooter className="pt-4 border-t border-border">
                            <Button variant="ghost" onClick={() => onOpenChange(false)}>Tancar</Button>
                            <Button onClick={handleSave} disabled={isPending}>
                                {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                                {t('saveChangesButton')}
                            </Button>
                        </DialogFooter>
                    </>
                )}
            </DialogContent>
        </Dialog>
    );
};

// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/_components/CampaignList.tsx ===================

/**
 * @file CampaignList.tsx
 * @summary Component de client purament presentacional per a la llista de campanyes.
 * ✅ NOU: Ara està totalment internacionalitzat.
 */

"use client";

import React, { FC } from 'react';
import { Badge } from '@/components/ui/badge';
// ✅ CORRECCIÓ: Importem 'format' des de l'arrel i totes les localitzacions des de 'date-fns/locale'.
import { format } from 'date-fns';
import { ca, es, enUS } from 'date-fns/locale';
import { useLocale, useTranslations } from 'next-intl';
import { type Campaign } from '../page';

const statusColors: Record<string, string> = { 'Completat': 'bg-green-500/20 text-green-300', 'Actiu': 'bg-blue-500/20 text-blue-300', 'Planificat': 'bg-yellow-500/20 text-yellow-300' };

interface CampaignListProps {
  campaigns: Campaign[];
  onCampaignSelect: (campaign: Campaign) => void;
}

export const CampaignList: FC<CampaignListProps> = ({ campaigns, onCampaignSelect }) => {
  const t = useTranslations('Marketing');
  const locale = useLocale();
  
  // Aquesta funció retorna l'objecte de localització correcte per a 'date-fns' basant-se en l'idioma actiu.
  const getDateLocale = () => {
    switch(locale) {
      case 'es': return es;
      case 'en': return enUS;
      default: return ca;
    }
  }

  return (
    <div className="glass-effect rounded-xl overflow-hidden">
      <table className="w-full text-left">
        <thead className="bg-white/5"><tr className="border-b border-border"><th className="p-4 font-semibold">{t('campaignListHeader')}</th><th className="p-4 font-semibold hidden md:table-cell">{t('typeListHeader')}</th><th className="p-4 font-semibold">{t('statusListHeader')}</th><th className="p-4 font-semibold hidden md:table-cell">{t('dateListHeader')}</th></tr></thead>
        <tbody>
          {campaigns.map(c => (
            <tr key={c.id} className="border-t border-white/10 hover:bg-white/5 transition-colors cursor-pointer" onClick={() => onCampaignSelect(c)}>
              <td className="p-4 font-medium">{c.name}</td>
              <td className="p-4 text-gray-300 hidden md:table-cell">{c.type}</td>
              <td className="p-4"><Badge className={statusColors[c.status]} variant={undefined}>{c.status}</Badge></td>
              <td className="p-4 text-gray-300 hidden md:table-cell">{format(new Date(c.campaign_date), "d MMM, yyyy", { locale: getDateLocale() })}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};



// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/_components/marketing-client.tsx ===================

// Ubicació: /app/(app)/comunicacio/marketing/_components/MarketingClient.tsx

"use client";

import React from 'react';
import { motion } from 'framer-motion';
import { useTranslations } from 'next-intl';
import { Button } from '@/components/ui/button';
import { Sparkles, List, Calendar, Target, BarChart2, CheckCircle } from 'lucide-react';

import { useMarketing } from '../_hooks/useMarketing'; // ✅ Importem el nou hook
import type { Campaign, Kpis } from '../page';

// ✅ Importem els components fills
import { MetricCard } from './MetricCard';
import { CampaignList } from './CampaignList';
import { CampaignCalendar } from './CampaignCalendar';
import { CampaignDetailDialog } from './CampaignDetailDialog';
import { AICampaignWizard } from './AICampaignWizard';


export function MarketingClient({ initialKpis, initialCampaigns }: { initialKpis: Kpis, initialCampaigns: Campaign[] }) {
    const t = useTranslations('Marketing');
    const {
        view,
        isWizardOpen,
        selectedCampaign,
        setView,
        setIsWizardOpen,
        handleRefreshData,
        handleOpenWizard,
        handleSelectCampaign,
    } = useMarketing(); // ✅ Tota la lògica ve del hook

    return (
        <>
            <AICampaignWizard 
                open={isWizardOpen} 
                onOpenChange={setIsWizardOpen} 
                onCampaignCreated={handleRefreshData} 
            />
            <CampaignDetailDialog 
                open={!!selectedCampaign} 
                onOpenChange={(isOpen) => !isOpen && handleSelectCampaign(null)} 
                campaign={selectedCampaign} 
                onCampaignUpdated={handleRefreshData} 
            />

            <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} className="space-y-8">
                <div className="flex justify-between items-center">
                    <h1 className="text-3xl font-bold">{t('title')}</h1>
                    <Button onClick={handleOpenWizard}>
                        <Sparkles className="w-4 h-4 mr-2" /> {t('createCampaignButton')}
                    </Button>
                </div>
                
                <div className="flex flex-col md:flex-row gap-6">
                    <MetricCard title={t('kpiNewContacts')} value={initialKpis.totalLeads} icon={<Target className="text-purple-400" />} />
                    <MetricCard title={t('kpiConversionRate')} value={`${initialKpis.conversionRate.toFixed(1)}%`} icon={<CheckCircle className="text-purple-400" />} />
                    <MetricCard title={t('kpiInteraction')} value="N/A" icon={<BarChart2 className="text-purple-400" />} />
                </div>
                
                <div className="flex justify-between items-center mt-8">
                    <h2 className="text-2xl font-semibold">{t('yourCampaignsTitle')}</h2>
                    <div className="flex gap-2">
                        <Button variant={view === 'list' ? 'secondary' : 'ghost'} size="icon" onClick={() => setView('list')}><List className="h-4 w-4" /></Button>
                        <Button variant={view === 'calendar' ? 'secondary' : 'ghost'} size="icon" onClick={() => setView('calendar')}><Calendar className="h-4 w-4" /></Button>
                    </div>
                </div>

                {initialCampaigns.length === 0 ? (
                    <p className="text-center text-gray-400 p-8">{t('noCampaignsMessage')}</p>
                ) : view === 'list' ? (
                    <CampaignList campaigns={initialCampaigns} onCampaignSelect={handleSelectCampaign} />
                ) : (
                    <CampaignCalendar campaigns={initialCampaigns} onCampaignSelect={handleSelectCampaign} />
                )}
            </motion.div>
        </>
    );
};

// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/_components/MarketingData.tsx ===================

// Ubicació: /app/(app)/comunicacio/marketing/_components/MarketingData.tsx

import { validatePageSession } from '@/lib/supabase/session'; // ✅ Importem el helper correcte
import { MarketingClient } from './marketing-client';
import type { Campaign, Kpis } from '../page';

export async function MarketingData() {
    // ✅ La validació de sessió és ara una sola línia!
    const { supabase, activeTeamId } = await validatePageSession();

    const { data, error } = await supabase.rpc('get_marketing_page_data', {
        p_team_id: activeTeamId 
    });

    if (error) {
        console.error("Error en obtenir les dades de màrqueting:", error);
        return <MarketingClient initialKpis={{ totalLeads: 0, conversionRate: 0 }} initialCampaigns={[]} />;
    }
    
    const kpis: Kpis = data?.kpis || { totalLeads: 0, conversionRate: 0 };
    const campaigns: Campaign[] = data?.campaigns || [];

    return <MarketingClient initialKpis={kpis} initialCampaigns={campaigns} />;
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/_components/MarketingSkeleton.tsx ===================

"use client";

import React from 'react';

/**
 * @summary Mostra un esquelet de càrrega per a la pàgina de Màrqueting.
 */
export const MarketingSkeleton: React.FC = () => (
    <div className="space-y-8 animate-pulse">
        {/* Esquelet per a la capçalera */}
        <div className="flex justify-between items-center">
            <div className="h-9 bg-muted rounded-lg w-1/3"></div>
            <div className="h-10 bg-muted rounded-lg w-1/4"></div>
        </div>

        {/* Esquelet per a les targetes de KPI */}
        <div className="flex flex-col md:flex-row gap-6">
            <div className="h-24 bg-muted rounded-xl flex-1"></div>
            <div className="h-24 bg-muted rounded-xl flex-1"></div>
            <div className="h-24 bg-muted rounded-xl flex-1"></div>
        </div>

        {/* Esquelet per a la llista de campanyes */}
        <div className="flex justify-between items-center mt-8">
            <div className="h-8 bg-muted rounded-lg w-1/4"></div>
            <div className="flex gap-2">
                <div className="h-10 w-10 bg-muted rounded-lg"></div>
                <div className="h-10 w-10 bg-muted rounded-lg"></div>
            </div>
        </div>
        <div className="h-64 bg-muted rounded-xl"></div>
    </div>
);

// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/_components/MetricCard.tsx ===================

// Ubicació: /app/(app)/comunicacio/marketing/_components/MetricCard.tsx

import React from 'react';

interface MetricCardProps {
    title: string;
    value: string | number;
    icon: React.ReactNode;
}

export const MetricCard: React.FC<MetricCardProps> = ({ title, value, icon }) => (
    <div className="glass-effect p-6 rounded-xl flex-1">
        <div className="flex items-center gap-4">
            <div className="bg-purple-500/20 p-3 rounded-lg">{icon}</div>
            <div>
                <p className="text-gray-300 text-sm">{title}</p>
                <p className="text-2xl font-bold">{value}</p>
            </div>
        </div>
    </div>
);

// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/_components/wizard/WizardStep1_Goal.tsx ===================

// Ubicació: /app/(app)/comunicacio/marketing/_components/wizard/WizardStep1_Goal.tsx

import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { Textarea } from "@/components/ui/textarea";
import { Sparkles, Loader2 } from "lucide-react";

interface Props {
    goal: string;
    setGoal: (value: string) => void;
    onGenerate: () => void;
    isPending: boolean;
    t: (key: string) => string;
}

export const WizardStep1_Goal = ({ goal, setGoal, onGenerate, isPending, t }: Props) => (
    <motion.div key="step1" initial={{ opacity: 0, x: 20 }} animate={{ opacity: 1, x: 0 }} exit={{ opacity: 0, x: -20 }}>
        <DialogDescription>{t('step1Description')}</DialogDescription>
        <Textarea
            placeholder={t('step1Placeholder')}
            value={goal}
            onChange={(e) => setGoal(e.target.value)}
            className="my-4"
            rows={4}
        />
        <DialogFooter>
            <Button onClick={onGenerate} disabled={isPending || !goal.trim()}>
                {isPending ? <Loader2 className="animate-spin mr-2" /> : <Sparkles className="mr-2 h-4 w-4" />}
                {t('generateStrategiesButton')}
            </Button>
        </DialogFooter>
    </motion.div>
);

// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/_components/wizard/WizardStep2_SelectStrategy.tsx ===================

// Ubicació: /app/(app)/comunicacio/marketing/_components/wizard/WizardStep2_SelectStrategy.tsx

import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { Loader2, Lightbulb, Users, ChevronLeft } from "lucide-react";

// El tipus 'Strategy' hauria d'estar en un fitxer compartit, però el definim aquí per claredat.
interface Strategy {
    name: string;
    type: string;
    target_audience: string;
    description: string;
}

interface Props {
    strategies: Strategy[];
    onSelect: (strategy: Strategy, index: number) => void;
    onBack: () => void;
    isPending: boolean;
    processingIndex: number | null;
    t: (key: string) => string;
}

export const WizardStep2_SelectStrategy = ({ strategies, onSelect, onBack, isPending, processingIndex, t }: Props) => (
    <motion.div key="step2" initial={{ opacity: 0, x: 20 }} animate={{ opacity: 1, x: 0 }} exit={{ opacity: 0, x: -20 }}>
        <DialogDescription>{t('step2Description')}</DialogDescription>

        <div className="my-4 space-y-3 max-h-[50vh] overflow-y-auto p-1">
            {strategies.map((s, i) => (
                <div
                    key={i}
                    className={`p-4 border border-border rounded-lg transition-all ${isPending && processingIndex !== i ? "opacity-50 cursor-not-allowed" : "hover:border-primary cursor-pointer"}`}
                    onClick={() => !isPending && onSelect(s, i)}
                >
                    {isPending && processingIndex === i ? (
                        <div className="flex items-center justify-center py-4">
                            <Loader2 className="animate-spin text-primary" />
                            <span className="ml-2">{t('creatingMagic')}</span>
                        </div>
                    ) : (
                        <>
                            <h3 className="font-semibold flex items-center gap-2">
                                <Lightbulb className="text-yellow-400 h-4 w-4" /> {s.name} <Badge variant="outline" className={undefined}>{s.type}</Badge>
                            </h3>
                            <p className="text-sm text-muted-foreground mt-1">
                                <Users className="inline h-4 w-4 mr-1" /> {s.target_audience}
                            </p>
                            <p className="text-sm mt-2">{s.description}</p>
                        </>
                    )}
                </div>
            ))}
        </div>
        <DialogFooter>
            <Button variant="ghost" onClick={onBack}>
                <ChevronLeft className="mr-2 h-4 w-4" /> {t('backButton')}
            </Button>
        </DialogFooter>
    </motion.div>
);

// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/_components/wizard/WizardStep3_Finalize.tsx ===================

// Ubicació: /app/(app)/comunicacio/marketing/_components/wizard/WizardStep3_Finalize.tsx

import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Loader2} from "lucide-react";
import type { SetStateAction } from 'react';

// ✅ CORRECCIÓ: Aquest tipus ha de ser el mateix que s'utilitza en el hook.
// Si Strategy té camps opcionals, els mantenim.
interface Strategy {
    name: string;
    type: string;
    target_audience: string;
    description: string;
    content?: string;
}

interface Props {
    // ✅ CORRECCIÓ: Fem servir el tipus 'Strategy' complet.
    strategy: Strategy;
    // ✅ CORRECCIÓ: El tipus ha de coincidir exactament.
    onStrategyChange: (value: SetStateAction<Strategy | null>) => void;
    onSave: () => void;
    onBack: () => void;
    isPending: boolean;
    t: (key: string) => string;
}

export const WizardStep3_Finalize = ({ strategy, onStrategyChange, onSave, onBack, isPending, t }: Props) => (
    <motion.div key="step3" initial={{ opacity: 0, x: 20 }} animate={{ opacity: 1, x: 0 }} exit={{ opacity: 0, x: -20 }}>
        <DialogDescription>{t('step3Description')}</DialogDescription>

        <div className="my-4 space-y-4">
            <Input
                value={strategy.name}
                onChange={(e) => onStrategyChange(prev => prev ? { ...prev, name: e.target.value } : null)}
                className="text-lg font-bold"
            />
            <Textarea
                value={strategy.content ?? ""}
                onChange={(e) => onStrategyChange(prev => prev ? { ...prev, content: e.target.value } : null)}
                className="h-[40vh] text-base"
            />
        </div>
        <DialogFooter>
            <Button variant="ghost" onClick={onBack}>{t('backButton')}</Button>
            <Button onClick={onSave} disabled={isPending}>
                {isPending && <Loader2 className="animate-spin mr-2" />} {t('saveCampaignButton')}
            </Button>
        </DialogFooter>
    </motion.div>
);

// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/_hooks/useAICampaignWizard.ts ===================

// Ubicació: /app/(app)/comunicacio/marketing/_hooks/useAICampaignWizard.ts

import { useState, useTransition } from "react";
import { toast } from "sonner";
import { generateStrategiesAction, draftContentAction, saveCampaignAction } from "../actions";

// Tipus per a les estratègies
interface Strategy {
    name: string;
    type: string;
    target_audience: string;
    description: string;
    content?: string;
}

// Propietats que rep el hook
interface UseAICampaignWizardProps {
    onCampaignCreated: () => void;
    onClose: () => void;
    t: (key: string) => string;
}

export function useAICampaignWizard({ onCampaignCreated, onClose, t }: UseAICampaignWizardProps) {
    const [step, setStep] = useState(1);
    const [goal, setGoal] = useState("");
    const [strategies, setStrategies] = useState<Strategy[]>([]);
    const [selectedStrategy, setSelectedStrategy] = useState<Strategy | null>(null);
    const [isPending, startTransition] = useTransition();
    const [processingIndex, setProcessingIndex] = useState<number | null>(null);

    const resetWizard = () => {
        setStep(1);
        setGoal("");
        setStrategies([]);
        setSelectedStrategy(null);
        setProcessingIndex(null);
    };

    const handleGenerateStrategies = () => {
        if (!goal.trim()) return;
        startTransition(async () => {
            const { data, error } = await generateStrategiesAction(goal);
            if (error) {
                toast.error(t('toastErrorAI'), { description: error });
            } else {
                setStrategies(data || []);
                setStep(2);
            }
        });
    };

    const handleDraftContent = (strategy: Strategy, index: number) => {
        setProcessingIndex(index);
        startTransition(async () => {
            const { data, error } = await draftContentAction(goal, strategy);
            if (error) {
                toast.error(t('toastErrorAI'), { description: error });
            } else {
                setSelectedStrategy({ ...strategy, content: data || "" });
                setStep(3);
            }
            setProcessingIndex(null);
        });
    };

    const handleSaveCampaign = () => {
        if (!selectedStrategy) return;
        startTransition(async () => {
            const { error } = await saveCampaignAction(selectedStrategy, goal);
            if (error) {
                toast.error(t('toastErrorSave'), { description: t('toastErrorSaveDescription') });
            } else {
                toast.success(t('toastSuccessSave'), { description: t('toastSuccessSaveDescription') });
                onCampaignCreated();
                onClose();
                resetWizard();
            }
        });
    };

    return {
        step,
        goal,
        strategies,
        selectedStrategy,
        isPending,
        processingIndex,
        setStep,
        setGoal,
        setSelectedStrategy,
        resetWizard,
        handleGenerateStrategies,
        handleDraftContent,
        handleSaveCampaign
    };
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/marketing/_hooks/useMarketing.ts ===================

// Ubicació: /app/(app)/comunicacio/marketing/_hooks/useMarketing.ts

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import type { Campaign } from '../page';

export function useMarketing() {
    const router = useRouter();
    const [view, setView] = useState<'list' | 'calendar'>('list');
    const [isWizardOpen, setIsWizardOpen] = useState(false);
    const [selectedCampaign, setSelectedCampaign] = useState<Campaign | null>(null);

    const handleRefreshData = () => {
        router.refresh();
    };

    const handleOpenWizard = () => setIsWizardOpen(true);
    
    const handleCloseWizard = () => setIsWizardOpen(false);

    const handleSelectCampaign = (campaign: Campaign | null) => {
        setSelectedCampaign(campaign);
    };

    return {
        view,
        isWizardOpen,
        selectedCampaign,
        setView,
        setIsWizardOpen,
        handleRefreshData,
        handleOpenWizard,
        handleCloseWizard,
        handleSelectCampaign,
    };
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/planificador/actions.ts ===================

"use server";

import { revalidatePath } from "next/cache";
import type { SocialPost } from "@/types/comunicacio/SocialPost";
import { getTranslations } from "next-intl/server";
import { validateUserSession } from "@/lib/supabase/session";
import { checkUserPermission, PERMISSIONS } from "@/lib/permissions";

// Aquest tipus de retorn es pot moure a un fitxer de tipus globals si el fas servir a més llocs.

// ✅ CORRECCIÓ 1: El missatge ara és opcional.
type ActionResult<T = unknown> = {
    success: boolean;
    message?: string;
    data?: T;
};

/**
 * Funció d'ajuda interna per a validar la sessió i els permisos específics del planificador.
 * Evita repetir el mateix codi a cada acció.
 */
async function validateSocialPlannerPermissions() {
    const session = await validateUserSession();
    if ('error' in session) {
        return { error: session.error.message };
    }
    const { supabase, user, activeTeamId } = session;

    // Comprovem si l'usuari té permís per a gestionar integracions/planificador.
    const hasAccess = await checkUserPermission(supabase, user.id, activeTeamId, PERMISSIONS.MANAGE_INTEGRATIONS);
    if (!hasAccess) {
        const t = await getTranslations('Errors');
        return { error: t('permissionDenied') };
    }

    return { supabase, user, activeTeamId };
}

// ----------------------------------------------------------------------------------

/**
 * Crea una URL de pujada signada (presigned URL) a Supabase Storage.
 */
export async function getPresignedUploadUrlAction(fileNames: string[]): Promise<ActionResult<{ signedUrls: { signedUrl: string; path: string; }[] }>> {
    // Aquesta acció només requereix que l'usuari estigui autenticat.
    const session = await validateUserSession();
    if ('error' in session) return { success: false, message: session.error.message };
    const { supabase, user } = session;

    try {
        const signedUrls = await Promise.all(
            fileNames.map(async (fileName) => {
                const fileExt = fileName.split('.').pop();
                const filePath = `${user.id}/${Date.now()}-${Math.random()}.${fileExt}`;
                const { data, error } = await supabase.storage
                    .from('social_media')
                    .createSignedUploadUrl(filePath);

                if (error) throw new Error(`Error creant URL per a ${fileName}: ${error.message}`);
                return { signedUrl: data.signedUrl, path: data.path };
            })
        );
        return { success: true, message: "URLs creades.", data: { signedUrls } };
    } catch (err: unknown) {
        const message = err instanceof Error ? err.message : "Error desconegut creant URLs signades.";
        return { success: false, message };
    }
}

/**
 * Crea un registre de publicació en esborrany.
 */
export async function createSocialPostAction(
    content: string,
    providers: string[],
    mediaPaths: string[] | null,
    mediaType: string | null
): Promise<ActionResult<SocialPost>> {
    const validation = await validateSocialPlannerPermissions();
    if ('error' in validation) {
        // ✅ CORRECCIÓ: Retornem el missatge d'error de la validació
        return { success: false, message: validation.error };
    }
    const { supabase, user, activeTeamId } = validation;

    const t = await getTranslations('Planificador.toasts');

    let media_urls: string[] | null = null;
    if (mediaPaths && mediaPaths.length > 0) {
        media_urls = mediaPaths.map(path =>
            supabase.storage.from('social_media').getPublicUrl(path).data.publicUrl
        );
    }

    const { data: postData, error: postError } = await supabase
        .from('social_posts')
        .insert({
            user_id: user.id,
            team_id: activeTeamId,
            provider: providers,
            content: content,
            media_url: media_urls,
            media_type: mediaType,
            status: 'draft',
        })
        .select()
        .single();

    if (postError) {
        console.error("Error creant la publicació:", postError);
        return { success: false, message: t('errorPostCreation') };
    }

    revalidatePath('/comunicacio/planificador');
    return { success: true, message: t('successDraftCreated'), data: postData };
}
/**
 * Planifica una publicació.
 */
export async function scheduleSocialPostAction(postId: number, scheduledAt: string): Promise<ActionResult> {
    const validation = await validateSocialPlannerPermissions();
    if ('error' in validation) return { success: false, message: validation.error };
    const { supabase } = validation;

    // ✅ CORRECCIÓ: Canviem el 'namespace' al que correspon.
    const t = await getTranslations('Planificador.toasts');

    const { error } = await supabase
        .from('social_posts')
        .update({ status: 'scheduled', scheduled_at: scheduledAt })
        .eq('id', postId);

    if (error) {
        console.error("Error planificant la publicació:", error);
        return { success: false, message: t('errorScheduling') };
    }

    revalidatePath('/comunicacio/planificador');
    return { success: true, message: t('successScheduled') };
}

/**
 * Retorna una publicació a l'estat d'esborrany.
 */
export async function unscheduleSocialPostAction(postId: number): Promise<ActionResult> {
    const validation = await validateSocialPlannerPermissions();
    if ('error' in validation) return { success: false, message: validation.error };
    const { supabase } = validation;

    // ✅ CORRECCIÓ: Canviem 'SocialPlanner.toasts' per 'Planificador.toasts'
    const t = await getTranslations('Planificador.toasts'); const { error } = await supabase
        .from('social_posts')
        .update({ status: 'draft', scheduled_at: null })
        .eq('id', postId);

    if (error) {
        console.error("Error desplanificant la publicació:", error);
        return { success: false, message: t('errorUnscheduling') };
    }

    revalidatePath('/comunicacio/planificador');
    return { success: true, message: t('successUnscheduled') };
}

/**
 * Elimina una publicació social.
 */
export async function deleteSocialPostAction(postId: number): Promise<ActionResult> {
    const validation = await validateSocialPlannerPermissions();
    if ('error' in validation) return { success: false, message: validation.error };
    const { supabase } = validation;
    // ✅ CORRECCIÓ: Canviem 'SocialPlanner.toasts' per 'Planificador.toasts'
    const t = await getTranslations('Planificador.toasts');

    const { data: post } = await supabase.from('social_posts').select('media_url').eq('id', postId).single();

    if (post && Array.isArray(post.media_url)) {
        try {
            // ✅ CORRECCIÓ 2: Afegim el tipus explícit a 'url'.
            const pathsToRemove = post.media_url.map((url: string) =>
                new URL(url).pathname.split('/social_media/')[1]
            ).filter(Boolean);

            if (pathsToRemove.length > 0) {
                await supabase.storage.from('social_media').remove(pathsToRemove);
            }
        } catch (e) {
            console.error("Error en eliminar de Storage:", e);
        }
    }

    const { error: deleteError } = await supabase.from('social_posts').delete().eq('id', postId);

    if (deleteError) {
        console.error("Error eliminant la publicació:", deleteError);
        return { success: false, message: t('errorDeleting') };
    }

    revalidatePath('/comunicacio/planificador');
    return { success: true, message: t('successPostDeleted') };
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/planificador/page.tsx ===================

// Ubicació: /app/(app)/comunicacio/planificador/page.tsx

import { Suspense } from 'react';
import { SocialPlannerClient } from './_components/SocialPlannerClient';
import type { SocialPost } from "@/types/comunicacio/SocialPost";
import { UpgradePlanNotice } from '@/app/[locale]/(app)/settings/billing/_components/UpgradePlanNotice';
import { validatePageSession } from '@/lib/supabase/session';

// ✅ Esborrem les importacions de 'permissions' que no s'utilitzen aquí directament.
// import { hasPermission, PERMISSIONS } from '@/lib/permissions';
// import { getUserRoleInTeam } from '@/lib/permissions';

export default async function SocialPlannerPage() {
    const session = await validatePageSession();
    // ✅ CORRECCIÓ 1: Comprovem si hi ha hagut un error (encara que 'validatePageSession' redirigeix,
    // TypeScript necessita aquesta comprovació per saber que 'session' no és un error).
    if (!session) {
        // Aquesta línia realment no s'executarà perquè validatePageSession ja haurà redirigit,
        // però satisfà el tipatge de TypeScript.
        return null; 
    }
    const { supabase, user, activeTeamId } = session;
    const locale = user.user_metadata?.locale || 'ca';

    // Comprovació de pla de subscripció
    const activeTeamPlan = user.app_metadata?.active_team_plan as string | undefined;
    const allowedPlans = ['plus', 'premium'];
    // ✅ CORRECCIÓ 2: Fem la comprovació més robusta (insensible a majúscules/minúscules).
    if (!activeTeamPlan || !allowedPlans.includes(activeTeamPlan.toLowerCase())) {
        return <UpgradePlanNotice featureName="Planificador Social" requiredPlan="Plus" locale={locale} />;
    }

    // ✅ CORRECCIÓ 3: La comprovació de permisos es feia DUES VEGADES i amb permisos incorrectes.
    // La centralitzarem i la simplificarem. La lògica principal de permisos ja està dins
    // de les 'actions', així que la comprovació aquí només ha de ser de visualització bàsica si cal.
    // De moment, la podem eliminar si les RLS de Supabase ja protegeixen les dades. Si no,
    // hauria de ser una única comprovació amb el permís correcte.

    // Com que les Server Actions ja tenen una validació robusta amb 'validateSocialPlannerPermissions',
    // podem confiar en que l'usuari no podrà fer accions no permeses. La càrrega inicial
    // de dades estarà protegida per les polítiques RLS de Supabase.

    // La resta de la càrrega de dades es manté igual...
    const { data: posts, error } = await supabase
        .from('social_posts')
        .select('*')
        .eq('team_id', activeTeamId) // Afegim el filtre per equip per RLS.
        .order('created_at', { ascending: false });

    if (error) console.error("Error carregant les publicacions:", error);

    const [userCredsRes, teamCredsRes] = await Promise.all([
        supabase.from('user_credentials').select('provider').eq('user_id', user.id),
        supabase.from('team_credentials').select('provider').eq('team_id', activeTeamId)
    ]);
    const userProviders = userCredsRes.data?.map(c => c.provider) || [];
    const teamProviders = teamCredsRes.data?.map(c => c.provider) || [];
    const allConnectedProviders = new Set([...userProviders, ...teamProviders]);

    const connectionStatuses = {
        linkedin: allConnectedProviders.has('linkedin'),
        facebook: allConnectedProviders.has('facebook'),
        instagram: allConnectedProviders.has('instagram'),
    };

    return (
        <Suspense fallback={<div>Carregant planificador...</div>}>
            <SocialPlannerClient
                initialPosts={(posts as SocialPost[]) || []}
                connectionStatuses={connectionStatuses}
            />
        </Suspense>
    );
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/planificador/types.ts ===================

// Ubicació: /app/(app)/comunicacio/planificador/types.ts (Fitxer nou)

export interface ConnectionStatuses {
    [key: string]: boolean;
    linkedin: boolean;
    facebook: boolean;
    instagram: boolean;
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/planificador/_components/CreatePostDialog.tsx ===================

/* eslint-disable react/jsx-no-undef */
// Ubicació: /app/(app)/comunicacio/planificador/_components/CreatePostDialog.tsx
"use client";

import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import Image from 'next/image';
import { Link, Loader2, Trash2 } from 'lucide-react';

import { useCreatePost } from '../_hooks/useCreatePost';
import type { SocialPost } from '@/types/comunicacio/SocialPost';
import { type ConnectionStatuses } from '../types'; // ✅ Importem el tipus centralitzat

interface CreatePostDialogProps {
    isOpen: boolean;
    onOpenChange: (isOpen: boolean) => void;
    onCreate: (newPost: SocialPost) => void;
    connectionStatuses: ConnectionStatuses;
    t: (key: string) => string;
}

export function CreatePostDialog({ isOpen, onOpenChange, onCreate, connectionStatuses, t }: CreatePostDialogProps) {
    const {
        content, setContent, previewUrls, selectedProviders, isPending,
        handleMediaChange, removeMedia, setSelectedProviders, handleSubmit, resetState
    } = useCreatePost({
        isOpen,
        connectionStatuses,
        onCreate,
        onClose: () => onOpenChange(false),
        t
    });

    const handleClose = (open: boolean) => {
        if (!open) {
            resetState();
        }
        onOpenChange(open);
    };
    const hasAnyConnection = Object.values(connectionStatuses).some(status => status === true);

    return (
        <Dialog open={isOpen} onOpenChange={handleClose}>
            <DialogContent className="max-w-4xl h-[90vh] md:h-[80vh] flex flex-col">
                <DialogHeader><DialogTitle>{t('createDialogTitle')}</DialogTitle></DialogHeader>
                <div className="grid md:grid-cols-2 gap-6 p-1 md:p-4 flex-grow overflow-y-auto">
                    <div className="space-y-4 flex flex-col">
                        <Textarea
                            placeholder={t('whatsOnYourMind')}
                            className="flex-grow text-base min-h-[200px]"
                            value={content}
                            onChange={(e) => setContent(e.target.value)}
                        />
                        <input type="file" multiple accept="image/*,video/*" onChange={handleMediaChange} className="text-sm" />
                        <div className="space-y-2 pt-4 border-t">
                            <h4 className="font-semibold text-sm">{t('publishTo')}:</h4>
                            {!hasAnyConnection ? (
                                <p className="text-sm text-muted-foreground italic">
                                    {t('noConnectionsMessage')} <Link href="/settings/integrations" className="underline text-primary hover:text-primary/80"> {t('connectHere')}</Link>.
                                </p>
                            ) : (
                                <div className="flex items-center gap-6 flex-wrap">
                                    {Object.entries(connectionStatuses).map(([key, isConnected]) => isConnected && (
                                        <div key={key} className="flex items-center space-x-2">
                                            <Checkbox
                                                id={key}
                                                checked={selectedProviders.includes(key)}
                                                onCheckedChange={(checked) => setSelectedProviders(prev => checked ? [...prev, key] : prev.filter(p => p !== key))}
                                            />
                                            <Label htmlFor={key} className="capitalize">{key}</Label>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </div>
                    </div>
                    <div className="bg-muted/50 p-4 rounded-lg flex flex-col">
                        <h3 className="font-semibold mb-2 text-sm flex-shrink-0">{t('preview')}</h3>
                        <div className="border rounded-md p-3 bg-card space-y-3 flex-grow overflow-y-auto">
                            <p className="text-sm whitespace-pre-wrap">{content || t('textWillAppearHere')}</p>
                            {previewUrls.length > 0 && (
                                <div className="grid grid-cols-2 sm:grid-cols-3 gap-2 mt-4">
                                    {previewUrls.map((url, index) => {
                                        const file = mediaFiles[index];
                                        const isVideo = file?.type.startsWith('video/');

                                        return (
                                            <div key={url} className="relative group aspect-square">
                                                <Image src={url} alt={`Preview ${index + 1}`} className="rounded-md object-cover" fill unoptimized />
                                                {/* ✅ ICONA DE PLAY PER A VÍDEOS */}
                                                {isVideo && (
                                                    <div className="absolute inset-0 bg-black/30 flex items-center justify-center">
                                                        <PlayCircle className="w-8 h-8 text-white" />
                                                    </div>
                                                )}
                                                <Button size="icon" variant="destructive" className="absolute top-1 right-1 h-6 w-6 opacity-0 group-hover:opacity-100 ..." onClick={() => removeMedia(index)}>
                                                    <Trash2 className="h-3 w-3" />
                                                </Button>
                                            </div>
                                        );
                                    })}
                                </div>
                            )}
                        </div>
                    </div>
                </div>
                <DialogFooter className="flex-shrink-0 mt-4">
                    <Button variant="ghost" onClick={() => handleClose(false)}>{t('cancel')}</Button>
                    <Button onClick={handleSubmit} disabled={isPending || !content || selectedProviders.length === 0}>
                        {isPending && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                        {isPending ? t('saving') : t('saveDraft')}
                    </Button>
                </DialogFooter>
            </DialogContent>
        </Dialog>
    );
};



// =================== FILE: src/app/[locale]/(app)/comunicacio/planificador/_components/PostCard.tsx ===================

// --- PostCard.tsx ---
import type { SocialPost } from '@/types/comunicacio/SocialPost';
import { format, parseISO } from 'date-fns';
import { Clock, CheckCircle, XCircle, Trash2, AlertTriangle, Images, Video } from 'lucide-react';
import { Button } from '@/components/ui/button';
import Image from 'next/image';
import React from 'react'; // ✅ Importem React

interface PostCardProps {
    post: SocialPost;
    isDragging: boolean;
    onDelete: (postId: number) => void;
    t: (key: string) => string;
    children?: React.ReactNode; // ✅ CORRECCIÓ: Afegim la propietat 'children'
}

export function PostCard({ post, isDragging, onDelete, t, children }: PostCardProps) {
    const statusStyles: { [key: string]: { border: string; icon: JSX.Element | null; text: string } } = {
        scheduled: { border: 'border-primary/50', icon: <Clock size={12} />, text: 'text-primary' },
        published: { border: 'border-green-500', icon: <CheckCircle size={12} />, text: 'text-green-600' },
        failed: { border: 'border-destructive', icon: <XCircle size={12} />, text: 'text-destructive' },
        partial_success: { border: 'border-amber-500', icon: <AlertTriangle size={12} />, text: 'text-amber-600' },
        draft: { border: 'border-border', icon: null, text: '' }
    };

    const style = statusStyles[post.status] || statusStyles.draft;
    
    const mediaUrls = post.media_url || [];
    const hasMedia = mediaUrls.length > 0;
    const imageCount = mediaUrls.length;

    return (
        <div className={`group relative p-1.5 rounded-md bg-card text-xs flex items-start gap-1.5 border ${style.border} ${isDragging ? 'shadow-2xl scale-105' : 'shadow-sm'}`}>
            
            {/* ✅ CORRECCIÓ: Renderitzem el 'children' que conté l'agafador */}
            {children}
            
            <div className="flex-grow overflow-hidden">
                {post.status !== 'draft' && post.scheduled_at && (
                    <p className={`font-bold flex items-center gap-1 mb-0.5 ${style.text}`}>
                        {style.icon}
                        {post.status === 'scheduled' && format(parseISO(post.scheduled_at), 'HH:mm')}
                    </p>
                )}
                <p className="truncate">{post.content || t('noContent')}</p>
            </div>

            {hasMedia && (
                <div className="relative w-10 h-10 flex-shrink-0 rounded-sm overflow-hidden bg-muted flex items-center justify-center">
                    {/* ✅ LÒGICA ACTUALITZADA PER A LA PREVISUALITZACIÓ */}
                    {post.media_type === 'image' ? (
                        <>
                            <Image src={mediaUrls[0]} alt={t('imagePreviewAlt')} fill className="object-cover" unoptimized />
                            {imageCount > 1 && (
                                <div className="absolute bottom-0.5 right-0.5 bg-black/70 ...">
                                    <Images size={10} />
                                    <span>{imageCount}</span>
                                </div>
                            )}
                        </>
                    ) : post.media_type === 'video' ? (
                        // Mostrem la icona de vídeo
                        <Video className="w-5 h-5 text-muted-foreground" />
                    ) : null}
                </div>
            )}

            {post.status === 'draft' && (
                <Button variant="ghost" size="icon" className="absolute top-0 right-0 h-6 w-6 opacity-0 group-hover:opacity-100 focus:opacity-100" onClick={(e) => { e.stopPropagation(); onDelete(post.id); }}>
                    <Trash2 className="h-3.5 w-3.5 text-destructive" />
                </Button>
            )}
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/planificador/_components/PostPreview.tsx ===================

"use client";

import { useState } from 'react';
import type { SocialPost } from '@/types/comunicacio/SocialPost';
import Image from 'next/image';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import { ChevronLeft, ChevronRight, ThumbsUp, MessageCircle, Share2 } from 'lucide-react';
import { FaLinkedin, FaFacebook, FaInstagram } from 'react-icons/fa';

const ProviderIcon = ({ provider }: { provider: string }) => {
    switch (provider) {
        case 'linkedin': return <FaLinkedin className="w-4 h-4 text-[#0A66C2]" />;
        case 'facebook': return <FaFacebook className="w-4 h-4 text-[#1877F2]" />;
        case 'instagram': return <FaInstagram className="w-4 h-4 text-[#E4405F]" />;
        default: return null;
    }
};

export function PostPreview({ post, t }: { post: Partial<SocialPost>, t: (key: string) => string }) {
    const [currentImageIndex, setCurrentImageIndex] = useState(0);

    const mediaUrls = Array.isArray(post.media_url) ? post.media_url : [];
    const hasMedia = mediaUrls.length > 0;
    const mediaType = post.media_type;

    const nextImage = () => setCurrentImageIndex(prev => (prev + 1) % mediaUrls.length);
    const prevImage = () => setCurrentImageIndex(prev => (prev - 1 + mediaUrls.length) % mediaUrls.length);

    return (
        <div className="border rounded-lg bg-card text-card-foreground shadow-sm w-full">
            {/* Capçalera */}
            <div className="p-4 border-b">
                <div className="flex items-center gap-3">
                    <Avatar>
                        <AvatarFallback>R</AvatarFallback>
                    </Avatar>
                    <div>
                        <p className="font-semibold text-sm">{t('yourPage')}</p>
                        <div className="flex items-center gap-1 text-xs text-muted-foreground">
                            <span>{t('publishingTo')}</span>
                            {(post.provider || []).map(p => <ProviderIcon key={p} provider={p} />)}
                        </div>
                    </div>
                </div>
            </div>

            {/* Contingut */}
            <div className="p-4 space-y-4">
                <p className="text-sm whitespace-pre-wrap">
                    {post.content || t('yourTextPlaceholder')}
                </p>

                {hasMedia && (
                    <div className="relative w-full aspect-square overflow-hidden rounded-md">
                        {mediaUrls.map((url, index) => (
                            <div key={index} className="absolute w-full h-full transition-opacity duration-300" style={{ opacity: index === currentImageIndex ? 1 : 0 }}>
                                {mediaType === 'image' ? (
                                    <Image src={url} alt={`Preview ${index + 1}`} layout="fill" className="object-cover" unoptimized />
                                ) : (
                                    <video src={url} controls className="w-full h-full object-cover" />
                                )}
                            </div>
                        ))}
                        {mediaUrls.length > 1 && (
                            <>
                                <Button size="icon" variant="secondary" className="absolute left-2 top-1/2 -translate-y-1/2 h-8 w-8 rounded-full" onClick={prevImage}><ChevronLeft className="h-4 w-4" /></Button>
                                <Button size="icon" variant="secondary" className="absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8 rounded-full" onClick={nextImage}><ChevronRight className="h-4 w-4" /></Button>
                                <div className="absolute bottom-2 left-1/2 -translate-x-1/2 flex gap-1.5">
                                    {mediaUrls.map((_, index) => (
                                        <div key={index} className={`h-2 w-2 rounded-full transition-colors ${index === currentImageIndex ? 'bg-white' : 'bg-white/50'}`} />
                                    ))}
                                </div>
                            </>
                        )}
                    </div>
                )}
            </div>

            {/* Peu */}
            <div className="p-2 border-t flex justify-around text-muted-foreground">
                <Button variant="ghost" size="sm" className="w-full flex items-center gap-2">
                    <ThumbsUp className="w-4 h-4" /> {t('like')}
                </Button>
                <Button variant="ghost" size="sm" className="w-full flex items-center gap-2">
                    <MessageCircle className="w-4 h-4" /> {t('comment')}
                </Button>
                <Button variant="ghost" size="sm" className="w-full flex items-center gap-2">
                    <Share2 className="w-4 h-4" /> {t('share')}
                </Button>
            </div>
        </div>
    );
}


// =================== FILE: src/app/[locale]/(app)/comunicacio/planificador/_components/SchedulePostDialog.tsx ===================

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from '@/components/ui/dialog';
import { useTranslations } from 'next-intl';

interface SchedulePostDialogProps {
    isOpen: boolean;
    onOpenChange: (isOpen: boolean) => void;
    onConfirm: (time: string) => void;
    isPending: boolean;
}

export function SchedulePostDialog({ isOpen, onOpenChange, onConfirm, isPending }: SchedulePostDialogProps) {
    const t = useTranslations('Planificador');
    const [time, setTime] = useState('10:00');
    const userTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;

    return (
        <Dialog open={isOpen} onOpenChange={onOpenChange}>
            <DialogContent className="sm:max-w-xs">
                <DialogHeader>
                    <DialogTitle>{t('schedulePostTitle')}</DialogTitle>
                    <DialogDescription>{t('schedulePostDescription')}</DialogDescription>
                </DialogHeader>
                <div className="flex flex-col items-center p-4 gap-2">
                    <input 
                        type="time"
                        value={time}
                        onChange={(e) => setTime(e.target.value)}
                        className="p-2 rounded-md border bg-transparent text-2xl"
                    />
                    <p className="text-xs text-muted-foreground">
                        {t('timeZone', { timeZone: userTimeZone })}
                    </p>
                </div>
                <DialogFooter>
                    <Button variant="ghost" onClick={() => onOpenChange(false)}>{t('cancel')}</Button>
                    <Button onClick={() => onConfirm(time)} disabled={isPending}>
                        {isPending ? t('planning') : t('confirm')}
                    </Button>
                </DialogFooter>
            </DialogContent>
        </Dialog>
    )
}


// =================== FILE: src/app/[locale]/(app)/comunicacio/planificador/_components/SocialPlannerClient.tsx ===================

// Ubicació: /app/(app)/comunicacio/planificador/_components/SocialPlannerClient.tsx

"use client";

import { DragDropContext, Droppable, Draggable } from '@hello-pangea/dnd';
import { format, startOfMonth, endOfMonth, eachDayOfInterval, getDay, isSameDay, parseISO } from 'date-fns';
import { es } from 'date-fns/locale';
import { Button } from '@/components/ui/button';
import { PlusCircle, ChevronLeft, ChevronRight, GripVertical } from 'lucide-react';
import { useTranslations } from 'next-intl';

import { useSocialPlanner } from '../_hooks/useSocialPlanner';
import { PostCard } from './PostCard';
import { CreatePostDialog } from './CreatePostDialog';
import { SchedulePostDialog } from './SchedulePostDialog';
import { ViewPostDialog } from './ViewPostDialog';
import type { SocialPost } from '@/types/comunicacio/SocialPost';
import { type ConnectionStatuses } from '../types';
import { cn } from '@/lib/utils/utils'; // ✅ Importem la utilitat 'cn'

interface SocialPlannerClientProps {
    initialPosts: SocialPost[];
    connectionStatuses: ConnectionStatuses;
}

export function SocialPlannerClient({ initialPosts, connectionStatuses }: SocialPlannerClientProps) {
    const t = useTranslations('Planificador');
    const {
        currentMonth, isPending, unscheduledDrafts, calendarPosts, dialogState, postToView,
        onDragEnd, handleScheduleConfirm, handleCreatePost, handleUnschedule, handleDeletePost,
        openViewDialog, openCreateDialog, setDialogState, nextMonth, prevMonth
    } = useSocialPlanner({ initialPosts });

    const firstDayOfMonth = startOfMonth(currentMonth);
    const daysInMonth = eachDayOfInterval({ start: firstDayOfMonth, end: endOfMonth(currentMonth) });
    const startingDayIndex = getDay(firstDayOfMonth) === 0 ? 6 : getDay(firstDayOfMonth) - 1;

    return (
        <DragDropContext onDragEnd={onDragEnd}>
            {/* ✅ CORRECCIÓ 1: Canviem l'estructura principal per a un millor control */}
            <div className="flex flex-col lg:flex-row h-[calc(100vh-theme(spacing.24))] gap-6 p-4 md:p-6">

                {/* Columna d'Esborranys (Sidebar) */}
                <aside className="lg:w-[320px] xl:w-[350px] flex-shrink-0 flex flex-col gap-4 min-h-[300px] lg:min-h-0">
                    <Button onClick={openCreateDialog} className="w-full flex-shrink-0">
                        <PlusCircle className="mr-2 h-4 w-4" /> {t('createPost')}
                    </Button>
                    <div className="bg-muted/50 rounded-lg p-4 flex-grow flex flex-col">
                        <h2 className="font-semibold mb-3 flex-shrink-0">{t('pendingDrafts')}</h2>
                        <Droppable droppableId="unscheduled-drafts">
                            {(provided, snapshot) => (
                                <div
                                    {...provided.droppableProps}
                                    ref={provided.innerRef}
                                    className={cn(
                                        "space-y-3 flex-grow overflow-y-auto pr-2 -mr-2 rounded transition-colors",
                                        snapshot.isDraggingOver && "bg-primary/10" // ✅ Feedback visual en arrossegar
                                    )}
                                >
                                    {unscheduledDrafts.map((post, index) => (
                                        <Draggable key={post.id} draggableId={post.id.toString()} index={index}>
                                            {(provided, snapshot) => (
                                                <div ref={provided.innerRef} {...provided.draggableProps} onDoubleClick={() => openViewDialog(post)}>
                                                    <PostCard post={post} isDragging={snapshot.isDragging} onDelete={handleDeletePost} t={t}>
                                                        <div {...provided.dragHandleProps} className="cursor-grab p-2">
                                                            <GripVertical className="h-4 w-4 text-muted-foreground" />
                                                        </div>
                                                    </PostCard>
                                                </div>
                                            )}
                                        </Draggable>
                                    ))}
                                    {provided.placeholder}
                                </div>
                            )}
                        </Droppable>
                    </div>
                </aside>

                {/* Calendari */}
                <section className="flex-grow bg-card p-4 rounded-lg shadow-sm flex flex-col h-full overflow-hidden">
                    <div className="flex justify-between items-center mb-4 flex-shrink-0">
                        <Button variant="ghost" size="icon" onClick={prevMonth}><ChevronLeft className="h-4 w-4" /></Button>
                        <h2 className="text-xl font-bold capitalize">{format(currentMonth, 'MMMM yyyy', { locale: es })}</h2>
                        <Button variant="ghost" size="icon" onClick={nextMonth}><ChevronRight className="h-4 w-4" /></Button>
                    </div>
                    <header className="grid grid-cols-7 gap-1 text-center font-semibold text-xs text-muted-foreground mb-2 flex-shrink-0">
                        {['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'].map(day => <div key={day} className="capitalize">{t(`weekdays.${day}`)}</div>)}
                    </header>
                    {/* ✅ CORRECCIÓ 2: El 'grid' del calendari ara ocupa tot l'espai restant */}
                    <main className="grid grid-cols-7 grid-rows-5 gap-2 flex-grow min-h-0">
                        {Array.from({ length: startingDayIndex }).map((_, i) => <div key={`empty-${i}`} />)}
                        {daysInMonth.map(day => {
                            const postsOnThisDay = calendarPosts.filter(p => p.scheduled_at && isSameDay(parseISO(p.scheduled_at), day));
                            return (
                                <Droppable key={day.toString()} droppableId={`day-${day.toISOString()}`}>
                                    {(provided, snapshot) => (
                                        // ✅ CORRECCIÓ 3: Millorem el feedback visual i l'àrea de drop
                                        <div
                                            {...provided.droppableProps}
                                            ref={provided.innerRef}
                                            className={cn(
                                                'rounded-md p-1.5 flex flex-col gap-2 transition-colors',
                                                snapshot.isDraggingOver ? 'bg-primary/20' : 'bg-muted/30'
                                            )}
                                        >
                                            <span className="font-semibold text-sm text-center">{format(day, 'd')}</span>
                                            <div className="flex-grow space-y-2 overflow-y-auto pr-1">
                                                {postsOnThisDay.map((post, index) => (
                                                    <Draggable key={post.id} draggableId={post.id.toString()} index={index}>
                                                        {(provided, snapshot) => (
                                                            <div ref={provided.innerRef} {...provided.draggableProps} onDoubleClick={() => openViewDialog(post)}>
                                                                <PostCard post={post} isDragging={snapshot.isDragging} onDelete={handleDeletePost} t={t}>
                                                                    <div {...provided.dragHandleProps} className="cursor-grab p-2">
                                                                        <GripVertical className="h-4 w-4 text-muted-foreground" />
                                                                    </div>
                                                                </PostCard>
                                                            </div>
                                                        )}
                                                    </Draggable>
                                                ))}
                                                {provided.placeholder}
                                            </div>
                                        </div>
                                    )}
                                </Droppable>
                            );
                        })}
                    </main>
                </section>
            </div>

            {/* Diàlegs (es mantenen igual) */}
            <CreatePostDialog isOpen={dialogState.create} onOpenChange={(isOpen) => setDialogState(p => ({...p, create: isOpen}))} onCreate={handleCreatePost} connectionStatuses={connectionStatuses} t={t} />
            <SchedulePostDialog isOpen={dialogState.schedule} onOpenChange={(isOpen) => setDialogState(p => ({...p, schedule: isOpen}))} onConfirm={handleScheduleConfirm} isPending={isPending} />
            <ViewPostDialog isOpen={dialogState.view} onOpenChange={(isOpen) => setDialogState(p => ({...p, view: isOpen}))} post={postToView} onUnschedule={handleUnschedule} onDelete={handleDeletePost} isPending={isPending} t={t} />
        </DragDropContext>
    );
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/planificador/_components/ViewPostDialog.tsx ===================

import type { SocialPost } from '@/types/comunicacio/SocialPost';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Undo2, Trash2 } from 'lucide-react';
import { PostPreview } from './PostPreview';

interface ViewPostDialogProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  post: SocialPost | null;
  onUnschedule: (postId: number) => void;
  onDelete: (postId: number) => void;
  isPending: boolean;
  t: (key: string) => string;
}

export function ViewPostDialog({ isOpen, onOpenChange, post, onUnschedule, onDelete, isPending, t }: ViewPostDialogProps) {
  if (!post) return null;

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-lg">
        <DialogHeader>
          <DialogTitle>{t('viewPostTitle')}</DialogTitle>
        </DialogHeader>

        <div className="max-h-[60vh] overflow-y-auto pr-2">
          <PostPreview post={post} t={t} />
        </div>

        <DialogFooter className="flex-col sm:flex-row sm:justify-between w-full gap-2">
          <div className="flex gap-2">
            {post.status === 'scheduled' && (
              <Button variant="outline" onClick={() => onUnschedule(post.id)} disabled={isPending}>
                <Undo2 className="mr-2 h-4 w-4" /> {t('returnToDraft')}
              </Button>
            )}
            {post.status === 'draft' && (
              <Button variant="destructive" onClick={() => { onDelete(post.id); onOpenChange(false); }} disabled={isPending}>
                <Trash2 className="mr-2 h-4 w-4" /> {t('deleteDraft')}
              </Button>
            )}
          </div>
          <Button onClick={() => onOpenChange(false)}>{t('close')}</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}


// =================== FILE: src/app/[locale]/(app)/comunicacio/planificador/_hooks/useCreatePost.ts ===================

// Ubicació: /app/(app)/comunicacio/planificador/_hooks/useCreatePost.ts

"use client";

import { useState, useTransition, useEffect } from 'react';
import { toast } from 'sonner';
import { getPresignedUploadUrlAction, createSocialPostAction } from '../actions';
import type { SocialPost } from '@/types/comunicacio/SocialPost';
import { type ConnectionStatuses } from '../types';

interface UseCreatePostProps {
    isOpen: boolean;
    connectionStatuses: ConnectionStatuses;
    onCreate: (newPost: SocialPost) => void;
    onClose: () => void;
    t: (key: string) => string;
}
// --- Funció d'ajuda per a la validació ---
const validateImageAspectRatio = (file: File): Promise<boolean> => {
    return new Promise((resolve) => {
        if (!file.type.startsWith('image/')) {
            resolve(true); // No és una imatge, no la validem aquí
            return;
        }

        const reader = new FileReader();
        reader.onload = (e) => {
            const img = new Image();
            img.onload = () => {
                const aspectRatio = img.width / img.height;
                // Instagram requereix entre 4:5 (0.8) i 1.91:1
                const isValid = aspectRatio >= 0.8 && aspectRatio <= 1.91;
                resolve(isValid);
            };
            img.src = e.target?.result as string;
        };
        reader.readAsDataURL(file);
    });
};
export function useCreatePost({ isOpen, connectionStatuses, onCreate, onClose, t }: UseCreatePostProps) {
    const [content, setContent] = useState('');
    const [mediaFiles, setMediaFiles] = useState<File[]>([]);
    const [previewUrls, setPreviewUrls] = useState<string[]>([]);
    const [selectedProviders, setSelectedProviders] = useState<string[]>([]);
    const [isPending, startTransition] = useTransition();

    useEffect(() => {
        if (isOpen) {
            const defaultProviders = Object.keys(connectionStatuses).filter(key => connectionStatuses[key]);
            setSelectedProviders(defaultProviders);
        }
    }, [isOpen, connectionStatuses]);

    const resetState = () => {
        setContent('');
        setMediaFiles([]);
        previewUrls.forEach(url => URL.revokeObjectURL(url));
        setPreviewUrls([]);
        setSelectedProviders([]);
    };

    const handleMediaChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
        const files = Array.from(e.target.files || []);
        if (files.length === 0) return;

        const isUploadingVideo = files.some(file => file.type.startsWith('video/'));
        const hasExistingMedia = mediaFiles.length > 0;
        const hasExistingVideo = hasExistingMedia && mediaFiles[0].type.startsWith('video/');

        if ((isUploadingVideo && hasExistingMedia) || (hasExistingVideo && files.length > 0)) {
            toast.error(t('errorMediaMix'), { description: t('errorMediaMixDescription') });
            return;
        }
        if (isUploadingVideo && files.length > 1) {
            toast.error(t('errorMultipleVideos'), { description: t('errorMultipleVideosDescription') });
            return;
        }

        const validFiles: File[] = [];
        for (const file of files) {
            if (file.type.startsWith('image/')) {
                const isValid = await validateImageAspectRatio(file);
                if (isValid) {
                    validFiles.push(file);
                } else {
                    toast.error(t('invalidAspectRatioTitle'), { description: t('invalidAspectRatioDescription') });
                }
            } else {
                validFiles.push(file); // Afegim vídeos directament
            }
        }
        if (validFiles.length === 0) return;

        const newFiles = [...mediaFiles, ...validFiles].slice(0, 10);
        setMediaFiles(newFiles);

        // Neteja URLs anteriors
        previewUrls.forEach(url => { if (url.startsWith('blob:')) URL.revokeObjectURL(url); });

        const newPreviewPromises = newFiles.map(file => {
            if (file.type.startsWith('video/')) {
                return generateVideoThumbnail(file);
            }
            return Promise.resolve(URL.createObjectURL(file));
        });
        const newUrls = await Promise.all(newPreviewPromises);
        setPreviewUrls(newUrls);
    };

    const removeMedia = (indexToRemove: number) => {
        setMediaFiles(prev => prev.filter((_, index) => index !== indexToRemove));
        setPreviewUrls(prev => {
            const urlToRemove = prev[indexToRemove];
            URL.revokeObjectURL(urlToRemove);
            return prev.filter((_, index) => index !== indexToRemove);
        });
    };

    const handleSubmit = () => {
        startTransition(async () => {
            let mediaPaths: string[] | null = null;
            let mediaType: string | null = null;

            if (mediaFiles.length > 0) {
                try {
                    const fileNames = mediaFiles.map(f => f.name);
                    const urlResult = await getPresignedUploadUrlAction(fileNames);
                    // ✅ CORRECCIÓ: Proporcionem un missatge per defecte si 'urlResult.message' és undefined
                    if (!urlResult.success || !urlResult.data) {
                        throw new Error(urlResult.message || "Error desconegut en obtenir les URLs de pujada.");
                    }

                    await Promise.all(
                        urlResult.data.signedUrls.map((urlInfo, index) =>
                            fetch(urlInfo.signedUrl, { method: 'PUT', body: mediaFiles[index] })
                        )
                    );

                    mediaPaths = urlResult.data.signedUrls.map(info => info.path);
                    mediaType = mediaFiles[0].type.startsWith('image') ? 'image' : 'video';
                } catch (error) {
                    toast.error(error instanceof Error ? error.message : "Error en pujar els fitxers.");
                    return;
                }
            }

            const createResult = await createSocialPostAction(content, selectedProviders, mediaPaths, mediaType);
            if (createResult.success && createResult.data) {
                toast.success(t('successDraftCreated'));
                onCreate(createResult.data);
            } else {
                // ✅ CORRECCIÓ: Proporcionem un missatge per defecte aquí també
                toast.error(createResult.message || "Hi ha hagut un error en crear la publicació.");
            }
            onClose();
        });
    };

    return {
        content, setContent, mediaFiles, previewUrls, selectedProviders, isPending,
        handleMediaChange, removeMedia, setSelectedProviders, handleSubmit, resetState
    };
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/planificador/_hooks/useSocialPlanner.ts ===================

// Ubicació: /app/(app)/comunicacio/planificador/_hooks/useSocialPlanner.ts
"use client";

import { useState, useMemo, useTransition } from 'react';
import { DropResult } from '@hello-pangea/dnd';
import { addMonths, subMonths } from 'date-fns';
import { toast } from 'sonner';

import { scheduleSocialPostAction, unscheduleSocialPostAction, deleteSocialPostAction } from '../actions';
import type { SocialPost } from '@/types/comunicacio/SocialPost';

interface UseSocialPlannerProps {
    initialPosts: SocialPost[];
}

export function useSocialPlanner({ initialPosts }: UseSocialPlannerProps) {
    const [posts, setPosts] = useState(initialPosts);
    const [currentMonth, setCurrentMonth] = useState(new Date());
    const [isPending, startTransition] = useTransition();

    // Gestió dels diàlegs
    const [dialogState, setDialogState] = useState({
        create: false,
        schedule: false,
        view: false,
    });
    const [postToView, setPostToView] = useState<SocialPost | null>(null);
    const [postToSchedule, setPostToSchedule] = useState<{ post: SocialPost; date: Date } | null>(null);

    // Dades derivades
    const unscheduledDrafts = useMemo(() => posts.filter(p => p.status === 'draft'), [posts]);
    const calendarPosts = useMemo(() => posts.filter(p => p.status !== 'draft'), [posts]);

    // Handlers dels diàlegs
    const openCreateDialog = () => setDialogState(p => ({ ...p, create: true }));
    const openViewDialog = (post: SocialPost) => {
        setPostToView(post);
        setDialogState(p => ({ ...p, view: true }));
    };

    // Lògica de Drag & Drop
    const onDragEnd = (result: DropResult) => {
        const { destination, draggableId } = result;
        if (!destination) return;

        const postId = parseInt(draggableId);
        const post = posts.find(p => p.id === postId);
        if (!post) return;

        if (destination.droppableId.startsWith('day-')) {
            const dateStr = destination.droppableId.replace('day-', '');
            setPostToSchedule({ post, date: new Date(dateStr) });
            setDialogState(p => ({ ...p, schedule: true }));
        } else if (destination.droppableId === 'unscheduled-drafts' && post.status === 'scheduled') {
            handleUnschedule(post.id);
        }
    };

    // Accions
    const handleScheduleConfirm = (time: string) => {
        if (!postToSchedule) return;
        const [hours, minutes] = time.split(':').map(Number);
        const scheduledDateTime = new Date(postToSchedule.date.getFullYear(), postToSchedule.date.getMonth(), postToSchedule.date.getDate(), hours, minutes);

        startTransition(async () => {
            const { success, message } = await scheduleSocialPostAction(postToSchedule.post.id, scheduledDateTime.toISOString());
            toast[success ? 'success' : 'error'](message);
            if (success) {
                setPosts(prev => prev.map(p => p.id === postToSchedule.post.id ? { ...p, status: 'scheduled', scheduled_at: scheduledDateTime.toISOString() } : p));
            }
            setDialogState(p => ({ ...p, schedule: false }));
            setPostToSchedule(null);
        });
    };

    const handleCreatePost = (newPost: SocialPost) => {
        setPosts(prev => [newPost, ...prev]);
        setDialogState(p => ({ ...p, create: false }));
    };

    const handleUnschedule = (postId: number) => {
        startTransition(async () => {
            const result = await unscheduleSocialPostAction(postId);
            toast[result.success ? 'success' : 'error'](result.message);
            if (result.success) {
                setPosts(prev => prev.map(p => p.id === postId ? { ...p, status: 'draft', scheduled_at: null } : p));
                setDialogState(p => ({ ...p, view: false }));
            }
        });
    };

    const handleDeletePost = (postId: number) => {
        startTransition(async () => {
            const result = await deleteSocialPostAction(postId);
            toast[result.success ? 'success' : 'error'](result.message);
            if (result.success) {
                setPosts(prev => prev.filter(p => p.id !== postId));
            }
        });
    };
    
    // Navegació del calendari
    const nextMonth = () => setCurrentMonth(prev => addMonths(prev, 1));
    const prevMonth = () => setCurrentMonth(prev => subMonths(prev, 1));

    return {
        posts, currentMonth, isPending, unscheduledDrafts, calendarPosts, dialogState, postToView, postToSchedule,
        onDragEnd, handleScheduleConfirm, handleCreatePost, handleUnschedule, handleDeletePost, openViewDialog, openCreateDialog,
        setDialogState, nextMonth, prevMonth
    };
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/templates/actions.ts ===================

"use server";

import { revalidatePath } from "next/cache";
import { type EmailTemplate } from '../page';
import type { PostgrestError } from "@supabase/supabase-js";
import { validateUserSession } from "@/lib/supabase/session"; // ✅ 1. Importem la funció

/**
 * Desa (crea o actualitza) una plantilla d'email.
 */
export async function saveTemplateAction(
    templateData: Omit<EmailTemplate, "id" | "created_at" | "user_id" | "team_id">,
    templateId: string | null
): Promise<{ data: EmailTemplate | null; error: PostgrestError | null }> {
    // ✅ 2. Validació centralitzada de la sessió.
    const session = await validateUserSession();
    if ('error' in session) {
        return { data: null, error: { message: session.error.message } as PostgrestError };
    }
    const { supabase, user, activeTeamId } = session;

    if (!templateData.name) {
        return { data: null, error: { message: "El nom de la plantilla és obligatori." } as PostgrestError };
    }
    
    let query;

    if (templateId && templateId !== 'new') {
        // En actualitzar, la RLS verificarà l'accés.
        query = supabase
            .from('email_templates')
            .update(templateData)
            .eq('id', templateId)
            .select()
            .single();
    } else {
        // En crear, afegim l'ID de l'usuari i l'ID de l'equip actiu.
        query = supabase
            .from('email_templates')
            .insert({ 
                ...templateData, 
                user_id: user.id, 
                team_id: activeTeamId 
            })
            .select()
            .single();
    }

    const { data, error } = await query;

    if (error) {
        console.error("Error en desar la plantilla:", error);
        return { data: null, error };
    }

    revalidatePath('/comunicacio/templates');
    return { data, error: null };
}

/**
 * Elimina una plantilla d'email.
 */
export async function deleteTemplateAction(
    templateId: string
): Promise<{ error: PostgrestError | null }> {
    // ✅ Fem el mateix aquí.
    const session = await validateUserSession();
    if ('error' in session) {
        return { error: { message: session.error.message } as PostgrestError };
    }
    const { supabase } = session;

    // La política RLS s'encarregarà de la seguretat.
    const { error } = await supabase
        .from('email_templates')
        .delete()
        .eq('id', templateId);

    if (error) {
        console.error("Error en eliminar la plantilla:", error);
        return { error };
    }

    revalidatePath('/comunicacio/templates');
    return { error: null };
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/templates/page.tsx ===================

/**
 * @file page.tsx (Templates)
 * @summary Componente de Página que implementa React Suspense para una carga instantánea.
 */
import { Suspense } from 'react';
import type { Metadata } from 'next';
import { TemplatesData } from './_components/TemplatesData';
import { TemplatesSkeleton } from './_components/TemplatesSkeleton';

export const metadata: Metadata = {
  title: 'Plantilles d\'Email | Ribot',
};

// El tipo de dato puede vivir aquí o en un fichero centralizado (ej: src/types/comunicacio.ts)
export type EmailTemplate = {
  id: string;
  created_at: string;
  user_id: string;
  name: string;
  subject: string;
  body: string;
  variables: string[];
};

export default function TemplatesPage() {
  return (
    <Suspense fallback={<TemplatesSkeleton />}>
      <TemplatesData />
    </Suspense>
  );
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/templates/_components/TemplateEditor.tsx ===================

/**
 * @file TemplateEditor.tsx
 * @summary Renderitza la columna central amb els camps d'edició (nom, assumpte) i l'editor de codi/vista prèvia.
 */
"use client";

import React, { useState } from 'react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Code, Eye, FileText } from 'lucide-react';
import Editor from 'react-simple-code-editor';
import { highlight, languages } from 'prismjs/components/prism-core';
import 'prismjs/components/prism-clike';
import 'prismjs/components/prism-javascript';
import 'prismjs/components/prism-markup';
import { useTranslations } from 'next-intl';
import type { EmailTemplate } from '../page';

interface TemplateEditorProps {
    selectedTemplate: EmailTemplate | null;
    onUpdateTemplate: React.Dispatch<React.SetStateAction<EmailTemplate | null>>;
    onSave: (currentTemplate: EmailTemplate, detectedVariables: string[]) => void;
  }

export function TemplateEditor({ selectedTemplate, onUpdateTemplate }: TemplateEditorProps) {
  const t = useTranslations('TemplatesPage');
  const [editorView, setEditorView] = useState<'code' | 'preview'>('preview');

  if (!selectedTemplate) {
    return (
      <div className="flex flex-col items-center justify-center h-full text-center p-4 glass-card rounded-xl">
        <FileText className="w-16 h-16 text-muted-foreground mb-4" />
        <h2 className="text-xl font-semibold">{t('noTemplateSelected')}</h2>
      </div>
    );
  }

  return (
    <div className="flex flex-col gap-4">
      <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
        <Input
          placeholder={t('templateNamePlaceholder')}
          value={selectedTemplate.name}
          onChange={(e) => onUpdateTemplate(t => t ? { ...t, name: e.target.value } : null)}
        />
        <Input
          placeholder={t('subjectPlaceholder')}
          value={selectedTemplate.subject}
          onChange={(e) => onUpdateTemplate(t => t ? { ...t, subject: e.target.value } : null)}
        />
      </div>

      <div className="flex-1 flex flex-col min-h-0 glass-card rounded-xl overflow-hidden">
        <div className="p-2 border-b border-border flex justify-between items-center">
          <h3 className="font-semibold px-2">{t('contentTitle')}</h3>
          <div className="flex items-center gap-1 p-1 rounded-lg bg-black/20">
            <Button variant={editorView === 'code' ? 'secondary' : 'ghost'} size="sm" className="h-7 px-3" onClick={() => setEditorView('code')}>
              <Code className="w-4 h-4 mr-2"/>{t('codeButton')}
            </Button>
            <Button variant={editorView === 'preview' ? 'secondary' : 'ghost'} size="sm" className="h-7 px-3" onClick={() => setEditorView('preview')}>
              <Eye className="w-4 h-4 mr-2"/>{t('previewButton')}
            </Button>
          </div>
        </div>

        {editorView === 'code' ? (
          <div className="flex-1 overflow-y-auto font-mono text-sm editor-container">
            <Editor
              value={selectedTemplate.body || ""}
              onValueChange={(code) => onUpdateTemplate(t => t ? { ...t, body: code } : null)}
              highlight={(code) => highlight(code, languages.markup!, "markup")}
              padding={16}
              className="bg-transparent h-full"
              style={{ minHeight: "100%" }}
            />
          </div>
        ) : (
          <iframe
            srcDoc={selectedTemplate.body}
            title={t('previewTitle')}
            className="w-full h-full border-0 bg-white"
          />
        )}
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/templates/_components/TemplateList.tsx ===================

/**
 * @file TemplateList.tsx
 * @summary Renderitza la columna esquerra amb la llista de plantilles i el botó per crear-ne de noves.
 */
"use client";

import { Button } from '@/components/ui/button';
import { Plus, Trash2 } from 'lucide-react';
import { useTranslations } from 'next-intl';
import type { EmailTemplate } from '../page';

interface TemplateListProps {
  templates: EmailTemplate[];
  selectedTemplateId: string | null;
  onSelectTemplate: (template: EmailTemplate) => void;
  onNewTemplate: () => void;
  onSetTemplateToDelete: (template: EmailTemplate) => void;
}

export function TemplateList({
  templates,
  selectedTemplateId,
  onSelectTemplate,
  onNewTemplate,
  onSetTemplateToDelete,
}: TemplateListProps) {
  const t = useTranslations('TemplatesPage');

  return (
    <div className="glass-card flex flex-col overflow-hidden">
      <div className="p-4 border-b border-border flex justify-between items-center">
        <h2 className="font-semibold">{t('templatesListTitle')}</h2>
        <Button size="icon" variant="ghost" onClick={onNewTemplate}>
          <Plus className="w-4 h-4" />
        </Button>
      </div>

      <div className="flex-1 overflow-y-auto">
        {templates.map(template => (
          <div
            key={template.id}
            onClick={() => onSelectTemplate(template)}
            className={`group flex justify-between items-center p-4 cursor-pointer border-l-4 ${
              selectedTemplateId === template.id
                ? 'bg-primary/20 border-primary'
                : 'border-transparent hover:bg-muted'
            }`}
          >
            <p className="font-semibold truncate">{template.name}</p>
            <Button
              variant="ghost"
              size="icon"
              className="h-7 w-7 opacity-0 group-hover:opacity-100"
              onClick={(e) => {
                e.stopPropagation(); // Evitem que el clic seleccioni la plantilla
                onSetTemplateToDelete(template);
              }}
            >
              <Trash2 className="w-4 h-4 text-destructive" />
            </Button>
          </div>
        ))}
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/templates/_components/templates-client.tsx ===================

"use client";

import React from 'react';
import { motion } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { Loader2 } from 'lucide-react';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { useTemplates } from '../_hooks/useTemplates';

import { TemplateList } from './TemplateList';
import { TemplateEditor } from './TemplateEditor';
import { TemplateVariables } from './TemplateVariables';
import { type EmailTemplate } from '../page';

export function TemplatesClient({ initialTemplates }: { initialTemplates: EmailTemplate[] }) {
    const {
        isSaving, isDeleting,
        templates,
        selectedTemplate, setSelectedTemplate,
        templateToDelete, setTemplateToDelete,
        // ✅ CORRECCIÓ 1: 'detectedVariables' ja no es necessita aquí.
        // El seu valor es gestiona internament al hook.
        setDetectedVariables,
        handleNewTemplate,
        handleSaveTemplate,
        handleDeleteTemplate,
        t,
    } = useTemplates({ initialTemplates });

    return (
        <>
            <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} className="h-full flex flex-col">
                <div className="flex justify-between items-center mb-6 flex-shrink-0">
                    <h1 className="text-3xl font-bold">{t('pageTitle')}</h1>
                    <Button onClick={handleSaveTemplate} disabled={isSaving || !selectedTemplate}>
                        {isSaving && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                        {t('saveButton')}
                    </Button>
                </div>

                <div className="flex-1 grid grid-cols-1 lg:grid-cols-[280px_1fr_280px] gap-6 min-h-0">
                    <TemplateList
                        templates={templates}
                        selectedTemplateId={selectedTemplate?.id || null}
                        onSelectTemplate={setSelectedTemplate}
                        onNewTemplate={handleNewTemplate}
                        onSetTemplateToDelete={setTemplateToDelete}
                    />
                    <TemplateEditor
                        selectedTemplate={selectedTemplate}
                        onUpdateTemplate={setSelectedTemplate}
                        onSave={handleSaveTemplate}
                    />
                    <TemplateVariables
                        selectedTemplate={selectedTemplate}
                        onVariablesChange={setDetectedVariables}
                    />
                </div>
            </motion.div>

            {/* ✅ CORRECCIÓ 2: Canviem 'onOpenChange' per a que passi el valor correcte */}
            <AlertDialog open={!!templateToDelete} onOpenChange={(isOpen) => {
                if (!isOpen) {
                    setTemplateToDelete(null);
                }
            }}>
                <AlertDialogContent>
                    <AlertDialogHeader>
                        <AlertDialogTitle>{t('deleteConfirmTitle')}</AlertDialogTitle>
                        <AlertDialogDescription>{t('deleteConfirmDescription')}</AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                        <AlertDialogCancel>{t('cancelButton')}</AlertDialogCancel>
                        <AlertDialogAction onClick={handleDeleteTemplate} disabled={isDeleting} className="bg-destructive hover:bg-destructive/90">{isDeleting ? t('deletingButton') : t('confirmDeleteButton')}</AlertDialogAction>
                    </AlertDialogFooter>
                </AlertDialogContent>
            </AlertDialog>
        </>
    );
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/templates/_components/TemplatesData.tsx ===================

import { TemplatesClient } from './templates-client';
import type { EmailTemplate } from '../page';
import { validatePageSession } from "@/lib/supabase/session"; // ✅ 1. Importem la funció

export async function TemplatesData() {
    // ✅ 2. Validació de sessió que gestiona les redireccions.
    const { supabase } = await validatePageSession();

    // La RLS filtrarà automàticament per l'equip actiu.
    const { data: templates, error } = await supabase
        .from('email_templates')
        .select('*')
        .order('created_at', { ascending: false });

    if (error) {
        console.error('Error en carregar les plantilles (pot ser per RLS):', error);
        // Si hi ha un error, retornem el component client amb dades buides per a mostrar un estat d'error.
        return <TemplatesClient initialTemplates={[]} />;
    }

    return <TemplatesClient initialTemplates={(templates as EmailTemplate[]) || []} />;
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/templates/_components/TemplatesSkeleton.tsx ===================

/**
 * @file TemplatesSkeleton.tsx
 * @summary Muestra un esqueleto de carga para la página de Plantillas.
 */
"use client";

import React from 'react';

export const TemplatesSkeleton: React.FC = () => (
    <div className="space-y-6 animate-pulse">
        {/* Esqueleto para la cabecera */}
        <div className="flex justify-between items-center">
            <div className="h-9 bg-muted rounded-lg w-1/3"></div>
            <div className="h-10 bg-muted rounded-lg w-36"></div>
        </div>

        {/* Esqueleto para las 3 columnas */}
        <div className="grid grid-cols-1 lg:grid-cols-[280px_1fr_280px] gap-6 min-h-0 h-[calc(100vh-12rem)]">
            <div className="h-full bg-muted rounded-xl"></div>
            <div className="h-full bg-muted rounded-xl"></div>
            <div className="h-full bg-muted rounded-xl"></div>
        </div>
    </div>
);

// =================== FILE: src/app/[locale]/(app)/comunicacio/templates/_components/TemplateVariables.tsx ===================

/**
 * @file TemplateVariables.tsx
 * @summary Renderitza la columna dreta que detecta i mostra les variables de la plantilla.
 */
"use client";

import React, { useMemo, useEffect } from 'react'; // Només necessitem aquests hooks
import { Button } from '@/components/ui/button';
import { toast } from 'sonner';
import { Variable } from 'lucide-react';
import { useTranslations } from 'next-intl';
import type { EmailTemplate } from '../page';

interface TemplateVariablesProps {
  selectedTemplate: EmailTemplate | null;
  onVariablesChange: (variables: string[]) => void;
}

export function TemplateVariables({ selectedTemplate, onVariablesChange }: TemplateVariablesProps) {
    const t = useTranslations('TemplatesPage');

    // ✅ BONA PRÀCTICA: Utilitzem 'useMemo' per a calcular dades derivades.
    // Aquest codi només s'executa si 'selectedTemplate' canvia.
    const detectedVariables = useMemo(() => {
        if (!selectedTemplate) {
            return [];
        }
        const content = `${selectedTemplate.subject || ''} ${selectedTemplate.body || ''}`;
        const foundVariables = content.match(/\{\{([^}]+)\}\}/g) || [];
        // Retornem un array net de variables úniques.
        return [...new Set(foundVariables.map(v => v.replace(/[{}]/g, '').trim()))];
    }, [selectedTemplate]);

    // ✅ BONA PRÀCTICA: Utilitzem 'useEffect' NOMÉS per a efectes secundaris.
    // En aquest cas, el nostre efecte és notificar al component pare quan les variables han canviat.
    useEffect(() => {
        onVariablesChange(detectedVariables);
    }, [detectedVariables, onVariablesChange]);

    return (
        <div className="glass-card flex flex-col overflow-hidden">
            <div className="p-4 border-b border-border">
                <h3 className="font-semibold flex items-center gap-2">
                    <Variable className="w-4 h-4 text-primary"/>{t('detectedVariablesTitle')}
                </h3>
            </div>
            <div className="p-4 space-y-3 overflow-y-auto">
                <p className="text-xs text-muted-foreground">{t('variablesDescription')}</p>
                <div className="flex flex-wrap gap-2">
                    {detectedVariables.length > 0 ? (
                        detectedVariables.map(v => (
                            <Button
                                key={v}
                                variant="outline"
                                size="sm"
                                onClick={() => {
                                    navigator.clipboard.writeText(`{{${v}}}`);
                                    toast.success(t('toastCopiedTitle'), {
                                        description: t('toastCopiedDescription', { variable: `{{${v}}}` }),
                                    });
                                }}
                            >
                                {`{{${v}}}`}
                            </Button>
                        ))
                    ) : (
                        <p className="text-xs text-muted-foreground italic">{t('noVariablesDetected')}</p>
                    )}
                </div>
            </div>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/comunicacio/templates/_hooks/useTemplates.ts ===================

"use client";

import { useState, useTransition } from 'react';
import { toast } from "sonner";
import { useTranslations } from 'next-intl';
import { type EmailTemplate } from '../page';
import { saveTemplateAction, deleteTemplateAction } from '../actions';

type UseTemplatesProps = {
    initialTemplates: EmailTemplate[];
};

export function useTemplates({ initialTemplates }: UseTemplatesProps) {
    const t = useTranslations('TemplatesPage');
    const [isSaving, startSaveTransition] = useTransition();
    const [isDeleting, startDeleteTransition] = useTransition();

    const [templates, setTemplates] = useState(initialTemplates);
    const [selectedTemplate, setSelectedTemplate] = useState<EmailTemplate | null>(initialTemplates[0] || null);
    const [templateToDelete, setTemplateToDelete] = useState<EmailTemplate | null>(null);
    const [detectedVariables, setDetectedVariables] = useState<string[]>([]);

    const handleNewTemplate = () => {
        const newTemplateBody = t.raw('newTemplateBody');
        const newTpl: EmailTemplate = {
            id: 'new',
            name: t('newTemplateName'),
            subject: '',
            body: newTemplateBody,
            variables: [],
            created_at: new Date().toISOString(),
            user_id: ''
        };
        setSelectedTemplate(newTpl);
    };

    const handleSaveTemplate = () => {
        if (!selectedTemplate) return;
        const templateData = { 
            name: selectedTemplate.name, 
            subject: selectedTemplate.subject, 
            body: selectedTemplate.body, 
            variables: detectedVariables 
        };
        
        startSaveTransition(async () => {
            const { data, error } = await saveTemplateAction(templateData, selectedTemplate.id);
            if (error) {
                toast.error(t('toastErrorTitle'), { description: error.message });
            } else if (data) {
                toast.success(t('toastSuccessTitle'), { description: t('toastSaveSuccessDescription') });
                if (selectedTemplate?.id === 'new') { 
                    setTemplates(prev => [data, ...prev]); 
                } else { 
                    setTemplates(prev => prev.map(t => t.id === data.id ? data : t)); 
                }
                setSelectedTemplate(data);
            }
        });
    };

    const handleDeleteTemplate = () => {
        if (!templateToDelete) return;
        startDeleteTransition(async () => {
            const { error } = await deleteTemplateAction(templateToDelete.id);
            if (error) {
                toast.error(t('toastErrorTitle'), { description: error.message });
            } else {
                toast.success(t('toastSuccessTitle'), { description: t('toastDeleteSuccessDescription') });
                const newTemplates = templates.filter(t => t.id !== templateToDelete.id);
                setTemplates(newTemplates);
                setSelectedTemplate(newTemplates[0] || null);
            }
            setTemplateToDelete(null);
        });
    };

    // Retornem tots els estats i funcions que el component necessita
    return {
        isSaving, isDeleting,
        templates,
        selectedTemplate, setSelectedTemplate,
        templateToDelete, setTemplateToDelete,
        detectedVariables, setDetectedVariables,
        handleNewTemplate,
        handleSaveTemplate,
        handleDeleteTemplate,
        t,
    };
}

// =================== FILE: src/app/[locale]/(app)/crm/activitats/page.tsx ===================

import type { Metadata } from 'next';
import { Suspense } from 'react';

// Importem els nostres nous components d'orquestració
import { ActivitiesData } from './_components/ActivitiesData';
import { ActivitiesSkeleton } from './_components/ActivitiesSkeleton';

export const metadata: Metadata = {
  title: 'Historial d\'Activitats | Ribot',
};

// Ja no necessitem definir el tipus 'Activity' aquí,
// ja que el gestionem dins de 'ActivitiesData' i 'activitats-client',
// que l'importen des del fitxer central 'src/types/crm.ts'.

// La pàgina principal ja no és 'async'. Es renderitza a l'instant.
export default function ActivitatsPage() {
  return (
    <Suspense fallback={<ActivitiesSkeleton />}>
      {/* Suspense mostrarà l'esquelet a l'instant, eliminant la "congelació".
        Mentrestant, <ActivitiesData /> carregarà les dades en segon pla.
      */}
      <ActivitiesData />
    </Suspense>
  );
}

// =================== FILE: src/app/[locale]/(app)/crm/activitats/_components/activitats-client.tsx ===================

"use client";

import React from 'react';
import { motion } from 'framer-motion';
import Link from 'next/link';
import { AlertTriangle, CheckCircle } from 'lucide-react';
import { format } from 'date-fns';
import { ca, es, enUS } from 'date-fns/locale';
import { useLocale, useTranslations } from 'next-intl';
import type { Activity } from '@/types/crm'; // ✅ Assegurem que el tipus ve del fitxer central

/**
 * @summary Sub-component reutilitzable per mostrar un únic element de l'historial d'activitats.
 * Aquesta separació manté el codi més net i organitzat.
 */
const HistoricActivityItem: React.FC<{ activity: Activity }> = ({ activity }) => {
    const t = useTranslations('ActivitiesClient');
    const locale = useLocale();
    
    // Lògica per determinar l'idioma del format de la data
    const getDateLocale = () => {
        switch (locale) {
            case 'es': return es;
            case 'en': return enUS;
            default: return ca;
        }
    };

    // Determina la icona i el color segons si l'activitat ha estat llegida.
    const isRead = activity.is_read;
    const Icon = isRead ? CheckCircle : AlertTriangle;
    const iconColor = isRead ? 'text-green-400' : 'text-yellow-400';

    const activityContent = (
        <div className="flex items-start gap-4">
            <div className="mt-1">
                <Icon className={`w-5 h-5 ${iconColor}`} />
            </div>
            <div className="flex-1">
                <div className="flex justify-between items-center">
                    <p className="font-semibold">{activity.type} - <span className="font-normal">{activity.contacts?.nom || t('deletedContact')}</span></p>
                    <p className="text-xs text-muted-foreground">{format(new Date(activity.created_at), t('dateFormat'), { locale: getDateLocale() })}</p>
                </div>
                <p className="text-sm text-muted-foreground mt-1 italic">"{activity.content}"</p>
            </div>
        </div>
    );

    // Si l'activitat està associada a un contacte, la fem clicable.
    if (activity.contact_id && activity.contacts) {
        return (
            <Link
                href={`/${locale}/crm/contactes/${activity.contact_id}`}
                className="block p-4 hover:bg-white/10 transition-colors"
            >
                {activityContent}
            </Link>
        );
    }

    // Si no hi ha contacte associat, renderitzem un 'div' que no és un enllaç.
    return (
        <div className="block p-4">
            {activityContent}
        </div>
    );
};

// Definim les propietats que espera el component principal.
interface ActivitatsClientProps {
    initialActivities: Activity[];
}

/**
 * @summary Component de Client principal per a la pàgina d'historial d'activitats.
 * És un component "presentacional": només rep dades i les mostra.
 */
export const ActivitatsClient: React.FC<ActivitatsClientProps> = ({ initialActivities }) => {
    const t = useTranslations('ActivitiesClient');

    // ❌ ELIMINAT: Ja no necessitem la comprovació de càrrega (!initialActivities)
    // perquè aquest component només es renderitzarà quan les dades ja estiguin llestes.

    return (
        <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }}>
            <div className="flex justify-between items-center mb-8">
                <h1 className="text-3xl font-bold">{t('title')}</h1>
            </div>

            <div className="glass-card overflow-hidden">
                {initialActivities.length > 0 ? (
                    <div className="divide-y divide-white/10">
                        {initialActivities.map(activity => (
                            <HistoricActivityItem key={activity.id} activity={activity} />
                        ))}
                    </div>
                ) : (
                    // Si no hi ha activitats, mostrem un missatge informatiu.
                    <div className="text-center p-12">
                        <p className="text-muted-foreground">{t('noActivities')}</p>
                    </div>
                )}
            </div>
        </motion.div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/activitats/_components/ActivitiesData.tsx ===================

// /app/[locale]/crm/activitats/_components/ActivitiesData.tsx

import { createClient } from '@/lib/supabase/server';
import { cookies } from 'next/headers';
import { ActivitatsClient } from './activitats-client';
import type { Activity } from '@/types/crm';

export async function ActivitiesData() {
    const supabase = createClient(cookies());
    const { data: { user } } = await supabase.auth.getUser();

    if (!user) {
        return <ActivitatsClient initialActivities={[]} />;
    }

    // --- LÒGICA D'EQUIP ANTIGA ELIMINADA ---
    // Ja no necessitem buscar l'equip manualment a 'team_members'.
    // La política RLS ho gestionarà tot de manera automàtica i segura.
    // ------------------------------------

    // ✅ La consulta ara és més simple. No inclou el filtre '.eq('team_id', teamId)'
    // perquè la política de seguretat de la base de dades s'encarregarà d'afegir-lo.
    const { data: activities, error } = await supabase
        .from('activities')
        .select('*, contacts(nom)')
        .order('created_at', { ascending: false });

    if (error) {
        console.error("Error en obtenir les activitats (pot ser per RLS):", error.message);
        return <ActivitatsClient initialActivities={[]} />;
    }

    return <ActivitatsClient initialActivities={activities as Activity[] || []} />;
}

// =================== FILE: src/app/[locale]/(app)/crm/activitats/_components/ActivitiesSkeleton.tsx ===================

"use client";


// Aquest component mostra un esquelet per a la pàgina d'activitats
export function ActivitiesSkeleton() {
  return (
    <div className="animate-pulse">
      {/* Esquelet de la capçalera */}
      <div className="flex justify-between items-center mb-8">
        <div className="h-9 w-64 bg-gray-700/50 rounded-md"></div>
      </div>

      {/* Esquelet de la llista d'activitats */}
      <div className="glass-card divide-y divide-white/10">
        {[...Array(7)].map((_, i) => (
          <div key={i} className="p-4 flex items-start gap-4">
            <div className="mt-1">
              <div className="w-5 h-5 bg-gray-700/50 rounded-full"></div>
            </div>
            <div className="flex-1 space-y-2">
              <div className="flex justify-between items-center">
                <div className="h-5 w-1/3 bg-gray-700/50 rounded-md"></div>
                <div className="h-3 w-1/4 bg-gray-700/50 rounded-md"></div>
              </div>
              <div className="h-4 w-4/5 bg-gray-700/50 rounded-md"></div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/actions.ts ===================

// a l'arxiu d'accions dels contactes

"use server";

import { revalidatePath } from "next/cache";
import type { Contact } from '@/types/crm';
import { validateUserSession } from "@/lib/supabase/session"; // ✅ 1. Importem la nova funció

export async function createContactAction(
    formData: FormData
): Promise<{ data: Contact | null; error: { message: string } | null }> {

    // ✅ 2. Cridem la funció de validació. Tot en una línia.
    const session = await validateUserSession();
    if ('error' in session) {
        return { data: null, error: session.error };
    }
    // A partir d'aquí, sabem que tenim tot el que necessitem.
    const { supabase, user, activeTeamId } = session;

    const nom = formData.get('nom') as string;
    const email = formData.get('email') as string;

    if (!nom || !email) {
        return { data: null, error: { message: 'El nom i l\'email són obligatoris.' } };
    }

    const dataToInsert = {
        nom,
        email,
        empresa: formData.get('empresa') as string,
        telefon: formData.get('telefon') as string,
        estat: formData.get('estat') as 'Lead' | 'Proveidor' | 'Client',
        valor: parseFloat(formData.get('valor') as string) || 0,
        team_id: activeTeamId, // ✅ Inserim l'ID de l'equip actiu
        user_id: user.id,
    };

    // La política RLS 'WITH CHECK' de la taula 'contacts' verificarà que
    // l'usuari té permís per inserir en aquest 'team_id'.
    const { data, error } = await supabase
        .from('contacts')
        .insert(dataToInsert)
        .select()
        .single();

    if (error) {
        console.error("Error en crear el contacte:", error);
        return { data: null, error: { message: error.message } };
    }

    revalidatePath('/crm/contactes');
    return { data, error: null };
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/page.tsx ===================

import { Suspense } from 'react';
import type { Metadata } from 'next';
import { ContactsData } from './_components/ContactsData';
import { ContactsSkeleton } from './_components/ContactsSkeleton';

export const metadata: Metadata = { title: 'Contactes | Ribot' };

// ✅ NOU: Definim tots els paràmetres que podem rebre
interface ContactesPageProps {
    searchParams: Promise<{ 
        page?: string;
        sort?: string;
        status?: string;
        q?: string; // També per a la cerca
        view?: 'cards' | 'list'; // ✅ NOU: Afegim el paràmetre de vista

    }>;
}

export default async function ContactesPage(props: ContactesPageProps) {
    const searchParams = await props.searchParams;
    
    // ✅ NOU: Llegim els valors de la URL o utilitzem valors per defecte
    const page = searchParams?.page || '1';
    const sortBy = searchParams?.sort || 'newest'; // Per defecte, els més nous
    const status = searchParams?.status || 'all';   // Per defecte, tots
    const searchTerm = searchParams?.q || '';       // Mantenim la cerca
    const viewMode = searchParams?.view || 'cards'; // ✅ NOU: Llegim la vista o per defecte 'cards'


    // ✅ NOU: Creem una 'key' única per a Suspense perquè es reiniciï amb cada canvi de filtre
    const suspenseKey = `${page}-${sortBy}-${status}-${searchTerm}`;

    return (
        <Suspense key={suspenseKey} fallback={<ContactsSkeleton />}>
            <ContactsData 
                page={page}
                sortBy={sortBy}
                status={status}
                searchTerm={searchTerm}
                viewMode={viewMode} // ✅ NOU: Passem la vista al component de dades

            />
        </Suspense>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/actions.ts ===================

// /app/[locale]/crm/contactes/[contactId]/actions.ts

"use server";

import { createClient } from "@/lib/supabase/server";
import { cookies } from "next/headers";
import { revalidatePath } from "next/cache";
import { type Contact } from '@/types/crm';
import { validateUserSession } from "@/lib/supabase/session"; // ✅ 1. Importem la nostra funció

export async function updateContactAction(
    contactId: string,
    formData: FormData
): Promise<{ data: Contact | null; error: { message: string } | null }> {
    // ✅ 2. Tota la validació de sessió es redueix a aquestes 3 línies.
    const session = await validateUserSession();
    if ('error' in session) return { data: null, error: session.error };
    const { supabase, activeTeamId } = session;

    // ✅ CORRECCIÓ: Processem el formData per obtenir les dades a actualitzar.
    const hobbiesValue = formData.get('hobbies') as string;
    const dataToUpdate = {
        nom: formData.get('nom') as string,
        empresa: formData.get('empresa') as string,
        email: formData.get('email') as string,
        telefon: formData.get('telefon') as string,
        estat: formData.get('estat') as string,
        job_title: formData.get('job_title') as string,
        industry: formData.get('industry') as string,
        lead_source: formData.get('lead_source') as string,
        birthday: formData.get('birthday') || null,
        notes: formData.get('notes') as string,
        children_count: formData.get('children_count') ? parseInt(formData.get('children_count') as string, 10) : null,
        partner_name: formData.get('partner_name') as string,
        hobbies: hobbiesValue ? hobbiesValue.split(',').map(item => item.trim()) : [],
        address: {
            city: formData.get('address.city') as string,
        },
        social_media: {
            linkedin: formData.get('social_media.linkedin') as string,
        }
    };

    // La consulta d'actualització ara utilitza correctament les dades del formulari.
    const { data, error } = await supabase
        .from('contacts')
        .update(dataToUpdate)
        .eq('id', contactId)
        .eq('team_id', activeTeamId)
        .select()
        .single();

    if (error) {
        console.error("Error updating contact:", error);
        return { data: null, error: { message: error.message } };
    }

    revalidatePath(`/crm/contactes/${contactId}`);
    return { data, error: null };
}


/**
 * @summary Deletes a contact from the database.
 */
export async function deleteContactAction(
    contactId: string
): Promise<{ success: boolean; message: string }> {
    const supabase = createClient(cookies());
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
        return { success: false, message: "User not authenticated." };
    }

    const activeTeamId = user.app_metadata?.active_team_id;
    if (!activeTeamId) {
        return { success: false, message: "No active team found." };
    }

    // You might want to delete related items first (optional)
    // await supabase.from('invoices').delete().eq('contact_id', contactId).eq('team_id', activeTeamId);

    // ✅ SECURE DELETE: We delete the contact by its ID AND the active team ID.
    const { error } = await supabase
        .from('contacts')
        .delete()
        .eq('id', contactId)
        .eq('team_id', activeTeamId); // <-- CRUCIAL SECURITY FILTER

    if (error) {
        console.error("Error deleting contact:", error);
        return { success: false, message: "Failed to delete contact." };
    }

    revalidatePath('/crm/contactes');
    return { success: true, message: "Contact deleted successfully." };
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/page.tsx ===================

import { createClient } from '@/lib/supabase/server';
import { cookies } from 'next/headers';
import { Suspense } from 'react';
import type { Metadata } from 'next';
import { ContactDetailData } from './_components/ContactDetailData';
import { ContactDetailSkeleton } from './_components/ContactDetailSkeleton';

// Definim el tipus de les propietats, que ara poden arribar com una promesa
interface ContactDetailPageProps {
  params: Promise<{ contactId: string }>;
}

/**
 * Funció per generar metadades dinàmiques.
 */
export async function generateMetadata(props: ContactDetailPageProps): Promise<Metadata> {
  // ✅ CORRECCIÓ: Esperem que la promesa dels paràmetres es resolgui
  const { contactId } = await props.params;

  const supabase = createClient(cookies())
;
  
  const { data: contact } = await supabase
    .from('contacts')
    .select('nom')
    .eq('id', contactId)
    .single();

  return { title: `${contact?.nom || 'Contacte'} | Ribot` };
}

/**
 * La pàgina principal de detall de contacte.
 */
export default async function ContactDetailPage(props: ContactDetailPageProps) {
  // ✅ CORRECCIÓ: Esperem que la promesa dels paràmetres es resolgui
  const { contactId } = await props.params;

  return (
    <Suspense fallback={<ContactDetailSkeleton />}>
      {/* Passem l'ID ja resolt al component de dades */}
      <ContactDetailData contactId={contactId} />
    </Suspense>
  );
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_components/contact-detail-client.tsx ===================

// @/app/[locale]/(app)/crm/contactes/[id]/_components/ContactDetailClient.tsx (Versió Final Refactoritzada)
"use client";

import React from 'react';
import { motion } from 'framer-motion';
import { useTranslations } from 'next-intl';
import { type Contact, type Quote, type Opportunity, type Invoice, type Activity } from '@/types/crm';
import { useContactDetail } from '../_hooks/useContactDetail.ts'; // ✅ 1. IMPORTA EL NOU HOOK
import { ContactDetailHeader } from './ContactDetailHeader'; // ✅ 2. IMPORTA EL NOU COMPONENT DE CAPÇALERA
import { ContactDetailTabs } from './ContactDetailTabs'; // El component de pestanyes que ja tenies

interface ContactDetailClientProps {
    initialContact: Contact;
    initialRelatedData: {
        quotes: Quote[];
        opportunities: Opportunity[];
        invoices: Invoice[];
        activities: Activity[];
    };
}

export function ContactDetailClient({ initialContact, initialRelatedData }: ContactDetailClientProps) {
    const t = useTranslations('ContactDetailPage');
    
    // ✅ 3. TOTA LA LÒGICA ESTÀ CENTRALITZADA AL HOOK
    const {
        contact,
        isEditing,
        isPending,
        formRef,
        handleSaveChanges,
        handleDelete,
        handleCancelEdit,
        setIsEditing,
    } = useContactDetail(initialContact, t);

    return (
        <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} className="flex flex-col h-full">
            <form action={handleSaveChanges} ref={formRef} className="flex flex-col h-full">
                
                {/* ✅ 4. RENDERITZA EL COMPONENT DE CAPÇALERA, PASSANT-LI ELS PROPS NECESSARIS */}
                <ContactDetailHeader
                    contact={contact}
                    isEditing={isEditing}
                    isPending={isPending}
                    onEdit={() => setIsEditing(true)}
                    onCancel={handleCancelEdit}
                    onDelete={handleDelete}
                />
                
                {/* ✅ 5. RENDERITZA LES PESTANYES. LA LÒGICA INTERNA DE LES PESTANYES JA ESTÀ SEPARADA */}
                <ContactDetailTabs
                    contact={contact}
                    relatedData={initialRelatedData}
                    isEditing={isEditing}
                />

            </form>
        </motion.div>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_components/ContactDetailData.tsx ===================

// /app/[locale]/crm/contactes/[contactId]/_components/ContactDetailData.tsx

import { notFound} from 'next/navigation';
import { ContactDetailClient } from './contact-detail-client';
import type { Contact, Quote, Opportunity, Invoice, Activity } from '@/types/crm';
import { validatePageSession } from "@/lib/supabase/session"; // ✅ 1. Importem la funció de pàgina

export async function ContactDetailData({ contactId }: { contactId: string }) {
    const { supabase, activeTeamId } = await validatePageSession();

    // ------------------------------------

    // ✅ SECURE QUERY: We now fetch the contact by its ID AND the active team ID.
    // The RLS policy on the 'contacts' table will enforce this, but being explicit here is good practice.
    const { data: contact, error } = await supabase
        .from('contacts')
        .select('*')
        .eq('id', contactId)
        .eq('team_id', activeTeamId) // <-- CRUCIAL SECURITY FILTER
        .single();
    
    // If the contact is not found (either it doesn't exist or doesn't belong to the team), show a 404.
    if (error || !contact) {
        notFound(); 
    }

    // ✅ SECURE PARALLEL QUERIES: All related data is also filtered by the active team ID.
    const [quotesRes, oppsRes, invoicesRes, activitiesRes] = await Promise.all([
        supabase.from('quotes').select('*').eq('contact_id', contactId).eq('team_id', activeTeamId).order('created_at', { ascending: false }),
        supabase.from('opportunities').select('*').eq('contact_id', contactId).eq('team_id', activeTeamId).order('created_at', { ascending: false }),
        supabase.from('invoices').select('*').eq('contact_id', contactId).eq('team_id', activeTeamId).order('created_at', { ascending: false }),
        supabase.from('activities').select('*').eq('contact_id', contactId).eq('team_id', activeTeamId).order('created_at', { ascending: false })
    ]);

    const relatedData = {
        quotes: (quotesRes.data as Quote[]) || [],
        opportunities: (oppsRes.data as Opportunity[]) || [],
        invoices: (invoicesRes.data as Invoice[]) || [],
        activities: (activitiesRes.data as Activity[]) || []
    };

    return <ContactDetailClient initialContact={contact as Contact} initialRelatedData={relatedData} />;
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_components/ContactDetailHeader.tsx ===================

// @/app/[locale]/(app)/crm/contactes/[id]/_components/ContactDetailHeader.tsx
import React from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Dialog, DialogTrigger } from '@/components/ui/dialog';
import { ArrowLeft, User, Edit, Ban, Loader2, Trash } from 'lucide-react';
import { useTranslations } from 'next-intl';
import { type Contact } from '@/types/crm';
import { DeleteConfirmationDialog } from './DeleteConfirmationDialog'; // Crearem aquest component a continuació

interface Props {
    contact: Contact;
    isEditing: boolean;
    isPending: boolean;
    onEdit: () => void;
    onCancel: () => void;
    onDelete: () => void;
}

export function ContactDetailHeader({ contact, isEditing, isPending, onEdit, onCancel, onDelete }: Props) {
    const t = useTranslations('ContactDetailPage');
    const router = useRouter();

    return (
        <div className="flex flex-col sm:flex-row justify-between sm:items-center gap-4 mb-6">
            <div className="flex-1">
                <Button variant="ghost" onClick={() => router.push('/crm/contactes')} type="button" className="-ml-4">
                    <ArrowLeft className="w-4 h-4 mr-2" /> {t('backToContacts')}
                </Button>
                <div className="flex items-center gap-4 mt-4">
                    <div className="w-16 h-16 sm:w-20 sm:h-20 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center shrink-0">
                        <User className="w-8 h-8 sm:w-10 sm:h-10 text-white" />
                    </div>
                    <div>
                        {isEditing ? (
                            <Input name="nom" defaultValue={contact.nom} className="text-2xl sm:text-3xl font-bold" />
                        ) : (
                            <h1 className="text-3xl sm:text-4xl font-bold">{contact.nom}</h1>
                        )}
                        {isEditing ? (
                            <Input name="empresa" defaultValue={contact.empresa || ''} className="text-lg sm:text-xl mt-1" />
                        ) : (
                            <p className="text-lg sm:text-xl text-muted-foreground mt-1">{contact.empresa}</p>
                        )}
                    </div>
                </div>
            </div>
            
            <div className="flex gap-2 items-center self-end w-full sm:w-auto">
                {isEditing ? (
                    <>
                        <Button variant="ghost" onClick={onCancel} type="button">
                            <Ban className="w-4 h-4 mr-2" />{t('buttons.cancel')}
                        </Button>
                        <Button type="submit" disabled={isPending}>
                            {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                            {t('buttons.saveChanges')}
                        </Button>
                    </>
                ) : (
                    <>
                        <Button variant="outline" onClick={onEdit} type="button">
                            <Edit className="w-4 h-4 mr-2" />{t('buttons.editDetails')}
                        </Button>
                        <Dialog>
                            <DialogTrigger asChild>
                                <Button variant="destructive" type="button" className="gap-2">
                                    <Trash className="w-4 h-4" />{t('buttons.delete')}
                                </Button>
                            </DialogTrigger>
                            <DeleteConfirmationDialog onConfirm={onDelete} isPending={isPending} />
                        </Dialog>
                    </>
                )}
            </div>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_components/ContactDetailSkeleton.tsx ===================

"use client";



export function ContactDetailSkeleton() {
  return (
    <div className="space-y-8 animate-pulse">
      {/* Esquelet de la Capçalera */}
      <div>
        <div className="h-9 w-40 bg-gray-700/50 rounded-md mb-4"></div>
        <div className="flex items-center gap-6">
          <div className="w-20 h-20 bg-gray-700/50 rounded-full shrink-0"></div>
          <div>
            <div className="h-10 w-64 bg-gray-700/50 rounded-md"></div>
            <div className="h-6 w-48 bg-gray-700/50 rounded-md mt-2"></div>
          </div>
        </div>
      </div>

      {/* Esquelet de les Pestanyes */}
      <div className="glass-card p-2">
        <div className="flex border-b border-gray-700/50">
          {[...Array(5)].map((_, i) => (
            <div key={i} className="h-10 w-28 bg-gray-700/50 m-1 rounded-md"></div>
          ))}
        </div>
        <div className="p-8">
          <div className="h-8 w-56 bg-gray-700/50 rounded-md mb-6"></div>
          <div className="space-y-4">
            <div className="h-6 w-full bg-gray-700/50 rounded-md"></div>
            <div className="h-6 w-3/4 bg-gray-700/50 rounded-md"></div>
            <div className="h-6 w-5/6 bg-gray-700/50 rounded-md"></div>
          </div>
        </div>
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_components/ContactDetailTabs.tsx ===================

// @/app/[locale]/(app)/crm/contactes/[id]/_components/ContactDetailTabs.tsx
"use client";

import { useTranslations, useLocale } from 'next-intl';
import { ca, es, enUS } from 'date-fns/locale';
import { type Contact, type Quote, type Opportunity, type Invoice, type Activity, CONTACT_STATUS_MAP } from '@/types/crm';
import { Tabs, TabsContent, TabsList } from "@/components/ui/tabs";
import { Briefcase, FileText, Receipt, Activity as ActivityIcon, Edit } from 'lucide-react';

// Importacions dels nous components
import { TabTriggerWithCount } from './shared/TabTriggerWithCount';
import { ActivitiesTab } from './tabs/ActivitiesTab';
import { RelatedDataTable } from './tabs/RelatedDataTable';
import { DetailsTab } from './tabs/DetailsTab';

interface Props {
    contact: Contact;
    relatedData: { quotes: Quote[]; opportunities: Opportunity[]; invoices: Invoice[]; activities: Activity[]; };
    isEditing: boolean;
}

export function ContactDetailTabs({ contact, relatedData, isEditing }: Props) {
    const t = useTranslations('ContactDetailPage');
    const locale = useLocale();
    const dateLocale = { ca, es, en: enUS }[locale] || ca;
    
    const getStatusLabel = (statusCode?: string) => {
        if (!statusCode) return t('details.noData');
        const status = CONTACT_STATUS_MAP.find(s => s.code === statusCode);
        return status ? t(`contactStatuses.${status.key}`) : statusCode;
    };

    return (
        <div className="glass-card p-4 md:p-6 mt-8">
            <Tabs defaultValue="activitats" className="w-full">
                <div className="overflow-x-auto -mx-4 px-4 pb-px">
                      {/* 👇 AQUÍ ESTÀ EL CANVI 👇 */}
                      <TabsList className="grid w-full sm:w-auto sm:grid-cols-5">
                        
                        <TabTriggerWithCount value="activitats" icon={ActivityIcon} count={relatedData.activities.length} label={t('tabs.activities')} />
                        <TabTriggerWithCount value="oportunitats" icon={Briefcase} count={relatedData.opportunities.length} label={t('tabs.opportunities')} />
                        <TabTriggerWithCount value="pressupostos" icon={FileText} count={relatedData.quotes.length} label={t('tabs.quotes')} />
                        <TabTriggerWithCount value="factures" icon={Receipt} count={relatedData.invoices.length} label={t('tabs.invoices')} />
                        <TabTriggerWithCount value="detalls" icon={Edit} count={0} label={t('tabs.details')} />
                    </TabsList>
                </div>
                
                <TabsContent value="activitats" className="pt-6">
                    <h3 className="text-2xl font-bold mb-6">{t('activities.title')}</h3>
                    <ActivitiesTab activities={relatedData.activities} dateLocale={dateLocale} emptyMessage={t('activities.empty')}/>
                </TabsContent>
                
                <TabsContent value="oportunitats" className="pt-6">
                    <h3 className="text-2xl font-bold mb-6">{t('opportunities.title')}</h3>
                    <RelatedDataTable data={relatedData.opportunities} columns={[{ key: 'name', label: t('opportunities.table.name') }, { key: 'status', label: t('opportunities.table.status') }, { key: 'total', label: t('opportunities.table.value') }]} linkPath="/crm/pipeline" emptyMessage={t('opportunities.empty')} />
                </TabsContent>
                
                <TabsContent value="pressupostos" className="pt-6">
                     <h3 className="text-2xl font-bold mb-6">{t('quotes.title')}</h3>
                     <RelatedDataTable data={relatedData.quotes} columns={[{ key: 'number', label: t('quotes.table.number') }, { key: 'status', label: t('quotes.table.status') }, { key: 'total', label: t('quotes.table.total') }]} linkPath="/crm/quotes" emptyMessage={t('quotes.empty')} />
                </TabsContent>
                
                 <TabsContent value="factures" className="pt-6">
                     <h3 className="text-2xl font-bold mb-6">{t('invoices.title')}</h3>
                     <RelatedDataTable data={relatedData.invoices} columns={[{ key: 'number', label: t('invoices.table.number') }, { key: 'status', label: t('invoices.table.status') }, { key: 'total', label: t('invoices.table.total') }]} emptyMessage={t('invoices.empty')} />
                </TabsContent>
                
                <TabsContent value="detalls" className="pt-6">
                     <DetailsTab contact={contact} isEditing={isEditing} dateLocale={dateLocale} getStatusLabel={getStatusLabel} />
                </TabsContent>
            </Tabs>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_components/DeleteConfirmationDialog.tsx ===================

// @/app/[locale]/(app)/crm/contactes/[id]/_components/DeleteConfirmationDialog.tsx
import React from 'react';
import { Button } from '@/components/ui/button';
import {
    DialogContent,
    DialogHeader,
    DialogTitle,
    DialogDescription,
    DialogFooter,
    DialogClose, // Utilitzem DialogClose per al botó de cancel·lar
} from "@/components/ui/dialog";
import { Loader2, Trash } from 'lucide-react';
import { useTranslations } from 'next-intl';

interface Props {
    onConfirm: () => void;
    isPending: boolean;
}

export function DeleteConfirmationDialog({ onConfirm, isPending }: Props) {
    const t = useTranslations('ContactDetailPage');
    return (
        <DialogContent className="sm:max-w-lg">
            <DialogHeader className="space-y-4 text-center">
                <Trash className="w-12 h-12 mx-auto text-red-600" />
                <DialogTitle className="text-2xl font-bold text-red-600">{t('deleteDialog.title')}</DialogTitle>
                <DialogDescription className="text-base text-muted-foreground">
                    {t('deleteDialog.description1')} <span className="font-semibold text-red-600">{t('deleteDialog.irreversible')}</span>. {t('deleteDialog.description2')}
                </DialogDescription>
            </DialogHeader>
            <DialogFooter className="flex justify-end gap-3">
                <DialogClose asChild>
                    <Button variant="outline">{t('buttons.cancel')}</Button>
                </DialogClose>
                <Button variant="destructive" onClick={onConfirm} disabled={isPending}>
                    {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                    {t('buttons.confirmDelete')}
                </Button>
            </DialogFooter>
        </DialogContent>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_components/EditableField.tsx ===================

// @/app/[locale]/(app)/crm/contactes/[id]/_components/EditableField.tsx
import React from 'react';
import { Label } from '@/components/ui/label';

interface EditableFieldProps {
    label: string;
    isEditing: boolean;
    viewValue: React.ReactNode;
    editComponent: React.ReactNode;
    className?: string;
}

/**
 * Component per mostrar un camp que pot ser visualitzat o editat.
 * Encapsula la lògica de renderitzar un <p> o un component d'edició (<Input>, <Select>, etc.)
 */
export const EditableField: React.FC<EditableFieldProps> = ({ label, isEditing, viewValue, editComponent, className }) => {
    return (
        <div className={`space-y-2 ${className}`}>
            <Label>{label}</Label>
            {isEditing ? (
                editComponent
            ) : (
                <p className="text-lg pt-2 min-h-[42px] flex items-center text-foreground">
                    {viewValue}
                </p>
            )}
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_components/shared/TabTriggerWithCount.tsx ===================

import { FC, ElementType } from 'react';
import { TabsTrigger } from "@/components/ui/tabs";

interface Props { value: string; icon: ElementType; count: number; label: string; }

export const TabTriggerWithCount: FC<Props> = ({ value, icon: Icon, count, label }) => (
    <TabsTrigger value={value} className="flex items-center gap-2 text-sm px-4">
        <Icon className="w-4 h-4" />
        <span className="font-semibold">{label}</span>
        {count > 0 && <span className="ml-1 px-2 py-0.5 text-xs font-bold rounded-full bg-primary/20 text-primary">{count}</span>}
    </TabsTrigger>
);

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_components/tabs/ActivitiesTab.tsx ===================

import { FC } from 'react';
import { format } from 'date-fns';
import { type Activity } from '@/types/crm';
import { EmptyState } from '@/components/shared/EmptyState';   

interface Props { activities: Activity[]; dateLocale: Locale; emptyMessage: string; }

export const ActivitiesTab: FC<Props> = ({ activities, dateLocale, emptyMessage }) => {
    if (activities.length === 0) return <EmptyState message={emptyMessage} />;

    return (
        <div className="space-y-4">
            {activities.map(act => (
                <div key={act.id} className="p-4 rounded-lg bg-background/50 border">
                    <div className="flex justify-between items-center text-sm mb-2">
                        <span className="font-bold text-primary">{act.type}</span>
                        <span className="text-muted-foreground">{format(new Date(act.created_at), "d MMMM yyyy, HH:mm", { locale: dateLocale })}</span>
                    </div>
                    <p className="text-foreground italic">"{act.content}"</p>
                </div>
            ))}
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_components/tabs/DetailsTab.tsx ===================

import { FC } from 'react';
import { type Contact } from '@/types/crm';

// ✅ Importa les noves seccions
import { GeneralInfoSection } from './GeneralInfoSection';
import { PersonalInfoSection } from './PersonalInfoSection';
import { NotesSection } from './NotesSection';

interface Props {
    contact: Contact;
    isEditing: boolean;
    dateLocale: Locale;
    getStatusLabel: (code?: string) => string;
}

export const DetailsTab: FC<Props> = ({ contact, isEditing, dateLocale, getStatusLabel }) => {
    return (
        <div className="space-y-12">
            <GeneralInfoSection 
                contact={contact} 
                isEditing={isEditing} 
                getStatusLabel={getStatusLabel} 
            />
            <PersonalInfoSection 
                contact={contact} 
                isEditing={isEditing} 
                dateLocale={dateLocale} 
            />
            <NotesSection 
                contact={contact} 
                isEditing={isEditing} 
            />
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_components/tabs/GeneralInfoSection.tsx ===================

import { FC } from 'react';
import { type Contact, CONTACT_STATUS_MAP } from '@/types/crm';
import { EditableField } from '../EditableField';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useTranslations } from 'next-intl';

interface Props { contact: Contact; isEditing: boolean; getStatusLabel: (code?: string) => string; }

export const GeneralInfoSection: FC<Props> = ({ contact, isEditing, getStatusLabel }) => {
    const t = useTranslations('ContactDetailPage');
    return (
        <div>
            <h3 className="text-2xl font-bold mb-6">{t('details.generalInfo')}</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-x-8 gap-y-6">
                <EditableField label={t('details.labels.email')} isEditing={isEditing} viewValue={contact.email || t('details.noData')} editComponent={<Input name="email" type="email" defaultValue={contact.email || ''} />} />
                <EditableField label={t('details.labels.phone')} isEditing={isEditing} viewValue={contact.telefon || t('details.noData')} editComponent={<Input name="telefon" defaultValue={contact.telefon || ''} />} />
                <EditableField label={t('details.labels.status')} isEditing={isEditing} viewValue={getStatusLabel(contact.estat)} editComponent={
                    <Select name="estat" defaultValue={contact.estat || undefined}>
                        <SelectTrigger><SelectValue /></SelectTrigger>
                        <SelectContent>{CONTACT_STATUS_MAP.map(s => <SelectItem key={s.code} value={s.code}>{t(`contactStatuses.${s.key}`)}</SelectItem>)}</SelectContent>
                    </Select>
                } />
                <EditableField label={t('details.labels.jobTitle')} isEditing={isEditing} viewValue={contact.job_title || t('details.noData')} editComponent={<Input name="job_title" defaultValue={contact.job_title || ''} />} />
                <EditableField label={t('details.labels.industry')} isEditing={isEditing} viewValue={contact.industry || t('details.noData')} editComponent={<Input name="industry" defaultValue={contact.industry || ''} />} />
                <EditableField label={t('details.labels.leadSource')} isEditing={isEditing} viewValue={contact.lead_source || t('details.noData')} editComponent={<Input name="lead_source" defaultValue={contact.lead_source || ''} />} />
            </div>
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_components/tabs/NotesSection.tsx ===================

import { FC } from 'react';
import { useTranslations } from 'next-intl';
import { type Contact } from '@/types/crm';
import { Textarea } from '@/components/ui/textarea';

interface Props {
    contact: Contact;
    isEditing: boolean;
}

export const NotesSection: FC<Props> = ({ contact, isEditing }) => {
    const t = useTranslations('ContactDetailPage');

    return (
        <div>
            <h3 className="text-2xl font-bold mb-6">{t('details.notes')}</h3>
            {isEditing ? (
                <Textarea name="notes" defaultValue={contact.notes || ''} rows={6} />
            ) : (
                <p className="text-base text-muted-foreground whitespace-pre-wrap min-h-[120px]">
                    {contact.notes || t('details.noNotes')}
                </p>
            )}
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_components/tabs/PersonalInfoSection.tsx ===================

import { FC } from 'react';
import { format } from 'date-fns';
import { useTranslations } from 'next-intl';
import { type Contact } from '@/types/crm';
import { EditableField } from '../EditableField';
import { Input } from '@/components/ui/input';

interface Props {
    contact: Contact;
    isEditing: boolean;
    dateLocale: Locale;
}

export const PersonalInfoSection: FC<Props> = ({ contact, isEditing, dateLocale }) => {
    const t = useTranslations('ContactDetailPage');

    const formattedBirthday = contact.birthday 
        ? format(new Date(contact.birthday), 'dd/MM/yyyy', { locale: dateLocale }) 
        : t('details.noData');

    return (
        <div>
            <h3 className="text-2xl font-bold mb-6">{t('details.personalInfo')}</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-x-8 gap-y-6">
                <EditableField
                    label={t('details.labels.birthday')}
                    isEditing={isEditing}
                    viewValue={formattedBirthday}
                    editComponent={<Input type="date" name="birthday" defaultValue={contact.birthday || ''} />}
                />
                <EditableField
                    label={t('details.labels.city')}
                    isEditing={isEditing}
                    viewValue={contact.address?.city || t('details.noData')}
                    editComponent={<Input name="address.city" defaultValue={contact.address?.city || ''} />}
                />
                <EditableField
                    label={t('details.labels.linkedin')}
                    isEditing={isEditing}
                    viewValue={contact.social_media?.linkedin || t('details.noData')}
                    editComponent={<Input name="social_media.linkedin" defaultValue={contact.social_media?.linkedin || ''} />}
                />
                <EditableField
                    label={t('details.labels.children')}
                    isEditing={isEditing}
                    viewValue={contact.children_count ?? t('details.noData')}
                    editComponent={<Input type="number" name="children_count" defaultValue={contact.children_count ?? ''} />}
                />
                <EditableField
                    label={t('details.labels.partnerName')}
                    isEditing={isEditing}
                    viewValue={contact.partner_name || t('details.noData')}
                    editComponent={<Input name="partner_name" defaultValue={contact.partner_name || ''} />}
                />
                <EditableField
                    label={t('details.labels.hobbies')}
                    isEditing={isEditing}
                    viewValue={contact.hobbies?.join(', ') || t('details.noData')}
                    editComponent={<Input name="hobbies" defaultValue={contact.hobbies?.join(', ') || ''} />}
                />
            </div>
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_components/tabs/RelatedDataTable.tsx ===================

import Link from 'next/link';
import { FC } from 'react';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { StatusBadge } from '@/components/shared/StatusBadge';
import { EmptyState } from '@/components/shared/EmptyState';

type DataItem = { id: string; status?: string | null; stage_name?: string | null; total?: number | null; value?: number | null; name?: string | null; quote_number?: string | null; invoice_number?: string | null; };
interface Column { key: string; label: string; }
interface Props { data: DataItem[]; columns: Column[]; linkPath?: string; emptyMessage: string; }

export const RelatedDataTable: FC<Props> = ({ data, columns, linkPath, emptyMessage }) => {
    if (data.length === 0) return <EmptyState message={emptyMessage} />;

    return (
        <Table>
            <TableHeader><TableRow>{columns.map(col => <TableHead key={col.key} className={col.key === 'total' ? 'text-right' : ''}>{col.label}</TableHead>)}</TableRow></TableHeader>
            <TableBody>
                {data.map((item) => (
                    <TableRow key={item.id}>
                        <TableCell className="font-medium">
                            {linkPath ? <Link href={`${linkPath}/${item.id}`} className="text-primary hover:underline">{item.name || item.quote_number || item.invoice_number}</Link> : item.name || item.invoice_number}
                        </TableCell>
                        <TableCell><StatusBadge status={item.status || item.stage_name} /></TableCell>
                        <TableCell className="text-right font-semibold">€{((item.total || item.value) || 0).toLocaleString('ca-ES')}</TableCell>
                    </TableRow>
                ))}
            </TableBody>
        </Table>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/contactes/[contactId]/_hooks/useContactDetail.ts ===================

// @/hooks/useContactDetail.ts
"use client";

import { useState, useTransition, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { type Contact } from '@/types/crm';
import { updateContactAction, deleteContactAction } from '../actions'; // Ajusta la ruta a les teves Server Actions

// Tipus per a la funció de traducció, per a més seguretat
type TFunction = (key: string) => string;

/**
 * Hook per gestionar la lògica de la pàgina de detall d'un contacte.
 * @param initialContact - L'objecte inicial del contacte.
 * @param t - La funció de traducció de next-intl.
 */
export function useContactDetail(initialContact: Contact, t: TFunction) {
    const router = useRouter();
    const [isPending, startTransition] = useTransition();
    const [isEditing, setIsEditing] = useState(false);
    const [contact, setContact] = useState(initialContact);
    const formRef = useRef<HTMLFormElement>(null);

    const handleSaveChanges = (formData: FormData) => {
        startTransition(async () => {
            const { data, error } = await updateContactAction(contact.id, formData);
            if (error) {
                toast.error(t('toast.errorTitle'), { description: error.message });
            } else if (data) {
                toast.success(t('toast.successTitle'), { description: t('toast.updateSuccess') });
                setContact(data as Contact);
                setIsEditing(false);
            }
        });
    };

    const handleDelete = () => {
        startTransition(async () => {
            const res = await deleteContactAction(contact.id);
            if (!res.success) {
                toast.error(t('toast.errorTitle'), { description: res.message });
            } else {
                toast.success(t('toast.successTitle'), { description: t('toast.deleteSuccess') });
                router.push('/crm/contactes');
            }
        });
    };

    const handleCancelEdit = () => {
        setIsEditing(false);
        formRef.current?.reset();
    };

    return {
        contact,
        isEditing,
        isPending,
        formRef,
        handleSaveChanges,
        handleDelete,
        handleCancelEdit,
        setIsEditing,
    };
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/_components/ContactCard.tsx ===================

"use client";

import React from 'react';
// Framer Motion per a animacions fluides.
import { motion } from 'framer-motion';
// Icones de Lucide React.
import { User, Building, Mail, Phone} from 'lucide-react';
// Importem el tipus de dades 'Contact' i el nostre mapa d'estats.
import type { Contact } from '@/types/crm';
import { CONTACT_STATUS_MAP } from '@/types/crm';
// Importem el hook de traduccions.
import { useTranslations } from 'next-intl';

// Definim les propietats (props) que el nostre component espera rebre.
interface ContactCardProps {
    contact: Contact; // L'objecte amb totes les dades d'un contacte.
    onClick: () => void; // Una funció que s'executarà quan es faci clic a la targeta.
}

/**
 * @summary Aquest és un component presentacional reutilitzable i internacionalitzat.
 * La seva única responsabilitat és mostrar les dades d'un contacte en un format de targeta visual.
 * Rep tota la lògica i les dades del seu component pare.
 */
const ContactCard: React.FC<ContactCardProps> = ({ contact, onClick }) => {
    // Inicialitzem el hook de traduccions per al namespace que correspongui.
    // Canvia 'ContactsClient' si has organitzat les teves traduccions de manera diferent.
    const t = useTranslations('ContactsClient');

    /**
     * @summary Funció interna per obtenir el text traduït de l'estat a partir del seu codi.
     * @param statusCode El codi de l'estat (ex: 'L', 'P', 'C').
     * @returns El text complet i traduït (ex: "Lead", "Cliente", "Proveedor").
     */
    const getStatusLabel = (statusCode?: string) => {
        if (!statusCode) return ''; // Si no hi ha estat, no retornem res.
        // Busquem l'objecte corresponent al codi dins del nostre mapa central.
        const statusObject = CONTACT_STATUS_MAP.find(s => s.code === statusCode);
        // Si el trobem, utilitzem la seva 'key' per obtenir la traducció.
        // Si no, retornem el codi original com a fallback.
        return statusObject ? t(`contactStatuses.${statusObject.key}`) : statusCode;
    };

    return (
        // Utilitzem 'motion.div' de Framer Motion per a animacions.
        <motion.div
            layoutId={`contact-card-${contact.id}`}
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.9 }}
            onClick={onClick}
            className="group glass-effect p-6 rounded-xl hover:border-primary/50 border border-transparent transition-all cursor-pointer flex flex-col justify-between h-full"
        >
            <div className="min-w-0">
                <div className="flex items-start justify-between mb-4">
                    <div className="flex items-center gap-4 min-w-0">
                        <div className="w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center shrink-0">
                            <User className="w-6 h-6 text-white" />
                        </div>
                        <div className="min-w-0">
                            {/* 📛 Nom — Truncat normalment, desplegat en hover */}
                            <h3
                                className="
              font-bold text-lg text-foreground truncate max-w-[200px]
              group-hover:max-w-[500px] group-hover:whitespace-normal transition-all duration-300
            "
                            >
                                {contact.nom}
                            </h3>
                            {/* Empresa */}
                            <p className="text-sm text-muted-foreground flex items-center gap-1.5 truncate max-w-[200px]">
                                <Building className="w-4 h-4 shrink-0" />
                                <span className="truncate">{contact.empresa || t('noCompany')}</span>
                            </p>
                        </div>
                    </div>
                    {/* 🏷 Estat — Badge que es fa petit en hover */}
                    <span
                        className={`
          status-badge status-${contact.estat?.toLowerCase()}
          shrink-0 transition-transform duration-300
          group-hover:scale-75 group-hover:opacity-80
        `}
                    >
                        {getStatusLabel(contact.estat)}
                    </span>
                </div>

                {/* Info de contacte */}
                <div className="space-y-2 text-sm min-w-0">
                    <p className="flex items-center gap-2 text-muted-foreground truncate max-w-[250px]">
                        <Mail className="w-4 h-4 text-primary/70 shrink-0" />
                        <span className="truncate">{contact.email}</span>
                    </p>
                    <p className="flex items-center gap-2 text-muted-foreground truncate max-w-[200px]">
                        <Phone className="w-4 h-4 text-primary/70 shrink-0" />
                        <span className="truncate">{contact.telefon || t('notSpecified')}</span>
                    </p>
                </div>
            </div>

            {/* Secció inferior 
            <div className="flex items-center justify-between pt-4 mt-4 border-t border-white/10">
                <div className="text-lg font-semibold text-green-400 flex items-center">
                    <Euro className="w-4 h-4 mr-1" />
                    {contact.valor?.toLocaleString() || '0'}
                </div>
                <div className="flex items-center gap-1">
                    <Star className="w-4 h-4 text-yellow-400 fill-current" />
                    <span className="text-sm text-gray-400">4.5</span>
                </div>
            </div>*/}
        </motion.div>

    );
}

export default ContactCard;

// =================== FILE: src/app/[locale]/(app)/crm/contactes/_components/ContactDialog.tsx ===================

"use client";

import React, { useState, useEffect, useTransition } from 'react';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger, DialogFooter, DialogClose } from "@/components/ui/dialog";
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Loader2 } from 'lucide-react';
import { createContactAction } from '../actions';
import { toast } from 'sonner';
import { useTranslations } from 'next-intl';
import { CONTACT_STATUS_MAP } from '@/types/crm';

// Props que el nostre diàleg acceptarà
interface ContactDialogProps {
    trigger: React.ReactNode; // El botó o element que obrirà el diàleg
    initialData?: {          // Dades opcionals per a pre-omplir el formulari
        nom?: string | null;
        email?: string | null;
    };
    onContactSaved?: (newContact: unknown) => void; // Funció que s'executa quan es desa
}

export function ContactDialog({ trigger, initialData, onContactSaved }: ContactDialogProps) {
    const t = useTranslations('ContactsClient');
    const [isOpen, setIsOpen] = useState(false);
    const [isPending, startTransition] = useTransition();
    const formRef = React.useRef<HTMLFormElement>(null);

    // Reseteja el formulari cada vegada que s'obre per a asegurar dades fresques
    useEffect(() => {
        if (isOpen) {
            formRef.current?.reset();
        }
    }, [isOpen]);

    const handleFormAction = (formData: FormData) => {
        startTransition(async () => {
            const result = await createContactAction(formData);
            if (result.error) {
                toast.error(t('toastErrorTitle'), { description: result.error.message });
            } else if (result.data) {
                toast.success(t('toastSuccessTitle'), { description: t('toastSuccessDescription') });
                setIsOpen(false);
                onContactSaved?.(result.data); // Cridem el callback amb el nou contacte
            }
        });
    };

    return (
        <Dialog open={isOpen} onOpenChange={setIsOpen}>
            <DialogTrigger asChild>{trigger}</DialogTrigger>
            <DialogContent>
                <DialogHeader>
                    <DialogTitle>{t('dialogTitle')}</DialogTitle>
                    <DialogDescription>{t('dialogDescription')}</DialogDescription>
                </DialogHeader>
                <form ref={formRef} action={handleFormAction} className="space-y-4 pt-4">
                    <Input name="nom" placeholder={t('namePlaceholder')} required defaultValue={initialData?.nom ?? ''} />
                    <Input name="empresa" placeholder={t('companyPlaceholder')} />
                    <Input name="email" type="email" placeholder={t('emailPlaceholder')} required defaultValue={initialData?.email ?? ''} />
                    <Input name="telefon" placeholder={t('phonePlaceholder')} />
                    <Input name="valor" type="number" placeholder={t('valuePlaceholder')} defaultValue={0} />
                    <Select name="estat" defaultValue="Lead">
                        <SelectTrigger><SelectValue /></SelectTrigger>
                        <SelectContent>
                            {CONTACT_STATUS_MAP.map(status => (
                                <SelectItem key={status.code} value={status.code}>
                                    {t(`contactStatuses.${status.key}`)}
                                </SelectItem>
                            ))}
                        </SelectContent>
                    </Select>
                    <DialogFooter>
                        <DialogClose asChild><Button type="button" variant="ghost">{t('cancelButton')}</Button></DialogClose>
                        <Button type="submit" disabled={isPending}>
                            {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                            {t('saveButton')}
                        </Button>
                    </DialogFooter>
                </form>
            </DialogContent>
        </Dialog>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/_components/contacts-client.tsx ===================

// @/app/[locale]/(app)/crm/contactes/_components/ContactsClient.tsx (Versió Corregida)
"use client";

import React, { useState, useMemo, useTransition } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { motion, AnimatePresence } from 'framer-motion';
import { useTranslations } from 'next-intl';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Plus, Search, LayoutGrid, List, FilePlus2, Upload, Download } from 'lucide-react';
import { toast } from 'sonner';

import { type Contact, CONTACT_STATUS_MAP } from '@/types/crm';

import { useContactFilters } from '../_hooks/useContactFilters';

import { ContactDialog } from './ContactDialog';
import ContactCard from './ContactCard';
import ContactTable from './ContactTable';
import ExcelDropdownButton, { DropdownOption } from '@/app/[locale]/(app)/excel/ExcelDropdownButton';
import { exportToExcel,importFromExcel } from '@/app/[locale]/(app)/excel/actions';
import { TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST } from 'next/dist/shared/lib/constants';

interface ContactsClientProps {
    initialContacts: Contact[];
    totalPages: number;
    currentPage: number;
    initialViewMode: 'cards' | 'list';
}

export function ContactsClient({
    initialContacts,
    totalPages,
    currentPage,
    initialViewMode
}: ContactsClientProps) {
    const t = useTranslations('ContactsClient');
    const t2 = useTranslations('excel');
    const router = useRouter();
    const searchParams = useSearchParams();
    const [isExporting, startTransition] = useTransition(); 

    const { sortBy, statusFilter, viewMode, handleFilterChange } = useContactFilters(initialViewMode);

    const [contacts, setContacts] = useState<Contact[]>(initialContacts);
    const [searchTerm, setSearchTerm] = useState(searchParams.get('q') || '');

    const filteredContacts = useMemo(() => contacts.filter(c =>
        (c.nom?.toLowerCase() || '').includes(searchTerm.toLowerCase()) ||
        (c.empresa?.toLowerCase() || '').includes(searchTerm.toLowerCase()) ||
        (c.email?.toLowerCase() || '').includes(searchTerm.toLowerCase())
    ), [contacts, searchTerm]);

    const handleContactClick = (contact: Contact) => {
        router.push(`/crm/contactes/${contact.id}`);
    };

    const excelOptions: DropdownOption[] = [
        { value: 'create', label: t2('contacts.create'), icon: FilePlus2 },
        { value: 'load', label: t2('contacts.load'), icon: Upload },
        { value: 'download', label: t2('contacts.download'), icon: Download },
    ];

    async function handleExportAndDownload(shouldDownload: boolean) {
        toast.info(t2('contacts.startingexport'));
        try {
            const result = await exportToExcel('contacts', shouldDownload);

            if (result.success && result.fileBuffer) {
                const byteCharacters = atob(result.fileBuffer);
                const byteNumbers = new Array(byteCharacters.length);
                for (let i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                const byteArray = new Uint8Array(byteNumbers);
                const blob = new Blob([byteArray], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });

                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = result.fileName || 'export.xlsx';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);

                toast.success(t2('successexport'));
            } else {
                toast.error(t2('errorexport'), { description: result.message });
            }
        } catch (error) {
            toast.error(t2('unexpectederror'), { description: (error as Error).message });
            console.error(error);
        }
    }

    /* Funció del costat del client per iniciar el procés d'importació.
    * Crea un input de fitxers i el llança.
     */
    function handleImport() {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.xlsx, .xls';

        input.onchange = async (e) => {
            const file = (e.target as HTMLInputElement).files?.[0];
            if (!file) {

            toast.error(t2('nofileselected'));
                return;
            }

            toast.info(t2('processingfile'));

            const formData = new FormData();
            formData.append('file', file);

            startTransition(async () => {
                try {
                    const result = await importFromExcel('contacts', formData);

                    if (result.success) {
                        toast.success(result.message);
                    } else {
                        toast.error(t2('errorloadingdata'), { description: result.message });
                    }
                } catch (error) {
                    toast.error(t2('unexpectederrorloadingfile'), { description: (error as Error).message });
                }
            });
        };

        input.click();
    }

    const handleExcelAction = (option: DropdownOption) => {
        switch (option.value) {
            case 'download':
                startTransition(() => handleExportAndDownload(true)); // ➡️ ARA ES CRIDA startTransition
                break;
            case 'create':
                startTransition(() => handleExportAndDownload(false)); // ➡️ I AQUÍ TAMBÉ
                break;
            case 'load':
                handleImport();
                break;
            default:
                break;
        }
    };

    return (
        <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} className="h-full flex flex-col">
            {/* CAPÇALERA */}
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6">
                <h1 className="text-3xl font-bold">{t('title')}</h1>
                <div className="flex w-full sm:w-auto items-center gap-2">
                    {/* Cercador */}
                    <div className="relative flex-grow">
                        <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground" />
                        <Input placeholder={t('searchPlaceholder')} className="pl-9" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} />
                    </div>

                    {/* ✅ 3. ELS COMPONENTS DE FILTRE ARA SÓN MÉS SIMPLES */}
                    <Select value={sortBy} onValueChange={(value) => handleFilterChange('sort', value)}>
                        <SelectTrigger className="w-[180px]"><SelectValue placeholder={t('filters.sortBy')} /></SelectTrigger>
                        <SelectContent>
                            <SelectItem value="newest">{t('filters.newest')}</SelectItem>
                            <SelectItem value="oldest">{t('filters.oldest')}</SelectItem>
                        </SelectContent>
                    </Select>

                    <Select value={statusFilter} onValueChange={(value) => handleFilterChange('status', value)}>
                        <SelectTrigger className="w-[180px]"><SelectValue placeholder={t('filters.status')} /></SelectTrigger>
                        <SelectContent>
                            <SelectItem value="all">{t('filters.allStatuses')}</SelectItem>
                            {CONTACT_STATUS_MAP.map(status => (
                                <SelectItem key={status.code} value={status.code}>
                                    {t(`contactStatuses.${status.key}`)}
                                </SelectItem>
                            ))}
                        </SelectContent>
                    </Select>

                    {/* Botons de vista */}
                    <div className="flex items-center gap-1 p-1 bg-muted rounded-lg">
                        <Button variant={viewMode === 'cards' ? 'secondary' : 'ghost'} size="icon" onClick={() => handleFilterChange('view', 'cards')}>
                            <LayoutGrid className="w-4 h-4" />
                        </Button>
                        <Button variant={viewMode === 'list' ? 'secondary' : 'ghost'} size="icon" onClick={() => handleFilterChange('view', 'list')}>
                            <List className="w-4 h-4" />
                        </Button>
                    </div>

                    {/* ✅ AQUÍ AFEGIM EL NOU BOTÓ */}
                    <ExcelDropdownButton
                        options={excelOptions}
                        onSelect={handleExcelAction}
                    />

                    <ContactDialog
                        trigger={
                            <Button className="flex-shrink-0">
                                <Plus className="w-4 h-4 md:mr-2" />
                                <span className="hidden md:inline">{t('newContactButton')}</span>
                            </Button>
                        }
                        onContactSaved={(newContact) => setContacts(prev => [newContact as Contact, ...prev])}
                    />
                </div>
            </div>

            {/* LLISTA DE CONTACTES (Això no canvia) */}
            <div className="flex-1 overflow-y-auto -mr-4 pr-4">
                <AnimatePresence mode="wait">
                    <motion.div key={viewMode} initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }}>
                        {filteredContacts.length > 0 ? (
                            viewMode === 'cards' ? (
                                <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4 gap-6">
                                    {filteredContacts.map(contact => (
                                        <ContactCard key={contact.id} contact={contact} onClick={() => handleContactClick(contact)} />
                                    ))}
                                </div>
                            ) : (<ContactTable contacts={filteredContacts} onRowClick={handleContactClick} />)
                        ) : (<div className="text-center py-16"><p>{t('noContactsFound')}</p></div>)}
                    </motion.div>
                </AnimatePresence>
            </div>
            {/* ✅ PAGINACIÓ AMB DISSENY ADAPTABLE */}
            {totalPages > 1 && (
                <div className="flex justify-center items-center gap-2 md:gap-4 mt-8 flex-shrink-0">
                    <Button asChild disabled={currentPage <= 1} size="sm" className="px-3">
                        <Link href={`/crm/contactes?page=${currentPage - 1}`}>
                            <span className="hidden md:inline">{t('pagination.previous')}</span>
                            <span className="md:hidden">←</span>
                        </Link>
                    </Button>
                    <span className="text-sm text-muted-foreground">
                        {t('pagination.page', { currentPage, totalPages })}
                    </span>
                    <Button asChild disabled={currentPage >= totalPages} size="sm" className="px-3">
                        <Link href={`/crm/contactes?page=${currentPage + 1}`}>
                            <span className="hidden md:inline">{t('pagination.next')}</span>
                            <span className="md:hidden">→</span>
                        </Link>
                    </Button>
                </div>
            )}
        </motion.div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/contactes/_components/ContactsData.tsx ===================

// /app/[locale]/crm/contactes/_components/ContactsData.tsx
import { ContactsClient } from './contacts-client';
import type { Contact } from '@/types/crm';
import { validateUserSession } from "@/lib/supabase/session"; // ✅ 1. Importem la nova funció

const ITEMS_PER_PAGE = 50;

interface ContactsDataProps {
    page: string;
    sortBy: string;
    status: string;
    searchTerm: string;
    viewMode: 'cards' | 'list';
}

export async function ContactsData({ page, sortBy, status, searchTerm, viewMode }: ContactsDataProps) {
    // ✅ 2. Cridem a la nostra funció centralitzada.
    const session = await validateUserSession();

    // Si la sessió no és vàlida (usuari no logat o sense equip actiu),
    // mostrem el component client amb dades buides.
    if ('error' in session) {
        console.error("ContactsData: Sessió invàlida.", session.error.message);
        return <ContactsClient initialContacts={[]} totalPages={0} currentPage={1} initialViewMode={viewMode} />;
    }

    // A partir d'aquí, sabem que tenim una sessió vàlida.
    const { supabase } = session;

    const currentPage = Number(page) || 1;
    const from = (currentPage - 1) * ITEMS_PER_PAGE;
    const to = from + ITEMS_PER_PAGE - 1;

    let query = supabase
        .from('contacts')
        .select('*, opportunities(id, value)', { count: 'exact' });

    // ✅ FILTRE OBLIGATORI: Ja no cal afegir .eq('team_id', teamId) manualment!
    // La política RLS que crearàs per a la taula 'contacts' ho farà automàticament.

    if (searchTerm) {
        query = query.or(`nom.ilike.%${searchTerm}%,empresa.ilike.%${searchTerm}%,email.ilike.%${searchTerm}%`);
    }
    if (status && status !== 'all') {
        query = query.eq('estat', status);
    }
    query = query.order('created_at', { ascending: sortBy === 'oldest' });
    query = query.range(from, to);

    const { data: contacts, error, count } = await query;
    
    if (error) {
        console.error("Error en obtenir contactes (pot ser per RLS):", error.message);
        return <ContactsClient initialContacts={[]} totalPages={0} currentPage={1} initialViewMode={viewMode} />;
    }

    const totalPages = Math.ceil((count || 0) / ITEMS_PER_PAGE);

    return (
        <ContactsClient 
            initialContacts={contacts as Contact[] || []} 
            totalPages={totalPages} 
            currentPage={currentPage}
            initialViewMode={viewMode}
        />
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/_components/ContactsSkeleton.tsx ===================

"use client";



// Aquest component mostra un esquelet genèric per a la pàgina de contactes.
export function ContactsSkeleton() {
  return (
    <div className="h-full flex flex-col animate-pulse">
      {/* Esquelet de la capçalera */}
      <div className="flex flex-col md:flex-row justify-between md:items-center gap-4 mb-6 flex-shrink-0">
        <div className="h-9 w-48 bg-gray-700/50 rounded-md"></div>
        <div className="flex items-center gap-2">
          <div className="h-10 w-48 bg-gray-700/50 rounded-md"></div>
          <div className="h-10 w-20 bg-gray-700/50 rounded-md"></div>
          <div className="h-10 w-32 bg-gray-700/50 rounded-md"></div>
        </div>
      </div>

      {/* Esquelet de les targetes de contacte */}
      <div className="flex-1 overflow-y-auto">
        <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4 gap-6">
          {[...Array(8)].map((_, i) => (
            <div key={i} className="h-56 bg-white/5 rounded-xl"></div>
          ))}
        </div>
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/crm/contactes/_components/ContactTable.tsx ===================

"use client";

import React from 'react';
// Importem els components de taula de shadcn/ui.
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { User, MoreVertical } from 'lucide-react';
import type { Contact } from '@/types/crm';
import { useTranslations } from 'next-intl';
import { CONTACT_STATUS_MAP } from '@/types/crm';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { Button } from '@/components/ui/button';

// Definim les propietats que el component espera.
interface ContactTableProps {
  contacts: Contact[]; // Un array amb tots els contactes a mostrar.
  onRowClick: (contact: Contact) => void; // Funció a executar quan es clica una fila.
}

/**
 * Component presentacional que renderitza una llista de contactes en format de taula.
 * És una de les dues vistes disponibles a la pàgina de contactes.
 */
const ContactTable: React.FC<ContactTableProps> = ({ contacts, onRowClick }) => {
  const t = useTranslations('ContactsClient');
  /**
 * @summary Funció interna per obtenir el text traduït de l'estat a partir del seu codi.
 * @param statusCode El codi de l'estat (ex: 'L', 'P', 'C').
 * @returns El text complet i traduït (ex: "Lead", "Cliente", "Proveedor").
 */
  const getStatusLabel = (statusCode?: string) => {
    if (!statusCode) return ''; // Si no hi ha estat, no retornem res.
    // Busquem l'objecte corresponent al codi dins del nostre mapa central.
    const statusObject = CONTACT_STATUS_MAP.find(s => s.code === statusCode);
    // Si el trobem, utilitzem la seva 'key' per obtenir la traducció.
    // Si no, retornem el codi original com a fallback.
    return statusObject ? t(`contactStatuses.${statusObject.key}`) : statusCode;
  };
  return (
    // ✅ En pantalles petites, fem que la taula tingui scroll horitzontal si cal
    <div className="glass-card rounded-xl overflow-x-auto">
      <Table>
        <TableHeader>
          <TableRow className="border-b-border hover:bg-muted/50">
            <TableHead className="w-[250px]">{t('table.name')}</TableHead>
            <TableHead>{t('table.status')}</TableHead>
            <TableHead className="hidden sm:table-cell">{t('table.email')}</TableHead>
            <TableHead className="hidden md:table-cell">{t('table.phone')}</TableHead>
            <TableHead className="hidden lg:table-cell">{t('table.company')}</TableHead>
            {/* ✅ NOU: Columna d'accions per a mòbil */}
            <TableHead className="sm:hidden text-right">...</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {contacts.map((contact) => (
            <TableRow key={contact.id} onClick={() => onRowClick(contact)} className="border-b-border hover:bg-muted/50 cursor-pointer">
              <TableCell className="font-medium flex items-center gap-3">
                <div className="w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center shrink-0">
                  <User className="w-5 h-5 text-white" />
                </div>
                {contact.nom}
              </TableCell>
              <TableCell>
                {/* L'etiqueta d'estat obté el seu color de les classes CSS globals. */}
                <span className={`status-badge status-${contact.estat?.toLowerCase()} shrink-0`}>
                  {getStatusLabel(contact.estat)}
                </span>              </TableCell>
              <TableCell className="text-muted-foreground">{contact.email}</TableCell>
              <TableCell className="text-muted-foreground">{contact.telefon || '-'}</TableCell>
              <TableCell className="hidden md:table-cell text-muted-foreground">{contact.empresa || '-'}</TableCell>
               {/* ✅ NOU: Menú desplegable per a accions en mòbil */}
               <TableCell className="sm:hidden text-right">
                <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                        <Button variant="ghost" size="icon" onClick={(e) => e.stopPropagation()}>
                            <MoreVertical className="w-4 h-4" />
                        </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent>
                        <DropdownMenuItem onSelect={() => onRowClick(contact)}>
                            {t('table.viewDetails')}
                        </DropdownMenuItem>
                    </DropdownMenuContent>
                </DropdownMenu>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  );
};

export default ContactTable;

// =================== FILE: src/app/[locale]/(app)/crm/contactes/_hooks/useContactFilters.ts ===================

// @/hooks/useContactFilters.ts
"use client";

import { useState, useTransition } from 'react';
import { usePathname, useRouter, useSearchParams } from 'next/navigation';

type ViewMode = 'cards' | 'list';
type FilterType = 'sort' | 'status' | 'view';

/**
 * Hook personalitzat per gestionar els filtres de la pàgina de contactes.
 * Encapsula la lògica per llegir i escriure a la URL (search params),
 * gestionant l'estat de càrrega i les actualitzacions optimistes de la UI.
 * @param initialViewMode - El mode de vista per defecte ('cards' o 'list').
 */
export function useContactFilters(initialViewMode: ViewMode) {
    const router = useRouter();
    const pathname = usePathname();
    const searchParams = useSearchParams();
    const [isPending, startTransition] = useTransition();

    // Llegeix els valors actuals de la URL o estableix valors per defecte.
    const sortBy = searchParams.get('sort') || 'newest';
    const statusFilter = searchParams.get('status') || 'all';

    // Utilitzem un estat local per al 'viewMode' per tenir una resposta
    // visual immediata, abans que la URL s'actualitzi.
    const [viewMode, setViewMode] = useState<ViewMode>(initialViewMode);

    /**
     * Actualitza un paràmetre de la URL i navega a la nova ruta.
     * @param type - El tipus de filtre a canviar ('sort', 'status', 'view').
     * @param value - El nou valor per al filtre.
     */
    const handleFilterChange = (type: FilterType, value: string) => {
        const current = new URLSearchParams(Array.from(searchParams.entries()));
        current.set(type, value);

        // Si el filtre no és un canvi de vista, reiniciem a la primera pàgina.
        if (type !== 'view') {
            current.set('page', '1');
        }

        const search = current.toString();
        const query = search ? `?${search}` : "";

        // Actualització optimista per a una millor experiència d'usuari.
        if (type === 'view') {
            setViewMode(value as ViewMode);
        }
        
        // Utilitzem startTransition per evitar bloquejar la UI durant la navegació.
        startTransition(() => {
            router.push(`${pathname}${query}`);
        });
    };

    return {
        isPending,
        sortBy,
        statusFilter,
        viewMode,
        handleFilterChange,
    };
}

// =================== FILE: src/app/[locale]/(app)/crm/general/page.tsx ===================

import { Suspense } from 'react';
import type { Metadata } from 'next';
import { CrmData } from './_components/CrmData';
import { CrmSkeleton } from './_components/CrmSkeleton'; // Importem l'esquelet
import { CrmData as CrmDataType } from '@/types/crm'; // Importem el tipus

export const metadata: Metadata = {
  title: 'CRM General | Ribot',
};

// Exportem el tipus aquí perquè CrmData.tsx el pugui utilitzar fàcilment
export type CrmData = CrmDataType;

// La pàgina principal ja no és 'async' i no gestiona l'autenticació
export default function CrmGeneralPage() {
  return (
    <Suspense fallback={<CrmSkeleton />}>
      <CrmData />
    </Suspense>
  );
}

// =================== FILE: src/app/[locale]/(app)/crm/general/_components/ActivityItem.tsx ===================

"use client";

import React, { FC } from 'react';
import { useRouter } from 'next/navigation';
import { formatDistanceToNow } from 'date-fns';
import { ca, es, enUS } from 'date-fns/locale';
import { AlertTriangle, Mail, Check } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { useTranslations, useLocale } from 'next-intl';
import type { CrmData } from '../page';

// Definim les propietats que el component espera rebre.
interface ActivityItemProps {
    activity: CrmData['unreadActivities'][0];
    onMarkAsRead: (id: string) => void;
    onReply: (activity: CrmData['unreadActivities'][0]) => void;
}

/**
 * @summary Mostra una alerta d'activitat no llegida a la secció "Recent Alerts".
 * Gestiona la navegació, el marcatge com a llegit i l'opció de respondre.
 */
export const ActivityItem: FC<ActivityItemProps> = ({ activity, onMarkAsRead, onReply }) => {
    const t = useTranslations('CrmGeneralPage');
    const locale = useLocale();
    const router = useRouter();
    const dateLocale = { ca, es, en: enUS }[locale] || ca;

    /**
     * @summary Funció que s'executa en fer clic a l'alerta.
     * Marca l'activitat com a llegida i navega a la pàgina del contacte si existeix.
     */
    const handleClick = () => {
        onMarkAsRead(activity.id);
        if (activity.contact_id) {
            router.push(`/${locale}/crm/contactes/${activity.contact_id}`);
        }
    };
    
    return (
        <div className="flex items-center gap-4 p-3 rounded-lg hover:bg-white/10 transition-colors group">
            <div className="p-2 rounded-lg bg-white/5">
                <AlertTriangle className="w-5 h-5 text-yellow-400" />
            </div>
            <div className="flex-1 min-w-0 cursor-pointer" onClick={handleClick}>
                <p className="font-semibold truncate">
                    {activity.type} - <span className="font-normal">{activity.contact_name}</span>
                </p>
                <p className="text-sm text-muted-foreground truncate italic">"{activity.content}"</p>
            </div>
            <div className="text-xs text-muted-foreground shrink-0">
                {formatDistanceToNow(new Date(activity.created_at), { addSuffix: true, locale: dateLocale })}
            </div>
            {/* Els botons d'acció apareixen en passar el ratolí per sobre */}
            <div className="flex items-center opacity-0 group-hover:opacity-100 transition-opacity">
                <TooltipProvider>
                    <Tooltip>
                        <TooltipTrigger asChild>
                            <Button 
                                variant="ghost" 
                                size="icon" 
                                className="w-8 h-8 rounded-full" 
                                onClick={(e) => { e.stopPropagation(); onReply(activity); }}
                            >
                                <Mail className="w-4 h-4 text-blue-400" />
                            </Button>
                        </TooltipTrigger>
                        <TooltipContent><p>{t('replyTooltip')}</p></TooltipContent>
                    </Tooltip>
                </TooltipProvider>
                <TooltipProvider>
                    <Tooltip>
                        <TooltipTrigger asChild>
                            <Button 
                                variant="ghost" 
                                size="icon" 
                                className="w-8 h-8 rounded-full" 
                                onClick={(e) => { e.stopPropagation(); onMarkAsRead(activity.id); }}
                            >
                                <Check className="w-4 h-4 text-green-400" />
                            </Button>
                        </TooltipTrigger>
                        <TooltipContent><p>{t('markAsReadTooltip')}</p></TooltipContent>
                    </Tooltip>
                </TooltipProvider>
            </div>
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/general/_components/ComposeEmailDialog.tsx ===================

/**
 * @file ComposeEmailDialog.tsx
 * @summary Aquest fitxer defineix un component de client reutilitzable que mostra un diàleg
 * per redactar i enviar un correu electrònic. Gestiona l'estat del formulari (destinatari,
 * assumpte, cos) i crida a una Server Action per a l'enviament real del correu.
 */

"use client";

import React, { useState, useEffect, useTransition } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Loader2, Send } from 'lucide-react';
import { toast } from 'sonner';
// Aquesta és la Server Action que s'encarregarà de la lògica d'enviament.
import { sendEmailWithGmailAction } from '@/app/[locale]/(app)/crm/general/_components/send-email-action';
import { useTranslations } from 'next-intl';

// Propietats que el diàleg espera rebre.
interface ComposeEmailDialogProps {
  open: boolean; // Controla si el diàleg és visible.
  onOpenChange: (open: boolean) => void; // Funció per tancar el diàleg.
  initialData: { contactId: string; to: string; subject: string; body: string } | null; // Dades inicials per omplir el formulari.
  onEmailSent: () => void; // Funció de callback que s'executa quan l'email s'envia correctament.
}

const ComposeEmailDialog: React.FC<ComposeEmailDialogProps> = ({ open, onOpenChange, initialData, onEmailSent }) => {
    const t = useTranslations('ComposeEmailDialog');

  // --- Gestió de l'Estat del Component ---
  const [contactId, setContactId] = useState('');
  const [to, setTo] = useState('');
  const [subject, setSubject] = useState('');
  const [body, setBody] = useState('');
  const [isPending, startTransition] = useTransition(); // Hook per a l'estat de càrrega no bloquejant.

  // Aquest efecte s'executa quan les 'initialData' canvien.
  // La seva funció és omplir els camps del formulari amb les dades rebudes.
  useEffect(() => {
    if (initialData) {
      setContactId(initialData.contactId || '');
      setTo(initialData.to || '');
      setSubject(initialData.subject || '');
      setBody(initialData.body || '');
    }
  }, [initialData]);

  /**
   * @summary Gestor per a l'enviament del correu. Crida a la Server Action 'sendEmailWithGmailAction'.
   */
  const handleSend = () => {
    startTransition(async () => {
      // Validació bàsica de dades al client.
      if (!contactId) {
        toast.error('Error', { description: "Falta l'ID del contacte." });
        return;
      }
      // Cridem a la Server Action, passant les dades necessàries.
      const result = await sendEmailWithGmailAction(contactId, subject, body);
      if (result.success) {
        toast.success('Èxit!', { description: result.message });
        onEmailSent(); // Executem el callback per notificar al component pare.
        onOpenChange(false); // Tanquem el diàleg.
      } else {
        toast.error('Error', { description: result.message });
      }
    });
  };

 return (
      <Dialog open={open} onOpenChange={onOpenChange}>
        <DialogContent className="glass-effect">
          <DialogHeader>
            <DialogTitle>{t('dialogTitle')}</DialogTitle>
          </DialogHeader>
          <div className="py-4 space-y-4">
            <div className="space-y-2">
              <Label htmlFor="to">{t('toLabel')}</Label>
              <Input id="to" value={to} readOnly disabled />
            </div>
            <div className="space-y-2">
              <Label htmlFor="subject">{t('subjectLabel')}</Label>
              <Input id="subject" value={subject} onChange={(e) => setSubject(e.target.value)} />
            </div>
            <div className="space-y-2">
              <Label htmlFor="body">{t('messageLabel')}</Label>
              <Textarea id="body" value={body} onChange={(e) => setBody(e.target.value)} rows={10} />
            </div>
          </div>
          <DialogFooter>
            <Button variant="ghost" onClick={() => onOpenChange(false)}>{t('cancelButton')}</Button>
            <Button onClick={handleSend} disabled={isPending}>
              {isPending ? <Loader2 className="w-4 h-4 mr-2 animate-spin" /> : <Send className="w-4 h-4 mr-2" />}
              {t('sendButton')}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    );
  };
  
  export default ComposeEmailDialog;
  

// =================== FILE: src/app/[locale]/(app)/crm/general/_components/crm-client.tsx ===================

"use client";

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import { motion } from 'framer-motion';
import { createClient } from '@/lib/supabase/client';
import { toast } from 'sonner';
import { Users, TrendingUp, DollarSign, UserCheck, AlertTriangle, Crown, Calendar, BarChart3, Activity, FileText } from 'lucide-react';
import { useTranslations, useLocale } from 'next-intl';
import { type CrmData, type ComposeEmailData } from '@/types/crm';
import { StatCard } from './StatCard';
import { FunnelBar } from './FunnelBar';
import { ListItem } from './ListItem';
import { ActivityItem } from './ActivityItem';
import ComposeEmailDialog from './ComposeEmailDialog';

interface CrmClientProps {
    initialData: CrmData | null;
}

export function CrmClient({ initialData }: CrmClientProps) {
    // ✅ PAS 1: Cridem TOTS els Hooks a l'inici, sense condicions.
    const t = useTranslations('CrmGeneralPage');
    const locale = useLocale();
    const router = useRouter();
    const supabase = createClient();
    const [data, setData] = useState(initialData);
    const [composeState, setComposeState] = useState<{ open: boolean; initialData: ComposeEmailData | null; }>({ open: false, initialData: null });

    // ✅ PAS 2: ARA SÍ, un cop tots els Hooks s'han cridat, fem la comprovació.
    // Utilitzem la variable d'estat 'data' en lloc de la prop 'initialData'.
    if (!data) {
        return (
            <div className="flex flex-col justify-center items-center h-full text-center">
                <AlertTriangle className="w-12 h-12 text-red-500 mb-4" />
                <h2 className="text-xl font-bold">{t('toast.errorTitle')}</h2>
                <p className="text-muted-foreground">{t('toast.fetchError')}</p>
            </div>
        );
    }

    const handleMarkAsRead = async (activityId: string) => {
        if (!data) return;
        setData({ ...data, unreadActivities: data.unreadActivities.filter(a => a.id !== activityId) });
        const { error } = await supabase.from('activities').update({ is_read: true }).eq('id', activityId);
        if (error) {
            toast.error(t('toast.errorTitle'), { description: t('toast.markAsReadError') });
            router.refresh();
        }
    };

    const handleReply = (activity: CrmData['unreadActivities'][0]) => {
        const date = new Date(activity.created_at).toLocaleDateString(locale);
        const content = activity.content.replace(/\n/g, '\n> ');
        const quotedBody = t('replyBody', { date, content });

        setComposeState({
            open: true,
            initialData: {
                contactId: activity.contact_id || '',
                to: activity.contact_email || '',
                subject: t('toast.replySubject'),
                body: quotedBody
            }
        });
    };

    const funnelMax = Math.max(data.funnel.leads, data.funnel.quoted, data.funnel.clients, 1);

    return (
        <>
            <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} className="space-y-8">
                {/* Secció d'alertes recents */}
                {data.unreadActivities && data.unreadActivities.length > 0 && (

                    <div className="glass-card p-6">
                        <h2 className="text-xl font-bold mb-4">{t('recentAlerts', { count: data.unreadActivities.length })}</h2>
                        <div className="space-y-2">
                            {data.unreadActivities.map(activity => (
                                <ActivityItem key={activity.id} activity={activity} onMarkAsRead={handleMarkAsRead} onReply={handleReply} />
                            ))}
                        </div>
                    </div>
                )}

                {/* Targetes de KPIs principals */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                    <StatCard icon={Users} title={t('totalContacts')} value={data.stats.totalContacts} color="text-blue-400" linkTo={`/${locale}/crm/contactes`} tooltip={t('tooltips.totalContacts')} />
                    <StatCard icon={UserCheck} title={t('newThisMonth')} value={data.stats.newContactsThisMonth} color="text-green-400" linkTo={`/${locale}/crm/contactes`} tooltip={t('tooltips.newContacts')} />
                    <StatCard icon={TrendingUp} title={t('opportunities')} value={data.stats.opportunities} color="text-purple-400" linkTo={`/${locale}/crm/pipeline`} tooltip={t('tooltips.opportunities')} />
                    <StatCard icon={DollarSign} title={t('pipelineValue')} value={`€${(data.stats.pipelineValue).toLocaleString('es-ES')}`} color="text-orange-400" linkTo={`/${locale}/crm/pipeline`} tooltip={t('tooltips.pipelineValue')} />
                </div>

                {/* Gràfic d'embut de vendes i llistes de rànquing */}
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                    <div className="lg:col-span-2 glass-card p-6">
                        <h2 className="text-xl font-bold mb-4">{t('customerLifecycle')}</h2>
                        <div className="space-y-6">
                            <FunnelBar label={t('leads')} value={data.funnel.leads} maxValue={funnelMax} color="purple" icon={TrendingUp} />
                            <FunnelBar label={t('quoted')} value={data.funnel.quoted} maxValue={funnelMax} color="blue" icon={FileText} />
                            <FunnelBar label={t('clients')} value={data.funnel.clients} maxValue={funnelMax} color="green" icon={UserCheck} />
                        </div>
                    </div>
                    <div className="space-y-8">
                        <div className="glass-card p-6">
                            <h2 className="text-xl font-bold mb-4">{t('topClients')}</h2>
                            <div className="space-y-2">
                                {data.topClients.length > 0 ? (
                                    data.topClients.map((client, index) => <ListItem key={client.id} href={`/${locale}/crm/contactes/${client.id}`} icon={Crown} iconColor={index === 0 ? 'text-yellow-400' : 'text-gray-400'} title={client.nom} value={`€${(client.total_invoiced).toLocaleString('es-ES')}`} />)
                                ) : <p className="text-sm text-muted-foreground text-center py-4">{t('noRevenueData')}</p>}
                            </div>
                        </div>
                        <div className="glass-card p-6">
                            <h2 className="text-xl font-bold mb-4">{t('healthRadar')}</h2>
                            <div className="space-y-2">
                                {data.coldContacts.length > 0 ? (
                                    data.coldContacts.map(contact => <ListItem key={contact.id} href={`/${locale}/crm/contactes/${contact.id}`} icon={AlertTriangle} iconColor="text-yellow-400" title={contact.nom} subtitle={t('lastContactOn', { date: new Date(contact.last_interaction_at).toLocaleDateString(locale) })} />)
                                ) : <p className="text-sm text-muted-foreground text-center py-4">{t('allContactsWarm')}</p>}
                            </div>
                        </div>
                    </div>
                </div>

                {/* Estadístiques clau */}
                <div className="glass-card p-6">
                    <h2 className="text-xl font-bold mb-4">{t('keyStatistics')}</h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <h3 className="font-semibold mb-3">{t('bestMonths')}</h3>
                            <div className="space-y-2">
                                {data.bestMonths.length > 0 ? (
                                    data.bestMonths.map(month => <ListItem key={month.month} href="#" icon={Calendar} iconColor="text-green-400" title={new Date(month.month + '-02').toLocaleString(locale, { month: 'long', year: 'numeric' })} value={`€${(month.total).toLocaleString('es-ES')}`} />)
                                ) : <p className="text-sm text-muted-foreground">{t('noRevenueHistory')}</p>}
                            </div>
                        </div>
                        <div>
                            <h3 className="font-semibold mb-3">{t('overallPerformance')}</h3>
                            <div className="space-y-2">
                                <ListItem href="#" icon={BarChart3} iconColor="text-blue-400" title={t('avgRevenuePerClient')} value={`€${(data.stats.avgRevenuePerClient || 0).toLocaleString('es-ES')}`} />
                                <ListItem href="#" icon={Activity} iconColor="text-purple-400" title={t('avgConversionTime')} value={`${data.stats.avgConversionTimeDays || 0} d`} />
                            </div>
                        </div>
                    </div>
                </div>
            </motion.div>

            {/* Diàleg per compondre correus */}
            <ComposeEmailDialog
                open={composeState.open}
                onOpenChange={(isOpen) => setComposeState({ open: isOpen, initialData: isOpen ? composeState.initialData : null })}
                initialData={composeState.initialData}
                onEmailSent={() => { }}
            />
        </>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/general/_components/CrmData.tsx ===================

import { CrmClient } from './crm-client';
import { CrmData as CrmDataType } from '../page';
import { validatePageSession } from '@/lib/supabase/session'; // ✅ 1. Importem la nostra funció

export async function CrmData() {
    // ✅ 2. TOTA la lògica de validació anterior es substitueix per aquesta crida.
    // Aquesta funció ja gestiona les redireccions si l'usuari no està logat o no té equip actiu.
    const { supabase } = await validatePageSession();

    // ✅ 3. Ara podem cridar directament a la nostra funció RPC per obtenir les dades del dashboard.
    // La funció RPC utilitzarà internament l'active_team_id del token de l'usuari.
    const { data, error } = await supabase.rpc('get_crm_dashboard_data');
    
    if (error) {
        console.error('Error fetching CRM dashboard data:', error);
        // Si la funció RPC falla, mostrem el client amb dades nul·les, que mostrarà un error.
        return <CrmClient initialData={null} />;
    }

    // El resultat ja és l'objecte JSON que necessita el client.
    return <CrmClient initialData={data as CrmDataType} />;
}

// =================== FILE: src/app/[locale]/(app)/crm/general/_components/CrmSkeleton.tsx ===================

"use client";

import React, { FC } from 'react';

/**
 * @summary Mostra un esquelet de càrrega per a la pàgina del Dashboard General del CRM.
 * Aquesta UI es mostra a l'instant gràcies a React Suspense.
 */
export const CrmSkeleton: FC = () => (
    <div className="space-y-8 animate-pulse">
        {/* Esquelet per a les targetes de KPI */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {[...Array(4)].map((_, i) => (
                <div key={i} className="h-[150px] bg-white/5 rounded-2xl"></div>
            ))}
        </div>
        
        {/* Esquelet per a l'embut de vendes i les llistes */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <div className="lg:col-span-2 h-[300px] bg-white/5 rounded-2xl"></div>
            <div className="space-y-8">
                <div className="h-[150px] bg-white/5 rounded-2xl"></div>
                <div className="h-[150px] bg-white/5 rounded-2xl"></div>
            </div>
        </div>

        {/* Esquelet per a les Estadístiques Clau */}
        <div className="h-[200px] bg-white/5 rounded-2xl"></div>
    </div>
);

// =================== FILE: src/app/[locale]/(app)/crm/general/_components/FunnelBar.tsx ===================

"use client";

import React, { FC, ElementType } from 'react';
import { motion } from 'framer-motion';

interface FunnelBarProps {
    label: string;
    value: number;
    maxValue: number;
    color: string;
    icon: ElementType;
}

/**
 * @summary Mostra una barra de progrés animada per a l'embut de vendes.
 */
export const FunnelBar: FC<FunnelBarProps> = ({ label, value, maxValue, color, icon: Icon }) => {
    const percentage = maxValue > 0 ? (value / maxValue) * 100 : 0;
    
    return (
        <div className="flex items-center gap-4 group">
            <div className={`w-12 h-12 flex-shrink-0 flex items-center justify-center rounded-lg bg-${color}-500/10 ring-1 ring-${color}-500/20`}>
                <Icon className={`w-6 h-6 text-${color}-400`} />
            </div>
            <div className="w-full">
                <div className="flex justify-between items-center mb-1">
                    <span className="text-sm font-medium">{label}</span>
                    <span className="text-sm font-bold">{value}</span>
                </div>
                <div className="w-full h-2 rounded-full bg-white/10 overflow-hidden">
                    <motion.div 
                        className={`h-full rounded-full bg-gradient-to-r from-${color}-500 to-${color}-400`} 
                        initial={{ width: 0 }} 
                        animate={{ width: `${percentage}%` }} 
                        transition={{ duration: 0.8, ease: "easeOut" }} 
                    />
                </div>
            </div>
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/general/_components/ListItem.tsx ===================

"use client";

import React, { FC, ElementType } from 'react';
import Link from 'next/link';

interface ListItemProps {
    href: string;
    icon: ElementType;
    iconColor: string;
    title: string;
    subtitle?: string;
    value?: string;
}

/**
 * @summary Mostra un element de llista genèric, clicable, per a rànquings.
 */
export const ListItem: FC<ListItemProps> = ({ href, icon: Icon, iconColor, title, subtitle, value }) => (
    <Link href={href} className="flex items-center gap-4 p-3 rounded-lg hover:bg-white/10 transition-colors">
        <div className="p-2 rounded-lg bg-white/5">
            <Icon className={`w-5 h-5 ${iconColor}`} />
        </div>
        <div className="flex-1 min-w-0">
            <p className="font-semibold truncate">{title}</p>
            {subtitle && <p className="text-sm text-muted-foreground truncate">{subtitle}</p>}
        </div>
        {value && <div className="font-semibold text-right">{value}</div>}
    </Link>
);

// =================== FILE: src/app/[locale]/(app)/crm/general/_components/send-email-action.ts ===================

"use server";

import { createClient } from "@/lib/supabase/server";
import { cookies } from "next/headers";

/**
 * Aquesta Server Action fa de pont segur cap a la teva Edge Function 'send-email'.
 * La seva principal responsabilitat és verificar l'autenticació de l'usuari
 * abans de permetre la crida a la funció, que podria tenir costos o ser sensible.
 * @param contactId L'ID del contacte a qui s'envia el correu.
 * @param subject L'assumpte del correu.
 * @param htmlBody El contingut del correu en format HTML.
 * @returns Un objecte indicant si l'operació ha tingut èxit i un missatge.
 */
export async function sendEmailWithGmailAction(
  contactId: string, 
  subject: string, 
  htmlBody: string
): Promise<{ success: boolean; message: string }> {
  
  const supabase = createClient(cookies())
;

  // Verificació de seguretat: assegurem que l'usuari està logat.
  // El token de sessió JWT s'inclourà automàticament a la capçalera de la crida a la funció,
  // permetent a l'Edge Function verificar la identitat de l'usuari.
  const { data: { session } } = await supabase.auth.getSession();
  if (!session) {
    return { success: false, message: "Usuari no autenticat." };
  }

  // Cridem la nostra Edge Function anomenada 'send-email', passant les dades al 'body'.
  const { error } = await supabase.functions.invoke('send-email', {
    body: { contactId, subject, htmlBody },
  });

  if (error) {
    console.error("Error en invocar la funció 'send-email':", error);
    return { success: false, message: `Error en enviar el correu: ${error.message}` };
  }

  // Si no hi ha error, retornem un missatge d'èxit.
  return { success: true, message: "El correu s'ha enviat correctament." };
}

// =================== FILE: src/app/[locale]/(app)/crm/general/_components/StatCard.tsx ===================

// src/app/[locale]/(app)/crm/general/_components/StatCard.tsx
"use client";

import Link from 'next/link';
import { ElementType, FC } from 'react';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";

// --- Sub-components ---
export const StatCard: FC<{ icon: ElementType; title: string; value: string | number; color: string; tooltip: string; linkTo: string; }> = ({ icon: Icon, title, value, color, tooltip, linkTo }) => (
    <TooltipProvider delayDuration={100}><Tooltip><TooltipTrigger asChild>
        <Link href={linkTo} className="group block relative p-6 rounded-2xl overflow-hidden ring-1 ring-white/10 bg-gradient-to-br from-white/5 to-transparent hover:bg-white/10 transition-all duration-300 hover:-translate-y-1 shadow-lg">
            <div className={`absolute -top-4 -right-4 h-24 w-24 ${color}/20 rounded-full blur-3xl opacity-70 group-hover:opacity-100 transition-opacity`}></div>
            <div className="relative z-10">
                <div className={`rounded-lg bg-white/10 p-2.5 inline-block ring-1 ring-white/10 mb-4`}><Icon className={`w-6 h-6 ${color}`} /></div>
                <p className="text-4xl font-bold">{value}</p>
                <p className="text-muted-foreground text-sm font-semibold">{title}</p>
            </div>
        </Link>
    </TooltipTrigger><TooltipContent><p>{tooltip}</p></TooltipContent></Tooltip></TooltipProvider>
);

// =================== FILE: src/app/[locale]/(app)/crm/pipeline/actions.ts ===================

"use server";

import { revalidatePath } from "next/cache";
import { validateUserSession } from "@/lib/supabase/session"; // ✅ 1. Importem la nostra funció d'ajuda

/**
 * Desa una oportunitat (crea o actualitza).
 */
export async function saveOpportunityAction(formData: FormData) {
    // ✅ 2. Tota la validació de sessió es redueix a aquestes 3 línies.
    const session = await validateUserSession();
    if ('error' in session) return { error: session.error };
    const { supabase, user, activeTeamId } = session;

    const rawData = Object.fromEntries(formData.entries());
    const dataToSave = {
        name: rawData.name as string,
        description: rawData.description as string,
        contact_id: rawData.contact_id as string,
        stage_name: rawData.stage_name as string,
        value: rawData.value ? parseFloat(rawData.value as string) : null,
        close_date: rawData.close_date ? new Date(rawData.close_date as string).toISOString() : null,
        user_id: user.id,
        team_id: activeTeamId,
    };

    try {
        const { error } = await (rawData.id
            ? supabase.from("opportunities").update(dataToSave).eq("id", rawData.id)
            : supabase.from("opportunities").insert(dataToSave));
        if (error) throw error;

        revalidatePath("/crm/pipeline");
        return { success: true };
    } catch (error: unknown) {
        const message = error instanceof Error ? error.message : "Error desconegut";
        return { error: { message } };
    }
}
 
/**
 * Actualitza l'etapa d'una oportunitat (per al drag-and-drop).
 */
export async function updateOpportunityStageAction(opportunityId: string, newStage: string) {
    // ✅ Fem el mateix aquí.
    const session = await validateUserSession();
    if ('error' in session) return { error: session.error };
    const { supabase, activeTeamId } = session;
 
    try {
        // La RLS s'encarregarà de la seguretat a nivell de fila.
        const { error } = await supabase
            .from("opportunities")
            .update({ stage_name: newStage })
            .eq("id", opportunityId)
            .eq("team_id", activeTeamId);

 
        if (error) throw error;
 
        revalidatePath("/crm/pipeline");
        return { success: true };
    } catch (error: unknown) {
        const message = error instanceof Error ? error.message : "Error desconegut";
        return { error: { message } };
    }
}



// =================== FILE: src/app/[locale]/(app)/crm/pipeline/loading.tsx ===================

/**
 * @file src/app/[locale]/(app)/crm/pipeline/loading.tsx
 * @summary Aquest fitxer s'activa automàticament durant la navegació.
 * Reutilitza el component PipelineSkeleton per a una experiència d'usuari consistent.
 */

// 1. Importa el teu component Skeleton des d'on el tinguis guardat
import { PipelineSkeleton } from './_components/PipelineSkeleton';
import { createClient } from '@/lib/supabase/server';
import { cookies } from 'next/headers';
import type { Stage } from './page'; // Importa el tipus Stage

// 2. Aquest és el component que Next.js renderitzarà automàticament
export default async function PipelineLoading() {
  // 3. (Opcional, però recomanat) Carreguem les dades mínimes per a l'esquelet,
  // com les etapes, per fer-lo més realista. Aquesta consulta és molt ràpida.
  const supabase = createClient(cookies())
;
  
  const { data: stagesData } = await supabase
    .from('pipeline_stages')
    .select('id, name, position');

  const stages = (stagesData as Stage[]) || [];

  // 4. Retornem el teu component Skeleton amb les dades necessàries.
  return <PipelineSkeleton stages={stages} viewMode="columns" />;
}

// =================== FILE: src/app/[locale]/(app)/crm/pipeline/page.tsx ===================

/**
 * @file src/app/[locale]/(app)/page.tsx (Pipeline Page)
 * @summary Aquest és el Server Component que carrega les dades inicials (l'esquelet)
 * i les passa al component de client.
 */
import type { Metadata } from 'next';
import { Suspense } from 'react';

// Importem els nous components
import { PipelineData } from './_components/PipelineData'; 
import { PipelineSkeleton } from './_components/PipelineSkeleton';

export const metadata: Metadata = {
  title: 'Pipeline | Ribot',
};

// ... (Els teus tipus de dades Stage, Opportunity, Contact aquí)
export type Contact = { id: string; nom: string; };
export type Stage = { id: string; name: string; position: number; };
export type Opportunity = {
  id: string;
  name: string;
  stage_name: string;
  value: number | null;
  close_date: string | null;
  description: string | null;
  contact_id: string;
  contacts: Contact | null;
};


// IMPORTANT: La pàgina principal JA NO ÉS 'async'
export default function PipelinePage() {
  // Aquest component ara es renderitza a l'instant!
  // No espera cap dada.

  return (
    <Suspense fallback={<PipelineSkeleton stages={[]} viewMode="columns" />}>
      {/* React 'Suspense' intentarà renderitzar <PipelineData />.
        Com que és un component 'async', se suspendrà.
        Mentre està suspès, mostrarà el 'fallback' (el teu Skeleton).
        Quan les dades de PipelineData estiguin llestes, el substituirà.
      */}
      <PipelineData />
    </Suspense>
  );
}

// =================== FILE: src/app/[locale]/(app)/crm/pipeline/pipeline-client.tsx ===================

// @/app/[locale]/(app)/crm/pipeline/page.tsx (Client component part, refactored)
"use client";

import React, { useState, useEffect } from 'react'; // ✅ Importem useState i useEffect
import { motion } from 'framer-motion';
import { DragDropContext } from '@hello-pangea/dnd';
import { useTranslations } from 'next-intl';
import { Plus, LayoutGrid, Rows, Loader2 } from 'lucide-react';
import { Button } from '@/components/ui/button';

import type { Contact, Stage, Opportunity } from './page';
import { usePipeline } from './_hooks/usePipeline.ts';
import { OpportunityDialog } from './_components/OpportunityDialog';
import { ColumnsView } from './_components/ColumnsView';
import { RowsView } from './_components/RowsView';

interface PipelineClientProps {
    initialStages: Stage[];
    initialContacts: Contact[];
    initialOpportunities: Opportunity[];
}

export function PipelineClient({ initialStages, initialContacts, initialOpportunities }: PipelineClientProps) {
    const t = useTranslations('PipelinePage');
    
    // ✅ PAS 1: L'estat ara viu aquí, al component pare. Aquesta és la nostra única font de la veritat.
    const [opportunities, setOpportunities] = useState(initialOpportunities);

    // ✅ PAS 2: Aquest useEffect s'encarrega de sincronitzar l'estat amb noves dades del servidor (després d'un router.refresh()).
    useEffect(() => {
        setOpportunities(initialOpportunities);
    }, [initialOpportunities]);
    
    // ✅ PAS 3: Passem l'estat i la funció set al hook.
    const {
        isPending,
        opportunitiesByStage,
        viewMode,
        setViewMode,
        isDialogOpen,
        setIsDialogOpen,
        editingOpportunity,
        onDragEnd,
        handleOpenDialog,
        handleSuccess,
    } = usePipeline({
        initialStages,
        opportunities,
        setOpportunities
    });

    return (
        <>
            <OpportunityDialog
                open={isDialogOpen}
                onOpenChange={setIsDialogOpen}
                contacts={initialContacts}
                stages={initialStages}
                onSuccess={handleSuccess}
                opportunityToEdit={editingOpportunity}
            />
            <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} className="h-full flex flex-col">
                <div className="flex justify-between items-center mb-6 flex-shrink-0">
                    <h1 className="text-3xl font-bold">{t('title')}</h1>
                    <div className="flex items-center gap-2">
                        <div className="bg-muted p-1 rounded-lg">
                            <Button variant={viewMode === 'columns' ? 'secondary' : 'ghost'} size="icon" onClick={() => setViewMode('columns')} aria-label={t('columnViewLabel')} disabled={isPending}><LayoutGrid className="w-4 h-4" /></Button>
                            <Button variant={viewMode === 'rows' ? 'secondary' : 'ghost'} size="icon" onClick={() => setViewMode('rows')} aria-label={t('rowViewLabel')} disabled={isPending}><Rows className="w-4 h-4" /></Button>
                        </div>
                        <Button onClick={() => handleOpenDialog()} disabled={isPending}>
                            {isPending ? <Loader2 className="w-4 h-4 mr-2 animate-spin"/> : <Plus className="w-4 h-4 mr-2" />}
                            {t('addOpportunity')}
                        </Button>
                    </div>
                </div>

                <DragDropContext onDragEnd={onDragEnd}>
                    {viewMode === 'columns' ? (
                        <ColumnsView
                            stages={initialStages}
                            opportunitiesByStage={opportunitiesByStage}
                            onEditOpportunity={(op) => handleOpenDialog(op)}
                            onAddClick={(stage) => handleOpenDialog(undefined, stage)}
                        />
                    ) : (
                        <RowsView
                           stages={initialStages}
                           opportunitiesByStage={opportunitiesByStage}
                           onEditOpportunity={(op) => handleOpenDialog(op)}
                           onAddClick={(stage) => handleOpenDialog(undefined, stage)}
                        />
                    )}
                </DragDropContext>
            </motion.div>
        </>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/pipeline/_components/ColumnsView.tsx ===================

/**
 * @file ColumnsView.tsx
 * @summary Component que renderitza la vista de columnes del pipeline.
 */
"use client";

import React from 'react';
import type { Stage, Opportunity } from '../page';
import { StageColumn } from './StageColumn';

interface ColumnsViewProps {
  stages: Stage[];
  opportunitiesByStage: Record<string, Opportunity[]>;
  onEditOpportunity: (opportunity: Opportunity) => void;
  onAddClick: (stageName: string) => void;
}

export const ColumnsView: React.FC<ColumnsViewProps> = ({ stages, opportunitiesByStage, onEditOpportunity, onAddClick }) => {
    return (
        <div className="flex-1 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4 min-h-0">
            {stages.map(stage => (
                <StageColumn
                    key={stage.id}
                    stage={stage}
                    opportunities={opportunitiesByStage[stage.name] || []}
                    onEditOpportunity={onEditOpportunity}
                    onAddClick={() => onAddClick(stage.name)}
                />
            ))}
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/pipeline/_components/OportunityCard.tsx ===================

/**
 * @file OpportunityCard.tsx
 * @summary Renderitza una targeta d'oportunitat per a la vista de columnes.
 */
"use client";

import React from 'react';
import { Draggable } from '@hello-pangea/dnd';
import { cn } from '@/lib/utils/utils';
import { User, Euro, Calendar } from 'lucide-react';
import { useTranslations, useLocale } from 'next-intl';
import type { Opportunity } from '../page';

interface OpportunityCardProps {
  opportunity: Opportunity;
  index: number;
}

export const OpportunityCard: React.FC<OpportunityCardProps> = ({ opportunity, index }) => {
    const t = useTranslations('PipelinePage');
    const locale = useLocale();

    return (
        <Draggable draggableId={opportunity.id.toString()} index={index}>
            {(provided, snapshot) => (
                <div
                    ref={provided.innerRef}
                    {...provided.draggableProps}
                    {...provided.dragHandleProps}
                    className={cn(
                        'bg-background/80 backdrop-blur-sm p-3 rounded-lg mb-3 border-l-4 transition-all duration-300 cursor-pointer',
                        snapshot.isDragging ? 'border-primary shadow-2xl shadow-primary/20 scale-105' : 'border-transparent hover:border-primary/50'
                    )}
                >
                    <h4 className="font-semibold text-foreground mb-2 text-sm">{opportunity.name}</h4>
                    {opportunity.description && (
                        <p className="text-xs text-muted-foreground mb-3 line-clamp-2">{opportunity.description}</p>
                    )}
                    <p className="text-xs text-muted-foreground flex items-center gap-2 mb-2">
                        <User className="w-4 h-4 text-primary/80" /> {opportunity.contacts?.nom || t('noContact')}
                    </p>
                    <div className="flex justify-between items-center mt-3 pt-2 border-t border-white/5 text-xs">
                        <span className="font-semibold text-green-400 flex items-center gap-1">
                            <Euro className="w-3 h-3" /> {opportunity.value?.toLocaleString(locale) || '0'}
                        </span>
                        <span className="text-muted-foreground flex items-center gap-1">
                            <Calendar className="w-3 h-3" />{' '}
                            {opportunity.close_date ? new Date(opportunity.close_date).toLocaleDateString(locale, { day: '2-digit', month: '2-digit' }) : '-'}
                        </span>
                    </div>
                </div>
            )}
        </Draggable>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/pipeline/_components/OportunityRowCard.tsx ===================

/**
 * @file OpportunityRowCard.tsx
 * @summary Renderitza una targeta d'oportunitat per a la vista de files (acordió).
 */
"use client";

import React from 'react';
import { Draggable } from '@hello-pangea/dnd';
import { cn } from '@/lib/utils/utils';
import { User, Euro, Calendar } from 'lucide-react';
import { useTranslations, useLocale } from 'next-intl';
import type { Opportunity } from '../page';

interface OpportunityRowCardProps {
  op: Opportunity;
  index: number;
  onEdit: (op: Opportunity) => void;
}

export const OpportunityRowCard: React.FC<OpportunityRowCardProps> = ({ op, index, onEdit }) => {
    const t = useTranslations('PipelinePage');
    const locale = useLocale();

    return (
        <Draggable draggableId={op.id.toString()} index={index}>
            {(provided, snapshot) => (
                <div
                    ref={provided.innerRef}
                    {...provided.draggableProps}
                    {...provided.dragHandleProps}
                    onDoubleClick={() => onEdit(op)}
                    className={cn(
                        "grid grid-cols-2 md:grid-cols-5 gap-4 px-4 py-3 items-center rounded-lg bg-card shadow-md transition-all cursor-pointer",
                        "hover:shadow-lg hover:scale-[1.01]",
                        snapshot.isDragging ? "border-l-4 border-primary shadow-xl" : "border-l-4 border-transparent"
                    )}
                >
                    <div className="font-semibold text-base text-foreground col-span-2">{op.name}</div>
                    <div className="flex items-center text-sm text-foreground">
                        <User className="w-4 h-4 mr-2 text-primary" />
                        {op.contacts?.nom || t('noContact')}
                    </div>
                    <div className="flex items-center text-sm font-medium text-green-600">
                        <Euro className="w-4 h-4 mr-2" />
                        {op.value?.toLocaleString(locale) || "0"} €
                    </div>
                    <div className="flex justify-end items-center text-xs text-muted-foreground gap-2">
                        <Calendar className="w-3 h-3" />
                        {op.close_date ? new Date(op.close_date).toLocaleDateString(locale, { day: "2-digit", month: "2-digit" }) : "-"}
                    </div>
                </div>
            )}
        </Draggable>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/pipeline/_components/OpportunityDialog.tsx ===================

// @/app/[locale]/(app)/crm/pipeline/_components/OpportunityDialog.tsx (Refactoritzat)
import React from 'react';
import { useLocale, useTranslations } from 'next-intl';
import { ca, es, enUS } from "date-fns/locale";
import { format } from "date-fns";
import { PIPELINE_STAGES_MAP, type Opportunity, type Contact, type Stage } from '@/types/crm';

// Components UI i Icones
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Calendar as CalendarIcon, Loader2 } from 'lucide-react';
import { cn } from "@/lib/utils/utils";

// Lògica i components refactoritzats
import { useOpportunityForm } from '../_hooks/useOpportunityForm';
import { ContactSelector }  from '@/components/features/contactes/ContactSelector';


interface Props {
    open: boolean;
    onOpenChange: (open: boolean) => void;
    contacts: Contact[];
    stages: Stage[];
    onSuccess: () => void;
    opportunityToEdit: Partial<Opportunity> | null;
}

export function OpportunityDialog({ open, onOpenChange, contacts, stages, onSuccess, opportunityToEdit }: Props) {
    const t = useTranslations('OpportunityDialog');
    const statePipline = useTranslations('PipelinePage');
    const locale = useLocale();
    
    const { isPending, selectedContactId, setSelectedContactId, closeDate, setCloseDate, handleSubmit } = useOpportunityForm({
        opportunityToEdit,
        onSuccess,
        onOpenChange
    });

    const dateLocale = { ca, es, en: enUS }[locale] || ca;

    return (
        <Dialog open={open} onOpenChange={onOpenChange}>
            <DialogContent>
                <DialogHeader><DialogTitle>{opportunityToEdit?.id ? t('editTitle') : t('newTitle')}</DialogTitle></DialogHeader>
                <form action={handleSubmit} className="grid gap-4 pt-4">
                    <Input name="name" placeholder={t('namePlaceholder')} defaultValue={opportunityToEdit?.name || ''} required />
                    
                    <ContactSelector contacts={contacts} selectedId={selectedContactId} onSelect={setSelectedContactId} />
                    
                    <Select name="stage_name" defaultValue={opportunityToEdit?.stage_name || stages[0]?.name}>
                        <SelectTrigger><SelectValue placeholder={t('selectStagePlaceholder')} /></SelectTrigger>
                        <SelectContent>
                            {PIPELINE_STAGES_MAP.map(stage => (
                                <SelectItem key={stage.key} value={stage.name}>
                                    {statePipline(`stageNames.${stage.key}`)}
                                </SelectItem>
                            ))}
                        </SelectContent>
                    </Select>
                    
                    <div className="grid grid-cols-2 gap-4">
                        <div>
                            <Label htmlFor="value">{t('valueLabel')}</Label>
                            <Input id="value" name="value" type="number" step="0.01" placeholder="0.00" defaultValue={opportunityToEdit?.value || ''} />
                        </div>
                        <div>
                            <Label>{t('closeDateLabel')}</Label>
                            <Popover>
                                <PopoverTrigger asChild>
                                    <Button variant="outline" className={cn("w-full justify-start text-left font-normal", !closeDate && "text-muted-foreground")}>
                                        <CalendarIcon className="mr-2 h-4 w-4" />
                                        {closeDate ? format(closeDate, "PPP", { locale: dateLocale }) : <span>{t('pickDate')}</span>}
                                    </Button>
                                </PopoverTrigger>
                                <PopoverContent className="w-auto p-0"><Calendar mode="single" selected={closeDate} onSelect={setCloseDate} /></PopoverContent>
                            </Popover>
                        </div>
                    </div>
                    
                    <Textarea name="description" placeholder={t('descriptionPlaceholder')} defaultValue={opportunityToEdit?.description || ''} />
                    
                    <DialogFooter className="pt-4">
                        <Button type="button" variant="ghost" onClick={() => onOpenChange(false)}>{t('cancelButton')}</Button>
                        <Button type="submit" disabled={isPending}>
                            {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />} {t('saveButton')}
                        </Button>
                    </DialogFooter>
                </form>
            </DialogContent>
        </Dialog>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/pipeline/_components/PipelineData.tsx ===================

import { PipelineClient } from '../pipeline-client';
import type { Stage, Contact, Opportunity } from '../page';
import { validatePageSession } from "@/lib/supabase/session"; // ✅ 1. Importem la funció d'ajuda per a pàgines

export async function PipelineData() {
    // ✅ 2. Validem la sessió. Si no és vàlida, aquesta funció redirigirà automàticament
    // i l'execució d'aquest component s'aturarà aquí.
    const { supabase } = await validatePageSession();
    
    // Si arribem aquí, sabem que la sessió és vàlida. Podem carregar les dades.
    // Les polítiques RLS s'encarregaran de filtrar les dades per a l'equip actiu.
    const [stagesRes, contactsRes, opportunitiesRes] = await Promise.all([
        supabase.from('pipeline_stages').select('id, name, position').order('position', { ascending: true }),
        supabase.from('contacts').select('id, nom'),
        supabase.from('opportunities').select('*, contacts(id, nom)')
    ]);
    
    if (stagesRes.error) console.error("Error en carregar etapes (RLS?):", stagesRes.error);
    if (contactsRes.error) console.error("Error en carregar contactes (RLS?):", contactsRes.error);
    if (opportunitiesRes.error) console.error("Error en carregar oportunitats (RLS?):", opportunitiesRes.error);

    const stages = (stagesRes.data as Stage[]) || [];
    const contacts = (contactsRes.data as Contact[]) || [];
    const opportunities = (opportunitiesRes.data as Opportunity[]) || [];

    return (
        <PipelineClient 
            initialStages={stages}
            initialContacts={contacts}
            initialOpportunities={opportunities}
        />
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/pipeline/_components/PipelineSkeleton.tsx ===================

/**
 * @file PipelineSkeleton.tsx
 * @summary Mostra un esquelet de càrrega per a la pàgina del pipeline.
 */
"use client";

import React from 'react';
import type { Stage } from '../page';

interface PipelineSkeletonProps {
  stages: Stage[];
  viewMode: 'columns' | 'rows';
}

export const PipelineSkeleton: React.FC<PipelineSkeletonProps> = ({ stages, viewMode }) => {
    if (viewMode === 'rows') {
        return (
            <div className="flex-1 overflow-y-auto pr-2 -mr-4 space-y-4">
                {stages.map(stage => (
                    <div key={stage.id} className="bg-muted/20 rounded-xl overflow-hidden border-l-4 border-gray-700">
                        <div className="flex justify-between items-center w-full px-4 py-3">
                            <div>
                                <div className="bg-gray-700/50 h-6 w-32 rounded-md animate-pulse"></div>
                                <div className="bg-gray-700/50 h-4 w-48 rounded-md mt-2 animate-pulse"></div>
                            </div>
                            <div className="bg-gray-700/50 h-9 w-24 rounded-md animate-pulse"></div>
                        </div>
                    </div>
                ))}
            </div>
        );
    }

    return (
        <div className="flex-1 grid grid-cols-6 gap-4 min-h-0">
            {stages.map(stage => (
                <div key={stage.id} className="flex flex-col h-full bg-muted/20 rounded-xl overflow-hidden">
                    <div className="p-4 border-t-4 border-gray-700">
                        <div className="flex justify-between items-center">
                            <div className="bg-gray-700/50 h-6 w-3/4 rounded-md animate-pulse"></div>
                            <div className="bg-gray-700/50 h-7 w-7 rounded-md animate-pulse"></div>
                        </div>
                        <div className="bg-gray-700/50 h-4 w-1/2 rounded-md mt-2 animate-pulse"></div>
                    </div>
                    <div className="flex-1 px-2 pt-2 space-y-3">
                        <div className="bg-background/80 h-24 rounded-lg animate-pulse"></div>
                        <div className="bg-background/80 h-20 rounded-lg animate-pulse"></div>
                    </div>
                </div>
            ))}
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/pipeline/_components/RowsView.tsx ===================

/**
 * @file RowsView.tsx
 * @summary Component que renderitza la vista de files (acordió) del pipeline.
 */
"use client";

import React from 'react';
import { Droppable } from '@hello-pangea/dnd';
import { Button } from '@/components/ui/button';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Plus } from 'lucide-react';
import { cn } from '@/lib/utils/utils';
import { useTranslations, useLocale } from 'next-intl';
import type { Stage, Opportunity } from '../page';
import { PIPELINE_STAGES_MAP } from '@/types/crm';
import { OpportunityRowCard } from './OportunityRowCard';

interface RowsViewProps {
  stages: Stage[];
  opportunitiesByStage: Record<string, Opportunity[]>;
  onEditOpportunity: (opportunity: Opportunity) => void;
  onAddClick: (stageName: string) => void;
}

export const RowsView: React.FC<RowsViewProps> = ({ stages, opportunitiesByStage, onEditOpportunity, onAddClick }) => {
    const t = useTranslations('PipelinePage');
    const locale = useLocale();
    const stageColors: Record<string, string> = { 'Prospecte': 'border-blue-500', 'Contactat': 'border-cyan-500', 'Proposta Enviada': 'border-purple-500', 'Negociació': 'border-yellow-500', 'Guanyat': 'border-green-500', 'Perdut': 'border-red-500' };

    return (
        <div className="flex-1 overflow-y-auto pr-2 -mr-4">
            <Accordion type="multiple" defaultValue={stages.map(s => s.id)} className="w-full space-y-4">
                {stages.map(stage => {
                    const stageKey = PIPELINE_STAGES_MAP.find(s => s.name === stage.name)?.key;
                    const opportunities = opportunitiesByStage[stage.name] || [];
                    const totalValue = opportunities.reduce((sum, op) => sum + (op.value || 0), 0);
                    return (
                        <AccordionItem key={stage.id} value={stage.id} className={cn("bg-muted/20 rounded-xl overflow-hidden border-l-4", stageColors[stage.name] || "border-gray-500")}>
                            <div className="flex justify-between items-center w-full px-4">
                                <AccordionTrigger className="flex-1 text-left py-3 hover:no-underline">
                                    <div>
                                        <h3 className="font-bold text-lg text-foreground">{stageKey ? t(`stageNames.${stageKey}`) : stage.name}</h3>
                                        <p className="text-xs text-muted-foreground text-left">
                                            {t('opportunityCount', { count: opportunities.length })} • €{totalValue.toLocaleString(locale)}
                                        </p>
                                    </div>
                                </AccordionTrigger>
                                <Button size="sm" variant="ghost" onClick={() => onAddClick(stage.name)} className="ml-4">
                                    <Plus className="w-4 h-4 mr-2" />{t('addOpportunity')}
                                </Button>
                            </div>
                            <AccordionContent className="px-2 pb-2">
                                <Droppable droppableId={stage.name}>
                                    {(provided, snapshot) => (
                                        <div ref={provided.innerRef} {...provided.droppableProps} className={cn("space-y-2 p-2 rounded-md transition-colors", snapshot.isDraggingOver ? "bg-primary/5" : "")}>
                                            {opportunities.length > 0 ? (
                                                opportunities.map((op, index) => (
                                                    <OpportunityRowCard key={op.id} op={op} index={index} onEdit={onEditOpportunity} />
                                                ))
                                            ) : (
                                                <p className="text-center text-sm text-muted-foreground p-4">{t('noOpportunitiesInStage')}</p>
                                            )}
                                            {provided.placeholder}
                                        </div>
                                    )}
                                </Droppable>
                            </AccordionContent>
                        </AccordionItem>
                    );
                })}
            </Accordion>
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/pipeline/_components/StageColumn.tsx ===================

/**
 * @file StageColumn.tsx
 * @summary Renderitza una columna completa d'una etapa del pipeline, incloent la capçalera i la llista d'oportunitats.
 */
"use client";

import React from 'react';
import { Droppable } from '@hello-pangea/dnd';
import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils/utils';
import { Plus } from 'lucide-react';
import { useTranslations, useLocale } from 'next-intl';
import type { Stage, Opportunity } from '../page';
import { PIPELINE_STAGES_MAP } from '@/types/crm';
import { OpportunityCard } from './OportunityCard';

interface StageColumnProps {
  stage: Stage;
  opportunities: Opportunity[];
  onEditOpportunity: (opportunity: Opportunity) => void;
  onAddClick: () => void;
}

export const StageColumn: React.FC<StageColumnProps> = ({ stage, opportunities, onEditOpportunity, onAddClick }) => {
    const t = useTranslations('PipelinePage');
    const locale = useLocale();
    const totalValue = opportunities.reduce((sum, op) => sum + (op.value || 0), 0);
    const stageKey = PIPELINE_STAGES_MAP.find(s => s.name === stage.name)?.key;
    const stageColors: Record<string, string> = { 'Prospecte': 'border-blue-500', 'Contactat': 'border-cyan-500', 'Proposta Enviada': 'border-purple-500', 'Negociació': 'border-yellow-500', 'Guanyat': 'border-green-500', 'Perdut': 'border-red-500' };

    return (
        <div className="flex flex-col h-full bg-muted/20 rounded-xl overflow-hidden">
            <div className={cn('p-4 border-t-4', stageColors[stage.name] || 'border-gray-500')}>
                <div className="flex justify-between items-center">
                    <h3 className="font-bold text-lg text-foreground mb-1">{stageKey ? t(`stageNames.${stageKey}`) : stage.name}</h3>
                    <Button variant="ghost" size="icon" onClick={onAddClick} className="w-7 h-7">
                        <Plus className="w-4 h-4" />
                    </Button>
                </div>
                <p className="text-xs text-muted-foreground">
                    {t('opportunityCount', { count: opportunities.length })} • €{totalValue.toLocaleString(locale)}
                </p>
            </div>
            <Droppable droppableId={stage.name}>
                {(provided, snapshot) => (
                    <div
                        ref={provided.innerRef}
                        {...provided.droppableProps}
                        className={cn('flex-1 px-2 pt-2 overflow-y-auto transition-colors', snapshot.isDraggingOver ? 'bg-primary/10' : '')}
                    >
                        {opportunities.map((op, index) => (
                            <div key={op.id} onDoubleClick={() => onEditOpportunity(op)}>
                                <OpportunityCard opportunity={op} index={index} />
                            </div>
                        ))}
                        {provided.placeholder}
                    </div>
                )}
            </Droppable>
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/pipeline/_hooks/useOpportunityForm.ts ===================

import { useState, useEffect, useTransition } from 'react';
import { toast } from 'sonner';
import { useTranslations } from 'next-intl';
import { saveOpportunityAction } from '../actions.ts'; // Ajusta la ruta a les teves actions
import type { Opportunity } from '../app/[locale]/(app)/crm/pipeline/page';

interface HookProps {
    opportunityToEdit: Partial<Opportunity> | null;
    onSuccess: () => void;
    onOpenChange: (open: boolean) => void;
}

export function useOpportunityForm({ opportunityToEdit, onSuccess, onOpenChange }: HookProps) {
    const t = useTranslations('OpportunityDialog');
    const [isPending, startTransition] = useTransition();
    const [selectedContactId, setSelectedContactId] = useState('');
    const [closeDate, setCloseDate] = useState<Date | undefined>();

    useEffect(() => {
        setSelectedContactId(opportunityToEdit?.contact_id || '');
        setCloseDate(opportunityToEdit?.close_date ? new Date(opportunityToEdit.close_date) : undefined);
    }, [opportunityToEdit]);

    const handleSubmit = (formData: FormData) => {
        if (opportunityToEdit?.id) formData.set('id', opportunityToEdit.id);
        if (selectedContactId) formData.set('contact_id', selectedContactId);
        if (closeDate) formData.set('close_date', closeDate.toISOString());

        startTransition(async () => {
            const result = await saveOpportunityAction(formData);
            if (result.error) {
                toast.error(t('toastErrorTitle'), { description: result.error.message });
            } else {
                toast.success(t('toastSuccessTitle'), { description: t('toastSuccessDescription') });
                onSuccess();
                onOpenChange(false);
            }
        });
    };

    return {
        isPending,
        selectedContactId,
        setSelectedContactId,
        closeDate,
        setCloseDate,
        handleSubmit,
    };
}

// =================== FILE: src/app/[locale]/(app)/crm/pipeline/_hooks/usePipeline.ts ===================

import { useState, useMemo, useTransition, useCallback } from 'react'; 
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { type DropResult } from '@hello-pangea/dnd';
import { updateOpportunityStageAction } from '../actions.ts';
import type { Opportunity, Stage } from '../app/[locale]/(app)/crm/pipeline/page';

// ✅ El hook ara rep l'estat i la funció per modificar-lo
interface UsePipelineProps {
    initialStages: Stage[];
    opportunities: Opportunity[];
    setOpportunities: React.Dispatch<React.SetStateAction<Opportunity[]>>;
}

export function usePipeline({ initialStages, opportunities, setOpportunities }: UsePipelineProps) {
    const router = useRouter();
    const [isDndPending, startDndTransition] = useTransition();

    const [isDialogOpen, setIsDialogOpen] = useState(false);
    const [editingOpportunity, setEditingOpportunity] = useState<Partial<Opportunity> | null>(null);
    const [viewMode, setViewMode] = useState<'columns' | 'rows'>('columns');

  

    const opportunitiesByStage = useMemo(() => {
        const grouped = initialStages.reduce((acc, stage) => {
            acc[stage.name] = [];
            return acc;
        }, {} as Record<string, Opportunity[]>);

        opportunities.forEach(op => {
            if (grouped[op.stage_name]) {
                grouped[op.stage_name].push(op);
            }
        });
        Object.values(grouped).forEach(ops => ops.sort((a, b) => (a.value ?? 0) - (b.value ?? 0)));
        return grouped;
    }, [opportunities, initialStages]);

    const onDragEnd = useCallback((result: DropResult) => {
        const { source, destination, draggableId } = result;
        if (!destination || (source.droppableId === destination.droppableId && source.index === destination.index)) return;

        const newStage = destination.droppableId;
        const originalOpportunities = [...opportunities];

        // 1. Actualització Optimista
        setOpportunities(prev => prev.map(op => 
            op.id.toString() === draggableId ? { ...op, stage_name: newStage } : op
        ));

        startDndTransition(async () => {
            const updateResult = await updateOpportunityStageAction(draggableId, newStage);
            if (updateResult.error) {
                setOpportunities(originalOpportunities); // Revertim si falla
                toast.error("Error", { description: updateResult.error.message });
            } else {
                toast.success("Oportunitat moguda amb èxit.");
                // router.refresh() ja no és estrictament necessari aquí
                // perquè el useEffect del component pare ja sincronitzarà les dades.
                // Però el podem deixar per forçar la consistència.
                router.refresh();
            }
        });
    }, [opportunities, setOpportunities, router]);

    const handleOpenDialog = useCallback((opportunity?: Opportunity, stageName?: string) => {
        if (opportunity) {
            setEditingOpportunity(opportunity);
        } else {
            setEditingOpportunity(stageName ? { stage_name: stageName } : {});
        }
        setIsDialogOpen(true);
    }, []);

    const handleSuccess = useCallback(() => {
        setIsDialogOpen(false);
        router.refresh();
    }, [router]);

    return {
        isPending: isDndPending,
        opportunitiesByStage,
        viewMode,
        setViewMode,
        isDialogOpen,
        setIsDialogOpen,
        editingOpportunity,
        onDragEnd,
        handleOpenDialog,
        handleSuccess,
    };
}

// =================== FILE: src/app/[locale]/(app)/crm/products/actions.ts ===================

"use server";

import { revalidatePath } from "next/cache";
import { z } from "zod";
import { validateUserSession } from "@/lib/supabase/session"; // ✅ 1. Importem la funció
import type { Product } from '@/types/crm/products'; // ✅ Importa el tipus

// Esquema de Zod per a validar les dades del formulari.
const productSchema = z.object({
    name: z.string().min(3, "El nom ha de tenir almenys 3 caràcters."),
    price: z.coerce.number().positive("El preu ha de ser un número positiu."),
    iva: z.coerce.number().min(0).optional().nullable(),
    discount: z.coerce.number().min(0).max(100).optional().nullable(),
    description: z.string().optional().nullable(),
    category: z.string().optional().nullable(),
    unit: z.string().optional().nullable(),
    is_active: z.boolean().default(true),
});

// ✅ Modifiquem el tipus de retorn per incloure les dades del producte
export type FormState = {
    success: boolean;
    message: string;
    errors?: Record<string, string[] | undefined>;
    data?: Product | null; // ✅ AFEGEIX AIXÒ
};

/**
 * Crea un nou producte.
 */
export async function createProduct(prevState: FormState, formData: FormData): Promise<FormState> {
    // ✅ 2. Validació centralitzada
    const session = await validateUserSession();
    if ('error' in session) {
        return { success: false, message: session.error.message };
    }
    const { supabase, user, activeTeamId } = session;

    const validatedFields = productSchema.safeParse({
        ...Object.fromEntries(formData.entries()),
        is_active: formData.get("is_active") === 'on',
    });

    if (!validatedFields.success) {
        return { success: false, message: "Errors de validació.", errors: validatedFields.error.flatten().fieldErrors };
    }

     // ✅ Modifiquem la inserció per obtenir el producte creat
     const { data: newProduct, error } = await supabase.from("products").insert({ 
        ...validatedFields.data, 
        user_id: user.id, 
        team_id: activeTeamId 
    }).select().single(); // ✅ AFEGEIX .select().single()

    if (error) {
        return { success: false, message: `Error en crear el producte: ${error.message}` };
    }

    revalidatePath("/crm/products");
    return { success: true, message: "Producte creat correctament.", data: newProduct };
}
 
/**
 * Actualitza un producte existent.
 */
export async function updateProduct(id: number, prevState: FormState, formData: FormData): Promise<FormState> {
    const session = await validateUserSession();
    if ('error' in session) {
        return { success: false, message: session.error.message };
    }
    const { supabase } = session;

    const validatedFields = productSchema.safeParse({
        ...Object.fromEntries(formData.entries()),
        is_active: formData.get("is_active") === 'on',
    });

    if (!validatedFields.success) {
        return { success: false, message: "Errors de validació.", errors: validatedFields.error.flatten().fieldErrors };
    }
    
    // ✅ Modifiquem l'actualització per obtenir el producte actualitzat
    const { data: updatedProduct, error } = await supabase
        .from("products")
        .update(validatedFields.data)
        .eq("id", id)
        .select() // ✅ AFEGEIX .select()
        .single(); // ✅ AFEGEIX .single()

    if (error) {
        return { success: false, message: `Error en actualitzar el producte: ${error.message}` };
    }
    
    revalidatePath("/crm/products");
    revalidatePath(`/crm/products/${id}`);
    // ✅ Retornem el producte actualitzat a la propietat 'data'
    return { success: true, message: "Producte actualitzat correctament.", data: updatedProduct };
}

/**
 * Elimina un producte.
 */
export async function deleteProduct(id: number): Promise<FormState> {
    const session = await validateUserSession();
    if ('error' in session) {
        return { success: false, message: session.error.message };
    }
    const { supabase } = session;

    const { error } = await supabase.from("products").delete().eq("id", id);

    if (error) {
        return { success: false, message: `Error en eliminar el producte: ${error.message}` };
    }

    revalidatePath("/crm/products");
    return { success: true, message: "Producte eliminat correctament." };
}

// =================== FILE: src/app/[locale]/(app)/crm/products/page.tsx ===================

import { Suspense } from 'react';
import type { Metadata } from 'next';
import { ProductsData } from './_components/ProductsData';
import { ProductsSkeleton } from './_components/ProductsSkeleton';

export const metadata: Metadata = {
  title: 'Conceptes | Ribot',
};


/**
 * @summary La pàgina principal de Productes, que ara actua com a orquestrador de Suspense.
 * Aquest component es renderitza a l'instant.
 */
export default function ProductsPage() {
  return (
    <div className="p-4 md:p-6 lg:p-8">
      <Suspense fallback={<ProductsSkeleton />}>
        {/* Suspense mostrarà l'esquelet a l'instant, eliminant la "congelació".
          Mentrestant, <ProductsData /> carregarà els productes en segon pla.
        */}
        <ProductsData />
      </Suspense>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/crm/products/_components/ProductForm.tsx ===================

"use client";

// Importem els hooks de React. 'useActionState' és la versió moderna de 'useFormState'
// per gestionar l'estat dels formularis que utilitzen Server Actions.
import { useActionState, useEffect } from "react"; 
// 'useFormStatus' és un hook que ens dona informació sobre l'estat d'enviament
// d'un formulari, com per exemple si està 'pending' (enviant-se).
import { useFormStatus } from "react-dom";
import { toast } from "sonner";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { createProduct, updateProduct } from "../actions";
import type { Product } from "@/types/crm/products";
import type { FormState } from "../actions";
import { Switch } from "@/components/ui/switch";
import { Textarea } from "@/components/ui/textarea";
import { useTranslations } from "next-intl";

/**
 * Sub-component reutilitzable per al botó d'enviament del formulari.
 * Utilitza el hook 'useFormStatus' per desactivar-se i mostrar un text
 * de "Desant..." automàticament mentre la Server Action s'està executant.
 */
function SubmitButton({ isEditing }: { isEditing: boolean }) {
  const t = useTranslations('ProductsPage');

  const { pending } = useFormStatus();
  return <Button type="submit" disabled={pending}>{pending ? t('form.saving') : (isEditing ? t('form.saveChanges') : t('form.createConcept'))}</Button>;
}
// ✅ PAS 1: Canvia la definició de 'onSuccess' per acceptar un producte.
interface ProductFormProps {
  product: Product | null;
  onSuccess: (product: Product) => void;
}
/**
 * Component del formulari per crear o editar un producte/concepte.
 * @param {Product | null} product - Si rep un objecte 'product', funciona en mode edició. Si és 'null', funciona en mode creació.
 * @param {() => void} onSuccess - Funció de callback a executar quan l'operació té èxit (ex: tancar el diàleg).
 */
export function ProductForm({ product, onSuccess }: ProductFormProps) {
  const t = useTranslations('ProductsPage');

  // Determina quina Server Action s'ha d'executar: 'updateProduct' si estem editant,
  // o 'createProduct' si estem creant. 'bind' s'utilitza per pre-configurar
  // el primer paràmetre de 'updateProduct' (l'ID del producte).
  const action = product ? updateProduct.bind(null, String(product.id)) : createProduct;

  // Estat inicial per a 'useActionState'.
  const initialState: FormState = { success: false, message: "" };

  // Hook principal que connecta el formulari amb la Server Action.
  // 'state' contindrà l'últim resultat de l'acció (èxit, missatge, errors).
  // 'formAction' és la funció que s'assigna a l'atribut 'action' de l'etiqueta <form>.
  const [state, formAction] = useActionState(action, initialState);

  /**
   * 'useEffect' que s'executa cada cop que l'estat ('state') canvia (després d'enviar el formulari).
   * S'encarrega de mostrar les notificacions ('toast') d'èxit o error.
   */
  useEffect(() => {
    if (state.message) {
        if (state.success) {
            toast.success(t('toast.success'), { description: state.message });
            // ✅ PAS 2: Comprova si l'acció ha retornat dades.
            if (state.data) {
                // ✅ PAS 3: Passa les dades del producte al callback.
                onSuccess(state.data);
            }
        } else if (!state.errors) {
            toast.error(t('toast.error'), { description: state.message });
        }
    }
}, [state, onSuccess, t]);
  return (
       // L'atribut 'action' connecta directament aquest formulari a la nostra Server Action.
    // En fer 'submit', s'executarà la funció 'formAction' al servidor.
    <form action={formAction} className="grid gap-6 py-4">
      {/* Camp 'is_active' a dalt de tot */}
      <div className="flex items-center space-x-2">
        <Switch id="is_active" name="is_active" defaultChecked={product?.is_active ?? true} />
        <Label htmlFor="is_active">{t('form.activeLabel')}</Label>
        <p className="text-sm text-muted-foreground">{t('form.activeDescription')}</p>
      </div>

      {/* Nom i Categoria */}
      <div className="grid grid-cols-2 gap-4">
        <div className="grid gap-2">
        <Label htmlFor="name">{t('form.nameLabel')}</Label>
        <Input id="name" name="name" defaultValue={product?.name || ""} required />
          {/* ... error message ... */}
        </div>
        <div className="grid gap-2">
        <Label htmlFor="category">{t('form.categoryLabel')}</Label>
        <Input id="category" name="category" defaultValue={product?.category || ""} placeholder="Ex: Disseny Web" />
          {/* ... error message ... */}
        </div>
      </div>
      
      {/* Descripció */}
      <div className="grid gap-2">
      <Label htmlFor="description">{t('form.descriptionLabel')}</Label>
      <Textarea id="description" name="description" defaultValue={product?.description || ""} placeholder="Descripció detallada del servei o producte..." />
        {/* ... error message ... */}
      </div>

      {/* Preus i Unitat */}
      <div className="grid grid-cols-4 gap-4">
        <div className="grid gap-2 col-span-2">
        <Label htmlFor="price">{t('form.priceLabel')}</Label>
        <Input id="price" name="price" type="number" step="0.01" defaultValue={product?.price || ""} required />
            {/* ... error message ... */}
        </div>
        <div className="grid gap-2">
        <Label htmlFor="unit">{t('form.unitLabel')}</Label>
        <Input id="unit" name="unit" defaultValue={product?.unit || ""} placeholder="hores, unitats..." />
            {/* ... error message ... */}
        </div>
        <div className="grid gap-2">
        <Label htmlFor="iva">{t('form.vatLabel')}</Label>
        <Input id="iva" name="iva" type="number" defaultValue={product?.iva || 0} />
            {/* ... error message ... */}
        </div>
      </div>
      
      <SubmitButton isEditing={!!product} />
    </form>
  );
}

// =================== FILE: src/app/[locale]/(app)/crm/products/_components/ProductsCardView.tsx ===================

"use client";

import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
// ✅ 1. Importem els components necessaris per al diàleg de confirmació.
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog";
import { Edit, Trash2 } from "lucide-react";
import type { Product } from "@/types/crm/products";
import { useTranslations } from "next-intl";

// Propietats que espera aquest component.
interface ProductsCardViewProps {
  products: Product[]; // La llista de productes a mostrar.
  onEdit: (product: Product) => void; // Funció a cridar en clicar 'Editar'.
  onDelete: (id: string) => void; // Funció a cridar en clicar 'Eliminar'.
}

/**
 * @summary Aquest component renderitza la llista de productes en format de targetes,
 * agrupades visualment per la seva categoria i amb confirmació per eliminar.
 */
export function ProductsCardView({ products, onEdit, onDelete }: ProductsCardViewProps) {
  const t = useTranslations('ProductsPage');

  const groupedProducts = products.reduce((acc, product) => {
    const category = product.category || t('uncategorized');
    if (!acc[category]) { acc[category] = []; }
    acc[category].push(product);
    return acc;
  }, {} as Record<string, Product[]>);

  return (
    <div className="space-y-8">
      {Object.entries(groupedProducts).map(([category, productsInCategory]) => (
        <div key={category}>
          <h2 className="text-xl font-bold mb-4">{category}</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {productsInCategory.map((product) => (
              <Card key={product.id} className="flex flex-col">
                <CardHeader>
                  <CardTitle>{product.name}</CardTitle>
                  <CardDescription>{product.description || t('noDescription')}</CardDescription>
                </CardHeader>
                <CardContent className="flex-grow">
                  <p className="font-mono text-2xl font-bold">€{product.price.toFixed(2)}</p>
                  <p className="text-sm text-muted-foreground">{t('unitLabel', {unit: product.unit || "N/A"})} | {t('vatLabel', {iva: product.iva || 0})}</p>
                </CardContent>
                <CardFooter className="flex justify-end gap-2">
                  <Button variant="ghost" size="sm" onClick={() => onEdit(product)}><Edit className="mr-2 h-4 w-4"/>{t('editButton')}</Button>
                  
                  {/* ✅ 2. Reemplacem el botó simple per l'AlertDialog complet. */}
                  <AlertDialog>
                    <AlertDialogTrigger asChild>
                      <Button variant="ghost" size="sm" className="text-destructive hover:text-destructive">
                        <Trash2 className="mr-2 h-4 w-4"/>{t('deleteButton')}
                      </Button>
                    </AlertDialogTrigger>
                    <AlertDialogContent>
                      <AlertDialogHeader>
                        <AlertDialogTitle>{t('deleteDialog.title')}</AlertDialogTitle>
                        <AlertDialogDescription>{t('deleteDialog.description')}</AlertDialogDescription>
                      </AlertDialogHeader>
                      <AlertDialogFooter>
                        <AlertDialogCancel>{t('deleteDialog.cancelButton')}</AlertDialogCancel>
                        <AlertDialogAction onClick={() => onDelete(product.id.toString())} className="bg-destructive text-destructive-foreground hover:bg-destructive/90">
                          {t('deleteDialog.confirmButton')}
                        </AlertDialogAction>
                      </AlertDialogFooter>
                    </AlertDialogContent>
                  </AlertDialog>

                </CardFooter>
              </Card>
            ))}
          </div>
        </div>
      ))}
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/crm/products/_components/ProductsClient.tsx ===================

"use client";

import React from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { ToggleGroup, ToggleGroupItem } from "@/components/ui/toggle-group";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { PlusCircle, List, LayoutGrid, Loader2, FilePlus2, Upload, Download } from "lucide-react";
import type { Product } from "@/types/crm/products";
import { ProductForm } from "./ProductForm";
import { ProductsTableView } from "./ProductsTableView";
import { ProductsCardView } from "./ProductsCardView";
import { useTranslations } from "next-intl";
import { useProducts } from "../_hooks/useProducts"; // ✅ 1. Importem el nostre nou hook

import { startTransition } from "react";
import { toast } from "sonner";
import { exportToExcel, importFromExcel } from '@/app/[locale]/(app)/excel/actions';
import ExcelDropdownButton, { DropdownOption } from '@/app/[locale]/(app)/excel/ExcelDropdownButton';

export function ProductsClient({ initialProducts }: { initialProducts: Product[] }) {
    const t = useTranslations('ProductsPage');
    const t2 = useTranslations('excel');
    // ✅ 2. Tota la lògica i estats venen del hook.
    const {
        isFormOpen, setFormOpen,
        selectedProduct,
        searchTerm, setSearchTerm,
        categoryFilter, setCategoryFilter,
        viewMode, setViewMode,
        categories,
        filteredProducts,
        isPending,
        handleEdit,
        handleCreate,
        handleDelete,
        handleSuccess,
    } = useProducts({ initialProducts, t });

    const excelOptions: DropdownOption[] = [
        { value: 'create', label: t2('products.create'), icon: FilePlus2 },
        { value: 'load', label: t2('products.load'), icon: Upload },
        { value: 'download', label: t2('products.download'), icon: Download },
    ];

    async function handleExportAndDownload(shouldDownload: boolean) {
        toast.info(t2('products.startingexport'));
        try {
            const result = await exportToExcel('products', shouldDownload);

            if (result.success && result.fileBuffer) {
                const byteCharacters = atob(result.fileBuffer);
                const byteNumbers = new Array(byteCharacters.length);
                for (let i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                const byteArray = new Uint8Array(byteNumbers);
                const blob = new Blob([byteArray], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });

                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = result.fileName || 'export.xlsx';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);

                toast.success(t2('successexport'));
            } else {
                toast.error(t2('errorexport'), { description: result.message });
            }
        } catch (error) {
            toast.error(t2('unexpectederror'), { description: t2('couldnotcomplete') });
            console.error(error);
        }
    }

    /* Funció del costat del client per iniciar el procés d'importació.
    * Crea un input de fitxers i el llança.
     */
    function handleImport() {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.xlsx, .xls';

        input.onchange = async (e) => {
            const file = (e.target as HTMLInputElement).files?.[0];
            if (!file) {
                toast.error(t2('nofileselected'));
                return;
            }

            toast.info(t2('processingfile'));

            const formData = new FormData();
            formData.append('file', file);

            startTransition(async () => {
                try {
                    const result = await importFromExcel('products', formData);

                    if (result.success) {
                        toast.success(result.message);
                    } else {
                        toast.error(t2('errorloadingdata'), { description: result.message });
                    }
                } catch (error) {
                    toast.error(t2('unexpectederrorloadingfile'), { description: (error as Error).message });
                }
            });
        };

        input.click();
    }

    const handleExcelAction = (option: DropdownOption) => {
        switch (option.value) {
            case 'download':
                startTransition(() => handleExportAndDownload(true)); // ➡️ ARA ES CRIDA startTransition
                break;
            case 'create':
                startTransition(() => handleExportAndDownload(false)); // ➡️ I AQUÍ TAMBÉ
                break;
            case 'load':
                handleImport();
                break;
            default:
                break;
        }
    };

    return (
        <div className="space-y-6">
            <div className="flex flex-wrap items-center justify-between gap-4">
                <div>
                    <h1 className="text-2xl font-bold">{t('title')}</h1>
                    <p className="text-muted-foreground">{t('description')}</p>
                </div>
                {/* Contenidor per agrupar els botons d'acció */}
                <div className="flex items-center gap-2">
                    <ExcelDropdownButton
                        options={excelOptions}
                        onSelect={handleExcelAction}
                    />
                    <Dialog open={isFormOpen} onOpenChange={setFormOpen}>
                        <DialogTrigger asChild>
                            <Button onClick={handleCreate}><PlusCircle className="mr-2 h-4 w-4" />{t('newConceptButton')}</Button>
                        </DialogTrigger>
                        <DialogContent className="sm:max-w-[600px]">
                            <DialogHeader><DialogTitle>{selectedProduct ? t('form.editTitle') : t('form.createTitle')}</DialogTitle></DialogHeader>
                            <ProductForm product={selectedProduct} onSuccess={handleSuccess} />
                        </DialogContent>
                    </Dialog>
                </div>
            </div>

            <div className="flex flex-col md:flex-row gap-4">
                <Input placeholder={t('searchPlaceholder')} value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="max-w-sm" />
                <Select value={categoryFilter} onValueChange={setCategoryFilter}>
                    <SelectTrigger className="w-full md:w-[200px]"><SelectValue placeholder={t('categoryFilterPlaceholder')} /></SelectTrigger>
                    <SelectContent>
                        {categories.map(cat => (
                            <SelectItem key={cat} value={cat}>
                                {cat === 'all' ? t('allCategories') : cat}
                            </SelectItem>
                        ))}
                    </SelectContent>
                </Select>
                <ToggleGroup type="single" value={viewMode} onValueChange={(value: "list" | "card") => value && setViewMode(value)} className="ml-auto">
                    <ToggleGroupItem value="list" aria-label={t('listView')}><List className="h-4 w-4" /></ToggleGroupItem>
                    <ToggleGroupItem value="card" aria-label={t('cardView')}><LayoutGrid className="h-4 w-4" /></ToggleGroupItem>
                </ToggleGroup>
            </div>

            <div>
                {isPending ? (
                    <div className="flex justify-center items-center h-64"><Loader2 className="w-8 h-8 animate-spin" /></div>
                ) : viewMode === 'list' ? (
                    <ProductsTableView products={filteredProducts} onEdit={handleEdit} onDelete={(id) => handleDelete(Number(id))} />
                ) : (
                    <ProductsCardView products={filteredProducts} onEdit={handleEdit} onDelete={(id) => handleDelete(Number(id))} />
                )}
            </div>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/products/_components/ProductsData.tsx ===================

import { ProductsClient } from "./ProductsClient";
import type { Product } from '@/types/crm/products'; 
import { validatePageSession } from "@/lib/supabase/session"; // ✅ 1. Importem la funció

export async function ProductsData() {
    // ✅ 2. Validació de sessió que gestiona les redireccions.
    const { supabase } = await validatePageSession();

    // La política RLS s'encarregarà de filtrar automàticament per l'equip actiu.
    const { data: products, error } = await supabase
        .from("products")
        .select("*")
        .order("name", { ascending: true });
        
    if (error) {
        console.error("Error en carregar els productes (pot ser per RLS):", error);
        return <ProductsClient initialProducts={[]} />;
    }

    // La normalització de dades nul·les segueix sent una bona pràctica.
    const normalizedProducts: Product[] = (products || []).map(p => ({
        ...p,
        description: p.description ?? null,
        category: p.category ?? null,
        unit: p.unit ?? null,
        iva: p.iva ?? null,
        discount: p.discount ?? null,
    }));

    return <ProductsClient initialProducts={normalizedProducts} />;
}

// =================== FILE: src/app/[locale]/(app)/crm/products/_components/ProductsSkeleton.tsx ===================

"use client";

import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";

/**
 * @summary Mostra un esquelet de càrrega per a la pàgina de Productes/Conceptes.
 */
export function ProductsSkeleton() {
  return (
    <div className="space-y-6 animate-pulse">
      {/* Esquelet de la capçalera */}
      <div className="flex flex-wrap items-center justify-between gap-4">
        <div>
          <div className="h-8 w-48 bg-gray-700/50 rounded-md"></div>
          <div className="h-5 w-72 bg-gray-700/50 rounded-md mt-2"></div>
        </div>
        <div className="h-10 w-40 bg-gray-700/50 rounded-md"></div>
      </div>

      {/* Esquelet dels filtres */}
      <div className="flex flex-col md:flex-row gap-4">
        <div className="h-10 max-w-sm w-full bg-gray-700/50 rounded-md"></div>
        <div className="h-10 w-full md:w-[200px] bg-gray-700/50 rounded-md"></div>
        <div className="h-10 w-[100px] bg-gray-700/50 rounded-md ml-auto"></div>
      </div>

      {/* Esquelet de la taula */}
      <div className="border rounded-lg">
        <Table>
          <TableHeader>
            <TableRow>
              {[...Array(5)].map((_, i) => (
                <TableHead key={i}><div className="h-5 w-24 bg-gray-700/50 rounded-md"></div></TableHead>
              ))}
            </TableRow>
          </TableHeader>
          <TableBody>
            {[...Array(5)].map((_, i) => (
              <TableRow key={i}>
                {[...Array(5)].map((_, j) => (
                  <TableCell key={j}><div className="h-6 bg-gray-700/50 rounded-md"></div></TableCell>
                ))}
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/crm/products/_components/ProductsTableView.tsx ===================

"use client";

import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog";
import { Edit, Trash2 } from "lucide-react";
import type { Product } from "@/types/crm/products";
import { useTranslations } from "next-intl";

// Propietats que espera el component.
interface ProductsTableViewProps {
    products: Product[];
    onEdit: (product: Product) => void;
    onDelete: (id: string) => void;
}

/**
 * Aquest component renderitza la llista de productes en un format de taula clàssic.
 * És un component purament presentacional.
 */
export function ProductsTableView({ products, onEdit, onDelete }: ProductsTableViewProps) {
    const t = useTranslations('ProductsPage');
    
    return (
        <div className="border rounded-lg">
            <Table>
                <TableHeader>
                    <TableRow>
                        <TableHead>{t('table.name')}</TableHead>
                        <TableHead>{t('table.category')}</TableHead>
                        <TableHead className="text-right">{t('table.price')}</TableHead>
                        <TableHead className="text-right">{t('table.unit')}</TableHead>
                        <TableHead className="w-[100px] text-right">{t('table.actions')}</TableHead>
                    </TableRow>
                </TableHeader>
                <TableBody>
                    {products.length > 0 ? (
                        products.map((product) => (
                            <TableRow key={product.id}>
                                <TableCell className="font-medium">{product.name}</TableCell>
                                <TableCell className="text-muted-foreground">{product.category || "-"}</TableCell>
                                <TableCell className="text-right font-mono">€{(product.price || 0).toFixed(2)}</TableCell>
                                <TableCell className="text-right">{product.unit || "-"}</TableCell>
                                <TableCell>
                                    <div className="flex justify-end gap-1">
                                        <Button variant="ghost" size="icon" onClick={() => onEdit(product)}>
                                            <Edit className="h-4 w-4" />
                                        </Button>
                                        <AlertDialog>
                                            <AlertDialogTrigger asChild>
                                                <Button variant="ghost" size="icon">
                                                    <Trash2 className="h-4 w-4 text-destructive" />
                                                </Button>
                                            </AlertDialogTrigger>
                                            {/* ✅ Contingut del diàleg de confirmació completat i traduït */}
                                            <AlertDialogContent>
                                                <AlertDialogHeader>
                                                    <AlertDialogTitle>{t('deleteDialog.title')}</AlertDialogTitle>
                                                    <AlertDialogDescription>{t('deleteDialog.description')}</AlertDialogDescription>
                                                </AlertDialogHeader>
                                                <AlertDialogFooter>
                                                    <AlertDialogCancel>{t('deleteDialog.cancelButton')}</AlertDialogCancel>
                                                    <AlertDialogAction onClick={() => onDelete(product.id)} className="bg-destructive text-destructive-foreground hover:bg-destructive/90">
                                                        {t('deleteDialog.confirmButton')}
                                                    </AlertDialogAction>
                                                </AlertDialogFooter>
                                            </AlertDialogContent>
                                        </AlertDialog>
                                    </div>
                                </TableCell>
                            </TableRow>
                        ))
                    ) : (
                        <TableRow>
                            <TableCell colSpan={5} className="h-24 text-center">
                                {t('noProductsFound')}
                            </TableCell>
                        </TableRow>
                    )}
                </TableBody>
            </Table>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/products/_hooks/useProducts.ts ===================

// /app/[locale]/(app)/crm/products/_hooks/useProducts.ts (VERSIÓ FINAL CORREGIDA)
"use client";

// ✅ Importem useCallback
import { useState, useMemo, useTransition, useCallback } from "react";
import { toast } from 'sonner';
import type { Product } from "@/types/crm/products";
import { deleteProduct } from "../actions";

type UseProductsProps = {
    initialProducts: Product[];
    t: (key: string) => string;
};

export function useProducts({ initialProducts, t }: UseProductsProps) {
    const [isPending, startTransition] = useTransition();
    const [products, setProducts] = useState<Product[]>(initialProducts);
    const [isFormOpen, setFormOpen] = useState(false);
    const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);
    const [searchTerm, setSearchTerm] = useState("");
    const [categoryFilter, setCategoryFilter] = useState("all");
    const [viewMode, setViewMode] = useState<"list" | "card">("list");

    const categories = useMemo(() => {
        const uniqueCategories = new Set(products.map(p => p.category).filter((c): c is string => !!c));
        return ["all", ...Array.from(uniqueCategories)];
    }, [products]);
    
    const filteredProducts = useMemo(() => {
        return products
            .filter(p => p.is_active)
            .filter(p => categoryFilter === "all" || p.category === categoryFilter)
            .filter(p => !searchTerm || p.name.toLowerCase().includes(searchTerm.toLowerCase()));
    }, [products, categoryFilter, searchTerm]);

    // ✅ Embolcallem les funcions amb useCallback per estabilitzar-les
    const handleEdit = useCallback((product: Product) => {
        setSelectedProduct(product);
        setFormOpen(true);
    }, []); // No té dependències, només es crea un cop.

    const handleCreate = useCallback(() => {
        setSelectedProduct(null);
        setFormOpen(true);
    }, []); // No té dependències, només es crea un cop.

    const handleDelete = useCallback((id: number) => {
        startTransition(async () => {
            setProducts(currentProducts => currentProducts.filter(p => p.id !== id));
            
            const result = await deleteProduct(id);
            if (result.success) {
                toast.success(t('toast.success'), { description: result.message });
            } else {
                toast.error(t('toast.error'), { description: result.message });
                setProducts(initialProducts); 
            }
        });
    }, [t, initialProducts]); // Aquesta funció depèn de 't' i 'initialProducts'.

    const handleSuccess = useCallback((updatedOrNewProduct: Product) => {
        setFormOpen(false);
        setProducts(currentProducts => {
            const exists = currentProducts.some(p => p.id === updatedOrNewProduct.id);
            if (exists) {
                return currentProducts.map(p => p.id === updatedOrNewProduct.id ? updatedOrNewProduct : p);
            } else {
                return [updatedOrNewProduct, ...currentProducts];
            }
        });
    }, []); // No té dependències externes, només les funcions de setState.
    
    return {
        isFormOpen, setFormOpen,
        selectedProduct,
        searchTerm, setSearchTerm,
        categoryFilter, setCategoryFilter,
        viewMode, setViewMode,
        categories,
        filteredProducts,
        isPending,
        handleEdit,
        handleCreate,
        handleDelete,
        handleSuccess,
        t
    };
}

// =================== FILE: src/app/[locale]/(app)/crm/quotes/actions.ts ===================

// In your quotes actions file

"use server";

import { revalidatePath } from "next/cache";
import { validateUserSession } from "@/lib/supabase/session"; // ✅ 1. Importem la funció

// ❌ The old getTeamId helper function is no longer needed and should be deleted.

/**
 * @summary Deletes a quote and its associated items.
 */
export async function deleteQuoteAction(quoteId: string) {
    // ✅ 2. Validació centralitzada
    const session = await validateUserSession();
    if ('error' in session) {
        return { success: false, message: session.error.message };
    }
    const { supabase } = session;

    if (!quoteId) {
        return { success: false, message: "ID de pressupost invàlid." };
    }

    // This code is now secure. The RLS policies on both 'quote_items' and 'quotes'
    // will prevent a user from deleting data that doesn't belong to their active team.
    const { error: itemsError } = await supabase
        .from('quote_items')
        .delete()
        .eq('quote_id', quoteId);

    if (itemsError) {
        console.error("Error deleting quote items:", itemsError);
        return { success: false, message: "Could not delete quote details." };
    }

    const { error: quoteError } = await supabase
        .from('quotes')
        .delete()
        .eq('id', quoteId);

    if (quoteError) {
        console.error("Error deleting quote:", quoteError);
        return { success: false, message: "Could not delete quote." };
    }

    revalidatePath('/crm/quotes');
    return { success: true, message: "Quote deleted successfully." };
}



// =================== FILE: src/app/[locale]/(app)/crm/quotes/page.tsx ===================

import { Suspense } from 'react';
import type { Metadata } from 'next';
import Link from 'next/link';
import { Plus } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { QuotesData } from './_components/QuotesData';
import { QuotesSkeleton } from './_components/QuotesSkeleton';
import type { Quote } from '@/types/crm';


export const metadata: Metadata = {
    title: 'Pressupostos | Ribot',
};

export type QuoteWithContact = Quote & {
    contacts: { nom: string; empresa: string | null; } | null;
};

// La funció ha de ser 'async' per poder fer 'await' a searchParams.
export default async function QuotesPage({ searchParams }: { 
    searchParams: { [key: string]: string | string[] | undefined } 
}) {
    // Resolem la promesa dels paràmetres una sola vegada.
    const resolvedSearchParams = await searchParams;

    // La clau de Suspense depèn de tots els paràmetres per a una recàrrega segura.
    const suspenseKey = JSON.stringify(resolvedSearchParams);

    return (
        <div>
            <div className="flex justify-between items-center mb-8">
                <h1 className="text-3xl font-bold">Pressupostos</h1>
                <Button asChild>
                    <Link href="/crm/quotes/new">
                        <Plus className="w-4 h-4 mr-2" /> Nou Pressupost
                    </Link>
                </Button>
            </div>
            
            <Suspense key={suspenseKey} fallback={<QuotesSkeleton />}>
                <QuotesData searchParams={resolvedSearchParams} />
            </Suspense>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/quotes/[id]/actions.ts ===================

"use server";

import { revalidatePath } from "next/cache";
import type { Quote} from '@/types/crm';
import { validateUserSession } from "@/lib/supabase/session"; // ✅ Importem la nostra funció
import type { ActionResult} from '@/types/shared/index'; // Importa el nou tipus genèric
import type { TeamData, CompanyProfile } from '@/types/settings/team'; // Assegura't que TeamData està importat


/**
 * Desa (crea o actualitza) un pressupost i els seus conceptes.
 */
export async function saveQuoteAction(quoteData: Quote): Promise<ActionResult<string>> {
    const session = await validateUserSession();
    if ('error' in session) return { success: false, message: session.error.message };
    const { supabase } = session;

    if (!quoteData.contact_id) return { success: false, message: "Si us plau, selecciona un client." };

    try {
        const { data, error } = await supabase.rpc('upsert_quote_with_items', {
            quote_payload: quoteData
        });

        // ✅ AFEGIM AQUEST BLOC PER A DEPURAR
        if (error) {
            // Això imprimirà l'error detallat de Supabase a la consola del teu servidor (el terminal on executes 'next dev')
            console.error("Supabase RPC Error:", JSON.stringify(error, null, 2));
            // Llançar l'error farà que el bloc 'catch' el capturi amb més detall
            throw error;
        }
        
        const finalQuoteId = data.quote_id;

        revalidatePath('/crm/quotes');
        revalidatePath(`/crm/quotes/${finalQuoteId}`);
        
        return { success: true, message: "Pressupost desat correctament.", data: finalQuoteId };

    } catch(error: unknown) { // ✅ Canviem 'error' a 'unknown' per accedir a les seves propietats de manera segura
        // Ara el missatge serà molt més específic
        const message = error instanceof Error ? error.message : "Error desconegut al desar el pressupost.";
        console.error("Error a saveQuoteAction:", message);
        return { success: false, message };
    }
}
/**
 * Elimina un pressupost.
 */
export async function deleteQuoteAction(quoteId: string): Promise<ActionResult> {
    const session = await validateUserSession();
    if ('error' in session) return { success: false, message: session.error.message };
    const { supabase } = session;

    if (!quoteId || quoteId === 'new') return { success: false, message: "ID invàlid." };
    
    try {
        // La RLS s'encarregarà de la seguretat a nivell de fila
        await supabase.from('quote_items').delete().eq('quote_id', quoteId);
        await supabase.from('quotes').delete().eq('id', quoteId);
        revalidatePath('/crm/quotes');
        return { success: true, message: "Pressupost eliminat." };
    } catch(error) {
        const message = error instanceof Error ? error.message : "Error en eliminar el pressupost.";
        return { success: false, message };
    }
}

/**
 * Acció per crear un nou producte desable.
 */
export async function createProductAction(newProduct: { name: string, price: number }): Promise<ActionResult> {
    const session = await validateUserSession();
    if ('error' in session) return { success: false, message: session.error.message };
    const { supabase, user, activeTeamId } = session;

    try {
        const { data, error } = await supabase.from('products').insert({
            user_id: user.id, team_id: activeTeamId,
            name: newProduct.name, price: newProduct.price,
        }).select().single();

        if (error) throw error;
        revalidatePath(`/crm`, 'layout');
        return { success: true, message: 'Nou producte desat.', data };
    } catch (error: unknown) {
        const message = error instanceof Error ? error.message : "Error en crear el producte.";
        return { success: false, message };
    }
}

/**
 * Acció segura que invoca l'Edge Function 'send-quote-pdf'.
 */
export async function sendQuoteAction(quoteId: string): Promise<ActionResult> {
    const session = await validateUserSession();
    if ('error' in session) return { success: false, message: session.error.message };
    const { supabase } = session;

    if (!quoteId) return { success: false, message: "ID de pressupost invàlid." };
    
    try {
        const { error } = await supabase.functions.invoke('send-quote-pdf', { body: { quoteId } });
        if (error) throw error;
        revalidatePath(`/crm/quotes/${quoteId}`);
        return { success: true, message: "S'ha iniciat l'enviament del pressupost." };
    } catch (error: unknown) {
        const message = error instanceof Error ? error.message : "Error en invocar l'Edge Function.";
        return { success: false, message };
    }
}

/**
 * Acció per actualitzar el perfil de l'empresa de l'equip.
 */
// ✅ CORRECCIÓ: Especifiquem que el 'data' de ActionResult serà de tipus 'TeamData'
export async function updateTeamProfileAction(
    teamData: Partial<CompanyProfile> | null
): Promise<ActionResult<TeamData>> { // <-- Aquí fem el canvi
    if (!teamData) {
        return { success: false, message: 'No s\'han proporcionat dades per actualitzar.' };
    }

    const session = await validateUserSession();
    if ('error' in session) return { success: false, message: session.error.message };
    const { supabase, activeTeamId } = session;

    const dataToUpdate = {
        name: teamData.company_name,
        tax_id: teamData.company_tax_id,
        address: teamData.company_address,
        email: teamData.company_email,
        phone: teamData.company_phone,
        logo_url: teamData.logo_url,
    };

    try {
        const { data, error } = await supabase
            .from('teams')
            .update(dataToUpdate)
            .eq('id', activeTeamId)
            .select()
            .single();
            
        if (error) throw error;
        
        revalidatePath(`/crm/quotes/[id]`, 'page');
        // Ara TypeScript sap que 'data' és de tipus TeamData, i el tipus de retorn és correcte.
        return { success: true, message: 'Perfil de l\'equip actualitzat.', data };
    } catch (error: unknown) {
        const message = error instanceof Error ? error.message : "Error en actualitzar el perfil.";
        return { success: false, message };
    }
}



// =================== FILE: src/app/[locale]/(app)/crm/quotes/[id]/page.tsx ===================

// /app/[locale]/(app)/crm/quotes/[id]/page.tsx

import { Suspense } from 'react';
import type { Metadata } from 'next';
import { createClient } from '@/lib/supabase/server';
import { QuoteEditorData } from './_components/QuoteEditorData';
import { QuoteEditorSkeleton } from './_components/QuoteEditorSkeleton';

interface MetadataProps {
    params: { id: string };
}

/**
 * Funció per generar metadades dinàmiques.
 */
export async function generateMetadata({ params }: MetadataProps): Promise<Metadata> {
    const { id } = await params; // 👈 també cal esperar

    if (id === 'new') {
        return { title: 'Nou Pressupost | Ribot' };
    }

    const supabase = createClient();
    const { data: quote } = await supabase
        .from('quotes')
        .select('quote_number')
        .eq('id', id)
        .single();

    const title = quote ? `Editar Pressupost #${quote.quote_number}` : 'Editar Pressupost';
    return { title: `${title} | Ribot` };
}

interface PageProps {
    params: { id: string; locale: string };
}

/**
 * Funció principal de la pàgina del servidor.
 */
// ✅ CORRECCIÓ: Tornem a afegir 'async'
export default async function QuoteEditorPage({ params }: PageProps) {
    const { id, locale } = await params; // 👈 cal l’await aquí

    return (
        <Suspense fallback={<QuoteEditorSkeleton />}>
            <QuoteEditorData quoteId={id} locale={locale} />
        </Suspense>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/quotes/[id]/_components/CompanyProfileDialog.tsx ===================

"use client";

import React, { useState, useEffect, useTransition } from 'react';
import { toast } from "sonner";
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from '@/components/ui/dialog';
import { Loader2, Upload } from 'lucide-react';
import { createClient } from '@/lib/supabase/client';
import { updateTeamProfileAction } from '../actions';
// ✅ Assegurem que importem el tipus correcte. TeamData és el que ve del servidor.
import type { TeamData, CompanyProfile } from '@/types/settings/team';
import Image from 'next/image';
import { useTranslations } from 'next-intl';

// L'estat local treballarà amb el format de CompanyProfile per als formularis.
type EditableProfile = Partial<CompanyProfile>;

// ✅ La prop 'profile' ara és de tipus 'TeamData', que coincideix amb el que envia el servidor.
export function CompanyProfileDialog({ open, onOpenChange, profile, onProfileUpdate }: {
    open: boolean;
    onOpenChange: (isOpen: boolean) => void;
    profile: TeamData | null; // <-- Canvi de tipus
    onProfileUpdate: (newProfile: TeamData) => void; // <-- Canvi de tipus
}) {
    const t = useTranslations('QuoteEditor');
    const [localProfile, setLocalProfile] = useState<EditableProfile>({});
    const [isSaving, startSaveTransition] = useTransition();
    const [isUploading, setIsUploading] = useState(false);
    const supabase = createClient();

    // ✅ AQUEST ÉS EL CANVI MÉS IMPORTANT
    // Aquest useEffect s'executa quan el diàleg s'obre o quan les dades del perfil canvien.
    // "Tradueix" les dades de la taula 'teams' al format que el nostre formulari espera.
    useEffect(() => {
        if (profile) {
            setLocalProfile({
                id: profile.id,
                company_name: profile.name,
                company_tax_id: profile.tax_id,
                company_address: profile.address,
                company_email: profile.email,
                company_phone: profile.phone,
                logo_url: profile.logo_url,
            });
        }
    }, [profile]); // Aquesta dependència assegura que l'estat s'actualitza si le

    const handleLogoUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (!file || !profile?.id) return;

        setIsUploading(true);
        const filePath = `${profile.id}/logo-${Date.now()}`;
        const { error } = await supabase.storage.from('logos').upload(filePath, file, { upsert: true });

        if (error) {
            toast.error(t('toast.errorTitle'), { description: t('toast.logoUploadError') });
        } else {
            const { data } = supabase.storage.from('logos').getPublicUrl(filePath);
            setLocalProfile(p => ({ ...p, logo_url: data.publicUrl }));
        }
        setIsUploading(false);
    };

    /**
     * @summary Gestor per desar el perfil. Ara és més segur i net.
     */
    const handleSaveProfile = () => {
        if (!profile?.id) {
            toast.error(t('toast.errorTitle'), { description: t('toast.missingProfileData') });
            return;
        }

        startSaveTransition(async () => {
            const profileToSend: Partial<CompanyProfile> = {
                company_name: localProfile.company_name || null,
                company_tax_id: localProfile.company_tax_id || null,
                company_address: localProfile.company_address || null,
                company_email: localProfile.company_email || null,
                company_phone: localProfile.company_phone || null,
                logo_url: localProfile.logo_url || null,
            };

            const result = await updateTeamProfileAction(profileToSend);

            // ✅ CORRECCIÓ: Canviem 'result.updatedProfile' per 'result.data'
            if (result.success && result.data) {
                toast.success(t('toast.successTitle'), { description: result.message });
                onProfileUpdate(result.data); // <-- Aquí també
                onOpenChange(false);
            } else {
                toast.error(t('toast.errorTitle'), { description: result.message });
            }
        });
    };

    // Funció per gestionar els canvis als inputs de manera genèrica
    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value } = e.target;
        setLocalProfile(prev => ({ ...prev, [name]: value }));
    };

    return (
        <Dialog open={open} onOpenChange={onOpenChange}>
            {/* ✅ CORRECCIÓN: Eliminamos 'glass-effect'. DialogContent ya es adaptable. */}
            <DialogContent>
                <DialogHeader>
                    <DialogTitle>{t('companyProfileDialog.title')}</DialogTitle>
                    <DialogDescription>{t('companyProfileDialog.description')}</DialogDescription>
                </DialogHeader>
                <div className="space-y-4 py-4 max-h-[60vh] overflow-y-auto">
                    <div>
                        <Label>{t('companyProfileDialog.logoLabel')}</Label>
                        <div className="mt-1 flex items-center gap-4">
                            {localProfile.logo_url ? (
                                <Image
                                    src={localProfile.logo_url}
                                    alt={t('companyProfileDialog.logoAlt')}
                                    width={64} height={64}
                                    // ✅ CORRECCIÓN: Usamos 'bg-muted' para un fondo neutro
                                    className="object-contain rounded-lg bg-muted p-1"
                                />
                            ) : <div className="h-16 w-16 bg-muted rounded-lg" />}
                            <Button asChild variant="outline">
                                <label htmlFor="logo-upload" className="cursor-pointer flex items-center gap-2">
                                    {isUploading ? <Loader2 className="animate-spin" /> : <Upload className="w-4 h-4" />}
                                    {t('companyProfileDialog.uploadButton')}
                                </label>
                            </Button>
                            <input id="logo-upload" type="file" accept="image/*" className="hidden" onChange={handleLogoUpload} disabled={isUploading} />
                        </div>
                    </div>
                    {/* ✅ Els inputs ara funcionen perquè 'localProfile' té el format correcte */}
                    <div><Label htmlFor="company_name">{t('companyProfileDialog.nameLabel')}</Label><Input id="company_name" name="company_name" value={localProfile.company_name || ''} onChange={handleInputChange} /></div>
                    <div><Label htmlFor="company_tax_id">{t('companyProfileDialog.taxIdLabel')}</Label><Input id="company_tax_id" name="company_tax_id" value={localProfile.company_tax_id || ''} onChange={handleInputChange} /></div>
                    <div><Label htmlFor="company_address">{t('companyProfileDialog.addressLabel')}</Label><Input id="company_address" name="company_address" value={localProfile.company_address || ''} onChange={handleInputChange} /></div>
                    <div><Label htmlFor="company_email">{t('companyProfileDialog.emailLabel')}</Label><Input id="company_email" name="company_email" type="email" value={localProfile.company_email || ''} onChange={handleInputChange} /></div>
                    <div><Label htmlFor="company_phone">{t('companyProfileDialog.phoneLabel')}</Label><Input id="company_phone" name="company_phone" value={localProfile.company_phone || ''} onChange={handleInputChange} /></div>
                </div>
                <DialogFooter>
                    <Button onClick={() => onOpenChange(false)} variant="ghost">{t('buttons.cancel')}</Button>
                    <Button onClick={handleSaveProfile} disabled={isSaving}>
                        {isSaving && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                        {t('companyProfileDialog.saveButton')}
                    </Button>
                </DialogFooter>
            </DialogContent>
        </Dialog>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/quotes/[id]/_components/QuoteEditorClient.tsx ===================

"use client";

import React from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Loader2, ArrowLeft, Send, Trash2, Building } from 'lucide-react';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import type { Quote, Contact, Product, Opportunity } from '@/types/crm';
import type { TeamData } from '@/types/settings';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Switch } from "@/components/ui/switch";

// Importem el hook que conté TOTA la lògica
import { useQuoteEditor } from '../_hooks/useQuoteEditor';

// Importem els sub-components de presentació
import { CompanyProfileDialog } from './CompanyProfileDialog';
import { QuoteMeta } from './QuoteMeta';
import { QuoteItems } from './QuoteItems';
import { QuoteTotals } from './QuoteTotals';
import { QuotePreview } from './QuotePreview';

interface QuoteEditorClientProps {
    initialQuote: Quote;
    contacts: Contact[];
    products: Product[];
    companyProfile: TeamData | null;
    initialOpportunities: Opportunity[];
    userId: string;
    locale: string;
}

export function QuoteEditorClient(props: QuoteEditorClientProps) {
    const router = useRouter();

    const {
        state,
        quote,
        onQuoteChange,
        onItemsChange,
        setCurrentTeamData,
        setIsDeleteDialogOpen,
        setIsProfileDialogOpen,
        subtotal, discountAmount, tax, total,
        handleSave, handleDelete, handleSend,
        isSaving, isSending,
        t
    } = useQuoteEditor(props);

    return (
        <>
            <CompanyProfileDialog
                open={state.isProfileDialogOpen}
                onOpenChange={setIsProfileDialogOpen}
                profile={state.currentTeamData}
                onProfileUpdate={setCurrentTeamData}
            />
            <AlertDialog open={state.isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
                <AlertDialogContent>
                    <AlertDialogHeader>
                        <AlertDialogTitle>{t('quoteEditor.deleteDialogTitle')}</AlertDialogTitle>
                        <AlertDialogDescription>{t('quoteEditor.deleteDialogDescription')}</AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                        <AlertDialogCancel disabled={isSaving}>Cancel·lar</AlertDialogCancel>
                        <AlertDialogAction onClick={handleDelete} className="bg-destructive hover:bg-destructive/90" disabled={isSaving}>
                            {isSaving && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                            Confirmar Eliminació
                        </AlertDialogAction>
                    </AlertDialogFooter>
                </AlertDialogContent>
            </AlertDialog>

            <div className="flex flex-col h-full">
                <header className="flex justify-between items-center mb-6 flex-shrink-0">
                    <Button variant="ghost" onClick={() => router.push('/crm/quotes')}>
                        <ArrowLeft className="w-4 h-4 mr-2" />{t('quoteEditor.backButton')}
                    </Button>
                    <div className="flex items-center gap-2">
                        <Button variant="ghost" size="icon" onClick={() => setIsProfileDialogOpen(true)} title={t('quoteEditor.companyDataTooltip')}>
                            <Building className="w-4 h-4" />
                        </Button>
                        {quote.id !== 'new' &&
                            <Button variant="outline" size="icon" onClick={() => setIsDeleteDialogOpen(true)} title={t('quoteEditor.deleteTooltip')}>
                                <Trash2 className="w-4 h-4 text-destructive" />
                            </Button>
                        }
                        <Button onClick={handleSave} disabled={isSaving || isSending}>
                            {isSaving && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                            {quote.id === 'new' ? t('quoteEditor.createButton') : t('quoteEditor.saveButton')}
                        </Button>
                        {quote.id !== 'new' && (
                            <Button onClick={handleSend} disabled={isSaving || isSending}>
                                {isSending ? (
                                    <>
                                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                        {state.sendingStatus === 'generating' && t('quoteEditor.generatingPDF')}
                                        {state.sendingStatus === 'uploading' && t('quoteEditor.uploadingFile')}
                                        {state.sendingStatus === 'sending' && t('quoteEditor.sending')}
                                    </>
                                ) : (
                                    <>
                                        <Send className="mr-2 h-4 w-4" />
                                        {quote.sent_at ? t('quoteEditor.resendButton') : t('quoteEditor.sendButton')}
                                    </>
                                )}
                            </Button>
                        )}
                    </div>
                </header>

                {quote.sent_at && (
                    <div className="mb-4 p-2 text-center bg-green-100 text-green-800 rounded-md text-sm">
                        {t('quoteEditor.sentOn', { date: new Date(quote.sent_at).toLocaleDateString(props.locale, { day: '2-digit', month: 'long', year: 'numeric' }) })}
                    </div>
                )}

                <main className="flex-1 grid grid-cols-1 lg:grid-cols-2 gap-8 min-h-0">
                    <section className="flex flex-col gap-4 overflow-y-auto pr-4">
                        <div className="glass-card p-4">
                            <QuoteMeta
                                contact_id={quote.contact_id}
                                quote_number={quote.quote_number}
                                issue_date={quote.issue_date}
                                expiry_date={quote.expiry_date ?? null}
                                onMetaChange={onQuoteChange}
                                contacts={props.contacts}
                            />
                        </div>

                        <div className="glass-card p-4">
                            <Label>{t('quoteEditor.clientOpportunitiesLabel')}</Label>
                            {state.contactOpportunities.length > 0 ? (
                                <Select
                                    value={quote.opportunity_id ? String(quote.opportunity_id) : ''}
                                    onValueChange={(value) => onQuoteChange('opportunity_id', value ? Number(value) : null)}
                                    disabled={!quote.contact_id}
                                >
                                    <SelectTrigger
                                        className="w-full text-foreground" // ✅ AFEGEIX "text-foreground" AQUÍ
                                    >
                                        <SelectValue placeholder="Selecciona una oportunitat" />
                                    </SelectTrigger>
                                    <SelectContent>
                                        {state.contactOpportunities.map(o => (
                                            // ✅ CORRECCIÓ CLAU: Convertim l'ID a string aquí
                                            <SelectItem key={o.id} value={String(o.id)}>
                                                {o.name} ({o.stage_name})
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            ) : (
                                <p className="mt-2 text-sm text-muted-foreground">{t('quoteEditor.noOpenOpportunities')}</p>
                            )}
                        </div>

                        <div className="glass-card p-2">
                            <QuoteItems
                                items={quote.items || []}
                                onItemsChange={onItemsChange}
                                products={props.products}
                                userId={props.userId}
                            />
                            <QuoteTotals
                                subtotal={subtotal}
                                discount={quote.discount}
                                setDiscount={(d) => onQuoteChange('discount', d)}
                                discountAmount={discountAmount}
                                tax={tax}
                                total={total}
                                tax_percent={quote.tax_percent}
                                setTaxPercent={(p) => onQuoteChange('tax_percent', p)}
                            />
                        </div>

                        <Card>
                            <CardHeader><CardTitle>{t('options.title')}</CardTitle></CardHeader>
                            <CardContent>
                                <div className="flex items-center space-x-2">
                                    <Switch
                                        id="show-quantity"
                                        checked={quote.show_quantity ?? true}
                                        onCheckedChange={(checked) => onQuoteChange('show_quantity', checked)}
                                    />
                                    <Label htmlFor="show-quantity">{t('options.showQuantitiesLabel')}</Label>
                                </div>
                                <p className="text-sm text-muted-foreground mt-2">{t('options.showQuantitiesDescription')}</p>
                            </CardContent>
                        </Card>

                        <div className="glass-card p-4">
                            <Label>Notes Addicionals</Label>
                            <Textarea
                                value={quote.notes ?? ''}
                                onChange={(e) => onQuoteChange('notes', e.target.value)}
                                className="mt-2 min-h-[220px]"
                            />
                        </div>
                    </section>

                    <aside id="quote-preview-for-pdf-wrapper" className="hidden lg:block glass-card p-4 overflow-y-auto">
                        <QuotePreview
                            quote={quote}
                            contacts={props.contacts}
                            companyProfile={state.currentTeamData}
                            subtotal={subtotal}
                            discountAmount={discountAmount}
                            tax={tax}
                            total={total}
                        />
                    </aside>
                </main>
            </div>
        </>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/quotes/[id]/_components/QuoteEditorData.tsx ===================

import { redirect } from 'next/navigation';
import { QuoteEditorClient } from './QuoteEditorClient';
import type { Quote } from '@/types/crm';
import { validatePageSession } from "@/lib/supabase/session";

interface QuoteEditorDataProps {
    quoteId: string;
    locale: string; // ✅ AFEGIM LOCALE A LES PROPS

}

/**
 * Aquest és un Server Component que s'encarrega de tota la càrrega de dades
 * necessària per a l'editor de pressupostos. Prepara totes les 'props'
 * i les passa al component de client 'QuoteEditorClient', que gestionarà la UI.
 */
export async function QuoteEditorData({ quoteId, locale }: QuoteEditorDataProps) {
    // 1. Validació de la sessió: Assegura que l'usuari està autenticat
    // i té un equip actiu. Si no, redirigeix automàticament.
    const { supabase, user, activeTeamId } = await validatePageSession();

    // --- LÒGICA PER A UN PRESSUPOST NOU ---
    if (quoteId === 'new') {
        // Per a un pressupost nou, necessitem carregar dades de suport i calcular el següent número.
        const [contactsRes, productsRes, teamRes, lastQuoteRes] = await Promise.all([
            supabase.from('contacts').select('id, nom, empresa'),
            supabase.from('products').select('*').eq('is_active', true),
            supabase.from('teams').select('*').eq('id', activeTeamId).single(),
            // ✅ Busquem l'últim pressupost per ordenar-lo per número de forma descendent
            supabase.from('quotes')
                .select('sequence_number') // Seleccionem la nova columna numèrica
                .eq('team_id', activeTeamId)
                .order('sequence_number', { ascending: false }) // Ordenem per número, no per text
                .limit(1)
                .maybeSingle() // maybeSingle() evita errors si la taula està buida
        ]);

        // Gestió d'errors per a les consultes
        if (contactsRes.error || productsRes.error || teamRes.error || lastQuoteRes.error) {
            console.error("Error en carregar les dades per a un nou pressupost:", {
                contacts: contactsRes.error,
                products: productsRes.error,
                team: teamRes.error,
                lastQuote: lastQuoteRes.error,
            });
            return <div>Error en carregar les dades de l'editor.</div>;
        }

        // Càlcul del següent número de pressupost
        // ✅ LÒGICA PER CALCULAR EL NOU NÚMERO
        // ✅ La lògica de càlcul és ara trivial i sense errors
        const lastSequence = lastQuoteRes.data?.sequence_number || 0;
        const nextSequence = lastSequence + 1;
        const year = new Date().getFullYear();
        const formattedQuoteNumber = `PRE-${year}-${String(nextSequence).padStart(4, '0')}`;

        // Creació de l'objecte inicial per al nou pressupost
        const initialQuote: Quote = {
            id: 'new',
            contact_id: null,
            quote_number: formattedQuoteNumber, // El text formatat
            sequence_number: nextSequence, // ✅ El nou valor numèric
            issue_date: new Date().toISOString().slice(0, 10),
            status: 'Draft',
            notes: 'Gràcies pel vostre interès en els nostres serveis.',
            discount: 0,
            subtotal: 0, tax: 0, total: 0,
            tax_percent: 21,
            show_quantity: true,
            items: [{
                description: '',
                quantity: 1,
                unit_price: 0,
                product_id: null,
                user_id: user.id,
                // ✅ AFEGIM LES PROPIETATS QUE FALTEN
                tax_rate: 21, // Un valor per defecte, com el general del pressupost
                total: 0      // El total inicial és 0
            }]
        };

        // Passem les dades al component de client
        return (
            <QuoteEditorClient
                initialQuote={initialQuote}
                contacts={contactsRes.data || []}
                products={productsRes.data || []}
                companyProfile={teamRes.data}
                initialOpportunities={[]} // No hi ha oportunitats al crear un pressupost sense client
                userId={user.id}
                locale={locale} // ✅ PASSEM LA PROP

            />
        );
    }

    // --- LÒGICA PER A EDITAR UN PRESSUPOST EXISTENT ---
    // Utilitzem la funció RPC 'get_quote_details' per a obtenir el pressupost i les
    // oportunitats relacionades en una sola crida a la base de dades.
    const [contactsRes, productsRes, teamRes, quoteDetailsRes] = await Promise.all([
        supabase.from('contacts').select('id, nom, empresa'),
        supabase.from('products').select('*').eq('is_active', true),
        supabase.from('teams').select('*').eq('id', activeTeamId).single(),
        supabase.rpc('get_quote_details', { p_quote_id: quoteId })
    ]);

    // Gestió d'errors per a les consultes
    if (contactsRes.error || productsRes.error || teamRes.error || quoteDetailsRes.error) {
        console.error("Error en carregar les dades d'un pressupost existent:", {
            contacts: contactsRes.error,
            products: productsRes.error,
            team: teamRes.error,
            quoteDetails: quoteDetailsRes.error,
        });
        return <div>Error en carregar les dades de l'editor.</div>;
    }

    const quoteDetails = quoteDetailsRes.data;
    // Si la funció RPC no retorna un pressupost, vol dir que no existeix o l'usuari no hi té accés
    if (!quoteDetails?.quote) {
        redirect('/crm/quotes');
    }

    // Passem les dades obtingudes al component de client
    return (
        <QuoteEditorClient
            initialQuote={quoteDetails.quote as unknown as Quote}
            contacts={contactsRes.data || []}
            products={productsRes.data || []}
            companyProfile={teamRes.data}
            initialOpportunities={quoteDetails.opportunities || []}
            userId={user.id}
            locale={locale} // ✅ PASSEM LA PROP

        />
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/quotes/[id]/_components/QuoteEditorSkeleton.tsx ===================

"use client";



/**
 * @summary Mostra un esquelet de càrrega per a la pàgina de l'Editor de Pressupostos.
 */
export function QuoteEditorSkeleton() {
  return (
    <div className="animate-pulse h-full">
      {/* Esquelet de la Capçalera */}
      <header className="flex justify-between items-center mb-6 flex-shrink-0">
        <div className="h-9 w-36 bg-gray-700/50 rounded-md"></div>
        <div className="flex items-center gap-2">
          <div className="h-10 w-10 bg-gray-700/50 rounded-md"></div>
          <div className="h-10 w-10 bg-gray-700/50 rounded-md"></div>
          <div className="h-10 w-32 bg-gray-700/50 rounded-md"></div>
        </div>
      </header>

      {/* Esquelet del Contingut Principal */}
      <main className="grid grid-cols-1 lg:grid-cols-2 gap-8 min-h-0">
        {/* Columna Esquerra (Formulari) */}
        <section className="flex flex-col gap-6 overflow-y-auto">
          <div className="glass-card p-6 h-48"></div>
          <div className="glass-card p-6 h-96"></div>
          <div className="glass-card p-6 h-32"></div>
        </section>
        {/* Columna Dreta (Previsualització) */}
        <aside className="hidden lg:block glass-card p-4 h-[80vh]"></aside>
      </main>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/crm/quotes/[id]/_components/QuoteItems.tsx ===================

"use client";

import React from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from "@/components/ui/command";
import { Plus, Trash2, BookPlus, Save, Loader2 } from 'lucide-react';
import TextareaAutosize from 'react-textarea-autosize';
import type { QuoteItem, Product } from '@/types/crm';
import { useTranslations } from 'next-intl';
import { useQuoteItems } from '../_hooks/useQuoteItems'; // ✅ 1. Importem el hook

// ✅ 1. Definim les props correctes. 'onAddNewItem' ja no és necessària per separat.
interface QuoteItemsProps {
    items: QuoteItem[];
    onItemsChange: (newItems: QuoteItem[]) => void;
    products: Product[];
    userId: string;
}

// ✅ PAS 3.2: Canviem el nom de la prop que passem al hook
export const QuoteItems: React.FC<QuoteItemsProps> = (props) => {
    const t = useTranslations('QuoteEditor.items');

    // ✅ 2. Passem 'onItemsChange' directament al hook a través de '...props'
    const {
        isSavingProduct, isCreating, setIsCreating,
        newProduct, setNewProduct, isPopoverOpen, setIsPopoverOpen,
        handleItemChange, handleAddProduct, handleRemoveItem,
        handleSaveNewProduct, handleManualItem
    } = useQuoteItems({ ...props, t });

    return (
        <div className="p-4">
            <h3 className="font-semibold text-lg mb-4">{t('title')}</h3>
            <div className="space-y-2">
                {props.items.length === 0 && (
                    <div className="text-center text-sm text-muted-foreground py-4 border border-dashed rounded-lg">
                        {t('empty')}
                    </div>
                )}
                {props.items.map((item, index) => (
                    <div key={index} className="flex items-start gap-2">
                        <TextareaAutosize
                            placeholder={t('placeholderDescription')}
                            value={item.description}
                            onChange={(e) => handleItemChange(index, 'description', e.target.value)}
                            minRows={1}
                            className="flex w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 min-w-[300px]"
                        />
                        <Input type="number" value={item.quantity ?? 1} onChange={(e) => handleItemChange(index, 'quantity', parseFloat(e.target.value) || 1)} className="w-20" />
                        <Input type="number" value={item.unit_price ?? 0} onChange={(e) => handleItemChange(index, 'unit_price', parseFloat(e.target.value) || 0)} className="w-24" />
                        <div className="w-24 text-right font-mono pt-2">€{((item.quantity || 0) * (item.unit_price || 0)).toFixed(2)}</div>
                        <Button variant="ghost" size="icon" onClick={() => handleRemoveItem(index)}><Trash2 className="w-4 h-4 text-destructive" /></Button>
                    </div>
                ))}
            </div>

            <Popover open={isPopoverOpen} onOpenChange={setIsPopoverOpen}>
                <PopoverTrigger asChild>
                    <Button variant="outline" size="sm" className="mt-4"><BookPlus className="w-4 h-4 mr-2" />{t('addButton')}</Button>
                </PopoverTrigger>
                <PopoverContent className="w-[400px] p-0">
                    {isCreating ? (
                        <div className="p-4 space-y-2">
                            <p className="font-medium text-sm">{t('newProductTitle')}</p>
                            <Input placeholder={t('newProductNamePlaceholder')} value={newProduct.name} onChange={(e) => setNewProduct(p => ({ ...p, name: e.target.value }))} />
                            <Input type="number" placeholder={t('newProductPricePlaceholder')} value={newProduct.price} onChange={(e) => setNewProduct(p => ({ ...p, price: e.target.value }))} />
                            <div className="flex justify-end gap-2 pt-2">
                                <Button variant="ghost" size="sm" onClick={() => setIsCreating(false)}>{t('cancelButton')}</Button>
                                <Button size="sm" onClick={handleSaveNewProduct} disabled={isSavingProduct}>
                                    {isSavingProduct && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                                    {t('saveAndAddButton')}
                                </Button>
                            </div>
                        </div>
                    ) : (
                        <Command>
                            <CommandInput placeholder={t('searchPlaceholder')} />
                            <CommandList>
                                <CommandEmpty>{t('emptySearch')}</CommandEmpty>
                                <CommandGroup>
                                    <CommandItem onSelect={handleManualItem}>
                                        <Plus className="mr-2 h-4 w-4" />
                                        <span>{t('addManualItem')}</span>
                                    </CommandItem>
                                    <CommandItem onSelect={() => setIsCreating(true)}>
                                        <Save className="mr-2 h-4 w-4" />
                                        <span>{t('createNewItem')}</span>
                                    </CommandItem>
                                    {props.products.map((product) => (
                                        <CommandItem key={product.id} value={product.name} onSelect={() => handleAddProduct(product)}>
                                            <div className="flex justify-between w-full">
                                                <span>{product.name}</span>
                                                <span className="text-muted-foreground">€{product.price}</span>
                                            </div>
                                        </CommandItem>
                                    ))}
                                </CommandGroup>
                            </CommandList>
                        </Command>
                    )}
                </PopoverContent>
            </Popover>
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/quotes/[id]/_components/QuoteMeta.tsx ===================

// Ruta del fitxer: src/app/(app)/crm/quotes/[id]/_components/QuoteMeta.tsx
"use client";

import React from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from "@/components/ui/command";
import { Check, ChevronsUpDown } from 'lucide-react';
import { cn } from '@/lib/utils/utils';
import type { Quote, Contact } from '@/types/crm';
import { useTranslations } from 'next-intl';

/**
 * Component per gestionar les metadades d'un pressupost:
 * - El client associat.
 * - El número de pressupost.
 * - Les dates d'emissió i venciment.
 */

// ✅ PAS 2.1: Definim les noves props. Més específiques i sense 'setQuote'.
interface QuoteMetaProps {
    contact_id: string | null;
    quote_number: string | null;
    issue_date: string;
    expiry_date: string | null;
    // La definició de la funció ara també és genèrica.
    onMetaChange: <K extends keyof Quote>(field: K, value: Quote[K]) => void;
    contacts: Contact[];
}
export const QuoteMeta = ({
    contact_id,
    quote_number,
    issue_date,
    expiry_date,
    onMetaChange,
    contacts
}: QuoteMetaProps) => {

    // ✅ CORRECCIÓ 1: Utilitza la prop 'contact_id' directament, no 'quote.contact_id'
    const selectedContact = contacts.find(c => c.id === contact_id);
    const t = useTranslations('QuoteEditor.meta');

    // Funció per convertir la data per a l'input de tipus 'date'
    const formatDateForInput = (dateString: string) => {
        try {
            return new Date(dateString).toISOString().split('T')[0];
        } catch {
            return '';
        }
    };

    return (
        <div className="glass-card p-2">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <Label>{t('clientLabel')}</Label>
                    <Popover>
                        <PopoverTrigger asChild>
                            <Button variant="outline" role="combobox" className="w-full justify-between search-input text-left font-normal mt-1">
                                {selectedContact ? `${selectedContact.nom} (${selectedContact.empresa || ''})` : t('selectClientPlaceholder')}
                                <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                            </Button>
                        </PopoverTrigger>
                        <PopoverContent className="w-[--radix-popover-trigger-width] p-0 glass-effect">
                            <Command>
                                <CommandInput placeholder={t('searchClientPlaceholder')} />
                                <CommandList>
                                    <CommandEmpty>{t('noClientFound')}</CommandEmpty>
                                    <CommandGroup>
                                        {contacts.map(c => (
                                            // ✅ PAS 2.2: Utilitzem el nou callback 'onMetaChange'
                                            <CommandItem key={c.id} value={`${c.nom} ${c.empresa}`} onSelect={() => onMetaChange('contact_id', c.id)}>
                                                <Check className={cn("mr-2 h-4 w-4", contact_id === c.id ? "opacity-100" : "opacity-0")} />
                                                {c.nom} <span className="text-xs text-muted-foreground ml-2">{c.empresa}</span>
                                            </CommandItem>
                                        ))}
                                    </CommandGroup>
                                </CommandList>
                            </Command>
                        </PopoverContent>
                    </Popover>
                </div>
                {/* Número de Pressupost */}
                <div className="flex flex-col">
                    <Label htmlFor="quote_number" className="mb-1">{t('quoteNumberLabel')}</Label>
                    {/* ✅ CORRECCIÓ: Utilitza onMetaChange */}
                    <Input
                        id="quote_number"
                        type="text" // ✅ CORRECCIÓ
                        value={quote_number || ''}
                        onChange={(e) => onMetaChange('quote_number', e.target.value)}
                    />
                </div>

                {/* Data d'Emissió */}
                <div className="flex flex-col">
                    <Label htmlFor="issue_date" className="mb-1">{t('issueDateLabel')}</Label>
                    {/* ✅ CORRECCIÓ: Utilitza onMetaChange */}
                    <Input
                        id="issue_date"
                        type="date"
                        value={formatDateForInput(issue_date)}
                        onChange={(e) => onMetaChange('issue_date', e.target.value)}
                    />
                </div>

                {/* Data de Venciment */}
                <div className="flex flex-col">
                    <Label htmlFor="expiry_date" className="mb-1">{t('expiryDateLabel')}</Label>
                    {/* ✅ CORRECCIÓ: Utilitza onMetaChange */}
                    <Input
                        id="expiry_date"
                        type="date"
                        value={expiry_date ? formatDateForInput(expiry_date) : ''}
                        onChange={(e) => onMetaChange('expiry_date', e.target.value)}
                    />
                </div>
            </div>
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/quotes/[id]/_components/QuotePreview.tsx ===================

"use client";

import React from 'react';
// Hem eliminat la importació de 'next/image' perquè farem servir una etiqueta <img> estàndard
import type { Quote, Contact } from '@/types/crm';
import { useTranslations } from 'next-intl';
import type { TeamData, CompanyProfile } from '@/types/settings';

// --------------------
// Tipus de propietats
// --------------------
interface QuotePreviewProps {
    quote: Quote;
    contacts: Contact[];
    companyProfile: TeamData | null;
    subtotal: number;
    discountAmount: number;
    tax: number;
    total: number;
}

// ---------------------------------------------------------
// Funció per mapejar les dades de l'equip cap al perfil empresa
// ---------------------------------------------------------
const mapTeamDataToProfile = (teamData: TeamData | null): CompanyProfile | null => {
    if (!teamData) return null;

    return {
        id: teamData.id,
        company_name: teamData.name,
        company_tax_id: teamData.tax_id,
        company_address: teamData.address,
        company_email: teamData.email,
        company_phone: teamData.phone,
        logo_url: teamData.logo_url,
    };
};

// --------------------------
// Component principal: QuotePreview
// --------------------------
export const QuotePreview = ({
    quote,
    contacts,
    companyProfile,
    subtotal,
    discountAmount,
    tax,
    total
}: QuotePreviewProps) => {

    // Obtenim el contacte associat al pressupost
    const contact = contacts.find(c => c.id === quote.contact_id);

    // Base imposable (subtotal - descompte)
    const base = subtotal - discountAmount;

    // Hook per traduccions
    const t = useTranslations('QuoteEditor');

    // Transformació de dades d'equip a perfil empresa
    const displayProfile = mapTeamDataToProfile(companyProfile);

    return (
        // El 'aside' és només un contenidor a la UI (no forma part del PDF)
        <aside className="hidden lg:block glass-card p-4 overflow-y-auto">

            {/* AQUEST DIV ES CONVERTIRÀ A PDF */}
            <div id="quote-preview-for-pdf">
                <div className="bg-white text-gray-900 px-8 py-2 font-sans text-sm">

                    {/* ---------------- HEADER ---------------- */}
                    {/* ✅ HEM MODIFICAT AQUESTA SECCIÓ */}
                    <header className="flex justify-between items-center border-b-2 border-gray-200"> {/* Reduït el padding inferior (pb-2) */}
                        {/* Logo de l'empresa o placeholder */}
                        {displayProfile?.logo_url ? (
                            <>
                                {/* eslint-disable-next-line @next/next/no-img-element */}
                                <img
                                    src={displayProfile.logo_url}
                                    alt="Logo"
                                    style={{ maxWidth: '100px', height: '70px', objectFit: 'contain' }}
                                    crossOrigin="anonymous"
                                />
                            </>
                        ) : (
                            <div className="h-12 w-28 flex items-center justify-center bg-gray-100 text-gray-400 text-xs rounded">
                                {t('preview.logoPlaceholder')}
                            </div>
                        )}
                        {/* ✅ Aquest 'div' ara té menys marge superior per a apropar-se al logo */}
                        <div className="text-right ml-2"> {/* Afegit marge esquerre per a separar del logo */}
                            <p className="font-bold text-lg">{displayProfile?.company_name || t('preview.yourCompany')}</p>
                            <p className="text-gray-500 text-base mt-0"># {quote.quote_number || t('preview.pending')}</p>
                        </div>
                    </header>

                    {/* ---------------- DADES EMPRESA I CLIENT ---------------- */}
                    <section className="grid grid-cols-2 gap-8 my-4">
                        <div>
                            <p className="font-semibold">
                                {displayProfile?.company_name || t('preview.yourCompany')}
                            </p>
                            <p className="text-gray-600">{displayProfile?.company_address}</p>
                            <p className="text-gray-600">{displayProfile?.company_tax_id}</p>
                            <p className="text-gray-600">{displayProfile?.company_email}</p>

                        </div>

                        <div className="text-right">
                            <p className="font-semibold">
                                {contact?.nom || t('preview.unselectedClient')}
                            </p>
                            <p className="text-gray-600">{contact?.empresa}</p>
                            <p className="text-gray-600">{contact?.email}</p>

                        </div>
                    </section>

                    {/* ---------------- DATES ---------------- */}
                    <section className="grid grid-cols-2 gap-8 my-6">
                        <div>
                            <p className="text-xs text-gray-500 font-bold">{t('preview.issueDate')}</p>
                            <p>
                                {quote.issue_date
                                    ? new Date(quote.issue_date).toLocaleDateString('ca-ES', { timeZone: 'UTC' })
                                    : ''}
                            </p>
                        </div>

                        <div className="text-right">
                            <p className="text-xs text-gray-500 font-bold">{t('preview.expiryDate')}</p>
                            <p>
                                {quote.expiry_date
                                    ? new Date(quote.expiry_date).toLocaleDateString('ca-ES', { timeZone: 'UTC' })
                                    : 'N/A'}
                            </p>
                        </div>
                    </section>

                    {/* ---------------- TAULA D'ITEMS ---------------- */}
                    {/* ---------------- TAULA D'ITEMS (AMB LÒGICA CONDICIONAL) ---------------- */}
                    <section>
                        <table className="w-full">
                            <thead className="bg-gray-100">
                                <tr>
                                    <th className="p-2 text-left font-bold text-xs uppercase w-[60%]">
                                        {t('preview.itemHeader')}
                                    </th>

                                    {/* ✅ Mostrem/amaguem les columnes segons la preferència */}
                                    {(quote.show_quantity ?? true) && (
                                        <>
                                            <th className="p-2 text-center font-bold text-xs uppercase">
                                                {t('preview.quantityHeader')}
                                            </th>
                                            <th className="p-2 text-right font-bold text-xs uppercase">
                                                {t('preview.priceHeader')}
                                            </th>
                                        </>
                                    )}

                                    <th className="p-2 text-right font-bold text-xs uppercase">
                                        {t('preview.totalHeader')}
                                    </th>
                                </tr>
                            </thead>

                            <tbody>
                                {quote.items?.map((item, index) => (
                                    <tr key={index} className="border-b border-gray-200">
                                        <td className="p-2 pr-2">
                                            {/* ✅ CORRECCIÓ 2: El 'p' amb la quantitat extra s'ha eliminat. */}
                                            {item.description}
                                        </td>
                                        
                                        {/* Mostrem/amaguem les cel·les corresponents */}
                                        {(quote.show_quantity ?? true) && (
                                            <>
                                                <td className="text-center p-2">{item.quantity}</td>
                                                <td className="text-right p-2">{item.unit_price?.toFixed(2)} €</td>
                                            </>
                                        )}

                                        <td className="text-right p-2 font-medium">
                                            {((item.quantity || 0) * (item.unit_price || 0)).toFixed(2)} €
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </section>

                    {/* ---------------- TOTALS ---------------- */}
                    <section className="flex justify-end mt-6">
                        <div className="w-full max-w-xs space-y-2">

                            {/* Subtotal */}
                            <div className="flex justify-between">
                                <p className="text-gray-600">{t('totals.subtotal')}:</p>
                                <p>{subtotal.toFixed(2)} €</p>
                            </div>

                            {/* Descompte */}
                            {quote.discount && quote.discount > 0 && (
                                <div className="flex justify-between text-green-600">
                                    <p>{t('preview.discountLine')} ({quote.discount}%)</p>
                                    <p>-{discountAmount.toFixed(2)} €</p>
                                </div>
                            )}

                            {/* Base imposable */}
                            <div className="flex justify-between">
                                <p className="text-gray-600">{t('totals.taxableBase')}:</p>
                                <p>{base.toFixed(2)} €</p>
                            </div>

                            {/* IVA */}
                            <div className="flex justify-between">
                                <p className="text-gray-600">
                                    {t('preview.taxesLine')} ({quote.tax_percent ?? 21}%)
                                </p>
                                <p>{tax.toFixed(2)} €</p>
                            </div>

                            {/* TOTAL FINAL */}
                            <div className="flex justify-between font-bold text-xl mt-2 pt-2 border-t-2 border-gray-800">
                                <p>{t('preview.totalHeader')}:</p>
                                <p>{total.toFixed(2)} €</p>
                            </div>
                        </div>
                    </section>

                    {/* ---------------- NOTES I CONDICIONS ---------------- */}
                    <footer className="mt-10 pt-6 border-t border-gray-200">
                        <h3 className="font-bold mb-2">{t('preview.notesAndTerms')}</h3>
                        {/* ✅ CANVI: Hem canviat 'text-xs' per 'text-sm' i 'text-gray-500' per 'text-gray-600' */}
                        <p className="text-sm text-gray-600 whitespace-pre-wrap">
                            {quote.notes}
                        </p>
                    </footer>

                </div>
            </div>
        </aside>
    );
};


// =================== FILE: src/app/[locale]/(app)/crm/quotes/[id]/_components/QuoteTotals.tsx ===================

"use client";

import React from 'react';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label'; // Importem el component Label
import { useTranslations } from 'next-intl';

// Definim les props correctament
interface QuoteTotalsProps {
    subtotal: number;
    discount: number | null;
    setDiscount: (discount: number) => void;
    discountAmount: number;
    tax: number;
    total: number;
    tax_percent: number | null;
    setTaxPercent: (value: number) => void;
}

export const QuoteTotals: React.FC<QuoteTotalsProps> = ({ 
    subtotal, 
    discount, 
    setDiscount, 
    discountAmount, 
    tax, 
    total,
    tax_percent,
    setTaxPercent
}) => {
    const t = useTranslations('QuoteEditor.totals');
    
    return (
        <div className="mt-6 ml-auto w-full max-w-sm space-y-2">
            <div className="flex justify-between">
                <span className="text-muted-foreground">{t('subtotal')}</span>
                <span className="font-medium">€{subtotal.toFixed(2)}</span>
            </div>
            
            <div className="flex justify-between items-center">
                <Label htmlFor="discount" className="text-muted-foreground">{t('discount')}</Label>
                <div className="flex items-center gap-1">
                    <Input 
                        id="discount"
                        type="number" 
                        value={discount ?? 0} 
                        onChange={(e) => setDiscount(parseFloat(e.target.value) || 0)} 
                        className="w-16 h-8 text-right bg-transparent" 
                        placeholder="0" 
                    />
                    <span className="text-muted-foreground">%</span>
                </div>
            </div>

            {discountAmount > 0 && (
                <div className="flex justify-between text-muted-foreground">
                    <span>{t('discountAmount')}</span>
                    <span>-€{discountAmount.toFixed(2)}</span>
                </div>
            )}

            <div className="flex justify-between">
                <span className="text-muted-foreground">{t('taxableBase')}</span>
                <span>€{(subtotal - discountAmount).toFixed(2)}</span>
            </div>
            
            {/* ✅ AQUESTA ÉS LA LÒGICA COMPLETADA PER A L'IVA */}
            <div className="flex justify-between items-center">
                <Label htmlFor="tax_percent" className="text-muted-foreground">{t('taxes')}</Label>
                <div className="flex items-center gap-1">
                    <Input
                        id="tax_percent"
                        type="number"
                        value={tax_percent ?? 21}
                        onChange={(e) => setTaxPercent(parseFloat(e.target.value) || 0)}
                        className="w-16 h-8 text-right bg-transparent"
                    />
                    <span className="text-muted-foreground">%</span>
                </div>
                <span className="font-medium">€{tax.toFixed(2)}</span>
            </div>

            <div className="flex justify-between text-lg font-bold border-t border-border pt-2">
                <span>{t('total')}</span>
                <span>€{total.toFixed(2)}</span>
            </div>
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/crm/quotes/[id]/_components/StatCardsGrid.tsx ===================

"use client";

import React, { memo } from "react";
import { useTranslations } from "next-intl";
import { StatCard } from "@/components/shared/StartCard";
import { Users, Target, Euro, BadgePercent } from "lucide-react";
import type { DashboardInitialData } from "@/types/crm";

/**
 * @file StatCardsGrid.tsx
 * @description Mostra la graella de targetes de KPI principals del Dashboard.
 */

interface StatCardsGridProps {
  stats: DashboardInitialData["stats"];
}

/**
 * ✅ Component memoitzat per evitar re-render innecessaris.
 * S’encarrega només de representar les targetes de mètriques principals.
 */
export const StatCardsGrid = memo(({ stats }: StatCardsGridProps) => {
  const t = useTranslations("DashboardClient");

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-6">
      <StatCard
        href="/crm/contactes"
        icon={Users}
        title={t("totalContacts")}
        value={stats.totalContacts.toLocaleString()}
        color="bg-[#2d7ef7]"
        openText={t("openLink")}
      />
      <StatCard
        href="/crm/pipeline"
        icon={Target}
        title={t("activeOpportunities")}
        value={stats.opportunities.toLocaleString()}
        color="bg-[#12a150]"
        openText={t("openLink")}
      />
      <StatCard
        href="/finances/facturacio"
        icon={Euro}
        title={t("monthlyInvoicing")}
        value={`€${stats.invoiced.toLocaleString()}`}
        color="bg-[#8a3ffc]"
        openText={t("openLink")}
      />
      <StatCard
        href="/finances/facturacio"
        icon={BadgePercent}
        title={t("pendingVAT")}
        value={`€${stats.pending.toLocaleString()}`}
        color="bg-[#f27917]"
        openText={t("openLink")}
      />
    </div>
  );
});

StatCardsGrid.displayName = "StatCardsGrid";


// =================== FILE: src/app/[locale]/(app)/crm/quotes/[id]/_hooks/useQuoteEditor.ts ===================

"use client";

// ✅ Importem 'useReducer' i 'useCallback' a més dels altres hooks
import { useMemo, useTransition, useEffect, useReducer, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from "sonner";
import { createClient } from '@/lib/supabase/client';
import { saveQuoteAction, deleteQuoteAction, sendQuoteAction } from '../actions';
import type { Quote, Opportunity, QuoteItem } from '@/types/crm';
import type { TeamData } from '@/types/settings';
import { useTranslations } from 'next-intl';

// ----------------------------------------------------------------
// 1. DEFINICIÓ DE PROPS (Això no canvia)
// ----------------------------------------------------------------
interface UseQuoteEditorProps {
    initialQuote: Quote;
    initialOpportunities: Opportunity[];
    companyProfile: TeamData | null;
    userId: string;
}

// ----------------------------------------------------------------
// 2. DEFINICIÓ DE L'ESTAT I LES ACCIONS PER AL REDUCER
// ----------------------------------------------------------------
type EditorState = {
    quote: Quote;
    currentTeamData: TeamData | null;
    contactOpportunities: Opportunity[];
    isDeleteDialogOpen: boolean;
    isProfileDialogOpen: boolean;
    sendingStatus: 'idle' | 'generating' | 'uploading' | 'sending';
};

type EditorAction =
    | { type: 'SET_QUOTE'; payload: Quote }
    | { type: 'UPDATE_QUOTE_FIELD'; payload: { field: keyof Quote; value: Quote[keyof Quote] } } // <-- Línia corregida
    | { type: 'SET_TEAM_DATA'; payload: TeamData | null }
    | { type: 'SET_OPPORTUNITIES'; payload: Opportunity[] }
    | { type: 'SET_DELETE_DIALOG'; payload: boolean }
    | { type: 'SET_PROFILE_DIALOG'; payload: boolean }
    | { type: 'SET_SENDING_STATUS'; payload: EditorState['sendingStatus'] };

// ----------------------------------------------------------------
// 3. LA FUNCIÓ REDUCER (EL "PANELL DE CONTROL")
// Aquesta funció pura rep l'estat actual i una acció, i retorna el nou estat.
// ----------------------------------------------------------------
function editorReducer(state: EditorState, action: EditorAction): EditorState {
    switch (action.type) {
        case 'SET_QUOTE':
            return { ...state, quote: action.payload };
        case 'UPDATE_QUOTE_FIELD':
            return { ...state, quote: { ...state.quote, [action.payload.field]: action.payload.value } };
        case 'SET_TEAM_DATA':
            return { ...state, currentTeamData: action.payload };
        case 'SET_OPPORTUNITIES':
            return { ...state, contactOpportunities: action.payload };
        case 'SET_DELETE_DIALOG':
            return { ...state, isDeleteDialogOpen: action.payload };
        case 'SET_PROFILE_DIALOG':
            return { ...state, isProfileDialogOpen: action.payload };
        case 'SET_SENDING_STATUS':
            return { ...state, sendingStatus: action.payload };
        default:
            throw new Error('Unhandled action type');
    }
}

// ----------------------------------------------------------------
// 4. EL HOOK 'useQuoteEditor' REFACTORITZAT
// ----------------------------------------------------------------
export function useQuoteEditor({
    initialQuote,
    initialOpportunities,
    companyProfile,
    userId
}: UseQuoteEditorProps) {
    const router = useRouter();
    const supabase = createClient();
    const t = useTranslations('QuoteEditor');

    const initialState: EditorState = {
        quote: initialQuote,
        currentTeamData: companyProfile,
        contactOpportunities: initialOpportunities,
        isDeleteDialogOpen: false,
        isProfileDialogOpen: false,
        sendingStatus: 'idle',
    };

    // Utilitzem useReducer en lloc de múltiples useStates
    const [state, dispatch] = useReducer(editorReducer, initialState);

    const [isSaving, startSaveTransition] = useTransition();
    const [isSending, startSendTransition] = useTransition();

    // Dades Derivades (llegeixen de 'state.quote')
    const { subtotal, discountAmount, tax, total } = useMemo(() => {
        const { items, discount, tax_percent } = state.quote;
        if (!items) return { subtotal: 0, discountAmount: 0, tax: 0, total: 0 };
        const sub = items.reduce((acc, item) => acc + (item.quantity || 0) * (item.unit_price || 0), 0);
        const calculatedDiscountAmount = sub * ((discount || 0) / 100);
        const subAfterDiscount = sub - calculatedDiscountAmount;
        const taxAmount = subAfterDiscount * ((tax_percent ?? 21) / 100);
        // ✅ CORRECCIÓ: Utilitza la variable correcta 'calculatedDiscountAmount'
        return {
            subtotal: sub,
            discountAmount: calculatedDiscountAmount, // <-- Aquí estava l'error
            tax: taxAmount,
            total: subAfterDiscount + taxAmount
        };
    }, [state.quote]);


    // --- Handlers que despatxen accions ---
    const onQuoteChange = useCallback(<K extends keyof Quote>(field: K, value: Quote[K]) => {
        dispatch({ type: 'UPDATE_QUOTE_FIELD', payload: { field, value } });
    }, []);

    const onItemsChange = useCallback((items: QuoteItem[]) => {
        dispatch({ type: 'UPDATE_QUOTE_FIELD', payload: { field: 'items', value: items } });
    }, []);

    // Handlers d'Accions (despatxen accions al reducer)
    const handleSave = useCallback(() => {
        startSaveTransition(async () => {
            const result = await saveQuoteAction({ ...state.quote, subtotal, tax, total });
            if (result.success && result.data) {
                toast.success(result.message);
                if (state.quote.id === 'new') {
                    router.replace(`/crm/quotes/${result.data}`);
                }
            } else {
                toast.error(t('toast.errorTitle'), { description: result.message });
            }
        });
    }, [state.quote, subtotal, tax, total, router, t]);

    const handleDelete = useCallback(() => {
        if (state.quote.id === 'new') return;
        startSaveTransition(async () => {
            const result = await deleteQuoteAction(state.quote.id);
            if (result.success) {
                toast.success(result.message);
                router.push('/crm/quotes');
            } else {
                toast.error(t('toast.errorTitle'), { description: result.message });
            }
        });
    }, [state.quote.id, router, t]);

    // Dins del teu hook useQuoteEditor

    const handleSend = useCallback(() => {
        // ✅ CORRECCIÓ: Llegeix 'quote' des de l'objecte 'state'
        if (state.quote.id === 'new') {
            toast.error(t('toast.errorTitle'), { description: t('toast.saveFirst') });
            return;
        }

        startSendTransition(async () => {
            const element = document.getElementById('quote-preview-for-pdf');
            if (!element) {
                toast.error(t('toast.errorTitle'), { description: "Element de previsualització no trobat." });
                return;
            }

            try {
                // ✅ CORRECCIÓ: Usa 'dispatch' per canviar l'estat
                dispatch({ type: 'SET_SENDING_STATUS', payload: 'generating' });
                toast.info(t('quoteEditor.generatingPDF'));

                const { default: html2pdf } = await import('html2pdf.js');
                const PDF_OPTIONS = {
                    margin: 10,
                    filename: `pressupost-${state.quote.quote_number || 'esborrany'}.pdf`,
                    image: { type: 'jpeg', quality: 0.98 }, // TypeScript veu 'jpeg' com string
                    html2canvas: { scale: 3, useCORS: true },
                    jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' },
                    pagebreak: { mode: 'css' as const, before: '.page-break-before' }
                } as const; // ✅ Amb "as const", TypeScript entén que 'jpeg' és del tipus 'jpeg'

                const pdfBlob = await html2pdf().from(element).set(PDF_OPTIONS).output('blob');

                // ✅ CORRECCIÓ: Usa 'dispatch' per canviar l'estat
                dispatch({ type: 'SET_SENDING_STATUS', payload: 'uploading' });
                const filePath = `${userId}/${state.quote.id}.pdf`; // ✅ Llegeix 'id' des de 'state.quote'
                const { error: uploadError } = await supabase.storage.from('quotes').upload(filePath, pdfBlob, { upsert: true });
                if (uploadError) throw uploadError;

                // ✅ CORRECCIÓ: Usa 'dispatch' per canviar l'estat
                dispatch({ type: 'SET_SENDING_STATUS', payload: 'sending' });
                const result = await sendQuoteAction(state.quote.id); // ✅ Llegeix 'id' des de 'state.quote'
                if (!result.success) throw new Error(result.message);

                // ✅ CORRECCIÓ: Actualitza l'estat a través de múltiples 'dispatch'
                dispatch({ type: 'UPDATE_QUOTE_FIELD', payload: { field: 'status', value: 'Sent' } });
                dispatch({ type: 'UPDATE_QUOTE_FIELD', payload: { field: 'sent_at', value: new Date().toISOString() } });

                toast.success("Èxit!", { description: result.message });

            } catch (error) {
                const e = error instanceof Error ? error : new Error(t('toast.sendError'));
                toast.error(t('toast.errorTitle'), { description: e.message });
            } finally {
                // ✅ CORRECCIÓ: Usa 'dispatch' per tornar a l'estat inicial
                dispatch({ type: 'SET_SENDING_STATUS', payload: 'idle' });
            }
        });
    }, [state.quote, userId, supabase, t]); // ✅ Afegim les dependències necessàries al useCallback


    // Efectes (despatxen accions)
    useEffect(() => {
        // Sincronitza l'estat si les props inicials canvien (ex: després d'un router.refresh)
        dispatch({ type: 'SET_QUOTE', payload: initialQuote });
    }, [initialQuote]);

    useEffect(() => {
        const fetchOpportunities = async () => {
            if (!state.quote.contact_id) {
                dispatch({ type: 'SET_OPPORTUNITIES', payload: [] });
                return;
            }
            const { data } = await supabase.from('opportunities').select('*').eq('contact_id', state.quote.contact_id);
            dispatch({ type: 'SET_OPPORTUNITIES', payload: data || [] });
        };
        fetchOpportunities();
    }, [state.quote.contact_id, supabase]);

    // Retornem l'estat i les funcions que el component de UI necessita
    return {
        // L'estat sencer
        state,
        // Accés directe a les parts de l'estat més usades
        quote: state.quote,
        // Funcions per a modificar l'estat (per a passar als fills)
        dispatch, // Podem passar 'dispatch' directament o crear funcions més específiques
        // ✅ Retornem els callbacks amb els noms correctes
        onQuoteChange,
        onItemsChange,
        setQuote: (newQuote: Quote) => dispatch({ type: 'SET_QUOTE', payload: newQuote }),
        setIsDeleteDialogOpen: (isOpen: boolean) => dispatch({ type: 'SET_DELETE_DIALOG', payload: isOpen }),
        setIsProfileDialogOpen: (isOpen: boolean) => dispatch({ type: 'SET_PROFILE_DIALOG', payload: isOpen }),
        setCurrentTeamData: (data: TeamData | null) => dispatch({ type: 'SET_TEAM_DATA', payload: data }),
        // Dades derivades
        subtotal, discountAmount, tax, total,
        // Handlers d'accions
        handleSave, handleDelete, handleSend,
        // Estats de transició
        isSaving, isSending,
        // Traduccions
        t
    };
}

// =================== FILE: src/app/[locale]/(app)/crm/quotes/[id]/_hooks/useQuoteItems.ts ===================

// /_hooks/useQuoteItems.ts (VERSIÓ FINAL I CORRECTA)
"use client";

import { useState, useTransition, useCallback } from "react";
import { toast } from 'sonner';
import { createProductAction } from '../actions';
import type { QuoteItem, Product } from '@/types/crm';

// ✅ 1. Definim les props correctes. Només necessita 'onItemsChange'.
interface UseQuoteItemsProps {
    items: QuoteItem[];
    onItemsChange: (newItems: QuoteItem[]) => void;
    userId: string;
    t: (key: string) => string;
};

// ✅ 2. Desestructurem 'onItemsChange' i eliminem les props antigues.
export function useQuoteItems({ items, onItemsChange, userId, t }: UseQuoteItemsProps) {
    const [isSavingProduct, startSaveProductTransition] = useTransition();
    const [isCreating, setIsCreating] = useState(false);
    const [newProduct, setNewProduct] = useState({ name: '', price: '' });
    const [isPopoverOpen, setIsPopoverOpen] = useState(false);

    // Totes aquestes funcions ara criden a 'onItemsChange' per notificar al pare.
    const handleItemChange = useCallback(<K extends keyof QuoteItem>(index: number, field: K, value: QuoteItem[K]) => {
        const newItems = [...items];
        newItems[index] = { ...newItems[index], [field]: value };
        onItemsChange(newItems);
    }, [items, onItemsChange]);

    const handleAddProduct = useCallback((product: Product) => {
        const newItem: QuoteItem = {
            description: product.name || product.description || '',
            quantity: 1,
            unit_price: product.price || 0,
            product_id: product.id,
            user_id: userId,
            tax_rate: 0,
            total: product.price || 0
        };
        onItemsChange([...items, newItem]);
        setIsPopoverOpen(false);
    }, [items, onItemsChange, userId]);

    const handleRemoveItem = useCallback((index: number) => {
        onItemsChange(items.filter((_, i) => i !== index));
    }, [items, onItemsChange]);
    
    const handleManualItem = useCallback(() => {
        const newItem: QuoteItem = {
            product_id: null,
            description: '',
            quantity: 1,
            unit_price: 0,
            user_id: userId,
            tax_rate: 0,
            total: 0
        };
        onItemsChange([...items, newItem]);
        setIsPopoverOpen(false);
    }, [items, onItemsChange, userId]);

    const handleSaveNewProduct = useCallback(() => {
        if (!newProduct.name || !newProduct.price) {
            toast.error(t('toast.requiredFields'), { description: t('toast.requiredFieldsDesc') });
            return;
        }
        startSaveProductTransition(async () => {
            const result = await createProductAction({ name: newProduct.name, price: parseFloat(newProduct.price) });
            // ✅ A la resposta de l'acció, la dada del producte ve a 'result.data'
            if (result.success && result.data) {
                toast.success(t('toast.productCreated'), { description: t('toast.productCreatedDesc') });
                // 'result.data' és el nou producte, el passem a handleAddProduct
                handleAddProduct(result.data as Product);
                setNewProduct({ name: '', price: '' });
                setIsCreating(false);
            } else {
                toast.error("Error", { description: result.message });
            }
        });
    }, [newProduct, t, handleAddProduct]);


    return {
        isSavingProduct, isCreating, setIsCreating, newProduct, setNewProduct,
        isPopoverOpen, setIsPopoverOpen, handleItemChange, handleAddProduct,
        handleRemoveItem, handleSaveNewProduct, handleManualItem,
    };
}

// =================== FILE: src/app/[locale]/(app)/crm/quotes/_components/QuotesClient.tsx ===================

"use client";

import React from 'react';
import { motion } from 'framer-motion';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { Loader2, Trash2, Edit, ArrowUpDown } from 'lucide-react';
import type { QuoteWithContact } from '../page';
import { useTranslations, useLocale } from 'next-intl';
import { QUOTE_STATUS_MAP } from '@/types/crm';
import { cn } from '@/lib/utils/utils';
import { useQuotes } from '../_hooks/useQuotes'; // ✅ 1. Importem el nostre nou hook

export function QuotesClient({ initialQuotes }: { initialQuotes: QuoteWithContact[] }) {
    const t = useTranslations('QuotesPage');
    const locale = useLocale();

    // ✅ 2. Tota la lògica i estats venen del hook.
    const {
        isPending,
        quotes, // ✅ Ara reps la llista de l'estat del hook
        quoteToDelete,
        setQuoteToDelete,
        handleSort,
        handleDelete,
        searchParams,
    } = useQuotes({ initialQuotes, t });

    // Component intern per a les capçaleres ordenables, ara utilitza 'searchParams' del hook.
    const SortableHeader = ({ column, label }: { column: string, label: string }) => {
        const order = searchParams.get(`sortBy-${column}`);
        return (
            <TableHead onClick={() => handleSort(column)} className="cursor-pointer hover:bg-muted/50 transition-colors">
                <div className="flex items-center gap-2">
                    {label}
                    {order ? (
                        <span className="text-foreground text-xs">{order === 'asc' ? '▲' : '▼'}</span>
                    ) : (
                        <ArrowUpDown className="w-4 h-4 text-muted-foreground/30" />
                    )}
                </div>
            </TableHead>
        );
    };

    return (
        <>
            <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className={cn("relative", isPending && "opacity-50 pointer-events-none")}>
                {isPending && (<div className="absolute inset-0 flex items-center justify-center bg-background/50 z-10"><Loader2 className="w-8 h-8 animate-spin" /></div>)}
                <div className="glass-card">
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <SortableHeader column="quote_number" label={t('table.number')} />
                                <SortableHeader column="contacts.nom" label={t('table.client')} />
                                <SortableHeader column="issue_date" label={t('table.issueDate')} />
                                <SortableHeader column="total" label={t('table.total')} />
                                <SortableHeader column="status" label={t('table.status')} />
                                <TableHead className="text-right">{t('table.actions')}</TableHead>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            {quotes.length > 0 ? quotes.map(quote => {
                                const statusInfo = QUOTE_STATUS_MAP.find(s => s.dbValue === quote.status) || { key: 'unknown', colorClass: 'bg-gray-100' };
                                return (
                                    <TableRow key={quote.id}>
                                        <TableCell className="font-medium">{quote.quote_number || `PRE-${quote.id.substring(0, 6)}`}</TableCell>
                                        <TableCell>{quote.contacts?.nom || t('noClient')}</TableCell>
                                        <TableCell>{new Date(quote.issue_date).toLocaleDateString(locale)}</TableCell>
                                        <TableCell>€{quote.total?.toLocaleString(locale, { minimumFractionDigits: 2 }) || '0,00'}</TableCell>
                                        <TableCell>
                                            <span className={`px-2 py-1 text-xs font-medium rounded-full ${statusInfo.colorClass}`}>
                                                {t(`status.${statusInfo.key}`)}
                                            </span>
                                        </TableCell>
                                        <TableCell className="text-right">
                                            <Link href={`/crm/quotes/${quote.id}`} className="inline-flex items-center justify-center h-8 w-8" title={t('actions.edit')}>
                                                <Edit className="w-4 h-4" />
                                            </Link>
                                            <Button variant="ghost" size="icon" title={t('actions.delete')} onClick={() => setQuoteToDelete(quote)}>
                                                <Trash2 className="w-4 h-4 text-red-500" />
                                            </Button>
                                        </TableCell>
                                    </TableRow>
                                );
                            }) : (
                                <TableRow>
                                    <TableCell colSpan={6} className="text-center h-24">{t('emptyState')}</TableCell>
                                </TableRow>
                            )}
                        </TableBody>
                    </Table>
                </div>
            </motion.div>

            <AlertDialog open={!!quoteToDelete} onOpenChange={() => setQuoteToDelete(null)}>
                <AlertDialogContent>
                    <AlertDialogHeader>
                        <AlertDialogTitle>{t('deleteDialog.title')}</AlertDialogTitle>
                        <AlertDialogDescription>
                            {t('deleteDialog.description1')} <span className="font-bold">{quoteToDelete?.quote_number}</span>.
                        </AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                        <AlertDialogCancel disabled={isPending}>{t('deleteDialog.cancelButton')}</AlertDialogCancel>
                        <AlertDialogAction onClick={handleDelete} className="bg-destructive hover:bg-destructive/90" disabled={isPending}>
                            {isPending && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                            {isPending ? t('deleteDialog.deleting') : t('deleteDialog.confirmButton')}
                        </AlertDialogAction>
                    </AlertDialogFooter>
                </AlertDialogContent>
            </AlertDialog>
        </>
    );
}

// =================== FILE: src/app/[locale]/(app)/crm/quotes/_components/QuotesData.tsx ===================

// /app/crm/quotes/_components/QuotesData.tsx


import { QuotesClient } from './QuotesClient';
import type { QuoteWithContact } from '../page';
import { validatePageSession } from "@/lib/supabase/session"; // ✅ 1. Importem la funció

export async function QuotesData({ searchParams }: {
    searchParams: { [key: string]: string | string[] | undefined }
}) {
    try {
      // ✅ 2. Validació de sessió que gestiona les redireccions.
      const { supabase } = await validatePageSession();

      let query = supabase
          .from('quotes')
          .select('*, contacts(nom, empresa)');
        // ------------------------------------
        // ✅ MASTER FILTER: No longer needed! RLS will automatically filter by the active team.
        // query = query.eq('team_id', teamId); 
        
        // Dynamic filters and sorting logic remains the same.
        // ... (your existing for-loops for filters and sorting are fine)
        for (const key in searchParams) {
             const value = searchParams[key];
             if (value && typeof value === 'string') {
                 if (key === 'status') {
                     query = query.eq('status', value);
                 }
                 if (key === 'issue_date_from') {
                     query = query.gte('issue_date', value);
                 }
                 if (key === 'issue_date_to') {
                     query = query.lte('issue_date', value);
                 }
             }
         }

         let sortApplied = false;
         for (const key in searchParams) {
             if (key.startsWith('sortBy-')) {
                 const column = key.substring(7);
                 const order = searchParams[key] as string;

                 if (column && (order === 'asc' || order === 'desc')) {
                     sortApplied = true;
                     const ascending = order === 'asc';
                     if (column.includes('.')) {
                         const [referencedTable, referencedColumn] = column.split('.');
                         query = query.order(referencedColumn, { referencedTable, ascending });
                     } else {
                         query = query.order(column, { ascending });
                     }
                 }
             }
         }

        if (!sortApplied) {
            query = query.order('issue_date', { ascending: false });
        }

        const { data: quotes, error } = await query;
        if (error) throw error;

        return <QuotesClient initialQuotes={(quotes as QuoteWithContact[]) || []} />;

    } catch (error) {
        const errorMessage = error instanceof Error ? error.message : "Unknown error";
        console.error("Error loading quotes:", errorMessage);
        return <div className="p-8 text-center text-destructive">Error loading quotes.</div>;
    }
}

// =================== FILE: src/app/[locale]/(app)/crm/quotes/_components/QuotesSkeleton.tsx ===================

"use client";


import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";


/**
 * @summary Mostra un esquelet de càrrega per a la pàgina de llista de Pressupostos.
 */
export function QuotesSkeleton() {
  return (
    <div className="animate-pulse">
      {/* Esquelet de la capçalera */}
      <div className="flex justify-between items-center mb-8">
        <div className="h-9 w-48 bg-gray-700/50 rounded-md"></div>
        <div className="h-10 w-40 bg-gray-700/50 rounded-md"></div>
      </div>

      {/* Esquelet de la taula */}
      <div className="glass-card">
        <Table>
          <TableHeader>
            <TableRow>
              {[...Array(6)].map((_, i) => (
                <TableHead key={i}><div className="h-5 w-24 bg-gray-700/50 rounded-md"></div></TableHead>
              ))}
            </TableRow>
          </TableHeader>
          <TableBody>
            {[...Array(5)].map((_, i) => (
              <TableRow key={i} className="border-b-transparent">
                {[...Array(6)].map((_, j) => (
                  <TableCell key={j}><div className="h-6 bg-gray-700/50 rounded-md"></div></TableCell>
                ))}
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/crm/quotes/_hooks/useQuotes.ts ===================

// /_hooks/useQuotes.ts (VERSIÓ CORREGIDA MANTENINT LA SEPARACIÓ)
"use client";

import { useState, useEffect, useTransition, useCallback } from 'react';
import { useRouter, usePathname, useSearchParams } from 'next/navigation';
import { toast } from 'sonner';
import type { QuoteWithContact } from '../page';
import { deleteQuoteAction } from '../actions';

type UseQuotesProps = {
    initialQuotes: QuoteWithContact[]; // ✅ Rep les dades inicials
    t: (key: string) => string;
};

export function useQuotes({ initialQuotes, t }: UseQuotesProps) {
    const router = useRouter();
    const pathname = usePathname();
    const searchParams = useSearchParams();

    const [isPending, startTransition] = useTransition();

    // ✅ Gestiona l'estat localment dins del hook
    const [quotes, setQuotes] = useState(initialQuotes);
    const [quoteToDelete, setQuoteToDelete] = useState<QuoteWithContact | null>(null);

    // ✅ Un useEffect per sincronitzar si les dades del servidor canvien
    // (important després d'un router.refresh() o navegació)

    useEffect(() => {
        setQuotes(initialQuotes);
    }, [initialQuotes]);

    const handleSort = (column: string) => {
        const params = new URLSearchParams(searchParams.toString());
        const currentOrder = params.get(`sortBy-${column}`);
        
        params.forEach((_, key) => {
            if (key.startsWith('sortBy-')) {
                params.delete(key);
            }
        });

        const newOrder = currentOrder === 'desc' ? 'asc' : 'desc';
        params.set(`sortBy-${column}`, newOrder);

        // startTransition embolcalla la navegació per a evitar bloquejar la UI
        startTransition(() => {
            router.push(`${pathname}?${params.toString()}`);
        });
    };

    const handleDelete = useCallback(() => {
        if (!quoteToDelete) return;

        // ✅ Lògica d'actualització optimista
        setQuotes(currentQuotes => currentQuotes.filter(q => q.id !== quoteToDelete.id));
        setQuoteToDelete(null); // Tanca el diàleg a l'instant

        startTransition(async () => {
            const result = await deleteQuoteAction(quoteToDelete.id);
            if (result.success) {
                toast.success(t('toast.successTitle'), { description: result.message });
                // Forcem una resincronització amb el servidor per si de cas
                router.refresh();
            } else {
                toast.error(t('toast.errorTitle'), { description: result.message });
                setQuotes(initialQuotes); // Revertim si falla
            }
        });
    }, [quoteToDelete, t, initialQuotes, router]);

    return {
        isPending,
        quotes, // ✅ Retorna l'estat local, no les props inicials
        quoteToDelete,
        setQuoteToDelete,
        handleSort,
        handleDelete,
        searchParams,
    };
}

// =================== FILE: src/app/[locale]/(app)/dashboard/dashboard-client.tsx ===================

"use client";

import React from "react";
import { useTranslations } from "next-intl";
import { useRouter } from "next/navigation";
import { toast } from "sonner";

import { useDashboardTasks } from "./_hooks/useDashboardTasks";

// 🧩 Components del dashboard
import { StatCardsGrid } from "./_components/StatCardsGrid";       // → Targetes estadístiques resum
import { DashboardMainGrid } from "./_components/DashboardMainGrid"; // → Secció superior: vendes + activitats
import { QuickAccess } from "./_components/QuickAccess";             // → Accions ràpides (botons, accessos)
import { DashboardBottomGrid } from "./_components/DashboardBottomGrid"; // → Secció inferior: agenda + radar + oracle IA
import AddTaskDialog from "./_components/AddTaskDialog";             // → Diàleg per crear noves tasques

import type { DashboardInitialData } from "@/types/crm";

// 🎯 Objectiu mensual (s'utilitza per calcular el % de progrés)
const MONTHLY_GOAL = 50_000;

export function DashboardClient({
  initialData,
  children,
}: {
  initialData: DashboardInitialData;
  children: React.ReactNode;
}) {
  // 🌍 Traduccions i navegació
  const t = useTranslations("DashboardClient");
  const router = useRouter();

  // ✅ Estat per gestionar les tasques
  const { tasks, toggleTask } = useDashboardTasks(initialData.tasks);
  const pendingTasks = tasks.filter((t) => !t.is_completed);

  // ⚙️ Estat per al diàleg de creació de tasques
  const [isTaskDialogOpen, setTaskDialogOpen] = React.useState(false);

  // 🔁 Handler per canviar estat d'una tasca
  const handleToggleTask = React.useCallback(
    (id: string, status: boolean) => {
      toggleTask(id, status);
    },
    [toggleTask]
  );

  // 📊 Percentatge de progrés mensual
  const percentGoal = Math.round(
    (initialData.stats.invoiced / MONTHLY_GOAL) * 100
  );

  return (
    <div className="relative space-y-8">
      {/* 🎨 Fons decoratiu amb patró radial (només visual) */}
      <div className="absolute inset-0 -z-10 bg-background bg-[radial-gradient(#2e2e2e_1px,transparent_1px)] [background-size:16px_16px]" />

      {/* 📈 Targetes estadístiques resum del mes (facturació, quotes, clients...) */}
      <StatCardsGrid stats={initialData.stats} t={t} />

      {/* 🧭 Secció superior: rendiment de vendes + activitats recents */}
      <DashboardMainGrid
        stats={initialData.stats}
        percentGoal={percentGoal}
        monthlyGoal={MONTHLY_GOAL}
        overdueInvoices={initialData.overdueInvoices}
        tasks={initialData.tasks}
        contacts={initialData.contacts}
      />

      {/* ⚡ Accions ràpides (botons d’accés a seccions clau del CRM) */}
      <QuickAccess />

      {/* 🗓️ Secció inferior: agenda + radar + oracle IA (streaming des del servidor) */}
      <DashboardBottomGrid
        pendingTasks={pendingTasks}
        onToggleTask={handleToggleTask}
        onOpenNewTask={() => setTaskDialogOpen(true)}
        attentionContacts={initialData.attentionContacts}
        overdueInvoices={initialData.overdueInvoices}
        notifications={initialData.notifications}
      >
        {children}
      </DashboardBottomGrid>

      {/* 🧩 Diàleg per crear noves tasques */}
      <AddTaskDialog
        open={isTaskDialogOpen}
        onOpenChange={setTaskDialogOpen}
        contacts={initialData.contacts}
        onTaskCreated={() => {
          router.refresh();
          toast.success(t("taskCreationSuccess"));
        }}
      />
    </div>
  );
}


// =================== FILE: src/app/[locale]/(app)/dashboard/page.tsx ===================

import { Suspense } from 'react';
import type { Metadata } from 'next';
import { DashboardData } from './_components/DashboardData';
import { DashboardSkeleton } from './_components/DashboardSkeleton';
import { AIOracle } from './_components/AIOracle';
import { AIOracleSkeleton } from './_components/AIOracleSkeleton';


export const metadata: Metadata = {
  title: 'Tauler Principal | Ribot',
};



/**
 * @summary La pàgina principal del Dashboard.
 */
export default function DashboardPage() {
  return (
    <Suspense fallback={<DashboardSkeleton />}>
      {/* ✅ CORRECCIÓ: Passem l'Oracle com a fill (children) de DashboardData */}
      <DashboardData>
        <Suspense fallback={<AIOracleSkeleton />}>
          <AIOracle />
        </Suspense>
      </DashboardData>
    </Suspense>
  );
}


// =================== FILE: src/app/[locale]/(app)/dashboard/_components/AddTaskDialog.tsx ===================

"use client";

import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogClose } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Command, CommandEmpty, CommandInput, CommandItem, CommandGroup, CommandList } from "@/components/ui/command";
import { Check, ChevronsUpDown, ListTodo, User } from "lucide-react";
import { cn } from "@/lib/utils/utils";
import { useTranslations } from "next-intl";
import { useAddTask } from "../_hooks/useAddTask";

type Contact = { id: string; nom: string };

interface AddTaskDialogProps {
  open?: boolean;
  onOpenChange?: (open: boolean) => void;
  contacts: Contact[];
  onTaskCreated?: () => void;
}

export default function AddTaskDialog({
  open,
  onOpenChange,
  contacts,
  onTaskCreated,
}: AddTaskDialogProps) {
  const t = useTranslations("DashboardClient.addTaskDialog");
  const [title, setTitle] = useState("");
  const [comboboxOpen, setComboboxOpen] = useState(false);
  const { addTask, isPending, selectedContact, setSelectedContact } = useAddTask({ onTaskCreated });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    addTask(title);
    setTitle("");
    setSelectedContact(null);
    onOpenChange?.(false);
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle className="text-2xl">{t("title")}</DialogTitle>
          <DialogDescription>{t("description")}</DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="grid gap-6 pt-4">
          {/* Input de títol */}
          <div className="space-y-2">
            <Label htmlFor="title" className="flex items-center gap-2">
              <ListTodo className="w-4 h-4" /> {t("taskTitleLabel")}
            </Label>
            <Input
              id="title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              placeholder={t("taskTitlePlaceholder")}
              required
            />
          </div>

          {/* Selecció de contacte */}
          <div className="space-y-2">
            <Label className="flex items-center gap-2">
              <User className="w-4 h-4" /> {t("assignContactLabel")}
            </Label>

            <Popover open={comboboxOpen} onOpenChange={setComboboxOpen}>
              <PopoverTrigger asChild>
                <Button
                  variant="outline"
                  role="combobox"
                  className="w-full justify-between font-normal"
                >
                  {selectedContact
                    ? selectedContact.nom
                    : t("selectContactPlaceholder")}
                  <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                </Button>
              </PopoverTrigger>

              <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
                <Command>
                  <CommandInput placeholder={t("searchContactPlaceholder")} />
                  <CommandList>
                    <CommandEmpty>{t("noContactFound")}</CommandEmpty>
                    <CommandGroup>
                      {contacts.map((contact) => (
                        <CommandItem
                          key={contact.id}
                          value={contact.nom}
                          onSelect={() => {
                            setSelectedContact(contact);
                            setComboboxOpen(false);
                          }}
                        >
                          <Check
                            className={cn(
                              "mr-2 h-4 w-4",
                              selectedContact?.id === contact.id
                                ? "opacity-100"
                                : "opacity-0"
                            )}
                          />
                          {contact.nom}
                        </CommandItem>
                      ))}
                    </CommandGroup>
                  </CommandList>
                </Command>
              </PopoverContent>
            </Popover>
          </div>

          {/* Footer */}
          <DialogFooter className="pt-4">
            <DialogClose asChild>
              <Button type="button" variant="ghost">
                {t("cancelButton")}
              </Button>
            </DialogClose>
            <Button type="submit" disabled={isPending}>
              {isPending ? t("savingButton") : t("saveButton")}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}

// =================== FILE: src/app/[locale]/(app)/dashboard/_components/Agenda.tsx ===================

/**
 * @file Agenda.tsx
 * @summary Renderitza la secció d'agenda amb les tasques pendents.
 */
"use client";

import React from 'react';
import { useTranslations } from 'next-intl';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { Plus } from 'lucide-react';
import type { Task } from '@/types/crm';

interface AgendaProps {
  pendingTasks: Task[];
  onToggleTask: (taskId: string, currentStatus: boolean) => void;
  onOpenNewTask: () => void;
}

export function Agenda({ pendingTasks, onToggleTask, onOpenNewTask }: AgendaProps) {
  const t = useTranslations('DashboardClient');

  return (
    // ✅ CORRECCIÓ: Usem 'bg-card' i 'text-foreground'.
    <div className="rounded-2xl p-6 ring-1 ring-border bg-card lg:col-span-2">
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-xl font-bold text-foreground">{t('agenda')}</h2>
        <Button variant="ghost" size="sm" onClick={onOpenNewTask}>
          <Plus className="w-4 h-4 mr-2" /> {t('newTask')}
        </Button>
      </div>
      <div className="space-y-3 max-h-[360px] overflow-y-auto pr-1">
        {pendingTasks.length > 0 ? (
          pendingTasks.map((task) => (
            // ✅ CORRECCIÓ: Usem 'bg-muted/50' i 'hover:bg-muted'.
            <div key={task.id} className="flex items-center gap-3 p-3 rounded-xl bg-muted/50 hover:bg-muted transition">
              <Checkbox id={`task-${task.id}`} checked={task.is_completed} onCheckedChange={() => onToggleTask(task.id, task.is_completed)} />
              <label htmlFor={`task-${task.id}`} className={`flex-1 cursor-pointer ${task.is_completed ? 'line-through text-muted-foreground' : ''}`}>
                {task.title}
              </label>
            </div>
          ))
        ) : (
          <p className="text-sm text-muted-foreground text-center py-4">{t('noPendingTasks')}</p>
        )}
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/dashboard/_components/AIOracle.tsx ===================

/**
 * @file AIOracle.tsx
 * @summary Component de servidor aïllat que carrega i mostra les dades de la IA,
 * ara amb disseny adaptable i traduccions.
 */
import { createClient } from '@/lib/supabase/server';
import { cookies } from 'next/headers';
import { Button } from '@/components/ui/button';
import { getTranslations } from 'next-intl/server'; // ✅ Importem la funció de traducció del servidor

export async function AIOracle() {
  // ✅ Obtenim les traduccions per a aquest component
  const t = await getTranslations('DashboardClient.aiOracle');
  const supabase = createClient(cookies())
;

  try {
    const { data: aiInsights, error } = await supabase.functions.invoke('generate-ai-summary');

    if (error) throw error;

    const summary = aiInsights?.summary || t('noSummary');
    const suggestion = aiInsights?.suggestion || t('noSuggestion');

    return (
      // ✅ CORRECCIÓ: Usem 'bg-card' i 'ring-border' per adaptar-se al tema.
      <div className="rounded-2xl p-6 ring-1 ring-border bg-card">
        <h2 className="text-xl font-bold text-foreground mb-3">{t('title')}</h2>
        <div className="space-y-3">
          {/* ✅ CORRECCIÓ: Usem 'bg-muted' i colors de text semàntics. */}
          <div className="p-3 rounded-lg bg-muted ring-1 ring-border">
            <p className="text-sm font-semibold text-foreground mb-1">{t('summary')}</p>
            <p className="text-sm text-muted-foreground">{summary}</p>
          </div>
          <div className="p-3 rounded-lg bg-muted ring-1 ring-border">
            <p className="text-sm font-semibold text-foreground mb-1">{t('suggestion')}</p>
            <p className="text-sm text-muted-foreground">{suggestion}</p>
          </div>
          <Button variant="outline" className="w-full">{t('button')}</Button>
        </div>
      </div>
    );
  } catch (error) {
    console.error("Error al invocar la funció de IA:", error);
    
    return (
      // ✅ CORRECCIÓ: Usem colors de 'destructive' per a l'estat d'error.
      <div className="rounded-2xl p-6 ring-1 ring-destructive/30 bg-destructive/10">
        <h2 className="text-xl font-bold text-destructive-foreground mb-3">{t('title')}</h2>
        <div className="p-3 rounded-lg bg-destructive/10">
          <p className="text-sm font-semibold text-destructive-foreground mb-1">{t('errorTitle')}</p>
          <p className="text-sm text-destructive-foreground/80">{t('loadError')}</p>
        </div>
      </div>
    );
  }
}

// =================== FILE: src/app/[locale]/(app)/dashboard/_components/AIOracleSkeleton.tsx ===================

"use client";
import { Button } from '@/components/ui/button';

/**
 * @summary Esquelet de càrrega per a l'Oracle d'IA.
 */
export function AIOracleSkeleton() {
  return (
    <div className="rounded-2xl p-6 ring-1 ring-white/10 bg-gradient-to-br from-white/10 to-white/5 animate-pulse">
      <h2 className="text-xl font-bold text-white mb-3">Oracle d’IA</h2>
      <div className="space-y-3">
        <div className="p-3 rounded-lg bg-white/5 ring-1 ring-white/10">
          <p className="text-sm font-semibold text-white/90 mb-1">Resum</p>
          <div className="h-4 w-3/4 rounded bg-white/10"></div>
        </div>
        <div className="p-3 rounded-lg bg-white/5 ring-1 ring-white/10">
          <p className="text-sm font-semibold text-white/90 mb-1">Suggeriment</p>
          <div className="h-4 w-full rounded bg-white/10 mb-1"></div>
          <div className="h-4 w-1/2 rounded bg-white/10"></div>
        </div>
        <Button variant="outline" className="w-full" disabled>Parlar amb l’assistent</Button>
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/dashboard/_components/DashboardBottomGrid.tsx ===================

"use client";

import React, { memo } from "react";
import { Agenda } from "./Agenda";
import { Radar } from "./Radar";
import type { Task, Contact, Invoice, Notification } from "@/types/crm";

/**
 * @file DashboardBottomGrid.tsx
 * @description Renderitza la secció inferior del dashboard: Agenda, Radar i Oracle d’IA.
 */

interface DashboardBottomGridProps {
  pendingTasks: Task[];
  onTaskClick: (task: Task) => void; // <-- La nova prop
  onOpenNewTask: () => void;
  attentionContacts: Contact[];
  overdueInvoices: Invoice[];
  notifications: Notification[];
  children: React.ReactNode; // Oracle d'IA injectat via streaming
}

/**
 * ✅ Component memoitzat per millorar rendiment.
 * Manté la coherència del layout inferior i suporta streaming dinàmic.
 */
export const DashboardBottomGrid = memo(
  ({
    pendingTasks,
    onTaskClick, // ✅ 2. Rebem la nova prop
    onOpenNewTask,
    attentionContacts,
    overdueInvoices,
    notifications,
    children,
  }: DashboardBottomGridProps) => {
    return (
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* 🗓️ Agenda de tasques */}
        <Agenda
          pendingTasks={pendingTasks}
          onTaskClick={onTaskClick} // ✅ 3. Passem la prop correcta a l'Agenda
          onOpenNewTask={onOpenNewTask}
        />

        {/* 🎯 Radar + Oracle IA */}
        <div className="space-y-6">
          <Radar
            attentionContacts={attentionContacts}
            overdueInvoices={overdueInvoices}
            notifications={notifications}
          />
          {/* 🧠 Oracle d’IA (streaming des del servidor) */}
          {children}
        </div>
      </div>
    );
  }
);

DashboardBottomGrid.displayName = "DashboardBottomGrid";


// =================== FILE: src/app/[locale]/(app)/dashboard/_components/DashboardData.tsx ===================

import { createClient } from '@/lib/supabase/server';
import { cookies } from 'next/headers';
import { redirect } from 'next/navigation';
import { headers } from 'next/headers';
import { DashboardClient } from '../dashboard-client';
import type { Contact, Invoice, Task, Notification } from '@/types/crm';
import React from 'react';

const calculatePercentageChange = (current: number, previous: number): string => {
    if (previous === 0) return current > 0 ? '+100%' : '0%';
    const change = ((current - previous) / previous) * 100;
    if (Math.abs(change) > 999) return change > 0 ? '+999%' : '-999%';
    return `${change >= 0 ? '+' : ''}${change.toFixed(0)}% vs mes anterior`;
};

export async function DashboardData({ children }: { children: React.ReactNode }) {
    const supabase = createClient(cookies());
    const locale = (await headers()).get('x-next-intl-locale') || 'ca';

    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
        // Esta redirección es correcta, por si un usuario no autenticado intenta acceder
        return redirect(`/${locale}/login`);
    }
    
    
    const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);

    // ✅ Les consultes ara són segures. La RLS filtrarà 'tasks', 'invoices', i 'contacts'.
    // La funció RPC 'get_dashboard_stats' ara també filtra internament.
    const [statsRes, tasksRes, overdueInvoicesRes, contactsRes, notificationsRes] = await Promise.all([
        supabase.rpc('get_dashboard_stats'), 
        supabase.from('tasks').select('*').order('is_completed, created_at'),
        supabase.from('invoices').select('*, contacts(nom)').in('status', ['Sent', 'Overdue']).lt('due_date', new Date().toISOString()),
        supabase.from('contacts').select('*').order('created_at', { ascending: false }),
        supabase.from('notifications').select('*').eq('user_id', user.id).eq('is_read', false),
    ]);
    
    
    const statsData = statsRes.data?.[0] || {};
    const contactsData = (contactsRes.data as Contact[]) || [];
    const transformedOverdueInvoices = ((overdueInvoicesRes.data as Invoice[]) || []).map(invoice => ({
        ...invoice,
        contacts: Array.isArray(invoice.contacts) ? invoice.contacts[0] : invoice.contacts
    }));

    const initialData = {
        stats: {
            totalContacts: statsData.total_contacts || 0,
            activeClients: statsData.active_clients || 0,
            opportunities: statsData.opportunities || 0,
            invoiced: statsData.invoiced_current_month || 0,
            pending: statsData.pending_total || 0,
            expenses: statsData.expenses_current_month || 0,
            invoicedChange: calculatePercentageChange(statsData.invoiced_current_month || 0, statsData.invoiced_previous_month || 0),
            expensesChange: calculatePercentageChange(statsData.expenses_current_month || 0, statsData.expenses_previous_month || 0),
            invoicedIsPositive: (statsData.invoiced_current_month || 0) >= (statsData.invoiced_previous_month || 0),
            expensesIsPositive: (statsData.expenses_current_month || 0) <= (statsData.expenses_previous_month || 0),
        },
        tasks: (tasksRes.data as Task[]) || [],
        contacts: contactsData,
        overdueInvoices: transformedOverdueInvoices,
        attentionContacts: contactsData
            .filter((c: Contact) => c.last_interaction_at && new Date(c.last_interaction_at) < sevenDaysAgo)
            .slice(0, 5),
        notifications: (notificationsRes.data as Notification[]) || [],
    };

    return (
        <DashboardClient initialData={initialData}>
            {children}
        </DashboardClient>
    );
}


// =================== FILE: src/app/[locale]/(app)/dashboard/_components/DashboardMainGrid.tsx ===================

"use client";

import React, { memo } from "react";
import type { DashboardInitialData } from "@/types/crm";
import { SalesPerformance } from "./SalesPerformance";
import { RecentActivities } from "./RecentActivities";

/**
 * @file DashboardMainGrid.tsx
 * @description Conté el bloc principal del dashboard: rendiment de vendes + activitats recents.
 */

interface DashboardMainGridProps {
  stats: DashboardInitialData["stats"];
  percentGoal: number;
  monthlyGoal: number;
  overdueInvoices: DashboardInitialData["overdueInvoices"];
  tasks: DashboardInitialData["tasks"];
  contacts: DashboardInitialData["contacts"];
}

/**
 * ✅ Component memoitzat per optimitzar rendiment.
 * Manté el layout consistent i responsive.
 */
export const DashboardMainGrid = memo(
  ({
    stats,
    percentGoal,
    monthlyGoal,
    overdueInvoices,
    tasks,
    contacts,
  }: DashboardMainGridProps) => {
    return (
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* 🧭 Rendiment de vendes */}
        <SalesPerformance
          stats={stats}
          percentGoal={percentGoal}
          monthlyGoal={monthlyGoal}
        />

        {/* 🕒 Activitats recents */}
        <RecentActivities
          overdueInvoices={overdueInvoices}
          tasks={tasks}
          contacts={contacts}
        />
      </div>
    );
  }
);

DashboardMainGrid.displayName = "DashboardMainGrid";


// =================== FILE: src/app/[locale]/(app)/dashboard/_components/DashboardSkeleton.tsx ===================

"use client";

/**
 * @summary Mostra un esquelet de càrrega per a la pàgina principal del Dashboard.
 */
export function DashboardSkeleton() {
  const SkeletonCard = () => <div className="h-28 bg-card rounded-2xl ring-1 ring-border"></div>;
  
  return (
    <div className="space-y-8 animate-pulse">
      <div className="absolute inset-0 -z-10 h-full w-full bg-background bg-[radial-gradient(#2e2e2e_1px,transparent_1px)] [background-size:16px_16px]" />
      
      {/* Esquelet de KPIs */}
      <div className="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-6">
        <SkeletonCard />
        <SkeletonCard />
        <SkeletonCard />
        <SkeletonCard />
      </div>

      {/* Esquelet del cos principal */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 h-72 bg-card rounded-2xl ring-1 ring-border"></div>
        <div className="h-72 bg-card rounded-2xl ring-1 ring-border"></div>
      </div>
      
      {/* Esquelet d'accés ràpid */}
      <div className="h-32 bg-card rounded-2xl ring-1 ring-border"></div>

      {/* Esquelet de seccions finals */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="h-96 bg-card rounded-2xl ring-1 ring-border"></div>
        <div className="space-y-6">
            <div className="h-48 bg-card rounded-2xl ring-1 ring-border"></div>
            <div className="h-48 bg-card rounded-2xl ring-1 ring-border"></div>
        </div>
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/dashboard/_components/QuickAccess.tsx ===================

/**
 * @file QuickAccess.tsx
 * @summary Renderitza la secció d'accés ràpid amb scroll horitzontal.
 */
"use client";

import React, { useRef, useState, useEffect, FC, ElementType } from 'react';
import Link from 'next/link';
import { useTranslations } from 'next-intl';
import { Button } from '@/components/ui/button';
import { Sparkles, Users, Workflow, FileText, FolderOpen, Mail, BookOpen, ChevronLeft, ChevronRight } from 'lucide-react';

/**
 * @summary Targeta petita per a un enllaç d'accés ràpid.
 */
const QuickTile: FC<{ href: string; icon: ElementType; label: string; desc: string; }> = ({ href, icon: Icon, label, desc }) => (
  <Link href={href} className="group flex-shrink-0 w-1/2 sm:w-1/3 md:w-1/4 lg:w-1/6">
    {/* ✅ CORRECCIÓ: Usem 'bg-muted/50' y 'hover:bg-muted' que funcionen en ambos temas */}
    <div className="rounded-2xl px-4 py-5 bg-muted/50 hover:bg-muted transition ring-1 ring-border h-full">
      <div className="flex items-center gap-3">
        <div className="rounded-xl bg-gradient-to-br from-primary/20 to-transparent p-2.5">
          <Icon className="w-5 h-5 text-primary" />
        </div>
        <div>
          <div className="font-semibold text-card-foreground">{label}</div>
          <div className="text-xs text-muted-foreground">{desc}</div>
        </div>
      </div>
    </div>
  </Link>
);

export function QuickAccess() {
  const t = useTranslations('DashboardClient');
  const scrollContainerRef = useRef<HTMLDivElement>(null);
  const [canScrollLeft, setCanScrollLeft] = useState(false);
  const [canScrollRight, setCanScrollRight] = useState(true);

  const checkScrollability = () => {
    const el = scrollContainerRef.current;
    if (el) {
      setCanScrollLeft(el.scrollLeft > 5);
      setCanScrollRight(el.scrollLeft < el.scrollWidth - el.clientWidth - 5);
    }
  };

  const handleScroll = (direction: 'left' | 'right') => {
    const el = scrollContainerRef.current;
    if (el) {
      const scrollAmount = el.clientWidth * 0.8;
      el.scrollBy({ left: direction === 'left' ? -scrollAmount : scrollAmount, behavior: 'smooth' });
    }
  };

  useEffect(() => {
    const el = scrollContainerRef.current;
    if (el) {
      checkScrollability();
      el.addEventListener('scroll', checkScrollability);
      window.addEventListener('resize', checkScrollability);
      return () => {
        el.removeEventListener('scroll', checkScrollability);
        window.removeEventListener('resize', checkScrollability);
      };
    }
  }, []);
  
  return (
    <div className="rounded-2xl p-6 ring-1 ring-border bg-card">
    <div className="flex items-center justify-between gap-2 mb-4">
      <div className='flex items-center gap-2'>
        <Sparkles className="w-5 h-5 text-pink-400" />
        <h2 className="text-xl font-bold text-foreground">{t('quickAccess')}</h2>
      </div>
        <div className="hidden md:flex items-center gap-2">
          <Button variant="ghost" size="icon" onClick={() => handleScroll('left')} disabled={!canScrollLeft} className="h-8 w-8 rounded-full disabled:opacity-30"><ChevronLeft className="w-5 h-5" /></Button>
          <Button variant="ghost" size="icon" onClick={() => handleScroll('right')} disabled={!canScrollRight} className="h-8 w-8 rounded-full disabled:opacity-30"><ChevronRight className="w-5 h-5" /></Button>
        </div>
      </div>
      <div ref={scrollContainerRef} className="flex gap-4 overflow-x-auto pb-4 -mb-4 scroll-smooth [scrollbar-width:none] [-ms-overflow-style:none] [&::-webkit-scrollbar]:hidden">
        <QuickTile href="/crm/contactes" icon={Users} label={t('contacts')} desc={t('crm')} />
        <QuickTile href="/crm/pipeline" icon={Workflow} label={t('pipeline')} desc={t('opportunities')} />
        <QuickTile href="/finances/facturacio" icon={FileText} label={t('invoicing')} desc={t('invoices')} />
        <QuickTile href="/finances/despeses" icon={FolderOpen} label={t('expenses')} desc={t('costs')} />
        <QuickTile href="/comunicacio/inbox" icon={Mail} label={t('inbox')} desc={t('communication')} />
        <QuickTile href="/crm/quotes" icon={BookOpen} label={t('quotes')} desc={t('quotes')} />
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/dashboard/_components/Radar.tsx ===================

/**
 * @file Radar.tsx
 * @summary Renderitza la secció "Radar" amb elements que requereixen atenció.
 */
"use client";

import React from 'react';
import { useTranslations } from 'next-intl';
import { FileWarning, MessageSquare, Send, AlertTriangle } from 'lucide-react';
import type { Invoice, Contact, Notification } from '@/types/crm';
import { ActivityItem } from '@/components/shared/ActivityItem';

interface RadarProps {
  attentionContacts: Contact[];
  overdueInvoices: Invoice[];
  notifications: Notification[];
}

export function Radar({ attentionContacts, overdueInvoices, notifications }: RadarProps) {
  const t = useTranslations('DashboardClient');
  
  // ✅ MILLORA: Unifiquem tots els elements en una sola llista
  const allItems = [
    ...notifications.map(item => ({ ...item, itemType: 'notification', date: new Date(item.created_at) })),
    ...overdueInvoices.map(item => ({ ...item, itemType: 'invoice', date: new Date(item.due_date) })),
    ...attentionContacts.map(item => ({ ...item, itemType: 'contact', date: new Date(item.last_interaction_at || 0) }))
  ];

  // ✅ MILLORA: Ordenem la llista per data, de més recent a més antiga.
  allItems.sort((a, b) => b.date.getTime() - a.date.getTime());

  const hasItems = allItems.length > 0;

  return (
    <div className="rounded-2xl p-6 ring-1 ring-border bg-card flex flex-col h-96">
      <h2 className="text-xl font-bold text-foreground mb-4 flex-shrink-0">{t('radar')}</h2>
      
      <div className="space-y-3 flex-grow overflow-y-auto -mr-2 pr-2">
        {!hasItems ? (
          <p className="text-sm text-muted-foreground h-full flex items-center justify-center">{t('allInOrder')}</p>
        ) : (
          // Renderitzem la llista unificada i ordenada
          allItems.map((item) => {
            if (item.itemType === 'notification') {
              const notif = item as Notification;
              const isError = notif.type === 'post_failed' || notif.type === 'integration_expired';
              return (
                <ActivityItem 
                  key={`notif-${notif.id}`} 
                  href={notif.type?.includes('integration') ? "/settings/integrations" : "/comunicacio/planificador"}
                  icon={isError ? AlertTriangle : Send} 
                  tone={isError ? {bg: 'bg-destructive/10', text: 'text-destructive'} : {bg: 'bg-green-500/10', text: 'text-green-500'}} 
                  title={notif.message} 
                  meta={isError ? t('actionRequired') : t('publishedSuccess')}
                />
              );
            }
            if (item.itemType === 'invoice') {
              const inv = item as Invoice;
              return (
                <ActivityItem 
                  key={`inv-${inv.id}`} 
                  href="/finances/facturacio" 
                  icon={FileWarning} 
                  tone={{bg: 'bg-destructive/10', text: 'text-destructive'}} 
                  title={t('overdueInvoice', { clientName: inv.contacts?.nom ?? 'client' })} 
                  meta={t('dueDate', { dueDate: new Date(inv.due_date).toLocaleDateString() })}
                />
              );
            }
            if (item.itemType === 'contact') {
              const c = item as Contact;
              return (
                <ActivityItem 
                  key={`contact-${c.id}`} 
                  href="/crm/contactes" 
                  icon={MessageSquare} 
                  tone={{bg: 'bg-primary/10', text: 'text-primary'}} 
                  title={t('coolingContact', { contactName: c.nom })}
                  meta={t('noInteraction7Days')}
                />
              );
            }
            return null;
          })
        )}
      </div>
    </div>
  );
}



// =================== FILE: src/app/[locale]/(app)/dashboard/_components/RecentActivities.tsx ===================

"use client";

import React, { useMemo } from 'react';
import { useTranslations } from 'next-intl';
import { FileWarning, CheckCircle2, Clock3, Users } from 'lucide-react';
import type { Invoice, Task, Contact } from '@/types/crm';
import { ActivityItem } from '@/components/shared/ActivityItem';
interface RecentActivitiesProps {
  overdueInvoices: Invoice[];
  tasks: Task[];
  contacts: Contact[];
}

export function RecentActivities({ overdueInvoices, tasks, contacts }: RecentActivitiesProps) {
  const t = useTranslations('DashboardClient');

  const activities = useMemo(() => {
    const a: React.ComponentProps<typeof ActivityItem>[] = [];
    
    overdueInvoices.forEach((inv) => a.push({ 
      icon: FileWarning, 
      tone: { bg: 'bg-red-500/15', text: 'text-red-300' }, 
      title: t('overdueInvoice', { clientName: inv.contacts?.nom ?? 'client' }), 
      meta: t('dueDate', { dueDate: new Date(inv.due_date).toLocaleDateString() }), 
      href: '/finances/facturacio' 
    }));
    
    tasks.slice(0, 4).forEach((task) => a.push({ 
      icon: task.is_completed ? CheckCircle2 : Clock3, 
      tone: { bg: task.is_completed ? 'bg-emerald-500/15' : 'bg-yellow-500/15', text: task.is_completed ? 'text-emerald-300' : 'text-yellow-300' }, 
      title: task.is_completed ? t('taskCompleted', { taskTitle: task.title }) : t('taskCreated', { taskTitle: task.title }), 
      // ✅ CORRECCIÓ: Comprovem si la data existeix abans de formatejar-la
      meta: task.created_at ? new Date(task.created_at).toLocaleString() : '', 
      href: '/dashboard' 
    }));

    contacts.slice(0, 3).forEach((c) => a.push({ 
      icon: Users, 
      tone: { bg: 'bg-blue-500/15', text: 'text-blue-300' }, 
      title: t('newContact', { contactName: c.nom }), 
      // ✅ CORRECCIÓ: Comprovem si la data existeix abans de formatejar-la
      meta: c.created_at ? new Date(c.created_at).toLocaleDateString() : '', 
      href: '/crm/contactes' 
    }));

    // Pots ordenar l'array per data aquí si vols que el feed estigui cronològicament ordenat
    return a.slice(0, 6);
  }, [overdueInvoices, tasks, contacts, t]);

  return (
    <div className="rounded-2xl p-6 ring-1 ring-border bg-card">
      <h2 className="text-xl font-bold text-foreground mb-4">{t('recentActivities')}</h2>
      <div className="space-y-4">
        {activities.length > 0 
          ? activities.map((act, idx) => <ActivityItem key={idx} {...act} />) 
          : <p className="text-sm text-muted-foreground">{t('noActivities')}</p>
        }
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/dashboard/_components/SalesPerformance.tsx ===================

/**
 * @file SalesPerformance.tsx
 * @summary Renderitza la secció de rendiment de vendes del Dashboard.
 */
"use client";

import { useTranslations } from 'next-intl';
import type { DashboardStats } from '@/types/crm';

interface SalesPerformanceProps {
  stats: DashboardStats;
  percentGoal: number;
  monthlyGoal: number;
}

export function SalesPerformance({ stats, percentGoal, monthlyGoal }: SalesPerformanceProps) {
  const t = useTranslations('DashboardClient');

  return (
    // ✅ CORRECCIÓ: Usem 'bg-card' y 'text-card-foreground' que s'adapten al tema.
    <div className="lg:col-span-2 rounded-2xl p-6 ring-1 ring-border bg-card text-card-foreground">
      <h2 className="text-xl font-bold mb-4">{t('salesPerformance')}</h2>
      
      <div className="w-full h-3 rounded-full bg-muted overflow-hidden">
        <div 
          className="h-full bg-gradient-to-r from-emerald-500 to-emerald-400" 
          style={{ width: `${percentGoal}%` }} 
        />
      </div>
      <div className="mt-3 flex items-center justify-between text-sm text-muted-foreground">
        <span>{percentGoal}{t('goalCompleted')}</span>
        <span>€{stats.invoiced?.toLocaleString()} / €{monthlyGoal.toLocaleString()}</span>
      </div>

      <div className="mt-6 grid grid-cols-1 sm:grid-cols-3 gap-4">
        <div className="rounded-xl p-4 bg-background ring-1 ring-border">
          <div className="text-xs text-muted-foreground">{t('invoicedMonth')}</div>
          <div className="text-lg font-semibold">€{stats.invoiced?.toLocaleString()}</div>
          <div className={`text-xs mt-1 ${stats.invoicedIsPositive ? 'text-green-500' : 'text-red-500'}`}>
            {stats.invoicedChange}
          </div>
        </div>
        <div className="rounded-xl p-4 bg-background ring-1 ring-border">
          <div className="text-xs text-muted-foreground">{t('expensesMonth')}</div>
          <div className="text-lg font-semibold">€{stats.expenses?.toLocaleString()}</div>
          <div className={`text-xs mt-1 ${stats.expensesIsPositive ? 'text-green-500' : 'text-red-500'}`}>
            {stats.expensesChange}
          </div>
        </div>
        <div className="rounded-xl p-4 bg-background ring-1 ring-border">
          <div className="text-xs text-muted-foreground">{t('netProfit')}</div>
          <div className="text-lg font-semibold text-green-500">
            €{(Number(stats.invoiced || 0) - Number(stats.expenses || 0)).toLocaleString()}
          </div>
        </div>
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/dashboard/_components/StatCardsGrid.tsx ===================

"use client";

import React, { memo } from "react";
import { useTranslations } from "next-intl";
import { StatCard } from "@/components/shared/StatCard";
import { Users, Target, Euro, BadgePercent } from "lucide-react";
import type { DashboardInitialData } from "@/types/crm";

/**
 * @file StatCardsGrid.tsx
 * @description Mostra la graella de targetes de KPI principals del Dashboard.
 */

interface StatCardsGridProps {
  stats: DashboardInitialData["stats"];
}

/**
 * ✅ Component memoitzat per evitar re-render innecessaris.
 * S’encarrega només de representar les targetes de mètriques principals.
 */
export const StatCardsGrid = memo(({ stats }: StatCardsGridProps) => {
  const t = useTranslations("DashboardClient");

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-6">
      <StatCard
        href="/crm/contactes"
        icon={Users}
        title={t("totalContacts")}
        value={stats.totalContacts.toLocaleString()}
        color="bg-[#2d7ef7]"
        openText={t("openLink")}
      />
      <StatCard
        href="/crm/pipeline"
        icon={Target}
        title={t("activeOpportunities")}
        value={stats.opportunities.toLocaleString()}
        color="bg-[#12a150]"
        openText={t("openLink")}
      />
      <StatCard
        href="/finances/facturacio"
        icon={Euro}
        title={t("monthlyInvoicing")}
        value={`€${stats.invoiced.toLocaleString()}`}
        color="bg-[#8a3ffc]"
        openText={t("openLink")}
      />
      <StatCard
        href="/finances/facturacio"
        icon={BadgePercent}
        title={t("pendingVAT")}
        value={`€${stats.pending.toLocaleString()}`}
        color="bg-[#f27917]"
        openText={t("openLink")}
      />
    </div>
  );
});

StatCardsGrid.displayName = "StatCardsGrid";


// =================== FILE: src/app/[locale]/(app)/dashboard/_hooks/useAddTask.ts ===================

"use client";

import { useState, useTransition, useCallback } from "react";
import { toast } from "sonner";
import { createClient } from "@/lib/supabase/client";
import { useTranslations } from "next-intl";

type Contact = { id: string; nom: string };

interface UseAddTaskProps {
  onTaskCreated?: () => void;
}

export function useAddTask({ onTaskCreated }: UseAddTaskProps = {}) {
  const t = useTranslations("DashboardClient.addTaskDialog");
  const supabase = createClient();
  const [isPending, startTransition] = useTransition();
  const [selectedContact, setSelectedContact] = useState<Contact | null>(null);

  const addTask = useCallback(
    async (title: string) => {
      if (!title.trim()) {
        toast.error(t("toast.errorTitle"), { description: t("toast.emptyTitle") });
        return;
      }

      startTransition(async () => {
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) {
          toast.error(t("toast.errorTitle"), { description: t("toast.unauthenticated") });
          return;
        }

        const { error } = await supabase.from("tasks").insert({
          title,
          contact_id: selectedContact?.id || null,
          user_id: user.id,
        });

        if (error) {
          toast.error(t("toast.saveError"), { description: error.message });
          return;
        }

        toast.success(t("toast.successTitle"), {
          description: t("toast.successDescription"),
        });
        onTaskCreated?.();
      });
    },
    [supabase, selectedContact, onTaskCreated, t]
  );

  return {
    addTask,
    isPending,
    selectedContact,
    setSelectedContact,
  };
}


// =================== FILE: src/app/[locale]/(app)/dashboard/_hooks/useDashboardTasks.tsx ===================

// app/[locale]/(app)/dashboard/_hooks/useDashboardTasks.ts
import { useCallback, useTransition, useState } from 'react';
import { createClient } from '@/lib/supabase/client';
import { toast } from 'sonner';
import type { Task } from '@/types/crm';
import { useTranslations } from 'next-intl';

export function useDashboardTasks(initialTasks: Task[]) {
  const t = useTranslations('DashboardClient');
  const [tasks, setTasks] = useState(initialTasks);
  const [isPending, startTransition] = useTransition();
  const supabase = createClient();

  const toggleTask = useCallback((taskId: string, currentStatus: boolean) => {
    startTransition(async () => {
      const previous = [...tasks];
      setTasks(prev => prev.map(t => t.id === taskId ? { ...t, is_completed: !currentStatus } : t));
      const { error } = await supabase.from('tasks').update({ is_completed: !currentStatus }).eq('id', taskId);
      if (error) {
        toast.error(t('toast.errorTitle'), { description: t('taskUpdateError') });
        setTasks(previous);
      }
    });
  }, [tasks, supabase, t]);

  return { tasks, toggleTask, isPending };
}


// =================== FILE: src/app/[locale]/(app)/dashboard/_hooks/useTaskManager.ts ===================

"use client";

import { useCallback, useState, useTransition, useEffect } from "react";
import { toast } from "sonner";
import { useTranslations } from "next-intl";
import { v4 as uuidv4 } from 'uuid';
import type { Task } from "@/types/crm";
import { updateTaskStatusAction, deleteTaskAction, createTaskAction } from "../actions";

export function useTaskManager(initialTasks: Task[]) {
  const t = useTranslations("DashboardClient");
  const [tasks, setTasks] = useState(initialTasks);
  const [selectedTask, setSelectedTask] = useState<Task | null>(null);
  const [isPending, startTransition] = useTransition();

  // Sincronitza l'estat si les dades inicials canvien
  useEffect(() => {
    setTasks(initialTasks);
  }, [initialTasks]);

  // --- LÒGICA PER AFEGIR TASCA (la part nova) ---
  const handleAddTask = useCallback(
    async (title: string, contact_id: string | null, user_id: string) => {
      const optimisticTask: Task = {
        id: uuidv4(), // ID temporal
        created_at: new Date().toISOString(),
        title,
        contact_id,
        user_id,
        is_completed: false,
        // Afegeix altres camps del tipus Task amb valors per defecte si cal
        due_date: null,
        priority: null,
        contacts: null, // o busca el contacte a les dades inicials si el tens
      };

      // Actualització optimista
      setTasks((prev) => [optimisticTask, ...prev]);

      startTransition(async () => {
        const result = await createTaskAction(title, contact_id);
        if (result.success && result.data) {
          // Reemplacem la tasca optimista per la real del servidor
          setTasks((prev) =>
            prev.map((t) => (t.id === optimisticTask.id ? result.data! : t))
          );
        } else {
          toast.error(t("toast.errorTitle"), { description: result.message });
          // Revertim l'actualització optimista en cas d'error
          setTasks((prev) => prev.filter((t) => t.id !== optimisticTask.id));
        }
      });
    },
    [t] // Ja no depèn de `tasks`!
  );

  // --- LÒGICA PER ACTUALITZAR I ESBORRAR (millorada) ---
  const handleUpdateStatus = useCallback(
    (taskId: string, newStatus: boolean) => {
      const previousTasks = tasks; // Guardem l'estat anterior per revertir
      setTasks((prev) =>
        prev.map((t) => (t.id === taskId ? { ...t, is_completed: newStatus } : t))
      );
      setSelectedTask(null);

      startTransition(async () => {
        const result = await updateTaskStatusAction(taskId, newStatus);
        if (!result.success) {
          toast.error(t("toast.errorTitle"), { description: result.message });
          setTasks(previousTasks); // Revertim
        }
      });
    },
    [tasks, t] // Mantenim `tasks` aquí per la còpia de `previousTasks`
  );

  const handleDelete = useCallback(
    (taskId: string) => {
      const previousTasks = tasks;
      setTasks((prev) => prev.filter((t) => t.id !== taskId));
      setSelectedTask(null);

      startTransition(async () => {
        const result = await deleteTaskAction(taskId);
        if (!result.success) {
          toast.error(t("toast.errorTitle"), { description: result.message });
          setTasks(previousTasks); // Revertim
        }
      });
    },
    [tasks, t]
  );

  return {
    tasks,
    selectedTask,
    setSelectedTask,
    handleAddTask,
    handleUpdateStatus,
    handleDelete,
    isPending,
  };
}

// =================== FILE: src/app/[locale]/(app)/excel/actions.ts ===================

"use server";
import { SupabaseClient } from "@supabase/supabase-js";
import { validateUserSession } from "@/lib/supabase/session";
import ExcelJS from 'exceljs';
import { getTranslations } from 'next-intl/server';

// --- TIPUS COMPARTITS ---
export interface ColumnInfo {
  column_name: string;
  data_type: string;
}

export interface TableDataResult<T> {
  success: true;
  columns: ColumnInfo[];
  rows: T[];
}

export interface ErrorResponse {
  success: false;
  message: string;
}

// Defineix el tipus que representa una fila completa per a la inserció
type RowToInsert<T extends Record<string, unknown>> = T & {
  team_id: string;
  user_id: string;
};

/**
 * Funció per obtenir les metadades de les columnes d'una taula de Supabase.
 * Retorna l'array de columnes i el `selectString` per a la consulta.
 */
async function getTableColumns(supabase: SupabaseClient, tableName: string): Promise<{ columns: ColumnInfo[], selectString: string }> {
  const { data: columnInfo, error: columnError } = await supabase.rpc(
    "get_table_columns_info",
    { p_table_name: tableName }
  );

  if (columnError) {
    throw new Error(`Error obtenint columnes: ${columnError.message}`);
  }

  const columns = (columnInfo ?? []) as ColumnInfo[];
  const selectString = columns.map(c => c.column_name).join(",");

  return { columns, selectString };
}

/**
 * Funció per consultar dades d'una taula de Supabase, amb l'opció de no tornar-ne cap.
 */
async function getTableRecords<T>(supabase: SupabaseClient, tableName: string, activeTeamId: string, selectString: string, withData: boolean): Promise<T[]> {
  // Si withData és fals, retornem un array buit directament
  if (!withData) {
    return [];
  }

  const { data, error } = await supabase
    .from(tableName)
    .select(selectString)
    .eq('team_id', activeTeamId)
    .order("created_at", { ascending: false })
    .limit(1000);

  if (error) {
    throw new Error(`Error obtenint dades: ${error.message}`);
  }

  return (data ?? []) as T[];
}

// Tipus genèric per a la funció principal
export async function exportToExcel<T extends Record<string, unknown>>(tableName: string, withData: boolean) {
  try {
    const t = await getTranslations('excel');
    // 1. Validació de la sessió per obtenir l'usuari i l'equip actiu
    const session = await validateUserSession();
    if ('error' in session) {
      return { success: false, message: session.error.message };
    }
    const { supabase, user, activeTeamId } = session;

    // 2. Cridem a la funció per obtenir les columnes
    const { columns, selectString } = await getTableColumns(supabase, tableName);

    // 3. Cridem a la funció per obtenir els registres (o un array buit)
    const records = await getTableRecords<T>(supabase, tableName, activeTeamId, selectString, withData);

    // 4. Creem un nou llibre d'Excel i una pestanya
    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet(tableName);

    // 5. Definim les columnes de l'Excel a partir de la informació obtinguda
    const excelColumns = columns.map(col => ({
      header: col.column_name.charAt(0) + col.column_name.slice(1),
      key: col.column_name,
      width: 20,
    }));
    worksheet.columns = excelColumns;

    // 6. Afegim les dades a les files (pot ser un array buit si `withData` és `false`)
    if (records.length > 0) {
      worksheet.addRows(records);
    }

    // 7. Generem el fitxer Excel en memòria
    const buffer = await workbook.xlsx.writeBuffer();

    // 8. Retornem el buffer i el nom del fitxer
    const now = new Date();
    const pad = (num: number) => num.toString().padStart(2, '0');
    let fileName = "";
    if (withData) {
      fileName = `${tableName}_${now.getFullYear().toString().slice(-2)}${pad(now.getMonth() + 1)}${pad(now.getDate())}${pad(now.getHours())}${pad(now.getMinutes())}${pad(now.getSeconds())}.xlsx`;
    } else {
      fileName = `${t('template')}_${tableName}_${now.getFullYear().toString().slice(-2)}${pad(now.getMonth() + 1)}${pad(now.getDate())}${pad(now.getHours())}${pad(now.getMinutes())}${pad(now.getSeconds())}.xlsx`;
    }


    return {
      success: true,
      fileBuffer: Buffer.from(buffer).toString('base64'),
      fileName,
    };
  } catch (error) {
    console.error("Error en exportar a Excel:", error);
    const message = error instanceof Error ? error.message : "Error desconegut";
    return { success: false, message };
  }
}

// --- FUNCIONS PER IMPORTAR A EXCEL ---
export async function validateColumns(excelColumns: string[], dbColumns: ColumnInfo[]) {
  // Convertim els noms de les columnes de la BDD a minúscules per a la comparació
  const dbColumnNamesLower = dbColumns.map(c => c.column_name.toLowerCase());

  // Convertim els noms de les columnes de l'Excel a minúscules per a la comparació
  const excelColumnNamesLower = excelColumns.map(c => c.toLowerCase());

  // 1. Validar que la quantitat de columnes sigui la mateixa
  if (excelColumnNamesLower.length !== dbColumnNamesLower.length) {
    console.error(`La quantitat de columnes no coincideix. La BDD té ${dbColumnNamesLower.length} camps, mentre que l'arxiu té ${excelColumnNamesLower.length}.`);
    console.error("Camps BDD --> " + dbColumnNamesLower.join(", "));
    console.error("Camps fitxer --> " + excelColumnNamesLower.join(", "));
    return false;
  }

  // 2. Comprovar que cada columna de l'Excel coincideix amb la seva homòloga a la BD, respectant l'ordre i sense distinció de majúscules/minúscules
  for (let i = 0; i < excelColumnNamesLower.length; i++) {
    const dbColumnName = dbColumnNamesLower[i];
    const excelColumnName = excelColumnNamesLower[i];

    if (dbColumnName !== excelColumnName) {
      console.error("L'ordre o els noms de les columnes no coincideixen, o no s'han escrit de la mateixa manera (ignorant majúscules/minúscules).");
      console.error("Camps BDD --> " + dbColumnNamesLower.join(", "));
      console.error("Camps fitxer --> " + excelColumnNamesLower.join(", "));
      return false;
    }
  }

  // Si arriba aquí, vol dir que tot és correcte
  return true;
}

export async function importFromExcel<T extends Record<string, unknown>>(tableName: string, formData: FormData) {
  try {
    // 1. Validació de la sessió per obtenir l'usuari i l'equip actiu
    const session = await validateUserSession();
    if ('error' in session) {
      return { success: false, message: session.error.message };
    }
    const { supabase, user, activeTeamId } = session;

    // 2. Cridem a la funció per obtenir les columnes
    const { columns, selectString } = await getTableColumns(supabase, tableName);

    // 3. Obtenim el fitxer de FormData
    const file = formData.get('file');
    if (!file || typeof file === 'string' || !(file instanceof File)) {
      return { success: false, message: "No s'ha trobat el fitxer Excel." };
    }

    // 4. Convertim el ReadableStream a Buffer per a ExcelJS
    const buffer = await file.arrayBuffer();

    // 5. Llegim el fitxer Excel amb ExcelJS
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.load(buffer);
    const worksheet = workbook.getWorksheet(1);
    if (!worksheet) {
      return { success: false, message: "No s'ha pogut llegir el full de càlcul." };
    }

    // 6. Obtenim les capçaleres de l'Excel i validem contra les columnes de la BD
    const excelHeaders = worksheet.getRow(1)?.values as string[];
    if (!excelHeaders || excelHeaders.length === 0) {
      return { success: false, message: "El full de càlcul no té capçaleres." };
    }
    excelHeaders.shift();

    if (!validateColumns(excelHeaders, columns)) {
      return { success: false, message: "Les columnes de l'arxiu Excel no coincideixen amb les de la base de dades." };
    }

    // 7. Processar les dades i preparar-les per a la inserció
    const dataToInsert: RowToInsert<T>[] = [];
    worksheet.eachRow((row, rowNumber) => {
      if (rowNumber === 1) return;
      const rowData: Partial<T> = {};
      row.eachCell((cell, colNumber) => {
        const header = excelHeaders[colNumber - 1];
        if (header) {
          rowData[header as keyof Partial<T>] = cell.value as T[keyof T];
        }
      });

      // ✅ Creem un objecte que compleix amb el tipus RowToInsert
      const completeRow: RowToInsert<T> = {
        ...rowData,
        team_id: activeTeamId,
        user_id: user.id
      } as RowToInsert<T>; // Utilitzem l'asserció amb el tipus correcte

      dataToInsert.push(completeRow);
    });

    // 8. Inserir les dades a Supabase en lots
    const batchSize = 1000;
    let recordsInserted = 0;
    for (let i = 0; i < dataToInsert.length; i += batchSize) {
      const batch = dataToInsert.slice(i, i + batchSize);
      const { error } = await supabase.from(tableName).insert(batch);
      if (error) {
        console.error("Error en la inserció del lot:", error);
        return { success: false, message: `Error en la inserció de dades: ${error.message}` };
      }
      recordsInserted += batch.length;
    }

    return { success: true, message: `S'han importat ${recordsInserted} registres correctament.` };
  } catch (error) {
    console.error("Error en importar a Excel:", error);
    const message = error instanceof Error ? error.message : "Error desconegut";
    return { success: false, message };
  }
}


// =================== FILE: src/app/[locale]/(app)/excel/ExcelDropdownButton.tsx ===================

import React, { useState, useRef, useEffect } from 'react';
import { FileSpreadsheet } from 'lucide-react';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';

/**
 * Defineix la forma d'una opció del desplegable.
 * Ara inclou una icona i un 'label' que actuarà com a tooltip.
 */
export interface DropdownOption {
  value: string;
  label: string;
  icon: React.ElementType;
}

/**
 * Defineix les propietats (props) que rep el component DropdownButton.
 */
interface DropdownButtonProps {
  /** Un array d'opcions per mostrar al menú desplegable. */
  options: DropdownOption[];
  /** Funció que s'executa quan l'usuari selecciona una opció. */
  onSelect: (selectedOption: DropdownOption) => void;
}

/**
 * Un component de UI per a un botó desplegable que mostra una llista d'opcions.
 */
const DropdownButton: React.FC<DropdownButtonProps> = ({ options, onSelect }) => {
  // Estat per controlar si el menú està obert o tancat.
  const [isOpen, setIsOpen] = useState(false);
  
  // Ref per al contenidor principal del desplegable.
  const dropdownRef = useRef<HTMLDivElement>(null);

  /**
   * Canvia l'estat d'obertura del menú.
   */
  const toggleDropdown = () => {
    setIsOpen(prevIsOpen => !prevIsOpen);
  };

  /**
   * Gestiona el clic en una de les opcions.
   * Crida la funció onSelect i tanca el menú.
   */
  const handleOptionClick = (option: DropdownOption) => {
    onSelect(option);
    setIsOpen(false);
  };

  // Efecte per tancar el menú si l'usuari fa clic fora del component.
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    // Afegim l'event listener quan el component es munta.
    document.addEventListener('mousedown', handleClickOutside);

    // Netegem l'event listener quan el component es desmunta.
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []); // L'array buit assegura que l'efecte només s'executa un cop.

  return (
    <div className="relative inline-block font-sans" ref={dropdownRef}>
      <button
        onClick={toggleDropdown} // Canviem l'estil per a que sigui un botó d'icona
        className="flex items-center justify-center h-9 px-3 bg-green-700 text-white rounded-md hover:bg-green-800 transition-colors focus:outline-none focus:ring-2 focus:ring-green-500"
        aria-label="Opcions d'Excel"
      >
        <FileSpreadsheet className="h-6 w-6" />
      </button>
      {isOpen && (
        <ul className="absolute block list-none p-1 m-0 mt-2 bg-green-700/25 backdrop-blur-sm border border-green-600 rounded-md shadow-lg z-10">
          <TooltipProvider delayDuration={100}>
            {options.map((option) => (
              <Tooltip key={option.value}>
                <TooltipTrigger asChild>
                  <li
                    className="p-2 rounded-md cursor-pointer hover:bg-white/20"
                    onClick={() => handleOptionClick(option)}
                  >
                    <option.icon className="h-5 w-5 text-white" />
                  </li>
                </TooltipTrigger>
                <TooltipContent side="right" className="bg-green-900/70 text-zinc-50 border-zinc-800">
                  <p>{option.label}</p>
                </TooltipContent>
              </Tooltip>
            ))}
          </TooltipProvider>
        </ul>
      )}
    </div>
  );
};

export default DropdownButton;


// =================== FILE: src/app/[locale]/(app)/finances/despeses/actions.ts ===================

/**
 * @file actions.ts (Despeses)
 * @summary Aquest fitxer conté totes les Server Actions per al mòdul de Gestió de Despeses.
 * Les funcions aquí s'executen de manera segura al servidor i són responsables de la interacció
 * amb la base de dades i serveis externs, com desar despeses, processar documents amb OCR
 * i pujar fitxers adjunts a Supabase Storage.
 */

"use server";

import { createClient } from "@/lib/supabase/server";
import { revalidatePath } from "next/cache";
import { cookies } from "next/headers";
import { type Expense, type ExpenseItem } from "../types";

// Definim un tipus de resultat genèric per a les nostres accions.
interface ActionResult<T = unknown> {
    data: T | null;
    error: { message: string } | null;
}



/**
 * @summary Processa un fitxer (factura, tiquet) mitjançant una Edge Function d'OCR (Reconeixement Òptic de Caràcters).
 * @param {FormData} formData - El formulari que conté el fitxer a processar.
 * @returns {Promise<ActionResult<Record<string, unknown>>>} Les dades extretes del document o un error.
 */
export async function processOcrAction(
    formData: FormData
): Promise<ActionResult<Record<string, unknown>>> {
    const supabase = createClient(cookies())
        ;
    // Deleguem tota la lògica complexa de l'OCR a una Edge Function.
    const { data, error } = await supabase.functions.invoke("process-ocr", {
        body: formData,
    });

    if (error) return { data: null, error: { message: error.message } };
    return { data, error: null };
}


interface ActionResult<T = unknown> {
    data: T | null;
    error: { message: string } | null;
}


export async function saveExpenseAction(
    expenseData: Omit<Expense, "id" | "created_at" | "user_id" | "team_id" | "suppliers" | "expense_attachments"> & { expense_items: ExpenseItem[] },
    expenseId: string | null
): Promise<ActionResult<Expense>> {
    console.log('Objecte rebut al servidor:', expenseData);

    const supabase = createClient(cookies());
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) return { data: null, error: { message: "Not authenticated" } };

    const activeTeamId = user.app_metadata?.active_team_id;
    if (!activeTeamId) {
        return { data: null, error: { message: "No active team selected" } };
    }

    // Separem els conceptes de la resta de detalls de la despesa
    const { expense_items, ...expenseDetails } = expenseData;

    // ✅ PAS CLAU: Assegurem el format de la data abans d'enviar-la a la BBDD
    if (expenseDetails.expense_date) {
        // Convertim la data ISO string a 'AAAA-MM-DD'
        try {
            expenseDetails.expense_date = new Date(expenseDetails.expense_date)
                .toISOString()
                .split('T')[0];
        } catch (e) {
            // Imprimim l'error real al terminal del servidor
            console.error("Error al formatar la data de la despesa:", e);
            return { data: null, error: { message: "Format de data invàlid." } };
        }
    }
    let savedExpense: Expense | null = null;
    let expenseError: { message: string } | null = null;

    // Pas 1: Desar la despesa principal (crear o actualitzar)
    if (expenseId) {
        // Actualitzem la despesa existent
        const { data, error } = await supabase
            .from("expenses")
            .update(expenseDetails)
            .eq("id", expenseId)
            .select()
            .single();
        savedExpense = data as Expense | null;
        if (error) expenseError = { message: error.message };
    } else {
        // Creem una nova despesa
        const { data, error } = await supabase
            .from("expenses")
            .insert({ ...expenseDetails, user_id: user.id, team_id: activeTeamId })
            .select()
            .single();
        savedExpense = data as Expense | null;
        if (error) expenseError = { message: error.message };
    }

    if (expenseError) return { data: null, error: expenseError };
    if (!savedExpense) return { data: null, error: { message: "Could not save expense" } };

    // Pas 2: Gestionar els conceptes (`expense_items`) amb la nova lògica
    if (expense_items) {
        // Obtenim els IDs dels conceptes que arriben del formulari (només els que ja existien)
        const itemIdsFromForm = expense_items.map(item => item.id).filter(Boolean);

        // Esborrem els conceptes que estiguin a la BBDD però no al formulari
        // (l'usuari els ha eliminat)
        if (itemIdsFromForm.length > 0) {
            const { error: deleteError } = await supabase
                .from('expense_items')
                .delete()
                .eq('expense_id', savedExpense.id)
                .not('id', 'in', `(${itemIdsFromForm.join(',')})`);

            if (deleteError) return { data: null, error: { message: `Error deleting old items: ${deleteError.message}` } };
        } else if (expenseId) {
            // Si és una actualització i no arriba cap concepte amb ID, els esborrem tots
            const { error: deleteAllError } = await supabase
                .from('expense_items')
                .delete()
                .eq('expense_id', savedExpense.id);

            if (deleteAllError) return { data: null, error: { message: `Error deleting all items: ${deleteAllError.message}` } };
        }

        // Preparem els conceptes per a l'operació `upsert`
        const itemsToUpsert = expense_items.map((item: ExpenseItem) => ({
            // ✅ AFEGEIX L'ID NOMÉS SI JA EXISTEIX
            ...(item.id && { id: item.id }),

            description: item.description,
            quantity: item.quantity,
            unit_price: item.unit_price,
            expense_id: savedExpense!.id,
            user_id: user.id,
            team_id: activeTeamId
        }));

        // Fem upsert: actualitza els existents i insereix els nous
        if (itemsToUpsert.length > 0) {
            const { error: upsertError } = await supabase.from("expense_items").upsert(itemsToUpsert);
            if (upsertError) {
                console.error("DETALLS DE L'ERROR UPSERT:", upsertError); // Línia de depuració útil
                return { data: null, error: { message: `Error upserting items: ${upsertError.message}` } };
            }
        }

    } else if (expenseId) {
        // Si és una actualització i no rebem `expense_items`, vol dir que s'han esborrat tots
        await supabase.from("expense_items").delete().eq("expense_id", savedExpense.id);
    }

    revalidatePath("/finances/despeses");
    return { data: savedExpense, error: null };
}

// ... Les teves altres accions com processOcrAction es poden quedar igual ...

export async function uploadAttachmentAction(
    expenseId: string,
    formData: FormData
): Promise<ActionResult<null>> {
    const supabase = createClient(cookies());
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) return { data: null, error: { message: "Not authenticated" } };

    // --- NOVA LÒGICA D'EQUIP ACTIU ---
    const activeTeamId = user.app_metadata?.active_team_id;
    if (!activeTeamId) {
        return { data: null, error: { message: "No active team selected" } };
    }
    // ---------------------------------

    const file = formData.get("file") as File | null;
    if (!file) return { data: null, error: { message: "No file provided" } };

    // ✅ La ruta d'emmagatzematge ara podria organitzar-se per equip
    const filePath = `${activeTeamId}/${expenseId}/${Date.now()}-${file.name}`;
    const { error: uploadError } = await supabase.storage
        .from("despeses-adjunts")
        .upload(filePath, file);

    if (uploadError) return { data: null, error: { message: uploadError.message } };

    // ✅ Afegim 'team_id' al registre de l'adjunt
    const { error: dbError } = await supabase.from("expense_attachments").insert({
        expense_id: expenseId,
        user_id: user.id,
        team_id: activeTeamId,
        file_path: filePath,
        filename: file.name,
        mime_type: file.type,
    });

    if (dbError) return { data: null, error: { message: dbError.message } };

    revalidatePath("/finances/despeses");
    return { data: null, error: null };
}


// =================== FILE: src/app/[locale]/(app)/finances/despeses/error.tsx ===================

"use client"; // Els fitxers d'error han de ser components de client.

import { Button } from '@/components/ui/button';
import { useEffect } from 'react';

export default function ExpensesError({
  error,
  reset,
}: {
  error: Error & { digest?: string };
  reset: () => void;
}) {
  useEffect(() => {
    // Pots registrar l'error en un servei extern com Sentry
    console.error(error);
  }, [error]);

  return (
    <div className="flex flex-col items-center justify-center h-full text-center">
      <h2 className="text-2xl font-bold mb-4">Alguna cosa ha anat malament!</h2>
      <p className="mb-6">{error.message}</p>
      <Button
        onClick={
          // Intenta recuperar-se tornant a renderitzar el segment
          () => reset()
        }
      >
        Torna a intentar-ho
      </Button>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/finances/despeses/page.tsx ===================

/**
 * @file page.tsx (Despeses)
 * @summary Punto de entrada de la página, implementando React Suspense para carga optimizada.
 */

import { Suspense } from 'react';
import type { Metadata } from 'next';
import { ExpensesData } from './_components/ExpensesData';
import { ExpensesSkeleton } from './_components/ExpensesSkeleton';

export const metadata: Metadata = {
  title: 'Despeses | Ribot',
};

// Ya no necesitamos exportar los tipos desde aquí.

export default function DespesesPage() {
  return (
    <Suspense fallback={<ExpensesSkeleton />}>
      <ExpensesData />
    </Suspense>
  );
}

// =================== FILE: src/app/[locale]/(app)/finances/despeses/_components/expenses/ExpenseDetailDrawer.tsx ===================

/**
 * @file ExpenseDetailDrawer.tsx
 * @summary Aquest fitxer defineix un component de client que mostra un calaix lateral (drawer)
 * amb els detalls complets d'una despesa. S'encarrega de calcular i formatar les dades
 * financeres, obtenir les URLs dels fitxers adjunts des de Supabase Storage i gestionar la seva descàrrega.
 */

"use client";

import React, { useState, useEffect, FC } from 'react';
import { createClient } from '@/lib/supabase/client';
import { Drawer, DrawerContent, DrawerHeader, DrawerTitle, DrawerDescription, DrawerFooter } from "@/components/ui/drawer";
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Paperclip, Edit, Download } from 'lucide-react';
import { format } from "date-fns";
import { ca, es, enUS } from "date-fns/locale";
import { toast } from 'sonner';
import { type Expense } from '@/types/finances/index';
import { useLocale, useTranslations } from 'next-intl';

interface ExpenseDetailDrawerProps {
  expense: Expense | null;
  isOpen: boolean;
  onClose: () => void;
  onEdit: (expense: Expense) => void;
}

// Tipus per a un adjunt que inclou la seva URL pública.
type AttachmentWithUrl = {
  id: string;
  publicUrl: string;
  filename: string;
  mime_type: string;
};

export const ExpenseDetailDrawer: FC<ExpenseDetailDrawerProps> = ({ expense, isOpen, onClose, onEdit }) => {
  const [attachmentUrls, setAttachmentUrls] = useState<AttachmentWithUrl[]>([]);
  const supabase = createClient()
;
  const t = useTranslations('Expenses');
  const locale = useLocale();

  const getDateLocale = () => {
    switch (locale) {
      case 'es': return es;
      case 'en': return enUS;
      default: return ca;
    }
  };
  // Aquest efecte s'executa quan el component rep una nova despesa.
  // La seva funció és obtenir les URLs públiques dels fitxers adjunts des de Supabase Storage.
  useEffect(() => {
    if (expense && expense.expense_attachments) {
      const urls = expense.expense_attachments.map(att => {
        const { data } = supabase.storage.from('despeses-adjunts').getPublicUrl(att.file_path);
        return { ...att, publicUrl: data.publicUrl };
      });
      setAttachmentUrls(urls);
    }
  }, [expense, supabase.storage]);

  /**
   * @summary Gestor per a la descàrrega d'un fitxer adjunt des del navegador.
   */
  const handleDownload = async (attachment: { publicUrl: string, filename: string }) => {
    try {
      // Fem una petició 'fetch' per obtenir el contingut del fitxer.
      const response = await fetch(attachment.publicUrl);
      if (!response.ok) throw new Error('Network response was not ok.');
      // Convertim la resposta en un 'Blob'.
      const blob = await response.blob();
      // Creem una URL temporal al navegador per a aquest 'Blob'.
      const url = window.URL.createObjectURL(blob);
      // Creem un element <a> invisible, hi assignem la URL i el nom del fitxer, i simulem un clic per iniciar la descàrrega.
      const a = document.createElement('a');
      a.style.display = 'none';
      a.href = url;
      a.download = attachment.filename;
      document.body.appendChild(a);
      a.click();
      // Neteja: eliminem l'URL i l'element <a> del DOM.
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
    } catch {
      toast.error(t('downloadErrorTitle'), { description: t('downloadErrorDescription') });
    }
  };

  // Si no hi ha cap despesa seleccionada, no renderitzem res.
  if (!expense) return null;

  // Calculem la base imposable per a la seva visualització.
  const baseImposable = (expense.subtotal || 0) - (expense.discount_amount || 0);


  return (
    <Drawer open={isOpen} onClose={onClose}>
      {/* ✅ CORRECCIÓ: DrawerContent ja gestiona els colors de fons i text per a cada tema. */}
      <DrawerContent className="p-6">
        <div className="max-w-4xl mx-auto w-full">
          <DrawerHeader className="text-left p-0 mb-4">
            <DrawerTitle className="text-2xl font-bold">
              {expense.suppliers?.nom || expense.description}
            </DrawerTitle>
            <DrawerDescription>
              {expense.invoice_number ? t('drawerDescInvoice', { invoiceNumber: expense.invoice_number }) : t('drawerDescNoInvoice')}
            </DrawerDescription>
          </DrawerHeader>

          <div className="grid md:grid-cols-3 gap-6">
            {/* --- Adjunts --- */}
            <div className="md:col-span-1 space-y-4">
              <h3 className="font-semibold flex items-center gap-2">
                <Paperclip className="w-4 h-4" /> {t('attachments')}
              </h3>
              {attachmentUrls.length > 0 ? (
                <div className="space-y-2">
                  {attachmentUrls.map(att => (
                    // ✅ CORRECCIÓ: Usem 'bg-muted' per a un fons que s'adapta.
                    <div key={att.id} className="bg-muted p-2 rounded-lg flex items-center justify-between">
                      <a href={att.publicUrl} target="_blank" rel="noopener noreferrer" className="truncate text-sm hover:underline">
                        {att.filename}
                      </a>
                      <Button variant="ghost" size="icon" onClick={() => handleDownload(att)}>
                        <Download className="w-4 h-4" />
                      </Button>
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-sm text-muted-foreground">{t('noAttachments')}</p>
              )}
            </div>


            {/* --- Detall --- */}
            {/* ✅ CORRECCIÓ: Usem 'bg-muted' per a un fons que s'adapta. */}
            <div className="md:col-span-2 bg-muted p-6 rounded-xl space-y-4">
              <div className="flex justify-between items-center">
                <span className="text-muted-foreground">{t('date')}</span>
                <span>{expense.expense_date ? format(new Date(expense.expense_date), "PPP", { locale: getDateLocale() }) : '-'}</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-muted-foreground">{t('category')}</span>
                <Badge variant="secondary" className={undefined}>{expense.category || t('noCategory')}</Badge>
              </div>
              <div className="border-t border-border my-4"></div>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between"><p className="text-muted-foreground">{t('subtotal')}</p><p className="font-mono">€{(expense.subtotal || 0).toFixed(2)}</p></div>
                {expense.discount_amount && expense.discount_amount > 0 && (
                  <div className="flex justify-between text-orange-500 dark:text-orange-400">
                    <p>{t('discount')}</p>
                    <p className="font-mono">-€{(expense.discount_amount).toFixed(2)}</p>
                  </div>
                )}
                <div className="flex justify-between"><p className="text-muted-foreground">{t('taxBase')}</p><p className="font-mono">€{baseImposable.toFixed(2)}</p></div>
                <div className="flex justify-between"><p className="text-muted-foreground">{t('vat', { taxRate: expense.tax_rate || 21 })}</p><p className="font-mono">€{(expense.tax_amount || 0).toFixed(2)}</p></div>
              </div>
              <div className="flex justify-between items-center text-xl font-bold border-t border-foreground/20 pt-2 mt-2">
                <p>{t('total')}</p>
                <p className="font-mono">- €{(expense.total_amount || 0).toFixed(2)}</p>
              </div>
            </div>
          </div>

          {/* Peu del calaix amb els botons d'acció */}
          <DrawerFooter className="flex-row justify-start p-0 pt-6 gap-2">
            <Button onClick={() => onEdit(expense)}>
              <Edit className="w-4 h-4 mr-2" />  {t('editButton')}
            </Button>
            <Button variant="outline" onClick={onClose}>
              {t('closeButton')}
            </Button>
          </DrawerFooter>
        </div>
      </DrawerContent>
    </Drawer>
  );
};


// =================== FILE: src/app/[locale]/(app)/finances/despeses/_components/expenses/ExpenseDialog.tsx ===================

"use client";

import React, { useState, useEffect, useTransition, FC } from 'react';
import { toast } from 'sonner'; // ✅ 1. Importem 'toast' de sonner
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogClose } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from "@/components/ui/command";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Textarea } from '@/components/ui/textarea';
import { Loader2, Plus, Calendar as CalendarIcon, Check, ChevronsUpDown, Trash2, UploadCloud, Paperclip, BrainCircuit } from 'lucide-react';
import { cn } from "@/lib/utils/utils";
import { format } from "date-fns";
import { ca, es, enUS } from "date-fns/locale";
import { useLocale, useTranslations } from 'next-intl';
import { type Expense, type Supplier, type ExpenseItem } from '@/types/finances/index';
import { saveExpenseAction, processOcrAction, uploadAttachmentAction } from '@/app/[locale]/(app)/finances/despeses/actions';

// Definim les propietats que el component espera rebre.
interface ExpenseDialogProps {
    isOpen: boolean;
    setIsOpen: (isOpen: boolean) => void;
    initialData: Expense | null; // Pot rebre una despesa per editar, o null per crear-ne una de nova.
    suppliers: Supplier[]; // Llista de proveïdors per al selector.
}

// Define a more flexible type for the form state
type ExpenseFormState = Omit<Expense, 'id' | 'created_at' | 'user_id' | 'suppliers'> & { id?: string | null };

// Funció que retorna un objecte de despesa buit, per a inicialitzar el formulari de creació.
const getInitialExpenseState = (): ExpenseFormState => ({
    supplier_id: null, invoice_number: '', expense_date: new Date().toISOString(),
    category: '', description: '', notes: '', discount_amount: 0, tax_rate: 21,
    expense_items: [{ description: '', quantity: 1, unit_price: 0 }],
    expense_attachments: [], subtotal: 0, tax_amount: 0, total_amount: 0,
});
/**
 * Component de diàleg per crear i editar despeses.
 * És un component complex que gestiona:
 * - Un formulari amb múltiples camps i selectors.
 * - Lògica per afegir/eliminar línies de concepte dinàmicament.
 * - Càlcul automàtic de totals.
 * - Pujada d'arxius (OCR i adjunts manuals).
 */
export const ExpenseDialog: FC<ExpenseDialogProps> = ({ isOpen, setIsOpen, initialData, suppliers }) => {
    const t = useTranslations('Expenses');
    const locale = useLocale();
    // Hooks de transició per gestionar els estats de càrrega de les diferents accions.
    const [isSaving, startSaveTransition] = useTransition();
    const [isProcessingOcr, startOcrTransition] = useTransition();
    const [isUploading, startUploadTransition] = useTransition();
    // Estat principal que emmagatzema totes les dades del formulari.
    const [currentExpense, setCurrentExpense] = useState<ExpenseFormState>(getInitialExpenseState());
    const [selectedSupplier, setSelectedSupplier] = useState<Supplier | null>(null);
    const [comboboxOpen, setComboboxOpen] = useState(false);

    const getDateLocale = () => {
        switch (locale) {
            case 'es': return es;
            case 'en': return enUS;
            default: return ca;
        }
    };
    /**
     * 'useEffect' per inicialitzar o resetejar l'estat del diàleg cada cop que s'obre.
     * Si rep 'initialData', carrega les dades per a edició. Si no, prepara un formulari buit.
     */
    useEffect(() => {
        if (isOpen) {
            const expense = initialData ? { ...initialData } : getInitialExpenseState();
            setCurrentExpense(expense);
            if (initialData?.supplier_id) {
                setSelectedSupplier(suppliers.find(s => s.id === initialData.supplier_id) || null);
            } else {
                setSelectedSupplier(null);
            }
        }
    }, [initialData, isOpen, suppliers]);
    /**
         * 'useEffect' per recalcular automàticament els totals (subtotal, impostos, total)
         * cada cop que canvien els conceptes, el percentatge d'IVA o el descompte.
         */
    useEffect(() => {
        const items = currentExpense.expense_items || [];
        const subtotal = items.reduce((acc, item) => acc + (Number(item.quantity || 0) * Number(item.unit_price || 0)), 0);
        const discount = Number(currentExpense.discount_amount) || 0;
        const taxRate = currentExpense.tax_rate || 21;
        const baseImposable = subtotal - discount;
        const taxAmount = baseImposable * (taxRate / 100);
        const totalAmount = baseImposable + taxAmount;
        setCurrentExpense(prev => ({ ...prev, subtotal, tax_amount: taxAmount, total_amount: totalAmount }));
    }, [currentExpense.expense_items, currentExpense.tax_rate, currentExpense.discount_amount]);
    // Funcions per a la gestió dinàmica de les línies de concepte.
    const handleItemChange = (index: number, field: keyof ExpenseItem, value: string | number) => {
        const updatedItems = [...currentExpense.expense_items];
        // @ts-expect-error: La propietat 'form' existeix a l'event, però el tipus no la inclou.
        updatedItems[index][field] = value;
        setCurrentExpense(prev => ({ ...prev, expense_items: updatedItems }));
    };
    const addItem = () => setCurrentExpense(prev => ({ ...prev, expense_items: [...prev.expense_items, { description: '', quantity: 1, unit_price: 0 }] }));
    const removeItem = (index: number) => setCurrentExpense(prev => ({ ...prev, expense_items: prev.expense_items.filter((_, i) => i !== index) }));
    /**
         * Gestiona la pujada d'un arxiu (factura/tiquet) per a processament OCR amb IA.
         * Crida la Server Action 'processOcrAction' i actualitza el formulari amb les dades extretes.
         */
    const handleOcrUpload = (file: File | undefined) => {
        if (!file) return;
        const formData = new FormData();
        formData.append('file', file);

        startOcrTransition(async () => {
            const { data, error } = await processOcrAction(formData);

            if (error) {
                toast.error(t('ocrError'), { description: error.message });
            } else if (data) {
                // Garantim tipus correcte
                const newItems: ExpenseItem[] = Array.isArray(data.expense_items)
                    ? data.expense_items.map(item => ({
                        description: String(item.description || ''),
                        quantity: Number(item.quantity || 1),
                        unit_price: Number(item.unit_price || 0),
                    }))
                    : [{ description: '', quantity: 1, unit_price: 0 }];

                setCurrentExpense(prev => ({
                    ...prev,
                    ...data,
                    expense_items: newItems,
                    expense_date: data.issue_date && typeof data.issue_date === 'string'
                        ? new Date(data.issue_date).toISOString()
                        : prev.expense_date,
                }));

                toast.success(t('dataExtracted'), { description: t('reviewForm') });
            } else {
                toast.error(t('extractError'));
            }
        });



    };
    /**
         * Gestiona la pujada manual d'un arxiu adjunt a una despesa ja existent.
         */
    const handleAttachmentUpload = (file: File | undefined) => {
        if (!file || !initialData?.id) return;
        const formData = new FormData();
        formData.append('file', file);

        startUploadTransition(async () => {
            const { error } = await uploadAttachmentAction(initialData.id, formData);
            if (error) {
                toast.error(t('uploadErrorTitle'), { description: error.message });
            } else {
                toast.success(t('uploadSuccessTitle'), { description: t('uploadSuccessDescription') });
                window.location.reload();
            }
        });
    };
    /**
         * Gestiona el desat final de la despesa (creació o actualització).
         * Crida la Server Action 'saveExpenseAction'.
         */
    const handleSave = () => {
        startSaveTransition(async () => {

            // ✅ AQUEST ÉS EL NOU CODI, A PROVA DE LINTERS ESTRICTES
            // 1. Creem una còpia completa de l'objecte de l'estat.
            const dataToSend = { ...currentExpense };

            // 2. Esborrem manualment les propietats que no existeixen a la taula 'expenses'.
            delete dataToSend.expense_attachments;
            delete dataToSend.suppliers;

            console.log("Enviant aquest objecte DEFINITIVAMENT NET al servidor:", dataToSend);

            // Passem només les dades netes a l'acció.
            const { error } = await saveExpenseAction(dataToSend, initialData?.id || null);

            if (error) {
                toast.error(t('saveErrorTitle'), { description: error.message });
            } else {
                toast.success(t('saveSuccessTitle'), { description: t('saveSuccessDescription') });
                setIsOpen(false);
                window.location.reload();
            }
        });
    };

    return (
        <Dialog open={isOpen} onOpenChange={setIsOpen}>
            {/* ✅ CORRECCIÓ: DialogContent ja és adaptable per defecte. */}
            <DialogContent className="max-w-4xl h-[95vh] flex flex-col">
                <DialogHeader>
                    <DialogTitle className="text-2xl">{initialData ? t('dialogEditTitle') : t('dialogNewTitle')}</DialogTitle>
                    <DialogDescription>{t('dialogDescription')}</DialogDescription>
                </DialogHeader>

                <div className='flex-1 overflow-y-auto pr-4 -mr-6'>
                    <form onSubmit={(e) => { e.preventDefault(); handleSave(); }} className="space-y-6 pt-4">
                        {/* ✅ CORRECCIÓ: Usem 'bg-muted/50' que funciona en ambdós temes. */}
                        <div className='bg-muted/50 p-4 rounded-lg'>
                            <Label htmlFor="ocr-file-dialog" className='flex items-center gap-2 font-bold mb-2 cursor-pointer'>
                                <BrainCircuit className='w-5 h-5 text-primary' /> {t('fillWithAI')}
                            </Label>
                            <Input id="ocr-file-dialog" type="file" accept="image/*,application/pdf" className='text-xs' onChange={(e) => handleOcrUpload(e.target.files?.[0])} disabled={isProcessingOcr} />
                            {isProcessingOcr && <p className='text-xs mt-2 flex items-center gap-2'><Loader2 className='w-4 h-4 animate-spin' />{t('processing')}</p>}
                        </div>

                        <div className="space-y-2">
                            <Label>{t('generalDescription')}</Label>
                            <Input placeholder={t('descriptionPlaceholder')} value={currentExpense.description || ''} onChange={e => setCurrentExpense(p => ({ ...p, description: e.target.value }))} required />
                        </div>


                        <div className='grid md:grid-cols-2 gap-4'>
                            <div className="space-y-2">
                                <Label>{t('supplier')}</Label>
                                <Popover open={comboboxOpen} onOpenChange={setComboboxOpen}>
                                    <PopoverTrigger asChild>
                                        <Button variant="outline" role="combobox" className="w-full justify-between text-left font-normal">{selectedSupplier?.nom || t('selectSupplier')}<ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" /></Button>
                                    </PopoverTrigger>
                                    <PopoverContent className="w-[--radix-popover-trigger-width] p-0 glass-effect">
                                        <Command>
                                            <CommandInput placeholder={t('searchSupplier')} />
                                            <CommandList>
                                                <CommandEmpty>{t('noSupplierFound')}</CommandEmpty>
                                                <CommandGroup>
                                                    {suppliers.map((s) => (<CommandItem key={s.id} value={s.nom} onSelect={() => {
                                                        setSelectedSupplier(s); setCurrentExpense(p =>
                                                            ({ ...p, supplier_id: s.id })); setComboboxOpen(false);
                                                    }}>
                                                        <Check className={cn("mr-2 h-4 w-4", currentExpense.supplier_id === s.id ? "opacity-100" : "opacity-0")} />
                                                        {s.nom}</CommandItem>))}
                                                </CommandGroup>
                                            </CommandList>
                                        </Command>
                                    </PopoverContent>
                                </Popover>
                            </div>
                            <div className="space-y-2"><Label>{t('invoiceNo')}</Label>
                                <Input value={currentExpense.invoice_number || ''} onChange={e => setCurrentExpense(p => ({ ...p, invoice_number: e.target.value }))} /></div>
                            <div className="space-y-2"><Label>{t('expenseDate')}</Label>
                                <Popover><PopoverTrigger asChild>
                                    <Button variant={"outline"} className={cn("w-full justify-start text-left font-normal", !currentExpense.expense_date && "text-muted-foreground")}>
                                        <CalendarIcon className="mr-2 h-4 w-4" />
                                        {currentExpense.expense_date ? format(new Date(currentExpense.expense_date),
                                            "PPP", { locale: getDateLocale() }) : <span>{t('pickDate')}</span>}
                                    </Button></PopoverTrigger><PopoverContent className="w-auto p-0">
                                        <Calendar mode="single" selected={currentExpense.expense_date ? new Date(currentExpense.expense_date) : undefined} onSelect={(d) =>
                                            setCurrentExpense(p => ({ ...p, expense_date: d?.toISOString() || "" }))} /></PopoverContent></Popover></div>
                            <div className="space-y-2"><Label>{t('category')}</Label>
                                <Input placeholder={t('categoryPlaceholder')} value={currentExpense.category || ''} onChange={e =>
                                    setCurrentExpense(p => ({ ...p, category: e.target.value }))} /></div>
                        </div>

                        <div className='space-y-2'>
                            <Label className='font-bold'>{t('items')}</Label>
                            <div className="border rounded-lg overflow-hidden">
                                <Table>
                                    <TableHeader>
                                        {/* ASSEGURA'T QUE NO HI HA ESPAIS NI SALTS DE LÍNIA AQUÍ FORA */}
                                        <TableRow>
                                            {/* NI AQUÍ DINS, ENTRE EL TABLE ROW I EL PRIMER TABLE HEAD */}
                                            <TableHead className='w-2/4'>{t('itemDescription')}</TableHead>
                                            <TableHead>{t('itemQuantity')}</TableHead>
                                            <TableHead>{t('itemUnitPrice')}</TableHead>
                                            <TableHead className="text-right">{t('itemTotal')}</TableHead>
                                            <TableHead className="w-[50px]">{/* Cel·la per al botó */}</TableHead>
                                        </TableRow>
                                        {/* NI AQUÍ */}
                                    </TableHeader>
                                    <TableBody>
                                        {(currentExpense.expense_items || []).map((item, index) => (
                                            // LA MATEIXA REGLA S'APLICA AQUÍ
                                            <TableRow key={index}>
                                                <TableCell>
                                                    <Input
                                                        value={item.description || ''}
                                                        onChange={e => handleItemChange(index, 'description', e.target.value)}
                                                        placeholder={t('descriptionPlaceholder')}
                                                    />
                                                </TableCell>
                                                <TableCell>
                                                    <Input
                                                        type="number"
                                                        value={item.quantity}
                                                        onChange={e => handleItemChange(index, 'quantity', parseFloat(e.target.value) || 0)}
                                                        className="w-20"
                                                    />
                                                </TableCell>
                                                <TableCell>
                                                    <Input
                                                        type="number"
                                                        step="0.01"
                                                        value={item.unit_price}
                                                        onChange={e => handleItemChange(index, 'unit_price', parseFloat(e.target.value) || 0)}
                                                        className="w-24"
                                                    />
                                                </TableCell>
                                                <TableCell className='text-right font-mono'>
                                                    €{((item.quantity || 0) * (item.unit_price || 0)).toFixed(2)}
                                                </TableCell>
                                                <TableCell>
                                                    <Button type="button" variant="ghost" size="icon" onClick={() => removeItem(index)}>
                                                        <Trash2 className="w-4 h-4 text-destructive" />
                                                    </Button>
                                                </TableCell>
                                            </TableRow>
                                        ))}
                                    </TableBody>
                                </Table>
                            </div>
                            <Button type="button" variant="outline" size="sm" onClick={addItem} className='mt-2'>
                                <Plus className='w-4 h-4 mr-2' />{t('addItem')}
                            </Button>
                        </div>

                        <div className='grid md:grid-cols-2 gap-8'>
                            <div className='space-y-2'>
                                <Label>{t('notes')}</Label>
                                <Textarea value={currentExpense.notes || ''} onChange={e => setCurrentExpense(p => ({ ...p, notes: e.target.value }))} rows={5} />
                            </div>
                            <div className='space-y-4 bg-muted p-4 rounded-lg'>
                                <div className='flex justify-between items-center text-sm'>
                                    <p className="text-muted-foreground">{t('subtotal')}</p>
                                    <p className='font-mono'>€{(currentExpense.subtotal || 0).toFixed(2)}</p></div>
                                <div className='flex justify-between items-center text-sm text-orange-400'>
                                    <Label htmlFor="discount-input-expense" className="text-orange-400">{t('discount')}
                                    </Label><div className="flex items-center gap-2"><span className="font-mono">-€</span>
                                        <Input id="discount-input-expense" type="number" step="0.01" value={currentExpense.discount_amount || ''}
                                            onChange={e => setCurrentExpense(p =>
                                                ({ ...p, discount_amount: parseFloat(e.target.value) || 0 }))}
                                            className="w-24 h-8 font-mono text-right" placeholder="0.00" /></div></div>
                                <div className='flex justify-between items-center text-sm pt-2 border-t border-white/10'>
                                    <p className="font-semibold">{t('taxBase')}</p>
                                    <p className='font-mono font-semibold'>€{((currentExpense.subtotal || 0) - (currentExpense.discount_amount || 0)).toFixed(2)}</p>
                                </div>
                                <div className='flex justify-between items-center text-sm'>
                                    <div className='flex items-center gap-2'><p className="text-muted-foreground">{t('vat',
                                        { taxRate: currentExpense.tax_rate || 21 })}</p>
                                        <Input type="number" value={currentExpense.tax_rate || 21} onChange={e => setCurrentExpense(p =>
                                            ({ ...p, tax_rate: parseFloat(e.target.value) || 0 }))} className='w-16 h-8' /><span>%

                                        </span>
                                    </div>
                                    <p className='font-mono'>€{(currentExpense.tax_amount || 0).toFixed(2)}</p>
                                </div>
                                <div className='flex justify-between items-center text-lg font-bold border-t border-white/20 pt-2 mt-2'><p>{t('total')}</p><p className='font-mono'>€{(currentExpense.total_amount || 0).toFixed(2)}</p></div>
                            </div>
                        </div>

                        {initialData?.id && (
                            <div className='space-y-2'>
                                <Label htmlFor="attachment-file-expense" className='flex items-center gap-2 font-bold'><UploadCloud className='w-5 h-5 text-purple-400' />{t('uploadFiles')}</Label>
                                <Input id="attachment-file-expense" type="file" className='text-xs' onChange={(e) => handleAttachmentUpload(e.target.files?.[0])} disabled={isUploading} />
                                {isUploading && <p className='text-xs mt-2 flex items-center gap-2'><Loader2 className='w-4 h-4 animate-spin' />{t('uploading')}</p>}
                                {(currentExpense.expense_attachments || []).length > 0 && (
                                    <div className='space-y-1 pt-2'>
                                        {currentExpense.expense_attachments.map(att => (
                                            <div key={att.id} className='flex items-center justify-between text-sm bg-muted p-2 rounded'>
                                                <div className='flex items-center gap-2'><Paperclip className='w-4 h-4' />{att.filename}</div>
                                            </div>
                                        ))}
                                    </div>
                                )}
                            </div>
                        )}
                    </form>
                </div>

                <DialogFooter className="pt-4 border-t border-white/10">
                    <DialogClose asChild><Button type="button" variant="ghost">{t('cancelButton')}</Button></DialogClose>
                    <Button onClick={handleSave} disabled={isSaving}>
                        {isSaving && <Loader2 className='w-4 h-4 animate-spin mr-2' />}
                        {initialData ? t('saveChangesButton') : t('createButton')}
                    </Button>
                </DialogFooter>
            </DialogContent>
        </Dialog>
    );
};



// =================== FILE: src/app/[locale]/(app)/finances/despeses/_components/expenses/ExpenseTable.tsx ===================

"use client";

import React, { FC } from 'react';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Paperclip } from 'lucide-react';
import { format } from "date-fns";

import { type Expense } from '@/types/finances/index';
import { useLocale, useTranslations } from 'next-intl';
import { ca, es, enUS } from "date-fns/locale";

// Definim les propietats que espera el component.
interface ExpenseTableProps {
    expenses: Expense[]; // Llista de despeses a mostrar.
    onViewDetails: (expense: Expense) => void; // Funció a executar en clicar una fila.
}

/**
 * Component presentacional per mostrar la llista de despeses en format de taula.
 * Cada fila és clicable per obrir el calaix de detalls.
 */
export const ExpenseTable: FC<ExpenseTableProps> = ({ expenses, onViewDetails }) => {
    const t = useTranslations('Expenses');
    const locale = useLocale();

    const getDateLocale = () => {
        switch (locale) {
            case 'es': return es;
            case 'en': return enUS;
            default: return ca;
        }
    };
    return (
        <div className="glass-effect rounded-xl overflow-hidden">
            <Table>
                <TableHeader>
                    <TableRow className="border-b-white/10 hover:bg-white/5">
                        <TableHead>{t('tableHeaderSupplier')}</TableHead>
                        <TableHead>{t('tableHeaderInvoiceNo')}</TableHead>
                        <TableHead>{t('tableHeaderDate')}</TableHead>
                        <TableHead>{t('tableHeaderCategory')}</TableHead>
                        <TableHead className="text-right">{t('tableHeaderAmount')}</TableHead>
                    </TableRow>
                </TableHeader>
                <TableBody>
                    {expenses.length > 0 ? expenses.map(expense => (
                        // Fem que tota la fila sigui clicable per a una millor UX.
                        <TableRow key={expense.id} className="cursor-pointer hover:bg-white/10 border-b-white/10" onClick={() => onViewDetails(expense)}>
                            <TableCell className="font-medium flex items-center gap-2">
                                {/* Mostra el nom del proveïdor o la descripció general si no n'hi ha. */}
                                {expense.suppliers?.nom || expense.description || 'N/A'}
                                {/* Mostra una icona de clip si la despesa té arxius adjunts. */}
                                {expense.expense_attachments && expense.expense_attachments.length > 0 && (
                                    <Paperclip className="h-4 w-4 text-muted-foreground" />
                                )}
                            </TableCell>
                            <TableCell className="font-mono text-muted-foreground">{expense.invoice_number || '-'}</TableCell>
                            <TableCell>{expense.expense_date ? format(new Date(expense.expense_date), "dd MMM, yyyy", { locale: getDateLocale() }) : '-'}</TableCell>
                            <TableCell><span className="bg-white/10 px-2 py-1 text-xs rounded-full">{expense.category || '-'}</span></TableCell>
                            <TableCell className="text-right font-mono">- €{(expense.total_amount || 0).toLocaleString('es-ES', { minimumFractionDigits: 2 })}</TableCell>
                        </TableRow>
                    )) : (
                        // Fila per a l'estat buit, que ocupa totes les columnes.
                        <TableRow>
                            <TableCell colSpan={5} className="h-24 text-center text-muted-foreground">
                                {t('emptyState')}
                            </TableCell>
                        </TableRow>
                    )}
                </TableBody>
            </Table>
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/finances/despeses/_components/expenses-client.tsx ===================

/**
 * @file expenses-client.tsx
 * @summary Aquest fitxer conté el component de client que gestiona tota la interfície interactiva
 * de la pàgina de Gestió de Despeses. S'encarrega d'orquestrar la visualització de la taula,
 * l'obertura del diàleg per crear/editar despeses i del calaix lateral per veure'n els detalls.
 */

"use client";

import React, { useState, useOptimistic} from 'react';
import { motion } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { Plus } from 'lucide-react';
import { ExpenseDialog } from '@/app/[locale]/(app)/finances/despeses/_components/expenses/ExpenseDialog';
import { ExpenseTable } from '@/app/[locale]/(app)/finances/despeses/_components/expenses/ExpenseTable';
import { ExpenseDetailDrawer } from '@/app/[locale]/(app)/finances/despeses/_components/expenses/ExpenseDetailDrawer';
import { type Expense, type Supplier } from '@/types/finances/index';
import { createClient } from '@/lib/supabase/client';
import { useTranslations } from 'next-intl';

interface ExpensesClientProps {
  initialExpenses: Expense[];
  initialSuppliers: Supplier[];
}

export function ExpensesClient({ initialExpenses, initialSuppliers }: ExpensesClientProps) {
  const t = useTranslations('Expenses');


  // NOU: L'estat optimista.
  // 'state' és el valor base (les despeses del servidor).
  // 'action' és la nova despesa que afegim "optimísticament".
  const [optimisticExpenses] = useOptimistic<Expense[], Expense>(
    initialExpenses,
    (state, newExpense) => {
      // Aquesta funció defineix com canvia l'estat.
      // Si la despesa ja existeix, la reemplacem. Si no, l'afegim al principi.
      const existingIndex = state.findIndex(e => e.id === newExpense.id);
      if (existingIndex !== -1) {
        state[existingIndex] = newExpense;
        return [...state];
      }
      return [newExpense, ...state];
    }
  );
  // Gestió de l'estat del component.
  const [isFormDialogOpen, setIsFormDialogOpen] = useState(false); // Controla la visibilitat del diàleg de creació/edició.
  const [isDetailDrawerOpen, setIsDetailDrawerOpen] = useState(false); // Controla la visibilitat del calaix de detalls.
  const [selectedExpense, setSelectedExpense] = useState<Expense | null>(null); // Emmagatzema la despesa seleccionada.
  const supabase = createClient()
    ;

  /**
   * @summary Gestor per obrir el diàleg per crear una nova despesa.
   */
  const handleCreateNew = () => {
    setSelectedExpense(null); // Assegurem que no hi ha dades inicials.
    setIsFormDialogOpen(true);
  };

  /**
   * @summary Gestor per veure els detalls complets d'una despesa.
   * Aquesta funció fa una nova consulta al client per obtenir totes les dades relacionades
   * (ítems, adjunts) abans d'obrir el calaix.
   */
  const handleViewDetails = async (expense: Expense) => {
    const { data: fullExpense } = await supabase
      .from('expenses')
      .select('*, suppliers(*), expense_items(*), expense_attachments(*)')
      .eq('id', expense.id)
      .single();
    setSelectedExpense(fullExpense || expense);
    setIsDetailDrawerOpen(true);
  };

  /**
   * @summary Gestor per passar del calaix de detalls al diàleg d'edició.
   */
  const handleEditFromDrawer = (expense: Expense) => {
    setIsDetailDrawerOpen(false);
    setSelectedExpense(expense);
    setIsFormDialogOpen(true);
  };
  // ✅ NOU: AFEGEIX AQUESTA FUNCIÓ
  // Aquesta funció s'executarà quan el diàleg ens notifiqui que ha desat amb èxit.
  const handleSaveSuccess = () => {
    setIsFormDialogOpen(false); // Simplement tanquem el diàleg
    // La taula s'actualitzarà sola gràcies a 'revalidatePath' de la Server Action
  };
  /**
    * NOU: Funció que s'executa quan el diàleg de formulari desa les dades.
    * Aquesta funció serà passada com a prop a `ExpenseDialog`.
    */
  

  return (
    <>
      <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }}>
        {/* Capçalera de la pàgina amb títol i botó d'acció. */}
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-3xl font-bold">{t('title')}</h1>
          <Button onClick={handleCreateNew}>
            <Plus className="w-4 h-4 mr-2" /> {t('newButton')}
          </Button>
        </div>

        {/* La taula de despeses rep les dades inicials i una funció per gestionar el clic en una fila. */}
        <ExpenseTable expenses={optimisticExpenses} onViewDetails={handleViewDetails} />
      </motion.div>

      {/* Els components de diàleg i calaix es mantenen fora del flux principal per a un millor rendiment
          i per gestionar la seva visibilitat a través de l'estat del component pare. */}
      <ExpenseDetailDrawer
        expense={selectedExpense}
        isOpen={isDetailDrawerOpen}
        onClose={() => setIsDetailDrawerOpen(false)}
        onEdit={handleEditFromDrawer}
      />

      <ExpenseDialog
        isOpen={isFormDialogOpen}
        setIsOpen={setIsFormDialogOpen}
        initialData={selectedExpense}
        suppliers={initialSuppliers}
        onSaveSuccess={handleSaveSuccess} // <-- Passem la nova funció

      />
    </>
  );
}


// =================== FILE: src/app/[locale]/(app)/finances/despeses/_components/ExpensesData.tsx ===================

// /app/finances/despeses/_components/ExpensesData.tsx

import { createClient } from '@/lib/supabase/server';
import { cookies } from 'next/headers';
import { redirect } from 'next/navigation';
import { ExpensesClient } from './expenses-client';

export async function ExpensesData() {
    const supabase = createClient(cookies());
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) redirect('/login');

    // --- LÒGICA D'EQUIP ACTIU DEFINITIVA ---
    const { data: claimsString, error: claimsError } = await supabase.rpc('get_current_jwt_claims');
    if (claimsError || !claimsString) {
        redirect('/settings/team');
    }
    const claims = JSON.parse(claimsString);
    if (!claims.app_metadata?.active_team_id) {
        redirect('/settings/team');
    }
    // ------------------------------------

    // Les consultes ara són segures i no necessiten filtres manuals.
    // La RLS filtrarà 'expenses' i 'suppliers' automàticament.
    const [expensesRes, suppliersRes] = await Promise.all([
        supabase.from('expenses').select('*, suppliers(nom), expense_attachments(id)').order('expense_date', { ascending: false }),
        supabase.from('suppliers').select('id, nom').order('nom')
    ]);
    // CANVI: En lloc d'un console.error, llancem un error de veritat.
    if (expensesRes.error || suppliersRes.error) {
        const error = expensesRes.error || suppliersRes.error;
        console.error("Error en carregar les dades de despeses:", error);
        // Això aturarà el renderitzat i farà que Next.js busqui el fitxer error.tsx més proper.
        throw new Error("No s'han pogut carregar les dades de la pàgina de despeses. Si us plau, intenta-ho de nou més tard.");
    }

    return <ExpensesClient initialExpenses={expensesRes.data || []} initialSuppliers={suppliersRes.data || []} />;
}

// =================== FILE: src/app/[locale]/(app)/finances/despeses/_components/ExpensesSkeleton.tsx ===================

/**
 * @file ExpensesSkeleton.tsx
 * @summary Muestra un esqueleto de carga para la página de Gastos.
 */
"use client";

import React from 'react';
import { Skeleton } from '@/components/ui/skeleton';

export const ExpensesSkeleton: React.FC = () => (
    <div className="space-y-8 animate-pulse">
        {/* Esqueleto para la cabecera */}
        <div className="flex justify-between items-center">
            <Skeleton className="h-9 w-1/3" />
            <Skeleton className="h-10 w-36" />
        </div>
        {/* Esqueleto para la tabla */}
        <div className="space-y-2">
            <Skeleton className="h-12 w-full" />
            <Skeleton className="h-16 w-full" />
            <Skeleton className="h-16 w-full" />
            <Skeleton className="h-16 w-full" />
            <Skeleton className="h-16 w-full" />
        </div>
    </div>
);

// =================== FILE: src/app/[locale]/(app)/finances/facturacio/actions.ts ===================

"use server";


import { revalidatePath } from "next/cache";
import { validateUserSession } from "@/lib/supabase/session"; // ✅ 1. Importem la funció


// El tipus de dades que rebem del formulari del client
type InvoiceItemData = {
    description: string | null;
    quantity: number | null;
    unit_price: number | null;
    product_id?: string | null;
    tax_rate?: number | null;
};

export type InvoiceFormData = {
    id?: string | null;
    contact_id: string;
    issue_date: string;
    due_date: string | null;
    status: 'Draft';
    subtotal: number;
    tax_amount: number;
    total_amount: number;
    notes: string | null;
    invoice_items: InvoiceItemData[];
};

/**
 * Crea o actualitza una factura. La política RLS de la base de dades
 * s'encarregarà de verificar que l'operació pertany a l'equip actiu.
 */
export async function createOrUpdateInvoiceAction(invoiceData: InvoiceFormData) {
    const session = await validateUserSession();
    if ('error' in session) {
        return { success: false, message: session.error.message };
    }
    const { supabase, user, activeTeamId } = session;

    try {
        const { invoice_items, ...invoiceFields } = invoiceData;

        // Simplement cridem la funció RPC amb les dades.
        // La base de dades s'encarrega de la transacció.
        const { error } = await supabase.rpc('upsert_invoice_with_items', {
            invoice_data: invoiceFields,
            items_data: invoice_items,
            user_id: user.id,
            team_id: activeTeamId
        });

        if (error) throw error;

        revalidatePath('/finances/facturacio');
        return { success: true, message: `Esborrany ${invoiceData.id ? 'actualitzat' : 'creat'} correctament.` };

    } catch (error) {
        console.error("Error a upsert_invoice_with_items:", error);
        const message = error instanceof Error ? error.message : "Error desconegut en desar la factura.";
        return { success: false, message };
    }
}

/**
 * Elimina un esborrany de factura. La RLS s'encarregarà de la seguretat.
 */
export async function deleteInvoiceAction(invoiceId: string) {
    // 2. Validem la sessió. Aquesta funció ens retorna o la sessió validada o un objecte d'error.
    const session = await validateUserSession();
    if ('error' in session) {
        return { success: false, message: session.error.message };
    }
    const { supabase } = session; // Obtenim el client de supabase validat

    try {
        const { data: existingInvoice } = await supabase
            .from('invoices')
            .select('status')
            .eq('id', invoiceId)
            .single();

        if (existingInvoice && existingInvoice.status !== 'Draft') {
            return { success: false, message: "Error: No es pot eliminar una factura que ja ha estat emesa." };
        }

        const { error } = await supabase.from('invoices').delete().eq('id', invoiceId);
        if (error) throw error;

        revalidatePath('/finances/facturacio');
        return { success: true, message: "Esborrany eliminat." };
    } catch (error) {
        const message = error instanceof Error ? error.message : "Error desconegut";
        return { success: false, message };
    }
}

/**
 * Emet una factura legal (Veri*factu). La RLS s'encarregarà de la seguretat.
 */
export async function issueInvoiceAction(draftInvoiceId: string) {
    // 2. Validem la sessió. Aquesta funció ens retorna o la sessió validada o un objecte d'error.
    const session = await validateUserSession();
    if ('error' in session) {
        return { success: false, message: session.error.message };
    }
    const { supabase } = session; // Obtenim el client de supabase validat


    // La RLS ja s'haurà assegurat que l'usuari té accés a aquesta factura
    // abans de cridar l'acció, per la qual cosa no cal una doble comprovació aquí.
    try {
        const { data, error } = await supabase.functions.invoke('issue-verifactu-invoice', {
            body: { draft_invoice_id: draftInvoiceId, user_id: user.id },
        });

        if (error) throw (error);

        revalidatePath('/finances/facturacio');
        return { success: true, message: "Factura emesa correctament.", invoice: data };
    } catch (error) {
        const typedError = error as (Error & { context?: { errorMessage?: string } });
        const errorMessage = typedError.context?.errorMessage || typedError.message;
        return { success: false, message: errorMessage };
    }
}

// =================== FILE: src/app/[locale]/(app)/finances/facturacio/page.tsx ===================

// /app/[locale]/(app)/finances/facturacio/page.tsx

import { Suspense } from 'react';
import type { Metadata } from 'next';
import { FacturacioData } from './_components/FacturacioData';
import { FacturacioSkeleton } from './_components/FacturacioSkeleton';

export const metadata: Metadata = {
  title: 'Facturació | Ribot',
};

// Ja no necessita 'searchParams'
export default function FacturacioPage() {
  return (
    <Suspense fallback={<FacturacioSkeleton />}>
      {/* Ja no passem cap prop */}
      <FacturacioData />
    </Suspense>
  );
}

// =================== FILE: src/app/[locale]/(app)/finances/facturacio/_components/FacturacioClient.tsx ===================

// /app/finances/facturacio/_components/FacturacioClient.tsx
"use client";

import React, { useState, useTransition, useMemo } from 'react';
// ✅ 1. Importem els hooks de Next.js per a la navegació
import { useRouter, usePathname, useSearchParams } from 'next/navigation';
import { motion } from 'framer-motion';
import { toast } from 'sonner';
import { Button } from '@/components/ui/button';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog';
import { Loader2, Plus, Edit, Trash2, ShieldCheck, ArrowUpDown } from 'lucide-react'; // ✅ Afegim ArrowUpDown
import { format } from "date-fns";
import { ca, es, enUS } from "date-fns/locale";
import type { Invoice, Contact } from '@/types/finances/index';
import { deleteInvoiceAction, issueInvoiceAction } from '../actions';
import { InvoiceDialog } from './InvoiceDialog';
import { useTranslations, useLocale } from 'next-intl';
import { INVOICE_STATUS_MAP } from '@/types/finances/index';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import type { Product } from '@/types/crm/products';

export function FacturacioClient({ initialInvoices, initialContacts, initialProducts }: {
    initialInvoices: Invoice[];
    initialContacts: Contact[];
    initialProducts: Product[]; // ✅ AFEGEIX AQUESTA LÍNIA

}) {
    // ✅ 2. Inicialitzem els hooks de navegació
    const router = useRouter();
    const pathname = usePathname();
    const searchParams = useSearchParams();

    const [isSaving, startSaveTransition] = useTransition();
    const t = useTranslations('InvoicingPage');
    const locale = useLocale();
    const dateLocale = { ca, es, en: enUS }[locale] || ca;

    const [isFormOpen, setIsFormOpen] = useState(false);
    const [editingInvoice, setEditingInvoice] = useState<Partial<Invoice> | null>(null);
    const [invoiceToDelete, setInvoiceToDelete] = useState<Invoice | null>(null);
    const [invoiceToIssue, setInvoiceToIssue] = useState<Invoice | null>(null);
    // ✅ TOTA LA LÒGICA DE FILTRATGE I ORDENACIÓ PASSA AQUÍ
    const filteredAndSortedInvoices = useMemo(() => {
        let result: Invoice[] = [...initialInvoices];

        // 1. Filtrar
        const status = searchParams.get('status');
        if (status) {
            result = result.filter(invoice => invoice.status === status);
        }

        // 2. Ordenar
        const sortBy = searchParams.get('sortBy');
        const order = searchParams.get('order');

        if (sortBy && order) {
            result.sort((a, b) => {
                const aValue = sortBy.includes('.') ? a.contacts?.nom : a[sortBy as keyof Invoice];
                const bValue = sortBy.includes('.') ? b.contacts?.nom : b[sortBy as keyof Invoice];

                if (aValue === null || aValue === undefined) return 1;
                if (bValue === null || bValue === undefined) return -1;

                if (aValue < bValue) return order === 'asc' ? -1 : 1;
                if (aValue > bValue) return order === 'asc' ? 1 : -1;
                return 0;
            });
        }

        return result;
    }, [initialInvoices, searchParams]);

    console.log("[CLIENT] Component FacturacioClient renderitzat amb", initialInvoices.length, "factures inicials.");

    // ✅ 3. Funció per actualitzar la URL amb nous paràmetres
    const updateSearchParams = (key: string, value: string | null) => {
        const params = new URLSearchParams(searchParams.toString());
        if (value) {
            params.set(key, value);
        } else {
            params.delete(key);
        }
        router.push(`${pathname}?${params.toString()}`);
    };

    // ✅ 4. Funció per gestionar l'ordenació
    // ✅ LÒGICA D'ORDENACIÓ REESCRITA
    const handleSort = (column: string) => {
        const params = new URLSearchParams(searchParams.toString());
        const currentSortBy = params.get('sortBy');
        const currentOrder = params.get('order');

        if (currentSortBy === column && currentOrder === 'desc') {
            // Si ja està ordenat per aquesta columna de forma descendent, ho pugem a ascendent.
            params.set('order', 'asc');
        } else if (currentSortBy === column && currentOrder === 'asc') {
            // Si ja era ascendent, eliminem l'ordenació per tornar a la per defecte.
            params.delete('sortBy');
            params.delete('order');
        } else {
            // Si no estava ordenat per aquesta columna, ho posem descendent per defecte.
            params.set('sortBy', column);
            params.set('order', 'desc');
        }

        router.push(`${pathname}?${params.toString()}`);
    };

    // ✅ 5. Component per a les capçaleres de la taula que permeten ordenar
    // ✅ CAPÇALERA DE TAULA REESCRITA
    const SortableHeader = ({ column, label }: { column: string, label: string }) => {
        const sortBy = searchParams.get('sortBy');
        const order = searchParams.get('order');
        const isActive = sortBy === column;

        return (
            <TableHead onClick={() => handleSort(column)} className="cursor-pointer hover:bg-muted/50 transition-colors">
                <div className="flex items-center gap-2">
                    {label}
                    {isActive ? (
                        <span className="text-foreground text-xs">{order === 'asc' ? '▲' : '▼'}</span>
                    ) : (
                        <ArrowUpDown className="w-4 h-4 text-muted-foreground/30" />
                    )}
                </div>
            </TableHead>
        );
    };


    /**
     * Obre el diàleg per crear un nou esborrany o editar-ne un d'existent.
     * Només permet editar factures que estiguin en estat 'Draft'.
     */
    const handleOpenForm = (invoice: Invoice | null = null) => {
        if (invoice && invoice.status !== 'Draft') {
            toast.info(t('toast.notAllowed'), { description: t('toast.notAllowedDesc') });
            return;
        }
        // Si estem creant una nova factura, proporcionem valors per defecte.
        setEditingInvoice(invoice ? { ...invoice } : {
            status: 'Draft',
            issue_date: new Date().toISOString(),
            due_date: new Date(new Date().setDate(new Date().getDate() + 30)).toISOString(),
            invoice_items: [{ description: '', quantity: 1, unit_price: 0 }]
        });
        setIsFormOpen(true);
    };

    /**
     * Funció de callback que s'executa quan el diàleg d'edició es desa amb èxit.
     * Tanca el diàleg i refresca les dades de la pàgina.
     */
    const handleSaveSuccess = () => {
        setIsFormOpen(false);
        setEditingInvoice(null);
        router.refresh(); // Crida a Next.js per tornar a carregar les dades del servidor.
    };

    /**
     * Crida la Server Action per emetre una factura legal (Veri*factu).
     */
    const handleIssueInvoice = () => {
        if (!invoiceToIssue) return;
        startSaveTransition(async () => {
            const result = await issueInvoiceAction(invoiceToIssue.id);
            if (result?.success) {
                toast.success(t('toast.issueSuccess'), { description: t('toast.issueSuccessDesc', { invoiceNumber: result.invoice?.invoice_number }) });
                setInvoiceToIssue(null);
                router.refresh();
            } else {
                if (result) {
                    toast.error(t('toast.issueError'), { description: result.message });
                }
            }
        });
    };

    /**
     * Crida la Server Action per eliminar un esborrany de factura.
     */
    const handleDelete = () => {
        if (!invoiceToDelete) return;
        startSaveTransition(async () => {
            const result = await deleteInvoiceAction(invoiceToDelete.id);
            if (result.success) {
                toast.success(t('toast.deleteSuccess'), { description: result.message });
                setInvoiceToDelete(null);
                router.refresh();
            } else {
                toast.error(t('toast.deleteError'), { description: result.message });
            }
        });
    };

    /**
     * Funció utilitària per retornar classes de CSS segons l'estat de la factura,
     * permetent acolorir les etiquetes d'estat a la taula.
     */


    return (
        <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }}>
            {/* ✅ Contenidor principal per al títol i les accions */}
            <div className="flex justify-between items-center mb-8">
                <h1 className="text-3xl font-bold">{t('title')}</h1>

                {/* ✅ Contenidor per als controls de la dreta (filtre i botó) */}
                <div className="flex items-center gap-4">

                    {/* ✨ El nou filtre amb disseny millorat ✨ */}
                    <Select
                        onValueChange={(value) => updateSearchParams('status', value === 'all' ? null : value)}
                        defaultValue={searchParams.get('status') || 'all'}
                    >
                        <SelectTrigger className="w-[180px]">
                            <SelectValue placeholder={t('filterByStatus')} />
                        </SelectTrigger>
                        <SelectContent>
                            <SelectItem value="all">{t('allStatuses')}</SelectItem>
                            {INVOICE_STATUS_MAP.map(status => (
                                <SelectItem key={status.dbValue} value={status.dbValue}>
                                    {t(`statuses.${status.key}`)}
                                </SelectItem>
                            ))}
                        </SelectContent>
                    </Select>

                    <Button onClick={() => handleOpenForm()}>
                        <Plus className="w-4 h-4 mr-2" />
                        {t('newDraftButton')}
                    </Button>
                </div>
            </div>

            <div className="glass-card overflow-hidden">
                <Table>
                    {/* ✅ 7. Utilitzem el nou component SortableHeader */}
                    <TableHeader><TableRow>
                        <SortableHeader column="invoice_number" label={t('table.invoiceNo')} />
                        <SortableHeader column="contacts.nom" label={t('table.client')} />
                        <SortableHeader column="issue_date" label={t('table.issueDate')} />
                        <SortableHeader column="total_amount" label={t('table.amount')} />
                        <SortableHeader column="status" label={t('table.status')} />
                        <TableHead className="text-right">{t('table.actions')}</TableHead>
                    </TableRow></TableHeader>
                    <TableBody>
                        {/* La resta del teu codi de la taula ja era correcte, perquè feia .map sobre initialInvoices */}
                        {filteredAndSortedInvoices.length > 0 ? (
                            filteredAndSortedInvoices.map(invoice => {
                                const statusInfo = INVOICE_STATUS_MAP.find(s => s.dbValue === invoice.status);
                                return (
                                    <TableRow key={invoice.id}>
                                        <TableCell className="font-medium">{invoice.invoice_number || t('statuses.draft')}</TableCell>
                                        <TableCell>{invoice.contacts?.nom || t('noClient')}</TableCell>
                                        <TableCell>{format(new Date(invoice.issue_date), "dd/MM/yyyy", { locale: dateLocale })}</TableCell>
                                        <TableCell>€{(invoice.total_amount || 0).toLocaleString(locale, { minimumFractionDigits: 2 })}</TableCell>
                                        <TableCell>
                                            <span className={`px-2 py-1 text-xs font-semibold rounded-full ${statusInfo?.colorClass || ''}`}>
                                                {statusInfo ? t(`statuses.${statusInfo.key}`) : (invoice.status || t('statuses.unknown'))}
                                            </span>
                                        </TableCell>
                                        <TableCell className="text-right">
                                            {/* ✅ CORRECCIÓ: Estructura neta per a la cel·la d'accions */}
                                            {invoice.status === 'Draft' ? (
                                                <div className="flex justify-end items-center gap-1">
                                                    <Button size="sm" variant="outline" className="bg-green-500/10 hover:bg-green-500/20 text-green-400 border-green-500/30" onClick={() => setInvoiceToIssue(invoice)}>
                                                        <ShieldCheck className="w-4 h-4 mr-2" />{t('issueButton')}
                                                    </Button>
                                                    <Button size="icon" variant="ghost" onClick={() => handleOpenForm(invoice)}>
                                                        <Edit className="w-4 h-4" />
                                                    </Button>
                                                    <Button size="icon" variant="ghost" onClick={() => setInvoiceToDelete(invoice)}>
                                                        <Trash2 className="w-4 h-4 text-destructive" />
                                                    </Button>
                                                </div>
                                            ) : (
                                                // Per a factures no editables, podem mostrar un botó de "Veure" o simplement res.
                                                // Deixar la cel·la buida és segur.
                                                null
                                            )}
                                        </TableCell>
                                    </TableRow>
                                )
                            })
                        ) : (
                            <TableRow><TableCell colSpan={6} className="h-24 text-center">{t('emptyState')}</TableCell></TableRow>
                        )}
                    </TableBody>
                </Table>
            </div>

            {isFormOpen && editingInvoice && (
                <InvoiceDialog
                    isOpen={isFormOpen}
                    onClose={() => setIsFormOpen(false)}
                    contacts={initialContacts}
                    products={initialProducts} // ✅ Passem la nova prop
                    initialInvoice={editingInvoice}
                    onSaveSuccess={handleSaveSuccess}
                />
            )}
            <AlertDialog open={!!invoiceToDelete} onOpenChange={() => setInvoiceToDelete(null)}>
                <AlertDialogContent>
                    <AlertDialogHeader><AlertDialogTitle>{t('deleteDialog.title')}</AlertDialogTitle><AlertDialogDescription>{t('deleteDialog.description')}</AlertDialogDescription></AlertDialogHeader>
                    <AlertDialogFooter><AlertDialogCancel>{t('deleteDialog.cancelButton')}</AlertDialogCancel><AlertDialogAction className="bg-destructive..." onClick={handleDelete}>{t('deleteDialog.confirmButton')}</AlertDialogAction></AlertDialogFooter>
                </AlertDialogContent>
            </AlertDialog>

            <AlertDialog open={!!invoiceToIssue} onOpenChange={() => setInvoiceToIssue(null)}>
                <AlertDialogContent>
                    <AlertDialogHeader><AlertDialogTitle>{t('issueDialog.title')}</AlertDialogTitle><AlertDialogDescription>{t('issueDialog.description')}</AlertDialogDescription></AlertDialogHeader>
                    <AlertDialogFooter><AlertDialogCancel disabled={isSaving}>{t('deleteDialog.cancelButton')}</AlertDialogCancel><AlertDialogAction className="bg-purple-600..." onClick={handleIssueInvoice} disabled={isSaving}>
                        {isSaving && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                        {t('issueDialog.confirmButton')}
                    </AlertDialogAction></AlertDialogFooter>
                </AlertDialogContent>
            </AlertDialog>
        </motion.div>
    );
}

// =================== FILE: src/app/[locale]/(app)/finances/facturacio/_components/FacturacioData.tsx ===================

// /app/[locale]/finances/facturacio/_components/FacturacioData.tsx

import { createClient } from '@/lib/supabase/server';
import { cookies } from 'next/headers';
import { FacturacioClient } from './FacturacioClient';
import type { Invoice, Contact } from '../types'; 
import type { Product } from '@/types/crm/products'; 



export async function FacturacioData() {
    const timestamp = new Date().toLocaleTimeString();
    console.log(`\n--- [SERVER] INICI FacturacioData @ ${timestamp} ---`);

    const supabase = createClient(cookies());
    const { data: { user } } = await supabase.auth.getUser();
    
    if (!user) {
        console.error(`[SERVER_ERROR @ ${timestamp}] Usuari no trobat. S'atura l'execució.`);
        return null;
    }
    console.log(`[SERVER @ ${timestamp}] PAS 1: Usuari autenticat: ${user.id}`);

    const { data: claimsString, error: claimsError } = await supabase.rpc('get_current_jwt_claims');

    if (claimsError || !claimsString) {
        console.error(`[SERVER_ERROR @ ${timestamp}] No s'ha pogut cridar a get_current_jwt_claims:`, claimsError);
        return <FacturacioClient initialInvoices={[]} initialContacts={[]} initialProducts={[]} />;
    }
    console.log(`[SERVER @ ${timestamp}] PAS 2: Claims rebuts de la BD: ${claimsString}`);

    const claims = JSON.parse(claimsString);
    const trueActiveTeamId = claims.app_metadata?.active_team_id;

    console.log(`[SERVER @ ${timestamp}] PAS 3: Equip actiu (VERITABLE) extret del token: ${trueActiveTeamId}`);
    
    if (!trueActiveTeamId) {
        console.warn(`[SERVER_WARN @ ${timestamp}] L'usuari no té equip actiu. Retornant client buit.`);
        return <FacturacioClient initialInvoices={[]} initialContacts={[]} initialProducts={[]} />;
    }
    
    console.log(`[SERVER @ ${timestamp}] PAS 4: Realitzant consultes per a l'equip ${trueActiveTeamId}...`);

    const [invoicesRes] = await Promise.all([
        supabase.from('invoices').select('*, contacts(id, nom), invoice_items(*)')
    ]);
    
    if (invoicesRes.error) {
        console.error(`[SERVER_ERROR @ ${timestamp}] Error en carregar factures:`, invoicesRes.error);
    }

    const invoices = invoicesRes.data || [];
    console.log(`[SERVER @ ${timestamp}] PAS 5: Dades rebudes de 'invoices'. Nombre de factures: ${invoices.length}`);
    
    if (invoices.length > 0) {
        const receivedTeamIds = [...new Set(invoices.map(inv => inv.team_id))];
        console.log(`[SERVER @ ${timestamp}] DEBUG: Els team_id de les factures rebudes són: ${receivedTeamIds.join(', ')}`);
        if (receivedTeamIds[0] !== trueActiveTeamId) {
            console.error(`🔥🔥🔥 [ERROR CRÍTIC @ ${timestamp}] DESAJUST! S'esperaven factures per a l'equip ${trueActiveTeamId} però s'han rebut per a ${receivedTeamIds[0]}`);
        }
    }

    // Per simplificar, traiem les altres consultes de moment
    const contacts: Contact[] = [];
    const products: Product[] = [];

    console.log(`--- [SERVER] FI FacturacioData @ ${timestamp} ---`);
    
    return <FacturacioClient initialInvoices={invoices} initialContacts={contacts} initialProducts={products} />;
}

// =================== FILE: src/app/[locale]/(app)/finances/facturacio/_components/FacturacioSkeleton.tsx ===================

/**
 * @file FacturacioSkeleton.tsx
 * @summary Muestra un esqueleto de carga para la página de Facturación.
 */
"use client";

import React from 'react';
import { Skeleton } from '@/components/ui/skeleton';

export const FacturacioSkeleton: React.FC = () => (
    <div className="space-y-8 animate-pulse">
        <div className="flex justify-between items-center">
            <Skeleton className="h-9 w-1/3" />
            <Skeleton className="h-10 w-40" />
        </div>
        <div className="space-y-2">
            <Skeleton className="h-12 w-full" />
            <Skeleton className="h-16 w-full" />
            <Skeleton className="h-16 w-full" />
            <Skeleton className="h-16 w-full" />
            <Skeleton className="h-16 w-full" />
        </div>
    </div>
);

// =================== FILE: src/app/[locale]/(app)/finances/facturacio/_components/InvoiceDialog.tsx ===================

"use client";

import React, { useState, useEffect, useTransition } from 'react';
import { toast } from 'sonner';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from "@/components/ui/command";
import { Loader2, Plus, Trash2, Calendar as CalendarIcon, Check, ChevronsUpDown } from 'lucide-react';
import { format } from "date-fns";
import { ca, es, enUS } from "date-fns/locale"; import { cn } from "@/lib/utils/utils";
import { type Invoice, type Contact, type InvoiceItem } from '../types';
import { createOrUpdateInvoiceAction, type InvoiceFormData } from '../actions';
import { useTranslations, useLocale } from 'next-intl';
import type { Product } from '@/types/crm/products';
/**
 * Definim les propietats (props) que el nostre component de diàleg necessita per funcionar.
 */
interface InvoiceDialogProps {
    isOpen: boolean;
    onClose: () => void;
    contacts: Contact[];
    products: Product[];
    initialInvoice: Partial<Invoice>;
    onSaveSuccess: () => void;
}

export function InvoiceDialog({ isOpen, onClose, contacts, products, initialInvoice, onSaveSuccess }: InvoiceDialogProps) {
    const t = useTranslations('InvoicingPage.formDialog');
    const toast_ = useTranslations('InvoicingPage.toast');

    const locale = useLocale();
    const dateLocale = { ca, es, en: enUS }[locale] || ca;

    const [invoice, setInvoice] = useState(initialInvoice);
    const [isSaving, startSaveTransition] = useTransition();
    const [comboboxOpen, setComboboxOpen] = useState(false);
    const [openProductSearch, setOpenProductSearch] = useState<number | null>(null);

    useEffect(() => {
        const items = invoice.invoice_items || [];
        const subtotal = items.reduce((acc, item) => acc + (Number(item.quantity || 1) * Number(item.unit_price || 0)), 0);
        
        const taxAmount = items.reduce((acc, item) => {
            const lineTotal = (Number(item.quantity || 1) * Number(item.unit_price || 0));
            const taxRate = typeof item.tax_rate === 'number' ? item.tax_rate : 0.21; 
            return acc + (lineTotal * taxRate);
        }, 0);

        const totalAmount = subtotal + taxAmount;
        setInvoice(prev => ({ ...prev, subtotal, tax_amount: taxAmount, total_amount: totalAmount }));
    }, [invoice.invoice_items]);

    const handleProductSelect = (index: number, product: Product) => {
        const updatedItems = [...(invoice.invoice_items || [])];
        updatedItems[index] = {
            ...updatedItems[index],
            description: product.name,
            unit_price: product.price,
            tax_rate: product.iva,
            product_id: product.id,
        };
        setInvoice(prev => ({ ...prev, invoice_items: updatedItems }));
        setOpenProductSearch(null);
    };

    const handleItemChange = (index: number, field: keyof InvoiceItem, value: string | number) => {
        const updatedItems = [...(invoice.invoice_items || [])];
        const currentItem = { ...updatedItems[index] };
        
        if (field === 'description') {
            currentItem.product_id = undefined;
        }

        updatedItems[index] = { ...currentItem, [field]: value };
        setInvoice(prev => ({ ...prev, invoice_items: updatedItems }));
    };

    const addItem = () => {
        const newItem: InvoiceItem = { description: '', quantity: 1, unit_price: 0, tax_rate: 0.21 };
        setInvoice(prev => ({ ...prev, invoice_items: [...(prev.invoice_items || []), newItem] }));
    };

    const removeItem = (index: number) => {
        setInvoice(prev => ({ ...prev, invoice_items: (prev.invoice_items || []).filter((_, i) => i !== index) }));
    };

    const handleSave = () => {
        if (!invoice.contact_id || !invoice.issue_date) {
            toast.error(toast_('missingData'), { description: toast_('missingDataDesc') });
            return;
        }
        
        const invoiceDataToSend: InvoiceFormData = {
            id: invoice.id,
            contact_id: invoice.contact_id,
            issue_date: invoice.issue_date,
            due_date: invoice.due_date || null,
            status: 'Draft',
            subtotal: invoice.subtotal ?? 0,
            tax_amount: invoice.tax_amount ?? 0,
            total_amount: invoice.total_amount ?? 0,
            notes: invoice.notes || null,
            invoice_items: (invoice.invoice_items || []).map(item => ({
                description: item.description,
                quantity: item.quantity,
                unit_price: item.unit_price,
                tax_rate: item.tax_rate,
                product_id: item.product_id ? String(item.product_id) : null,
            })),
        };
        
        startSaveTransition(async () => {
            const result = await createOrUpdateInvoiceAction(invoiceDataToSend);
            if (result.success) {
                toast.success(toast_('success'), { description: result.message });
                onSaveSuccess();
            } else {
                toast.error(toast_('error'), { description: result.message });
            }
        });
    };
    
    const selectedContact = contacts.find(c => c.id === invoice.contact_id);

    return (
        <Dialog open={isOpen} onOpenChange={onClose}>
            <DialogContent className="max-w-6xl w-full h-[90vh] flex flex-col p-0">
                <DialogHeader className="p-6 pb-4 border-b">
                    <DialogTitle className="text-2xl">{invoice.id ? t('editTitle') : t('createTitle')}</DialogTitle>
                    <DialogDescription>{t('description')}</DialogDescription>
                </DialogHeader>
                
                <div className="flex-1 overflow-y-auto p-6 space-y-8">
                    {/* Dades del client i dates */}
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div className="space-y-2">
                            <Label>{t('clientLabel')}</Label>
                            <Popover open={comboboxOpen} onOpenChange={setComboboxOpen}><PopoverTrigger asChild><Button variant="outline" role="combobox" className="w-full justify-between text-left font-normal">{selectedContact ? selectedContact.nom : t('selectClientPlaceholder')}<ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" /></Button></PopoverTrigger><PopoverContent className="w-[--radix-popover-trigger-width] p-0"><Command><CommandInput /><CommandList><CommandEmpty>{t('noClientFound')}</CommandEmpty><CommandGroup>{contacts.map(c => (<CommandItem key={c.id} value={c.nom} onSelect={() => { setInvoice(p => ({ ...p, contact_id: c.id })); setComboboxOpen(false); }}><Check className={cn("mr-2 h-4 w-4", invoice.contact_id === c.id ? "opacity-100" : "opacity-0")} />{c.nom}</CommandItem>))}</CommandGroup></CommandList></Command></PopoverContent></Popover>
                        </div>
                        <div className="space-y-2">
                            <Label>{t('issueDateLabel')}</Label>
                            <Popover><PopoverTrigger asChild><Button variant="outline" className="w-full justify-start text-left font-normal">{invoice.issue_date ? format(new Date(invoice.issue_date), "PPP", { locale: dateLocale }) : <span>{t('pickDate')}</span>}<CalendarIcon className="ml-auto h-4 w-4" /></Button></PopoverTrigger><PopoverContent className="w-auto p-0"><Calendar mode="single" selected={invoice.issue_date ? new Date(invoice.issue_date) : undefined} onSelect={(d) => setInvoice(p => ({ ...p, issue_date: d?.toISOString() }))} /></PopoverContent></Popover>
                        </div>
                        <div className="space-y-2">
                            <Label>{t('dueDateLabel')}</Label>
                            <Popover><PopoverTrigger asChild><Button variant="outline" className="w-full justify-start text-left font-normal">{invoice.due_date ? format(new Date(invoice.due_date), "PPP", { locale: dateLocale }) : <span>{t('pickDate')}</span>}<CalendarIcon className="ml-auto h-4 w-4" /></Button></PopoverTrigger><PopoverContent className="w-auto p-0"><Calendar mode="single" selected={invoice.due_date ? new Date(invoice.due_date) : undefined} onSelect={(d) => setInvoice(p => ({ ...p, due_date: d?.toISOString() }))} /></PopoverContent></Popover>
                        </div>
                    </div>

                    {/* Llista de conceptes */}
                    <div>
                        <Label className="font-semibold text-lg">{t('itemsTitle')}</Label>
                        
                        {/* Capçaleres de la taula de conceptes (només visibles en pantalles grans) */}
                        <div className="hidden md:grid grid-cols-[1fr,100px,120px,100px,120px,auto] gap-3 mt-2 text-xs text-muted-foreground px-3">
                            <Label>{t('itemDescriptionLabel')}</Label>
                            <Label className="text-center">{t('itemQtyLabel')}</Label>
                            <Label className="text-right">{t('itemPriceLabel')}</Label>
                            <Label className="text-center">{t('itemTaxLabel')}</Label>
                            <Label className="text-right">{t('itemTotalLabel')}</Label>
                        </div>

                        <div className="mt-2 space-y-2">
                            {(invoice.invoice_items || []).map((item, index) => (
                                <div key={index} className="grid grid-cols-1 md:grid-cols-[1fr,100px,120px,100px,120px,auto] items-start gap-3 p-2 bg-muted rounded-lg">
                                    
                                    {/* Concepte */}
                                    <Popover open={openProductSearch === index} onOpenChange={(isOpen) => setOpenProductSearch(isOpen ? index : null)}>
                                        <PopoverTrigger asChild>
                                            <div className="relative w-full">
                                                <Input
                                                    placeholder={t('itemDescriptionPlaceholder')}
                                                    value={item.description || ''}
                                                    onChange={e => handleItemChange(index, 'description', e.target.value)}
                                                    className="pr-8"
                                                />
                                                <ChevronsUpDown className="absolute right-2 top-1/2 -translate-y-1/2 h-4 w-4 shrink-0 opacity-50 cursor-pointer" />
                                            </div>
                                        </PopoverTrigger>
                                        <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
                                            <Command>
                                                <CommandInput placeholder={t('searchProductPlaceholder')} />
                                                <CommandList>
                                                    <CommandEmpty>{t('noProductFound')}</CommandEmpty>
                                                    <CommandGroup>
                                                        {products.map(product => (
                                                            <CommandItem key={product.id} value={product.name} onSelect={() => handleProductSelect(index, product)}>
                                                                <Check className={cn("mr-2 h-4 w-4", item.product_id === product.id ? "opacity-100" : "opacity-0")} />
                                                                <div className="flex-1">{product.name}</div>
                                                                <div className="text-xs text-muted-foreground">€{product.price.toFixed(2)}</div>
                                                            </CommandItem>
                                                        ))}
                                                    </CommandGroup>
                                                </CommandList>
                                            </Command>
                                        </PopoverContent>
                                    </Popover>

                                    {/* Quantitat */}
                                    <Input type="number" value={item.quantity || 1} onChange={e => handleItemChange(index, 'quantity', Number(e.target.value))} className="text-center" />
                                    {/* Preu */}
                                    <Input type="number" value={item.unit_price || 0} onChange={e => handleItemChange(index, 'unit_price', Number(e.target.value))} className="text-right" />
                                    {/* IVA (%) */}
                                    <div className="relative">
                                        <Input type="number" value={Math.round((item.tax_rate ?? 0.21) * 100)} onChange={e => handleItemChange(index, 'tax_rate', Number(e.target.value) / 100)} className="text-center pr-6" />
                                        <span className="absolute right-2.5 top-1/2 -translate-y-1/2 text-sm text-muted-foreground">%</span>
                                    </div>
                                    {/* Total Línia */}
                                    <span className="h-10 flex items-center justify-end font-mono text-sm pr-3">
                                        €{(Number(item.quantity || 1) * Number(item.unit_price || 0)).toFixed(2)}
                                    </span>
                                    {/* Eliminar */}
                                    <Button type="button" variant="ghost" size="icon" onClick={() => removeItem(index)}>
                                        <Trash2 className="w-4 h-4 text-destructive" />
                                    </Button>
                                </div>
                            ))}
                        </div>
                        <Button type="button" variant="outline" size="sm" onClick={addItem} className="mt-4"><Plus className="w-4 h-4 mr-2" />{t('addItemButton')}</Button>
                    </div>

                    {/* Totals i notes */}
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-8 pt-4">
                        <div className="space-y-2">
                           <Label>{t('notesLabel')}</Label>
                           <Textarea placeholder={t('notesPlaceholder')} value={invoice.notes || ''} onChange={e => setInvoice(p => ({ ...p, notes: e.target.value }))} rows={5} />
                        </div>
                        <div className="space-y-2 bg-muted p-4 rounded-lg self-start">
                            <div className="flex justify-between items-center text-sm"><p className="text-muted-foreground">{t('subtotal')}</p><p className='font-mono text-foreground'>€{invoice.subtotal?.toFixed(2) || '0.00'}</p></div>
                            <div className="flex justify-between items-center text-sm"><p className="text-muted-foreground">{t('vat')}</p><p className='font-mono text-foreground'>€{invoice.tax_amount?.toFixed(2) || '0.00'}</p></div>
                            <div className="flex justify-between items-center text-lg font-bold border-t pt-2 mt-2"><p>{t('total')}</p><p className='font-mono'>€{invoice.total_amount?.toFixed(2) || '0.00'}</p></div>
                        </div>
                    </div>
                </div>

                <DialogFooter className="border-t p-6 bg-secondary/50">
                    <Button type="button" variant="ghost" onClick={onClose}>{t('cancelButton')}</Button>
                    <Button onClick={handleSave} disabled={isSaving}>
                        {isSaving && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                        {invoice.id ? t('saveChanges') : t('createDraft')}
                    </Button>
                </DialogFooter>
            </DialogContent>
        </Dialog>
    );
}

// =================== FILE: src/app/[locale]/(app)/layout.tsx ===================

import { ReactNode } from 'react';
import { NextIntlClientProvider } from 'next-intl';
import { getMessages } from 'next-intl/server';
import { AppClientLayout } from './_components/AppClientLayout';

// ✅ CORRECCIÓ 1: Definim el tipus de les propietats
// indicant que 'params' pot ser una promesa.
interface AppLayoutProps {
  children: ReactNode;
  params: Promise<{ locale: string }>;
};

/**
 * @summary Layout de servidor que embolcalla la part principal de l'aplicació.
 */
export default async function AppLayout(props: AppLayoutProps) {
  // ✅ CORRECCIÓ 2: Fem 'await' per resoldre la promesa i obtenir els paràmetres.
  const { locale } = await props.params;
  const { children } = props;

  // Carreguem els missatges necessaris per als components de client dins d'aquest layout.
  const messages = await getMessages({ locale });

  return (
    <NextIntlClientProvider locale={locale} messages={messages}>
      <AppClientLayout locale={locale}>{children}</AppClientLayout>
    </NextIntlClientProvider>
  );
}

// =================== FILE: src/app/[locale]/(app)/loading.tsx ===================

import { Loader2 } from "lucide-react";

/**
 * 'loading.tsx' és un arxiu especial de Next.js.
 * El component que s'exporta aquí s'utilitzarà automàticament com a 'fallback'
 * per al component <Suspense> del layout que l'envolta ('app/(app)/layout.tsx').
 * * Això permet mostrar una interfície de càrrega a l'instant mentre Next.js
 * carrega les dades de la nova pàgina al servidor, millorant molt l'experiència
 * d'usuari durant la navegació.
 */
export default function Loading() {
  return (
    <div className="flex h-full w-full items-center justify-center">
      <Loader2 className="h-10 w-10 animate-spin text-primary" />
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/network/actions.ts ===================

"use server";

import { createClient } from "@/lib/supabase/server";
import { cookies } from "next/headers";

/**
 * Obté les dades detallades d'un sol equip, incloent el nom del propietari,
 * utilitzant dues consultes separades per a més robustesa.
 */
export async function getTeamDetailsAction(teamId: string) {
    if (!teamId) {
        return { success: false, message: "Falta l'ID de l'equip." };
    }

    const supabase = createClient(cookies());

    try {
        // PAS 1: Obtenim les dades principals de l'equip des de la taula 'teams'.
        const { data: teamData, error: teamError } = await supabase
            .from('teams')
            .select('*') // Obtenim totes les columnes de l'equip
            .eq('id', teamId)
            .single();
            
        if (teamError || !teamData) {
            throw new Error("No s'ha pogut trobar l'equip especificat.");
        }

        // PAS 2: Si l'equip té un propietari, busquem el seu nom a la taula 'profiles'.
        let ownerData = null;
        if (teamData.owner_id) {
            const { data: profileData, error: profileError } = await supabase
                .from('profiles')
                .select('full_name')
                .eq('id', teamData.owner_id)
                .single();
            
            // Si hi ha un error en trobar el perfil, no fem que tot falli.
            // Simplement, el nom del propietari serà 'null'.
            if (profileError) {
                console.warn(`No s'ha trobat el perfil per a l'owner_id ${teamData.owner_id}:`, profileError.message);
            } else {
                ownerData = { full_name: profileData.full_name };
            }
        }
        
        // PAS 3: Combinem les dades manualment en l'objecte final.
        const detailedProfile = {
            ...teamData,
            owner: ownerData,
        };

        return { success: true, data: detailedProfile };

    } catch (error: unknown) {
        const message = error instanceof Error ? error.message : "Error desconegut en obtenir les dades.";
        console.error("Error a getTeamDetailsAction:", message);
        return { success: false, message };
    }
}

// =================== FILE: src/app/[locale]/(app)/network/loading.tsx ===================

"use client";

/**
 * @summary Esquelet de càrrega per a la pàgina de Network.
 */
export default function Loading() {
  return (
    <div className="h-full grid grid-cols-1 lg:grid-cols-3 gap-8 animate-pulse">
      {/* Esquelet de la llista de perfils */}
      <div className="lg:col-span-1 h-full bg-gray-800/50 rounded-lg p-4 space-y-4 overflow-y-hidden">
        {[...Array(5)].map((_, i) => (
          <div key={i} className="flex items-center gap-4">
            <div className="w-12 h-12 bg-gray-700/50 rounded-full shrink-0"></div>
            <div className="flex-1 space-y-2">
              <div className="h-4 w-3/4 bg-gray-700/50 rounded"></div>
              <div className="h-3 w-1/2 bg-gray-700/50 rounded"></div>
            </div>
          </div>
        ))}
      </div>
      {/* Esquelet del mapa */}
      <div className="lg:col-span-2 h-full bg-gray-800/50 rounded-lg"></div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/network/page.tsx ===================

/**
 * @file page.tsx (Network)
 * @summary Punto de entrada de la página, implementando React Suspense.
 */

import { Suspense } from 'react';
import { NetworkData } from './_components/NetworkData';
import { NetworkSkeleton } from './_components/NetworkSkeleton';

// La revalidación cada hora es una buena práctica.
export const revalidate = 3600;

export default function NetworkPage() {
  return (
    <Suspense fallback={<NetworkSkeleton />}>
      <NetworkData />
    </Suspense>
  );
}

// =================== FILE: src/app/[locale]/(app)/network/types.ts ===================

// /app/[locale]/network/types.ts

/**
 * Representa les dades MÍNIMES d'una empresa (team) que es mostren a la llista inicial.
 */
export type PublicProfileListItem = {
  id: string;
  name: string;
  sector: string | null;
  logo_url: string | null;
  latitude: number | null;
  longitude: number | null;
};

/**
* Representa les dades COMPLETES d'una empresa, incloent el nom del propietari.
* Aquestes dades es carreguen quan l'usuari fa clic.
*/
export type PublicProfileDetail = PublicProfileListItem & {
  summary: string | null;
  services: string[] | null;
  website: string | null;
  address: string | null;
  phone: string | null;
  email: string | null;
  owner: {
      full_name: string | null;
  } | null;
};

// =================== FILE: src/app/[locale]/(app)/network/_components/AddressAutocomplete.tsx ===================

/**
 * @file AddressAutocomplete.tsx
 * @summary Aquest fitxer defineix un component de client (`"use client"`) que proporciona un camp de text
 * per a la cerca d'adreces amb funcionalitat d'autocompletat, utilitzant el servei de Mapbox.
 * És reutilitzable en qualsevol formulari que necessiti introduir una adreça.
 */

"use client"; // Directiva de Next.js que marca aquest component per ser executat exclusivament al navegador.
              // És necessari perquè utilitza hooks de React (useState, useEffect) i interactua amb el DOM.

import { ChangeEvent } from 'react';
// Components i tipus específics de la llibreria de cerca de Mapbox per a React.
import { AddressAutofill } from '@mapbox/search-js-react';
import type { MapboxRetrieveResponse, MapboxContext } from '@mapbox/search-js-react';

// Importació d'icones per a la interfície d'usuari.
import { MapPin } from 'lucide-react';
// Importació del nostre tipus personalitzat per a l'objecte d'adreça detallada.
import type { DetailedAddress } from '@/types/DetailedAddress';

/**
 * @interface AddressAutocompleteProps
 * @summary Defineix les propietats (props) que el component AddressAutocomplete espera rebre.
 */
interface AddressAutocompleteProps {
  /** El valor actual del camp de text, controlat pel component pare. */
  value: string;
  /** Funció que s'executa quan el contingut del camp de text canvia. */
  onChange: (e: ChangeEvent<HTMLInputElement>) => void;
  /** Funció callback que s'executa quan l'usuari selecciona una adreça de la llista de suggeriments. */
  onAddressSelect: (address: DetailedAddress) => void;
}

/**
 * @function AddressAutocomplete
 * @summary Component funcional de React que renderitza un input d'autocompletat d'adreces.
 */
export default function AddressAutocomplete({ value, onChange, onAddressSelect }: AddressAutocompleteProps) {
  
  /**
   * @function handleRetrieve
   * @summary Aquesta funció s'activa quan l'usuari selecciona un suggeriment d'adreça de Mapbox.
   * Processa la resposta de l'API per extreure els components individuals de l'adreça.
   * @param {MapboxRetrieveResponse} res - L'objecte de resposta complet de l'API de Mapbox.
   */
  const handleRetrieve = (res: MapboxRetrieveResponse) => { 
    // La resposta pot contenir múltiples resultats ('features'), però normalment ens interessa el primer i més rellevant.
    const feature = res.features[0];
    // Comprovació de seguretat per evitar errors si la resposta no té el format esperat.
    if (!feature?.properties) return;

    // L'objecte 'context' conté informació addicional com la ciutat, el país, la regió, etc.
    const context = feature.properties.context;
    
    /**
     * @function findContext
     * @summary Funció d'ajuda interna per buscar un component específic (com la ciutat o el codi postal)
     * dins de l'array 'context' de la resposta de Mapbox.
     * @param {string} idPrefix - El prefix que identifica el tipus de dada que busquem (ex: 'place', 'postcode').
     * @returns {string} - El nom del component trobat o una cadena buida.
     */
    const findContext = (idPrefix: string): string => {
      if (!context) return '';
      const found = context.find((ctx: MapboxContext) => ctx.id.startsWith(idPrefix));
      return found?.name || '';
    };

    // Extracció de cada part de l'adreça.
    const street = feature.properties.address || '';
    const city = findContext('place');
    const postcode = findContext('postcode');
    const region = findContext('region');
    const country = findContext('country');
    
    // Un cop tenim totes les dades, cridem a la funció 'onAddressSelect' del component pare
    // per passar-li l'objecte d'adreça complet i que pugui actualitzar el seu estat.
    onAddressSelect({ street, city, postcode, region, country, latitude:null, longitude:null });
  };

  // Renderització del component JSX.
  return (
    <div className="space-y-1">
      <label className="block text-sm font-medium text-muted-foreground">Carrer (amb cercador)</label>
      {/* El component `AddressAutofill` de Mapbox és un contenidor que injecta la lògica d'autocompletat
        a l'element <input> que es troba dins seu.
        Requereix un 'accessToken' per funcionar, que llegim de les variables d'entorn.
        La propietat 'onRetrieve' especifica quina funció executar quan es selecciona una adreça.
      */}
      <AddressAutofill accessToken={process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN!} onRetrieve={handleRetrieve}>
        <div className="relative"> {/* Contenidor per posicionar la icona a sobre de l'input. */}
          <MapPin className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
          <input
            id="address-search"
            className="w-full bg-gray-800 border border-gray-600 rounded-md pl-10 pr-4 py-2 focus:ring-2 focus:ring-purple-500 focus:outline-none"
            placeholder="Escriu un carrer i selecciona..."
            autoComplete="address-line1" // Atribut HTML per ajudar els navegadors a autocompletar.
            value={value} // El valor de l'input està controlat des de l'exterior.
            onChange={onChange} // La gestió del canvi també es delega al pare.
          />
        </div>
      </AddressAutofill>
    </div>
  );
}



// =================== FILE: src/app/[locale]/(app)/network/_components/MapContainer.tsx ===================

"use client";

import 'mapbox-gl/dist/mapbox-gl.css';
import { useRef, useEffect } from 'react';
import Map, { Marker, Popup, NavigationControl, MapRef } from 'react-map-gl';
import type { PublicProfileListItem, PublicProfileDetail } from '../types';
import { Building2, Globe, Briefcase, Loader2, Mail, Phone } from 'lucide-react';
import Image from 'next/image';
import { useTranslations } from 'next-intl';

interface MapContainerProps {
  profiles: PublicProfileListItem[];
  selectedProfile: PublicProfileListItem | null;
  onSelectProfile: (profile: PublicProfileListItem | null) => void;
  detailedProfile: PublicProfileDetail | null;
  isLoading: boolean;
}

// ✅ 2. Creem una funció per a formatar l'URL del web
const formatWebsiteUrl = (url: string | null | undefined): string => {
  if (!url) return '';
  if (url.startsWith('http://') || url.startsWith('https://')) {
      return url;
  }
  return `https://${url}`;
};
 
export default function MapContainer({ profiles, selectedProfile, onSelectProfile, detailedProfile, isLoading }: MapContainerProps) {
    const mapRef = useRef<MapRef>(null);
    const t = useTranslations('NetworkPage');
    const mapboxToken = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN;

    useEffect(() => {
        if (selectedProfile && selectedProfile.latitude != null && selectedProfile.longitude != null && mapRef.current) {
            mapRef.current.flyTo({ center: [selectedProfile.longitude, selectedProfile.latitude], zoom: 14, duration: 1500 });
        }
    }, [selectedProfile]);

    if (!mapboxToken) return <div className="w-full h-full flex items-center justify-center bg-gray-800 text-red-400 p-4">{t('mapboxError')}</div>;
    return (
      <Map ref={mapRef} initialViewState={{ longitude: 2.1734, latitude: 41.3851, zoom: 7 }} style={{ width: '100%', height: '100%' }} mapStyle="mapbox://styles/mapbox/dark-v11" mapboxAccessToken={mapboxToken} onDragStart={() => onSelectProfile(null)}>
          <NavigationControl position="top-right" />
          
          {profiles.filter(p => p.latitude != null && p.longitude != null).map((profile) => (
              <Marker key={profile.id} longitude={profile.longitude!} latitude={profile.latitude!} onClick={(e) => { e.originalEvent.stopPropagation(); onSelectProfile(profile); }}>
                  <div className="transform transition-transform duration-200 hover:scale-125">
                      {profile.logo_url ? <Image src={profile.logo_url} alt={t('logoAltText', { companyName: profile.name })} width={32} height={32} className="rounded-full border-2 border-purple-500 object-cover" /> : <div className="w-8 h-8 rounded-full bg-gray-800 border-2 border-purple-500 flex items-center justify-center"><Building2 className="w-4 h-4 text-purple-300" /></div>}
                  </div>
              </Marker>
          ))}
          
          {selectedProfile && selectedProfile.latitude != null && selectedProfile.longitude != null && (
              <Popup longitude={selectedProfile.longitude} latitude={selectedProfile.latitude} onClose={() => onSelectProfile(null)} closeOnClick={false} anchor="bottom" className="popup-dark">
                  {isLoading && <div className="p-4 flex justify-center"><Loader2 className="animate-spin text-white" /></div>}
                  {detailedProfile && !isLoading && (
                      <div className="max-w-xs p-1 text-white space-y-2">
                          <div className="flex items-center gap-3">
                              {detailedProfile.logo_url ? <Image src={detailedProfile.logo_url} alt={`Logo de ${detailedProfile.name}`} width={40} height={40} className="rounded-full object-cover bg-gray-700" /> : <div className="w-10 h-10 rounded-full bg-gray-700 flex items-center justify-center flex-shrink-0"><Building2 className="w-5 h-5 text-gray-400" /></div>}
                              <div>
                                  <h3 className="font-bold">{detailedProfile.name}</h3>
                                  {detailedProfile.owner?.full_name && <p className="text-xs text-gray-400">de {detailedProfile.owner.full_name}</p>}
                              </div>
                          </div>

                          {detailedProfile.summary && <p className="text-sm text-gray-300">{detailedProfile.summary}</p>}
                          
                          {/* ✅ 3. AFEGIM ELS NOUS CAMPS I CORREGIM L'ENLLAÇ */}
                          <div className="text-xs space-y-1 pt-2 border-t border-gray-700">
                              {detailedProfile.phone && (
                                  <a href={`tel:${detailedProfile.phone}`} className="flex items-center gap-2 text-gray-300 hover:text-white">
                                      <Phone className="w-3 h-3" /> {detailedProfile.phone}
                                  </a>
                              )}
                              {detailedProfile.email && (
                                  <a href={`mailto:${detailedProfile.email}`} className="flex items-center gap-2 text-gray-300 hover:text-white">
                                      <Mail className="w-3 h-3" /> {detailedProfile.email}
                                  </a>
                              )}
                              {detailedProfile.website && (
                                  <a href={formatWebsiteUrl(detailedProfile.website)} target="_blank" rel="noopener noreferrer" className="flex items-center gap-2 text-purple-400 hover:underline">
                                      <Globe className="w-3 h-3" /> Visitar web
                                  </a>
                              )}
                          </div>

                          {detailedProfile.services && detailedProfile.services.length > 0 && (
                              <div className="pt-2 border-t border-gray-700">
                                  <h4 className="text-xs font-semibold uppercase text-gray-500 mb-1 flex items-center gap-2"><Briefcase className="w-3 h-3"/> Serveis</h4>
                                  <div className="flex flex-wrap gap-1">
                                      {detailedProfile.services.map((s) => (<span key={s} className="bg-gray-700 text-xs px-2 py-1 rounded-full">{s}</span>))}
                                  </div>
                              </div>
                          )}
                      </div>
                  )}
              </Popup>
          )}
      </Map>
  );
}

// =================== FILE: src/app/[locale]/(app)/network/_components/NetworkClient.tsx ===================

// /app/[locale]/network/_components/NetworkClient.tsx

"use client";

import React, { useState, useMemo, useTransition } from 'react';
import dynamic from 'next/dynamic';
import ProfileList from './ProfileList';
import type { PublicProfileListItem, PublicProfileDetail } from '../types';
import { useTranslations } from 'next-intl';
import { List, Map as MapIcon } from 'lucide-react';
import { cn } from '@/lib/utils/utils';
import { Button } from '@/components/ui/button';
import { getTeamDetailsAction } from '../actions';
import { toast } from 'sonner';

const MapLoadingSkeleton = () => {
    const t = useTranslations('NetworkPage');
    return <div className="w-full h-full bg-muted flex items-center justify-center"><p className="text-muted-foreground">{t('loadingMap')}</p></div>;
};

const DynamicMapContainer = dynamic(() => import('./MapContainer'), { loading: () => <MapLoadingSkeleton />, ssr: false });

export function NetworkClient({ profiles, errorMessage }: {
    profiles: PublicProfileListItem[];
    errorMessage?: string;
}) {
    const [selectedProfile, setSelectedProfile] = useState<PublicProfileListItem | null>(null);
    const [detailedProfile, setDetailedProfile] = useState<PublicProfileDetail | null>(null);
    const [isDetailsLoading, startDetailsTransition] = useTransition();
    const [searchTerm, setSearchTerm] = useState('');
    const [viewMode, setViewMode] = useState<'list' | 'map'>('list');
    const t = useTranslations('NetworkPage');

    const filteredProfiles = useMemo(() => {
        if (!searchTerm) return profiles;
        return profiles.filter(p => p.name.toLowerCase().includes(searchTerm.toLowerCase()));
    }, [profiles, searchTerm]);

    const handleSelectProfile = (profile: PublicProfileListItem | null) => {
        setSelectedProfile(profile);
        setDetailedProfile(null);

        if (profile) {
            setViewMode('map');
            startDetailsTransition(async () => {
                const result = await getTeamDetailsAction(profile.id);
                if (result.success) {
                    setDetailedProfile(result.data as PublicProfileDetail);
                } else {
                    toast.error("Error en carregar els detalls", { description: result.message });
                }
            });
        }
    };

    if (errorMessage) {
        return <div className="p-8 text-destructive text-center">{errorMessage}</div>;
    }

    return (
        <div className="h-screen w-full flex flex-col bg-background">
            <div className="p-2 border-b bg-background/95 backdrop-blur-sm lg:hidden">
                <div className="flex w-full bg-muted p-1 rounded-md">
                    <Button variant={viewMode === 'list' ? 'secondary' : 'ghost'} className="flex-1" onClick={() => setViewMode('list')}>
                        <List className="mr-2 h-5 w-5" /> {t('listView')}
                    </Button>
                    <Button variant={viewMode === 'map' ? 'secondary' : 'ghost'} className="flex-1" onClick={() => setViewMode('map')}>
                        <MapIcon className="mr-2 h-5 w-5" /> {t('mapView')}
                    </Button>
                </div>
            </div>
            <div className="flex-1 flex lg:grid lg:grid-cols-3 lg:gap-8 lg:p-4 min-h-0">
                <div className={cn("lg:flex lg:flex-col", viewMode === 'list' ? 'flex' : 'hidden')}>
                    <ProfileList
                        profiles={filteredProfiles}
                        searchTerm={searchTerm}
                        onSearchChange={setSearchTerm}
                        onSelectProfile={handleSelectProfile}
                        selectedProfileId={selectedProfile?.id}
                    />
                </div>
                <div className={cn("lg:col-span-2 lg:block rounded-lg overflow-hidden", viewMode === 'map' ? 'block h-full w-full' : 'hidden')}>
                    <DynamicMapContainer
                        profiles={filteredProfiles}
                        selectedProfile={selectedProfile}
                        onSelectProfile={handleSelectProfile}
                        detailedProfile={detailedProfile}
                        isLoading={isDetailsLoading}
                    />
                </div>
            </div>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/network/_components/NetworkData.tsx ===================

// /app/[locale]/network/_components/NetworkData.tsx

import { createClient } from '@/lib/supabase/server';
import { cookies } from 'next/headers';
import { NetworkClient } from './NetworkClient';
import { getTranslations } from 'next-intl/server';
import type { PublicProfileListItem } from '../types';

export async function NetworkData() {
    const t = await getTranslations('NetworkPage');
    const supabase = createClient(cookies());

    // Consulta simple per a la llista inicial. Només les dades bàsiques.
    const { data, error } = await supabase
        .from('teams')
        .select(`
            id,
            name,
            sector,
            logo_url,
            latitude,
            longitude
        `);

    if (error) {
        console.error('Error al carregar la llista de perfils:', error.message);
        return <NetworkClient profiles={[]} errorMessage={t('errorLoading')} />;
    }

    const profiles = (data as PublicProfileListItem[]) || [];

    return <NetworkClient profiles={profiles} />;
}

// =================== FILE: src/app/[locale]/(app)/network/_components/NetworkSkeleton.tsx ===================

/**
 * @file NetworkSkeleton.tsx
 * @summary Muestra un esqueleto de carga para la página de Network.
 */
"use client";

import React from 'react';
import { Skeleton } from '@/components/ui/skeleton';

export const NetworkSkeleton: React.FC = () => (
  <div className="h-full grid grid-cols-1 lg:grid-cols-3 gap-8 animate-pulse">
    {/* Esqueleto para la lista de perfiles */}
    <div className="lg:col-span-1 h-full flex flex-col glass-effect rounded-lg p-4 space-y-4">
      <Skeleton className="h-10 w-full" />
      <Skeleton className="h-24 w-full" />
      <Skeleton className="h-24 w-full" />
      <Skeleton className="h-24 w-full" />
      <Skeleton className="h-24 w-full" />
    </div>
    {/* Esqueleto para el mapa */}
    <div className="lg:col-span-2 h-full rounded-lg overflow-hidden">
      <Skeleton className="w-full h-full" />
    </div>
  </div>
);

// =================== FILE: src/app/[locale]/(app)/network/_components/ProfileCard.tsx ===================

"use client";

import { Building2 } from 'lucide-react';
import type { PublicProfileListItem } from '../types';
import Image from 'next/image';
import { useTranslations } from 'next-intl';
import { cn } from '@/lib/utils/utils';

interface ProfileCardProps {
    profile: PublicProfileListItem;
    isSelected: boolean;
    onClick: () => void;
}

export default function ProfileCard({ profile, isSelected, onClick }: ProfileCardProps) {
    const t = useTranslations('NetworkPage');
    return (
        <div onClick={onClick} className={cn('p-4 mb-2 rounded-lg cursor-pointer transition-all duration-200', isSelected ? 'bg-primary/20 ring-2 ring-primary' : 'bg-card hover:bg-muted')}>
            <div className="flex items-center gap-4">
                {profile.logo_url ? (
                    <Image src={profile.logo_url} alt={t('logoAltText', { companyName: profile.name })} width={48} height={48} className="rounded-full object-cover bg-muted" />
                ) : (
                    <div className="w-12 h-12 rounded-full bg-muted flex items-center justify-center flex-shrink-0">
                        <Building2 className="w-6 h-6 text-gray-400" />
                    </div>
                )}
                <div className="min-w-0">
                    <h3 className="font-bold truncate">{profile.name}</h3>
                    {profile.sector && <p className="text-sm text-primary font-medium truncate">{profile.sector}</p>}
                </div>
            </div>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/network/_components/ProfileList.tsx ===================

"use client";

import { Search } from 'lucide-react';
import type { PublicProfileListItem } from '../types';
import ProfileCard from './ProfileCard';
import { useTranslations } from 'next-intl';

interface ProfileListProps {
    profiles: PublicProfileListItem[];
    searchTerm: string;
    onSearchChange: (term: string) => void;
    onSelectProfile: (profile: PublicProfileListItem) => void;
    selectedProfileId?: string;
}

export default function ProfileList({ profiles, searchTerm, onSearchChange, onSelectProfile, selectedProfileId }: ProfileListProps) {
    const t = useTranslations('NetworkPage');
    return (
        <div className="flex flex-col h-full glass-effect rounded-lg">
            <div className="p-4 border-b border-border flex-shrink-0">
                <h2 className="text-xl font-bold mb-4">{t('networkTitle')}</h2>
                <div className="relative">
                    <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
                    <input type="text" placeholder={t('searchPlaceholder')} value={searchTerm} onChange={(e) => onSearchChange(e.target.value)} className="w-full bg-background border border-border rounded-md pl-10 pr-4 py-2 focus:ring-2 focus:ring-primary focus:outline-none" />
                </div>
            </div>
            <div className="flex-1 overflow-y-auto custom-scrollbar p-2">
                {profiles.length > 0 ? (
                    profiles.map(profile => (
                        <ProfileCard key={profile.id} profile={profile} isSelected={profile.id === selectedProfileId} onClick={() => onSelectProfile(profile)} />
                    ))
                ) : (
                    <p className="text-center text-muted-foreground p-4">{t('noResults')}</p>
                )}
            </div>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/projectStrocture/actions.ts ===================

/**
 * @file actions.ts (Project Structure)
 * @summary Aquesta Server Action actua com a pont segur entre la nostra aplicació i l'API de GitHub.
 * ✅ NOU: Ara inclou accions per obtenir les branques del repositori i carregar l'estructura
 * d'una branca específica. S'ha eliminat la lògica de desar posicions.
 */

"use server";

// --- Tipus de Dades ---
export interface FileTreeNode { path: string; type: 'tree' | 'blob'; }
interface StructureActionResult { data: FileTreeNode[] | null; error: string | null; }
interface ContentActionResult { data: string | null; error: string | null; }
interface Branch { name: string; }
interface BranchesActionResult { data: string[] | null; error: string | null; }

// --- Configuració de l'API de GitHub ---
const GITHUB_TOKEN = process.env.GITHUB_PAT;
const REPO_OWNER = process.env.NEXT_PUBLIC_GITHUB_REPO_OWNER;
const REPO_NAME = process.env.NEXT_PUBLIC_GITHUB_REPO_NAME;
// ✅ CORRECCIÓ: Definim la branca principal com a valor per defecte.
const MAIN_BRANCH = 'main'; 

/**
 * @summary Server Action per obtenir la llista de branques del repositori.
 */
export async function fetchBranchesAction(): Promise<BranchesActionResult> {
    if (!GITHUB_TOKEN || !REPO_OWNER || !REPO_NAME) {
        return { data: null, error: "La configuració de l'API de GitHub no està completa." };
    }
    const apiUrl = `https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/branches`;
    try {
        const response = await fetch(apiUrl, {
            headers: { Authorization: `Bearer ${GITHUB_TOKEN}`, 'X-GitHub-Api-Version': '2022-11-28' },
            next: { revalidate: 3600, tags: ['github-repo-branches'] },
        });
        if (!response.ok) throw new Error(`Error de l'API de GitHub: ${(await response.json()).message}`);
        const data: Branch[] = await response.json();
        return { data: data.map(branch => branch.name), error: null };
    } catch (error: unknown) { // ✅ CORRECCIÓN: Tipamos el error como 'unknown'
        // Comprobamos si el error es una instancia de Error para acceder a .message de forma segura
        const message = error instanceof Error ? error.message : "Un error desconegut ha ocorregut.";
        return { data: null, error: message };
    }
}

/**
 * @summary Obté l'estructura de fitxers d'una branca específica.
 * ✅ CORRECCIÓ: Afegim un valor per defecte al paràmetre 'branch' per evitar l'error.
 */
export async function fetchProjectStructureAction(branch: string = MAIN_BRANCH): Promise<StructureActionResult> {
  if (!GITHUB_TOKEN || !REPO_OWNER || !REPO_NAME) {
    return { data: null, error: "La configuració de l'API de GitHub no està completa." };
  }
  const apiUrl = `https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/git/trees/${branch}?recursive=1`;
  try {
    const response = await fetch(apiUrl, {
      headers: { Authorization: `Bearer ${GITHUB_TOKEN}`, 'X-GitHub-Api-Version': '2022-11-28' },
      next: { revalidate: 3600, tags: [`github-repo-structure-${branch}`] },
    });
    if (!response.ok) throw new Error(`Error de l'API de GitHub: ${(await response.json()).message}`);
    const data = await response.json();
    const filteredTree = (data.tree as FileTreeNode[]).filter(node => 
        !node.path.includes('node_modules') && !node.path.includes('.next') && !node.path.includes('.vscode') &&
        !node.path.includes('.DS_Store') && !node.path.includes('package-lock.json') && !node.path.endsWith('.md')
    );
    return { data: filteredTree, error: null };
} catch (error: unknown) { // ✅ CORRECCIÓN: Tipamos el error como 'unknown'
    const message = error instanceof Error ? error.message : "Un error desconegut ha ocorregut.";
    return { data: null, error: message };
}
}

/**
 * @summary Obté el contingut d'un fitxer específic.
 */
export async function fetchFileContentAction(filePath: string): Promise<ContentActionResult> {
    if (!GITHUB_TOKEN || !REPO_OWNER || !REPO_NAME) {
        return { data: null, error: "La configuració de l'API de GitHub no està completa." };
    }
    // ✅ CORRECCIÓ: Afegim una referència a la branca per a més precisió.
    const apiUrl = `https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/contents/${filePath}`;
    try {
        const response = await fetch(apiUrl, {
            headers: { Authorization: `Bearer ${GITHUB_TOKEN}`, 'X-GitHub-Api-Version': '2022-11-28' },
            next: { revalidate: 3600 },
        });
        if (!response.ok) throw new Error(`Error de l'API de GitHub: ${(await response.json()).message}`);
        const data = await response.json();
        
        const content = Buffer.from(data.content, 'base64').toString('utf-8');
        return { data: content, error: null };

    } catch (error: unknown) { // ✅ CORRECCIÓN: Tipamos el error como 'unknown'
        const message = error instanceof Error ? error.message : "Un error desconegut ha ocorregut.";
        return { data: null, error: message };
    }
}



// =================== FILE: src/app/[locale]/(app)/projectStrocture/page.tsx ===================

/**
 * @file page.tsx (Project Structure)
 * @summary Component de Servidor per a la pàgina de l'Arquitectura del Projecte.
 * ✅ VERSIÓ SIMPLIFICADA: Ara només renderitza el component de client, sense carregar posicions.
 */


import { ArchitectureVisualizer } from './_components/ArchitectureVisualizer';
import type { Metadata } from 'next';

export const metadata: Metadata = {
  title: 'Arquitectura del Projecte | Ribot',
};

// Ja no necessitem carregar cap dada aquí, tota la lògica es mou al client.
export default async function ProjectStructurePage() {
  return (
    <div className="h-full w-full p-4">
        <ArchitectureVisualizer />
    </div>
  );
}



// =================== FILE: src/app/[locale]/(app)/projectStrocture/_components/ArchitectureVisualizer.tsx ===================

/**
 * @file ArchitectureVisualizer.tsx
 * @summary Component de client que renderitza el diagrama interactiu de l'arquitectura.
 * ✅ VERSIÓ FINAL: Inclou disseny horitzontal, selector de branques, nodes personalitzats amb colors,
 * cerca, carpetes plegables i visualitzador de codi.
 */

"use client";

import React, { useState, useEffect, useCallback, useTransition, FC } from 'react';
import ReactFlow, { 
    Controls, Background, applyNodeChanges, applyEdgeChanges, Handle, Position, addEdge,
    type Node, type Edge, type OnNodesChange, type OnEdgesChange, type NodeProps, type Connection,
} from 'reactflow';
import 'reactflow/dist/style.css';
import Editor from 'react-simple-code-editor';
import { highlight, languages } from 'prismjs/components/prism-core';
import 'prismjs/components/prism-clike';
import 'prismjs/components/prism-javascript';
import 'prismjs/components/prism-typescript';
import 'prismjs/components/prism-markup';
import 'prismjs/components/prism-jsx';
import 'prismjs/components/prism-tsx';

import { fetchProjectStructureAction, fetchFileContentAction, fetchBranchesAction, type FileTreeNode } from '../actions';
import { Loader2, File, Folder, Database, Server, Component, Settings, FileCode, X, Search, Expand, Shrink, GitBranch } from 'lucide-react';
import { cn } from '@/lib/utils/utils';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

// --- Tipus de Dades ---
type CustomNodeData = { label: string; type: string; path: string; nodeType: 'tree' | 'blob'; isCollapsed?: boolean; isDimmed?: boolean; };
type CustomNode = Node<CustomNodeData>;

// --- Components de Nodes Personalitzats ---
const nodeIcons: Record<string, React.ElementType> = {
    root: Server, folder: Folder, supabaseFn: Database, serverAction: Server,
    serverPage: FileCode, clientComponent: Component, layout: FileCode,
    config: Settings, default: File,
};
const nodeColors: Record<string, string> = {
    root: 'bg-purple-600 border-purple-400', folder: 'bg-blue-600 border-blue-400',
    supabaseFn: 'bg-green-600 border-green-400', serverAction: 'bg-orange-600 border-orange-400',
    serverPage: 'bg-indigo-600 border-indigo-400', clientComponent: 'bg-pink-600 border-pink-400',
    layout: 'bg-rose-600 border-rose-400', config: 'bg-gray-500 border-gray-300',
    default: 'bg-gray-700 border-gray-500',
};

const CustomNodeComponent: FC<NodeProps<CustomNodeData>> = ({ data }) => {
    const Icon = nodeIcons[data.type] || (data.nodeType === 'tree' ? Folder : File);
    const colors = nodeColors[data.type] || nodeColors.default;
    return (
        <div className={cn("rounded-lg p-4 text-white font-sans shadow-lg flex items-center gap-4 border-2 min-w-[240px] transition-opacity", colors, data.isDimmed && "opacity-30")}>
            <Handle type="target" position={Position.Left} className="!bg-gray-400 opacity-50" />
            <Icon className="w-6 h-6 flex-shrink-0" />
            <div className="flex-grow">
                <div className="text-base font-bold">{data.label}</div>
            </div>
            {data.nodeType === 'tree' && (data.isCollapsed ? <Expand className="w-5 h-5" /> : <Shrink className="w-5 h-5" />)}
            <Handle type="source" position={Position.Right} className="!bg-gray-400 opacity-50" />
        </div>
    );
};
const nodeTypes = { custom: CustomNodeComponent };

// --- Funció de Transformació de Dades ---
const transformDataToFlow = (fileTree: FileTreeNode[]): { nodes: CustomNode[], edges: Edge[] } => {
    const nodes: CustomNode[] = [];
    const edges: Edge[] = [];
    const nodeMap = new Map<string, CustomNode>();

    const getNodeType = (path: string): string => {
        if (path.includes('supabase/functions')) return 'supabaseFn';
        if (path.endsWith('actions.ts')) return 'serverAction';
        if (path.endsWith('page.tsx')) return 'serverPage';
        if (path.includes('client.tsx') || path.includes('Client.tsx')) return 'clientComponent';
        if (path.endsWith('layout.tsx')) return 'layout';
        if (path.endsWith('middleware.ts')) return 'config';
        return 'default';
    }

    const rootNode: CustomNode = { id: 'root', data: { label: 'Projecte Ribot', type: 'root', path: '/', nodeType: 'tree' }, position: { x: 0, y: 0 }, type: 'custom' };
    nodes.push(rootNode);
    nodeMap.set('root', rootNode);

    fileTree.forEach(item => {
        const pathParts = item.path.split('/');
        let currentPath = '';
        pathParts.forEach((part, index) => {
            const previousPath = currentPath;
            currentPath = currentPath ? `${currentPath}/${part}` : part;
            if (!nodeMap.has(currentPath)) {
                const isLastPart = index === pathParts.length - 1;
                const newNode: CustomNode = {
                    id: currentPath,
                    data: { label: part, type: isLastPart && item.type === 'blob' ? getNodeType(currentPath) : 'folder', path: currentPath, nodeType: isLastPart ? item.type : 'tree' },
                    position: { x: 0, y: 0 },
                    type: 'custom',
                };
                nodes.push(newNode);
                nodeMap.set(currentPath, newNode);
                const parentNodeId = index === 0 ? 'root' : previousPath;
                edges.push({ id: `e-${parentNodeId}-${currentPath}`, source: parentNodeId, target: currentPath, type: 'smoothstep' });
            }
        });
    });
    
    const levels: Map<number, CustomNode[]> = new Map();
    nodes.forEach(node => {
        const level = node.id === 'root' ? 0 : node.id.split('/').length;
        if (!levels.has(level)) levels.set(level, []);
        levels.get(level)!.push(node);
    });
    levels.forEach((nodesAtLevel, level) => {
        const levelHeight = nodesAtLevel.length * 100;
        nodesAtLevel.forEach((node, index) => {
            node.position = {
                x: level * 350,
                y: index * 100 - (levelHeight / 2)
            };
        });
    });

    return { nodes, edges };
};

// --- Component Principal ---
export function ArchitectureVisualizer() {
    const [allNodes, setAllNodes] = useState<CustomNode[]>([]);
    const [allEdges, setAllEdges] = useState<Edge[]>([]);
    const [nodes, setNodes] = useState<CustomNode[]>([]);
    const [edges, setEdges] = useState<Edge[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [viewingFile, setViewingFile] = useState<{ path: string; content: string } | null>(null);
    const [isCodeLoading, startCodeLoadingTransition] = useTransition();
    const [searchTerm, setSearchTerm] = useState('');
    const [collapsedNodes, setCollapsedNodes] = useState<Record<string, boolean>>({});
    const [branches, setBranches] = useState<string[]>([]);
    const [selectedBranch, setSelectedBranch] = useState<string>('main');

    const onNodesChange: OnNodesChange = useCallback((changes) => setNodes((nds) => applyNodeChanges(changes, nds)), []);
    const onEdgesChange: OnEdgesChange = useCallback((changes) => setEdges((eds) => applyEdgeChanges(changes, eds)), []);
    const onConnect = useCallback((connection: Connection) => setEdges((eds) => addEdge({ ...connection, type: 'smoothstep', animated: true }, eds)), []);

    const handleNodeDoubleClick = useCallback((_: React.MouseEvent, node: CustomNode) => {
        if (node.data.nodeType === 'blob') {
            startCodeLoadingTransition(async () => {
                setViewingFile({ path: node.data.path, content: "Carregant contingut del fitxer..." });
                const result = await fetchFileContentAction(node.data.path);
                setViewingFile({ path: node.data.path, content: result.data || `Error: ${result.error}` });
            });
        }
    }, []);

    const handleNodeClick = useCallback((_: React.MouseEvent, node: CustomNode) => {
        if (node.data.nodeType === 'tree') {
            setCollapsedNodes(prev => ({ ...prev, [node.id]: !prev[node.id] }));
        }
    }, []);

    useEffect(() => {
        const loadStructure = async () => {
            setIsLoading(true);
            const result = await fetchProjectStructureAction(selectedBranch);
            if (result.data) {
                const { nodes: initialNodes, edges: initialEdges } = transformDataToFlow(result.data);
                setAllNodes(initialNodes);
                setAllEdges(initialEdges);
            } else {
                console.error(result.error);
            }
            setIsLoading(false);
        };
        if(selectedBranch) loadStructure();
    }, [selectedBranch]);

    useEffect(() => {
        const loadBranches = async () => {
            const result = await fetchBranchesAction();
            if (result.data) {
                setBranches(result.data);
                if (!result.data.includes('main')) {
                    setSelectedBranch(result.data[0] || '');
                }
            }
        };
        loadBranches();
    }, []);

    useEffect(() => {
        let visibleNodes = [...allNodes];
        if (searchTerm.trim()) {
            const lowerCaseSearch = searchTerm.toLowerCase();
            const matchingNodeIds = new Set<string>();
            allNodes.forEach(n => {
                if (n.data.label.toLowerCase().includes(lowerCaseSearch)) {
                    matchingNodeIds.add(n.id);
                    let parentId = allEdges.find(e => e.target === n.id)?.source;
                    while (parentId) {
                        matchingNodeIds.add(parentId);
                        parentId = allEdges.find(e => e.target === parentId)?.source;
                    }
                }
            });
            visibleNodes = allNodes.map(n => ({...n, data: { ...n.data, isDimmed: !matchingNodeIds.has(n.id) }}));
        } else {
            visibleNodes = allNodes.map(n => ({...n, data: { ...n.data, isDimmed: false }}));
        }

        const hiddenNodeIds = new Set<string>();
        Object.entries(collapsedNodes).forEach(([nodeId, isCollapsed]) => {
            if (isCollapsed) {
                const findDescendants = (id: string) => {
                    allEdges.forEach(edge => {
                        if (edge.source === id) {
                            hiddenNodeIds.add(edge.target);
                            findDescendants(edge.target);
                        }
                    });
                };
                findDescendants(nodeId);
            }
        });
        
        const finalNodes = visibleNodes.map(n => ({ ...n, hidden: hiddenNodeIds.has(n.id), data: {...n.data, isCollapsed: !!collapsedNodes[n.id]} }));
        setNodes(finalNodes);
        setEdges(allEdges.filter(e => !hiddenNodeIds.has(e.source) && !hiddenNodeIds.has(e.target)));

    }, [searchTerm, collapsedNodes, allNodes, allEdges]);

    if (isLoading && nodes.length === 0) {
        return <div className="flex items-center justify-center h-full text-white"><Loader2 className="w-8 h-8 animate-spin" /><p className="ml-4 text-lg">Construint el diagrama des de GitHub...</p></div>;
    }

    return (
        <div className="h-full w-full bg-gray-900 rounded-lg overflow-hidden relative font-sans flex flex-col">
            <div className="absolute top-4 left-4 z-10 text-white bg-black/40 p-3 rounded-lg shadow-lg backdrop-blur-sm flex items-center gap-4">
                <div className="relative">
                    <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400" />
                    <Input placeholder="Cerca un fitxer..." className="pl-9 bg-gray-800/50 border-gray-600" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} />
                </div>
                <div className="flex items-center gap-2">
                    <GitBranch className="w-5 h-5 text-gray-400" />
                    <Select value={selectedBranch} onValueChange={setSelectedBranch} disabled={branches.length === 0}>
                        <SelectTrigger className="w-[180px] bg-gray-800/50 border-gray-600">
                            <SelectValue placeholder="Carregant branques..." />
                        </SelectTrigger>
                        <SelectContent>
                            {branches.map(branch => <SelectItem key={branch} value={branch}>{branch}</SelectItem>)}
                        </SelectContent>
                    </Select>
                </div>
            </div>
            <ReactFlow nodes={nodes} edges={edges} onNodesChange={onNodesChange} onEdgesChange={onEdgesChange} onConnect={onConnect}
                onNodeDoubleClick={handleNodeDoubleClick} onNodeClick={handleNodeClick}
                fitView nodeTypes={nodeTypes} proOptions={{ hideAttribution: true }} className="bg-dots">
                <Controls />
                <Background color="#4B5563" />
            </ReactFlow>

            <Dialog open={!!viewingFile} onOpenChange={(isOpen) => !isOpen && setViewingFile(null)}>
                <DialogContent className="max-w-5xl h-[90vh] flex flex-col bg-gray-900/90 backdrop-blur-sm border-gray-700 text-white">
                    <DialogHeader>
                        <DialogTitle className="flex justify-between items-center font-mono text-lg">{viewingFile?.path}<Button variant="ghost" size="icon" onClick={() => setViewingFile(null)}><X className="w-4 h-4" /></Button></DialogTitle>
                    </DialogHeader>
                    <div className="flex-1 overflow-y-auto bg-[#282c34] rounded-md p-1 editor-container-class">
                        {isCodeLoading && !viewingFile?.content.startsWith('Error') ? (
                           <div className="flex items-center justify-center h-full"><Loader2 className="w-6 h-6 animate-spin"/></div>
                        ) : (
                            <Editor value={viewingFile?.content || ''} onValueChange={() => {}} highlight={(code) => highlight(code, languages.tsx, 'tsx')} padding={16} className="font-mono text-sm" style={{ minHeight: '100%'}}/>
                        )}
                    </div>
                </DialogContent>
            </Dialog>
        </div>
    );
}



// =================== FILE: src/app/[locale]/(app)/redirecting/page.tsx ===================

/**
 * @file page.tsx (Redirecting)
 * @summary Aquest fitxer defineix una pàgina de transició que es mostra a l'usuari
 * després d'accions importants com completar el formulari d'onboarding.
 * La seva funció és assegurar que la sessió del client i del servidor estigui sincronitzada
 * abans de redirigir a l'usuari al seu destí final (normalment el Dashboard).
 */

"use client"; // És un component de client perquè necessita utilitzar hooks (useEffect, useRouter).

import { useEffect } from 'react';
import { useRouter } from 'next/navigation';
import RedirectAnimation from '@/app/[locale]/(app)/_components/ui/redirect-animation';

/**
 * @function RedirectingPage
 * @summary Mostra una animació i gestiona la redirecció.
 */
export default function RedirectingPage() {
  const router = useRouter();

  // Aquest efecte s'executa un sol cop quan el component es munta.
  useEffect(() => {
    // Creem un temporitzador per donar temps a l'animació i assegurar que tot es processi correctament.
    const timer = setTimeout(() => {
      // --- AQUESTA LÒGICA ÉS CRUCIAL ---
      // 1. router.refresh(): Aquesta funció de Next.js força una recàrrega de les dades del servidor
      // sense perdre l'estat del client. És vital per assegurar que el servidor reconeix la nova
      // sessió o l'estat de l'usuari (ex: onboarding completat) abans de la navegació.
      router.refresh(); 

      // 2. router.push('/dashboard'): Un cop la sessió del servidor està actualitzada,
      // naveguem de manera segura a la pàgina principal de l'aplicació.
      router.push('/dashboard');
    }, 3000); // Esperem 3 segons.

    // Funció de neteja: si l'usuari navega fora d'aquesta pàgina abans que passin els 3 segons,
    // el temporitzador es cancel·la per evitar errors.
    return () => clearTimeout(timer);
  }, [router]);

  return (
    // Mostrem una animació per millorar l'experiència de l'usuari durant l'espera.
    <div className="min-h-screen flex items-center justify-center p-4 bg-background">
      <RedirectAnimation />
    </div>
  );
}


// =================== FILE: src/app/[locale]/(app)/settings/billing/actions.ts ===================

"use server";

import { createClient, createAdminClient } from "@/lib/supabase/server";
import { cookies } from "next/headers";
import { revalidatePath } from "next/cache";
import { validateUserSession } from '@/lib/supabase/session'; // Importem la nova funció

/**
 * Subscriu l'equip actiu de l'usuari a un nou pla.
 * En un entorn real, aquesta funció crearia una sessió de checkout de Stripe.
 * Ara mateix, només crea/actualitza la subscripció a la nostra base de dades.
 */
/**
 * Subscriu l'equip actiu de l'usuari a un nou pla.
 */
export async function subscribeToPlanAction(planId: string) {
    // ✅ 2. Validació centralitzada
    const session = await validateUserSession();
    if ('error' in session) {
        return { success: false, message: session.error.message };
    }
    const { supabase, user, activeTeamId } = session;

    try {
        await supabase
            .from('subscriptions')
            .upsert({
                team_id: activeTeamId,
                plan_id: planId,
                status: 'active',
                current_period_end: new Date(new Date().setMonth(new Date().getMonth() + 1)).toISOString(),
            }, { onConflict: 'team_id' })
            .throwOnError();

        // ✅ PAS CLAU: Actualitzem el token de l'usuari amb el nou pla.
        const supabaseAdmin = createAdminClient();
        await supabaseAdmin.auth.admin.updateUserById(
            user.id,
            { app_metadata: { ...user.app_metadata, active_team_plan: planId } }
        );

    } catch (error) {
        const message = error instanceof Error ? error.message : "Error en subscriure's al pla.";
        return { success: false, message };
    }

    revalidatePath('/settings/billing');
    return { success: true, message: `Subscripció al pla '${planId}' realitzada!` };
}

/**
 * Cancel·la la subscripció de l'equip actiu.
 */
export async function cancelSubscriptionAction() {
    // ✅ 2. Validació centralitzada
    const session = await validateUserSession();
    if ('error' in session) {
        return { success: false, message: session.error.message };
    }
    const { supabase, user, activeTeamId } = session;

    // Per a cancel·lar, necessitem permisos d'administrador de l'equip.
    // Ho gestionarem amb una comprovació de rol.
    const { data: member } = await supabase.from('team_members').select('role').eq('user_id', user.id).eq('team_id', activeTeamId).single();
    if (member?.role !== 'owner') {
        return { success: false, message: "Només el propietari de l'equip pot cancel·lar la subscripció." };
    }

    try {
        await createClient(cookies())
            .from('subscriptions')
            .update({ status: 'canceled' })
            .eq('team_id', activeTeamId)
            .throwOnError();

        // ✅ PAS CLAU: Actualitzem també el token de l'usuari per a reflectir la cancel·lació.
        const supabaseAdmin = createAdminClient();
        await supabaseAdmin.auth.admin.updateUserById(
            user.id,
            { app_metadata: { ...user.app_metadata, active_team_plan: 'free' } }
        );


    } catch (error) {
        const message = error instanceof Error ? error.message : "Error en cancel·lar la subscripció.";
        return { success: false, message };
    }

    revalidatePath('/settings/billing');
    return { success: true, message: "Subscripció cancel·lada." };
}

// =================== FILE: src/app/[locale]/(app)/settings/billing/page.tsx ===================

/**
 * @file page.tsx (Billing)
 * @summary Punt d'entrada de la pàgina de Facturació, implementant Suspense.
 */
import { Suspense } from 'react';
import type { Metadata } from 'next';
import { getTranslations } from 'next-intl/server';
import { BillingData } from './_components/BillingData';
import { BillingSkeleton } from './_components/BillingSkeleton';
import { createClient } from '@/lib/supabase/server';
import { cookies } from 'next/headers';
import { redirect } from 'next/navigation';
import { hasPermission, PERMISSIONS } from '@/lib/permissions';
import { AccessDenied } from '@/components/shared/AccessDenied'; // Un component que mostra un missatge d'error



export const dynamic = 'force-dynamic';

// ✅ CORRECCIÓ 1: Definim la interfície de les propietats
// indicant que 'params' pot ser una promesa.
interface BillingPageProps {
  params: Promise<{ locale: string }>;
}

/**
 * Funció per generar metadades dinàmiques (el títol de la pàgina).
 */
export async function generateMetadata(props: BillingPageProps): Promise<Metadata> {
  // ✅ CORRECCIÓ 2: Fem 'await' per resoldre la promesa i obtenir els paràmetres.
  const { locale } = await props.params;

  const t = await getTranslations({ locale, namespace: 'SettingsPage.billing' });
  return { title: `${t('metaTitle')} | Ribot` };
}

/**
 * La pàgina principal de Facturació.
 */
export default async function BillingPage() {
  const supabase = createClient(cookies());
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) redirect('/login');

  const activeTeamId = user.app_metadata?.active_team_id;
  if (!activeTeamId) redirect('/settings/team');
  // Obtenim el rol de l'usuari
  const { data: member } = await supabase
    .from('team_members')
    .select('role')
    .match({ user_id: user.id, team_id: activeTeamId })
    .single();

  // ✅ Comprovem el permís per a veure aquesta pàgina
  if (!hasPermission(member?.role, PERMISSIONS.VIEW_BILLING)) {
    // Si no té permís, mostrem un missatge d'accés denegat o redirigim
    return <AccessDenied />;
  }
  return (
    <Suspense fallback={<BillingSkeleton />}>
      <BillingData />
    </Suspense>
  );
}

// =================== FILE: src/app/[locale]/(app)/settings/billing/_components/BillingClient.tsx ===================

"use client";

import { useState, useTransition } from 'react';
import { useRouter } from 'next/navigation'; // ✅ 1. Importem el router
import { motion } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { toast } from 'sonner';
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Check, Gift, Star, Gem, Settings} from 'lucide-react';
import { cn } from '@/lib/utils/utils';
import { useTranslations, useLocale } from 'next-intl';
import { subscribeToPlanAction, cancelSubscriptionAction } from '../actions';
import type { Subscription, Plan } from '@/types/settings';

const PlanIcon = ({ name, className }: { name: string; className?: string }) => {
  switch (name) {
    case 'Gift': return <Gift className={className} />;
    case 'Star': return <Star className={className} />;
    case 'Gem': return <Gem className={className} />;
    case 'Settings': return <Settings className={className} />;
    default: return null;
  }
};

export function BillingClient({ plans, activeSubscription, currentUserRole }: {
  plans: Plan[];
  activeSubscription: Subscription | null;
  currentUserRole: string | null;

}) {
  const t = useTranslations('SettingsPage.billing');
  const locale = useLocale();
  const router = useRouter(); // ✅ 2. Inicialitzem el router
  const [billingCycle, setBillingCycle] = useState<'monthly' | 'yearly'>('monthly');
  const [isPending, startTransition] = useTransition();

  // ✅ Variable de control per a la UI basada en permisos
  const canManageBilling = currentUserRole === 'owner' || currentUserRole === 'admin';

  const currentPlanDetails = plans.find(p => p.isCurrent);
  const handleSelectPlan = (planId: string) => {
    startTransition(async () => {
      const result = await subscribeToPlanAction(planId);
      if (result.success) {
        toast.success(result.message);
        router.refresh(); // ✅ 3. Refresquem les dades de la pàgina
      } else {
        toast.error(result.message);
      }
    });
  };

  const handleCancelSubscription = () => {
    startTransition(async () => {
      const result = await cancelSubscriptionAction();
      if (result.success) {
        toast.success(result.message);
        router.refresh(); // ✅ 3. Refresquem les dades de la pàgina
      } else {
        toast.error(result.message);
      }
    });
  };

  const handleManageBilling = () => { toast.info(t('redirecting'), { description: t('redirectingDesc') }); };



  return (
    <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="space-y-12">
      <div className="flex items-center justify-center space-x-2 sm:space-x-4">
        <Label htmlFor="billing-cycle" className={cn('transition-colors text-sm sm:text-base', billingCycle === 'monthly' ? 'text-foreground font-semibold' : 'text-muted-foreground')}>
          {t('monthlyBilling')}
        </Label>
        <Switch
          id="billing-cycle"
          checked={billingCycle === 'yearly'}
          onCheckedChange={(checked) => setBillingCycle(checked ? 'yearly' : 'monthly')}
        />
        <Label htmlFor="billing-cycle" className={cn('transition-colors text-sm sm:text-base', billingCycle === 'yearly' ? 'text-foreground font-semibold' : 'text-muted-foreground')}>
          {t('yearlyBilling')} <span className="text-primary font-bold">{t('yearlySave')}</span>
        </Label>
      </div>

      {/* ✅ DISSENY ADAPTABLE: afegim 'md:grid-cols-2' per a una millor visualització en tauletes */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 items-stretch">
        {plans.map((plan) => (
          <div
            key={plan.name}
            className={cn(
              "glass-card p-6 rounded-2xl flex flex-col relative border-2 transition-transform duration-300",
              plan.isPopular ? `${plan.colors.border} shadow-lg shadow-primary/20` : "border-transparent",
              plan.isCurrent ? "ring-2 ring-offset-2 ring-offset-background" : "lg:hover:-translate-y-2",
              plan.isCurrent ? plan.colors.border : ""
            )}
          >
            {plan.isPopular && (
              <div className="absolute top-0 -translate-y-1/2 left-1/2 -translate-x-1/2 bg-primary text-primary-foreground px-3 py-1 text-xs font-bold rounded-full tracking-wider">
                {t('mostPopular')}
              </div>
            )}

            <div className="flex-grow flex flex-col">
              <div className="flex items-center gap-3 mb-4">
                <PlanIcon name={plan.iconName} className={cn("w-6 h-6", plan.colors.text)} />
                <h3 className="text-xl font-bold text-foreground">{plan.name}</h3>
              </div>
              <p className="text-muted-foreground text-sm mb-6 flex-grow">{plan.description}</p>
              <div className="mb-2 min-h-[80px]">
                {plan.priceMonthly !== null ? (
                  <>
                    {/* ✅ DISSENY ADAPTABLE: Mida de font adaptable per al preu */}
                    <span className="text-4xl sm:text-5xl font-extrabold text-foreground">
                      €{billingCycle === 'monthly' ? plan.priceMonthly : plan.priceYearly ? Math.round(plan.priceYearly / 12) : 0}
                    </span>
                    <span className="text-muted-foreground text-sm sm:text-base">{t('pricePerMonth')}</span>
                    {billingCycle === 'yearly' && plan.priceYearly && (
                      <p className="text-xs text-muted-foreground mt-1">{t('billedAs', { price: plan.priceYearly })}</p>
                    )}
                  </>
                ) : (
                  <span className="text-3xl sm:text-4xl font-extrabold text-foreground">{t('contactUs')}</span>
                )}
              </div>
              <Button
                onClick={() => handleSelectPlan(plan.id)}
                // ✅ LÒGICA DE PERMISOS: El botó es desactiva si no pot gestionar la facturació
                disabled={plan.isCurrent || isPending || !canManageBilling}
                className={cn("w-full font-bold mt-2 mb-10", /* ... */)}
              >
                {plan.isCurrent ? t('yourCurrentPlan') : t('selectPlan')}
              </Button>
              <ul className="space-y-4 text-sm">
                {plan.features.map((feature, index) => (
                  <li key={index} className="flex items-start">
                    <Check className={cn("w-4 h-4 mr-3 mt-0.5 flex-shrink-0", plan.colors.text)} />
                    <span className="text-foreground/80">{feature}</span>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        ))}
      </div>

      {activeSubscription && activeSubscription.status === 'active' && currentPlanDetails && (
        <div className="max-w-2xl mx-auto">
          <Accordion type="single" collapsible className="w-full">
            <AccordionItem value="item-1" className="glass-card rounded-2xl border px-4 sm:px-6">
              <AccordionTrigger className="hover:no-underline text-left">
                <div className="flex items-center gap-3">
                  <PlanIcon name={currentPlanDetails.iconName} className={cn("w-6 h-6", currentPlanDetails.colors.text)} />
                  <div>
                    <p className="font-bold text-lg">{t('currentPlan', { planName: currentPlanDetails.name })}</p>
                    <p className="text-sm text-muted-foreground">{t('renewsOn', { date: new Date(activeSubscription.current_period_end).toLocaleDateString(locale, { day: 'numeric', month: 'long' }) })}. {t('clickForDetails')}</p>
                  </div>
                </div>
              </AccordionTrigger>
              <AccordionContent>
                <div className="space-y-3 text-sm pt-4">
                  <div className="flex justify-between"><span className="text-muted-foreground">{t('planLabel')}</span><span className="font-semibold">{currentPlanDetails.name}</span></div>
                  <div className="flex justify-between"><span className="text-muted-foreground">{t('statusLabel')}</span><span className="font-semibold text-green-500">{t('statusValue')}</span></div>
                  <div className="flex justify-between"><span className="text-muted-foreground">{t('renewalDateLabel')}</span><span className="font-semibold">{new Date(activeSubscription.current_period_end).toLocaleDateString(locale, { day: 'numeric', month: 'long', year: 'numeric' })}</span></div>
                </div>
                <div className="border-t mt-6 pt-6 flex flex-col sm:flex-row gap-3">
                  <Button className="w-full" onClick={handleManageBilling}>{t('manageButton')}</Button>
                  <Button variant="destructive" className="w-full" onClick={handleCancelSubscription} disabled={isPending}>{t('cancelButton')}</Button>
                </div>
              </AccordionContent>
            </AccordionItem>
          </Accordion>
        </div>
      )}
    </motion.div>
  );
}

// =================== FILE: src/app/[locale]/(app)/settings/billing/_components/BillingData.tsx ===================

import { BillingClient } from './BillingClient';
import { createClient } from '@/lib/supabase/server';
import { cookies } from 'next/headers';
import { getTranslations } from 'next-intl/server';
import { redirect } from 'next/navigation';
import type { Subscription, Plan } from '@/types/settings';

const plansStructure = [
    { id: 'free', name: 'Free', iconName: 'Gift', priceMonthly: 0, priceYearly: 0, colors: { border: "border-muted", text: "text-muted-foreground", bg: "bg-muted", hoverBg: "hover:bg-muted/80" } },
    { id: 'plus', name: 'Plus', iconName: 'Star', priceMonthly: 29, priceYearly: 290, isPopular: true, colors: { border: "border-primary", text: "text-primary", bg: "bg-primary", hoverBg: "hover:bg-primary/90" } },
    { id: 'premium', name: 'Premium', iconName: 'Gem', priceMonthly: 79, priceYearly: 790, colors: { border: "border-teal-500", text: "text-teal-500", bg: "bg-teal-500", hoverBg: "hover:bg-teal-500/90" } },
    { id: 'custom', name: 'Personalitzat', iconName: 'Settings', priceMonthly: null, priceYearly: null, colors: { border: "border-foreground", text: "text-foreground", bg: "bg-foreground", hoverBg: "hover:bg-foreground/90" } },
];

export async function BillingData() {
    const t = await getTranslations('SettingsPage.billing');
    const supabase = createClient(cookies());

    const { data: { user } } = await supabase.auth.getUser();
    if (!user) return redirect('/login');
    
    const activeTeamId = user.app_metadata?.active_team_id;
    if (!activeTeamId) {
        return redirect('/settings/team');
    }

    const [subscriptionRes, memberRes] = await Promise.all([
        supabase.from('subscriptions').select('*').eq('team_id', activeTeamId).maybeSingle(),
        supabase.from('team_members').select('role').eq('user_id', user.id).eq('team_id', activeTeamId).single()
    ]);
    
    const activeSubscription = subscriptionRes.data;
    const currentUserRole = memberRes.data?.role || null;

    // ✅ TRAMPA DE DEPURACIÓ
    console.log("\n--- DEPURACIÓ DE PERMISOS (BillingData.tsx) ---");
    console.log("ID de l'usuari actual:", user.id);
    console.log("ID de l'equip actiu:", activeTeamId);
    console.log("Resultat de la consulta de rol (memberRes):", JSON.stringify(memberRes, null, 2));
    console.log("Rol de l'usuari detectat:", currentUserRole);
    console.log("----------------------------------------------\n");

    const finalPlansData: Plan[] = plansStructure.map(plan => ({
        ...plan,
        name: plan.id === 'custom' ? t(`plans.${plan.id}.name`) : plan.name,
        description: t(`plans.${plan.id}.description`),
        features: t.raw(`plans.${plan.id}.features`),
        isCurrent: activeSubscription?.status === 'active' && activeSubscription.plan_id === plan.id,
    }));

    return (
        <div>
            <h1 className="text-3xl font-bold mb-2">{t('pageTitle')}</h1>
            <p className="text-muted-foreground mb-8">{t('pageDescription')}</p>
            <BillingClient 
                plans={finalPlansData} 
                activeSubscription={activeSubscription as Subscription | null}
                currentUserRole={currentUserRole}
            />
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/settings/billing/_components/BillingSkeleton.tsx ===================

/**
 * @file BillingSkeleton.tsx
 * @summary Muestra un esqueleto de carga para la página de Facturación y Planes.
 */
"use client";

import React from 'react';
import { Skeleton } from '@/components/ui/skeleton';

export const BillingSkeleton: React.FC = () => (
  <div className="space-y-12 animate-pulse">
    <div className="space-y-2">
      <Skeleton className="h-9 w-1/3" />
      <Skeleton className="h-5 w-2/3" />
    </div>
    <div className="flex items-center justify-center space-x-4">
      <Skeleton className="h-5 w-32" />
      <Skeleton className="h-6 w-12 rounded-full" />
      <Skeleton className="h-5 w-40" />
    </div>
    <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
      <Skeleton className="h-96 rounded-2xl" />
      <Skeleton className="h-96 rounded-2xl" />
      <Skeleton className="h-96 rounded-2xl" />
      <Skeleton className="h-96 rounded-2xl" />
    </div>
  </div>
);

// =================== FILE: src/app/[locale]/(app)/settings/billing/_components/UpgradePlanNotice.tsx ===================

"use client";

import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Gem } from 'lucide-react'; // Icona per a funcionalitats premium

interface UpgradePlanNoticeProps {
    featureName: string;
    requiredPlan: string;
    locale: string;
}

export function UpgradePlanNotice({ featureName, requiredPlan, locale }: UpgradePlanNoticeProps) {
    return (
        <div className="flex items-center justify-center h-full">
            <Card className="w-full max-w-lg text-center">
                <CardHeader>
                    <div className="mx-auto bg-primary/10 p-3 rounded-full w-fit">
                        <Gem className="w-8 h-8 text-primary" />
                    </div>
                    <CardTitle className="mt-4">Funcionalitat Premium</CardTitle>
                    <CardDescription>
                        El teu pla actual no inclou accés a la funcionalitat de <span className="font-semibold">{featureName}</span>.
                    </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                    <p>
                        Per a poder utilitzar aquesta eina, si us plau, millora la teva subscripció al pla <span className="font-semibold">{requiredPlan}</span> o superior.
                    </p>
                    <Button asChild size="lg">
                        <Link href={`/${locale}/settings/billing`}>
                            Veure Plans i Preus
                        </Link>
                    </Button>
                </CardContent>
            </Card>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/settings/blacklist/action.ts ===================

"use server";

import { revalidatePath } from "next/cache";
import { validateUserSession } from "@/lib/supabase/session";
import { hasPermission, PERMISSIONS } from "@/lib/permissions";

/**
 * Afegeix una nova regla a la blacklist per a l'equip actiu.
 */
export async function addRuleAction(formData: FormData) {
  const session = await validateUserSession();
  if ('error' in session) {
    return { success: false, message: session.error.message };
  }
  const { supabase, user, activeTeamId } = session;

  // ✅ REFACTORITZACIÓ: Comprovació de permisos. Només usuaris autoritzats poden afegir regles.
  const { data: member } = await supabase.from('team_members').select('role').eq('user_id', user.id).eq('team_id', activeTeamId).single();
  if (!hasPermission(member?.role, PERMISSIONS.MANAGE_BLACKLIST)) {
    return { success: false, message: "No tens permisos per a gestionar la llista negra." };
  }

  const newRule = formData.get('newRule') as string;
  if (!newRule || !newRule.trim()) {
    return { success: false, message: "La regla no pot estar buida." };
  }

  const value = newRule.trim().toLowerCase();
  const rule_type = value.includes('@') ? 'email' : 'domain';

  const { error } = await supabase.from('blacklist_rules').insert({
    user_id: user.id,
    team_id: activeTeamId,
    value,
    rule_type
  });

  if (error) {
    console.error('Error afegint regla de blacklist:', error);
    return { success: false, message: "No s'ha pogut afegir la regla. Potser ja existeix." };
  }

  revalidatePath('/settings/blacklist');
  return { success: true, message: "Regla afegida correctament." };
}

/**
 * Elimina una regla de la blacklist.
 */
export async function deleteRuleAction(id: string) {
  const session = await validateUserSession();
  if ('error' in session) {
    return { success: false, message: session.error.message };
  }
  const { supabase, user, activeTeamId } = session;

  // ✅ REFACTORITZACIÓ: Comprovació de permisos abans d'intentar l'eliminació.
  const { data: member } = await supabase.from('team_members').select('role').eq('user_id', user.id).eq('team_id', activeTeamId).single();
  if (!hasPermission(member?.role, PERMISSIONS.MANAGE_BLACKLIST)) {
    return { success: false, message: "No tens permisos per a gestionar la llista negra." };
  }

  // La política RLS a la base de dades s'encarregarà de la seguretat a nivell de fila.
  const { error } = await supabase.from('blacklist_rules').delete().eq('id', id);

  if (error) {
    console.error('Error eliminant regla de blacklist:', error);
    return { success: false, message: "No s'ha pogut eliminar la regla." };
  }

  revalidatePath('/settings/blacklist');
  return { success: true, message: "Regla eliminada correctament." };
}


// =================== FILE: src/app/[locale]/(app)/settings/blacklist/page.tsx ===================

import { Suspense } from 'react';
import type { Metadata } from 'next';
import { getTranslations } from 'next-intl/server';

import { validatePageSession } from '@/lib/supabase/session';
import { hasPermission, PERMISSIONS } from '@/lib/permissions';

import { BlacklistData } from './_components/BlacklistData';
import { BlacklistSkeleton } from './_components/BlacklistSkeleton';
import { AccessDenied } from '@/components/shared/AccessDenied';

export const dynamic = 'force-dynamic';

// ✅ REFACTORITZACIÓ: Metadades dinàmiques per a la internacionalització.
export async function generateMetadata({ params: { locale } }: { params: { locale: string } }): Promise<Metadata> {
  const t = await getTranslations({ locale, namespace: 'SettingsPage.blacklist' });
  return { title: `${t('metaTitle')} | Ribot` };
}

/**
 * Pàgina de la Blacklist.
 * Valida la sessió i els permisos de l'usuari abans de renderitzar el contingut.
 */
export default async function BlacklistPage() {
  const { supabase, user, activeTeamId } = await validatePageSession();

  const { data: member } = await supabase
    .from('team_members')
    .select('role')
    .match({ user_id: user.id, team_id: activeTeamId })
    .single();

  // ✅ REFACTORITZACIÓ: Comprovació de permís per a VEURE la pàgina.
  if (!hasPermission(member?.role, PERMISSIONS.VIEW_BLACKLIST)) {
    return <AccessDenied message="No tens permisos per a veure aquesta secció." />;
  }

  return (
    <div className="space-y-6">
      <Suspense fallback={<BlacklistSkeleton />}>
        <BlacklistData currentUserRole={member?.role || null} />
      </Suspense>
    </div>
  );
}


// =================== FILE: src/app/[locale]/(app)/settings/blacklist/_components/BlacklistClient.tsx ===================

"use client";

import React, { useTransition, useRef } from 'react';
import { motion } from 'framer-motion';
import { useTranslations } from 'next-intl';
import { toast } from 'sonner';
import { Loader2, Trash2 } from 'lucide-react';

import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { EmptyState } from '@/components/shared/EmptyState'; // ✅ REFACTORITZACIÓ: Component per a estat buit
import { addRuleAction, deleteRuleAction } from '../action';
import type { BlacklistRule } from '@/types/settings';
import { hasPermission, PERMISSIONS } from '@/lib/permissions';

interface BlacklistClientProps {
  initialRules: BlacklistRule[];
  currentUserRole: string | null;
}

/**
 * Component de Client per a la pàgina de la Blacklist.
 * S'encarrega de la interactivitat de la UI.
 */
export function BlacklistClient({ initialRules, currentUserRole }: BlacklistClientProps) {
  const t = useTranslations('SettingsPage.blacklist');
  const [isPending, startTransition] = useTransition();
  const formRef = useRef<HTMLFormElement>(null);

  // ✅ REFACTORITZACIÓ: Variable de control per a la UI basada en permisos.
  const canManage = hasPermission(currentUserRole, PERMISSIONS.MANAGE_BLACKLIST);

  const handleAddSubmit = (formData: FormData) => {
    startTransition(async () => {
      const result = await addRuleAction(formData);
      // ✅ REFACTORITZACIÓ: Missatges de toast més específics.
      if (result.success) {
        toast.success(t('toast.addSuccess'), { description: result.message });
        formRef.current?.reset();
      } else {
        toast.error(t('toast.error'), { description: result.message });
      }
    });
  };

  const handleDelete = (id: string) => {
    startTransition(async () => {
      const result = await deleteRuleAction(id);
      if (result.success) {
        toast.success(t('toast.deleteSuccess'), { description: result.message });
      } else {
        toast.error(t('toast.error'), { description: result.message });
      }
    });
  };

  return (
    <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="glass-card p-6">
      {/* ✅ REFACTORITZACIÓ: El formulari es deshabilita si l'usuari no té permisos. */}
      <form ref={formRef} action={handleAddSubmit} className="flex gap-2 mb-6">
        <Input name="newRule" placeholder={t('placeholder')} required disabled={isPending || !canManage} />
        <Button type="submit" disabled={isPending || !canManage}>
          {isPending ? <Loader2 className="w-4 h-4 animate-spin" /> : t('addButton')}
        </Button>
      </form>

      <div className="space-y-2">
        {initialRules.length > 0 ? initialRules.map(rule => (
          <div key={rule.id} className="flex justify-between items-center p-2 bg-muted rounded-lg">
            <div className="flex items-center gap-2">
              <Badge variant={rule.rule_type === 'domain' ? 'default' : 'secondary'}>{rule.rule_type}</Badge>
              <span className="break-all">{rule.value}</span>
            </div>
            {/* ✅ REFACTORITZACIÓ: El botó d'eliminar es mostra/oculta segons els permisos. */}
            {canManage && (
              <Button variant="ghost" size="icon" onClick={() => handleDelete(rule.id)} disabled={isPending}>
                <Trash2 className="w-4 h-4 text-destructive" />
              </Button>
            )}
          </div>
        )) : (
          !isPending && <EmptyState title={t('emptyTitle')} description={t('emptyDescription')} />
        )}
      </div>
    </motion.div>
  );
}


// =================== FILE: src/app/[locale]/(app)/settings/blacklist/_components/BlacklistData.tsx ===================

import { getTranslations } from 'next-intl/server';
import { BlacklistClient } from './BlacklistClient';
import { validatePageSession } from '@/lib/supabase/session';
import type { BlacklistRule } from '@/types/settings';

interface BlacklistDataProps {
  currentUserRole: string | null;
}

/**
 * Aquest Server Component obté les dades de la blacklist i les passa
 * al Client Component que gestionarà la interactivitat.
 */
export async function BlacklistData({ currentUserRole }: BlacklistDataProps) {
  const t = await getTranslations('SettingsPage.blacklist');
  
  // ✅ REFACTORITZACIÓ: Utilitzem el nostre helper per simplificar la validació.
  const { supabase } = await validatePageSession();

  // La consulta és simple perquè la seguretat (filtrar per equip actiu)
  // es delega a les Polítiques de Row Level Security (RLS) de Supabase.
  const { data: rules, error } = await supabase
    .from('blacklist_rules')
    .select('*')
    .order('created_at', { ascending: false });

  if (error) {
    console.error("Error en carregar les regles de la blacklist:", error.message);
    // Podríem mostrar un missatge d'error aquí si fos necessari.
  }

  return (
    <div>
       <h1 className="text-3xl font-bold mb-2">{t('pageTitle')}</h1>
       <p className="text-muted-foreground mb-8">{t('pageDescription')}</p>
       <BlacklistClient 
          initialRules={(rules as BlacklistRule[]) || []} 
          currentUserRole={currentUserRole}
       />
    </div>
  );
}


// =================== FILE: src/app/[locale]/(app)/settings/blacklist/_components/BlacklistSkeleton.tsx ===================

"use client";

/**
 * @summary Mostra un esquelet de càrrega per a la pàgina de la Blacklist.
 */
export function BlacklistSkeleton() {
  return (
    <div className="glass-card p-6 animate-pulse">
      {/* Esquelet de la descripció */}
      <div className="space-y-2 mb-6">
        <div className="h-4 w-full bg-gray-700/50 rounded"></div>
        <div className="h-4 w-3/4 bg-gray-700/50 rounded"></div>
      </div>
      
      {/* Esquelet del formulari */}
      <div className="flex gap-2 mb-6">
        <div className="h-10 flex-1 bg-gray-700/50 rounded-md"></div>
        <div className="h-10 w-24 bg-gray-700/50 rounded-md"></div>
      </div>

      {/* Esquelet de la llista de regles */}
      <div className="space-y-2">
        {[...Array(3)].map((_, i) => (
          <div key={i} className="flex justify-between items-center p-2 h-10 bg-muted rounded-lg">
            <div className="flex items-center gap-2">
              <div className="h-6 w-16 bg-gray-700/50 rounded-full"></div>
              <div className="h-5 w-48 bg-gray-700/50 rounded-md"></div>
            </div>
            <div className="h-8 w-8 bg-gray-700/50 rounded-md"></div>
          </div>
        ))}
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/settings/customization/page.tsx ===================

import { Suspense } from 'react';
import type { Metadata } from 'next';
import { CustomizationData } from './_components/CustomizationData';
import { CustomizationSkeleton } from './_components/CustomizationSkeleton';

export const metadata: Metadata = {
  title: 'Personalització | Ribot',
};

export type Stage = { id: string; name: string; };
export type Tag = { id: string; name: string; color: string; };

export default function CustomizationPage() {
  return (
    <Suspense fallback={<CustomizationSkeleton />}>
      <CustomizationData />
    </Suspense>
  );
}

// =================== FILE: src/app/[locale]/(app)/settings/customization/_components/CustomizationClient.tsx ===================

"use client";

import { motion } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { toast } from 'sonner';
import { Plus, Trash, GripVertical } from 'lucide-react';
import { useTranslations } from 'next-intl';

// ✅ NOU: Importem els nostres nous components reutilitzables
import { ThemeSwitcher } from '@/components/ThemeSwitcher';
import { LanguageSwitcher } from '@/components/LanguageSwitcher';
import { type Stage, type Tag } from '../page';

export function CustomizationClient({ initialStages, initialTags }: { 
  initialStages: Stage[], 
  initialTags: Tag[] 
}) {
  const t = useTranslations('CustomizationPage');
  
  const handleNotImplemented = () => {
    toast.info("Funcionalitat no implementada", {
      description: "Aviat podràs gestionar etapes i etiquetes des d'aquí."
    });
  };

  return (
    <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="space-y-8">
      {/* Targeta per al Tema i Idioma */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div className="glass-card p-6">
          <h2 className="text-xl font-semibold">{t('themeTitle')}</h2>
          <p className="text-sm text-muted-foreground mt-2 mb-6">{t('themeDescription')}</p>
          {/* ✅ Utilitzem el component reutilitzable */}
          <ThemeSwitcher />
        </div>
        
        <div className="glass-card p-6">
          <h2 className="text-xl font-semibold">{t('languageTitle')}</h2>
          <p className="text-sm text-muted-foreground mt-2 mb-6">{t('languageDescription')}</p>
          {/* ✅ Utilitzem el component reutilitzable */}
          <LanguageSwitcher />
        </div>
      </div>

      {/* Etapes del Pipeline (la lògica es queda igual) */}
      <div className="glass-card p-8">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-xl font-semibold">{t('pipelineTitle')}</h2>
          <Button onClick={handleNotImplemented}><Plus className="w-4 h-4 mr-2" />{t('newStageButton')}</Button>
        </div>
        <div className="space-y-3">
          {initialStages.map(stage => (
            <div key={stage.id} className="flex items-center gap-3 p-3 bg-muted rounded-lg">
              <GripVertical className="w-5 h-5 text-muted-foreground cursor-grab" />
              <p className="flex-1 font-medium">{stage.name}</p>
              <Button variant="ghost" size="icon" onClick={handleNotImplemented}>
                <Trash className="w-4 h-4 text-destructive" />
              </Button>
            </div>
          ))}
        </div>
      </div>

      {/* Etiquetes de Contacte (la lògica es queda igual) */}
      <div className="glass-card p-8">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-xl font-semibold">{t('tagsTitle')}</h2>
          <Button onClick={handleNotImplemented}><Plus className="w-4 h-4 mr-2" />{t('newTagButton')}</Button>
        </div>
        <div className="flex flex-wrap gap-3">
          {initialTags.map(tag => (
            <div key={tag.id} className="flex items-center gap-2 px-3 py-1 rounded-full text-sm" style={{ backgroundColor: `${tag.color}20`, color: tag.color }}>
              <span className="font-medium">{tag.name}</span>
              <button onClick={handleNotImplemented} className="opacity-50 hover:opacity-100">
                <Trash className="w-3 h-3" />
              </button>
            </div>
          ))}
        </div>
      </div>
    </motion.div>
  );
}

// =================== FILE: src/app/[locale]/(app)/settings/customization/_components/CustomizationData.tsx ===================

import { createClient } from '@/lib/supabase/server';
import { cookies } from 'next/headers';
import { redirect } from 'next/navigation';
import { CustomizationClient } from './CustomizationClient';
import type { Stage, Tag } from '../page';

export async function CustomizationData() {
    const supabase = createClient(cookies());

    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
        return redirect('/login');
    }

    // Comprovació de seguretat: si l'usuari no té un equip actiu, no pot personalitzar res.
    const activeTeamId = user.app_metadata?.active_team_id;
    if (!activeTeamId) {
        return redirect('/settings/team');
    }

    // La RLS filtrarà automàticament per l'equip actiu.
    const [stagesRes, tagsRes] = await Promise.all([
        supabase.from('pipeline_stages').select('id, name').order('position'),
        // ✅ CORRECCIÓ: Utilitzem el nom de taula correcte 'contact_tags'
        supabase.from('contact_tags').select('id, name, color')
    ]);

    if (stagesRes.error) {
        console.error('Error en carregar les etapes del pipeline:', stagesRes.error);
    }
    if (tagsRes.error) {
        console.error('Error en carregar les etiquetes:', tagsRes.error);
    }

    return <CustomizationClient 
        initialStages={(stagesRes.data as Stage[]) || []} 
        initialTags={(tagsRes.data as Tag[]) || []} 
    />;
}

// =================== FILE: src/app/[locale]/(app)/settings/customization/_components/CustomizationSkeleton.tsx ===================

"use client";

export function CustomizationSkeleton() {
  return (
    <div className="space-y-8 animate-pulse">
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div className="glass-card p-6 h-48"></div>
        <div className="glass-card p-6 h-48"></div>
      </div>
      <div className="glass-card p-8 h-64"></div>
      <div className="glass-card p-8 h-64"></div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/settings/integrations/actions.ts ===================

/**
 * @file actions.ts (Integrations)
 * @summary Versió final i definitiva per a la gestió d'integracions.
 */
"use server";

import { createClient } from "@/lib/supabase/server";
import { revalidatePath } from "next/cache";
import { cookies } from "next/headers";
import { redirect } from "next/navigation";
import { v4 as uuidv4 } from 'uuid';

// --- ACCIONS DE CONNEXIÓ (FLUX D'AUTORITZACIÓ DIRECTE) ---

export async function connectGoogleAction() {
  const cookieStore = cookies();
  const supabase = createClient(cookies())
;

  const { data: { user } } = await supabase.auth.getUser();
  if (!user) return redirect('/login');

  const state = uuidv4();
  (await cookieStore).set('oauth_state', state, { path: '/', httpOnly: true, secure: process.env.NODE_ENV === 'production' });

  const redirectUri = `${process.env.NEXT_PUBLIC_SITE_URL}/api/oauth/callback/google`;
  const googleParams = new URLSearchParams({
    client_id: process.env.GOOGLE_CLIENT_ID!,
    redirect_uri: redirectUri,
    response_type: 'code',
    scope: 'https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.send',
    access_type: 'offline',
    prompt: 'consent',
    state: state,
  });

  const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?${googleParams.toString()}`;
  redirect(authUrl);
}

export async function connectMicrosoftAction() {
  const cookieStore = cookies();
  const supabase = createClient(cookies())
;

  const { data: { user } } = await supabase.auth.getUser();
  if (!user) return redirect('/login');

  const state = uuidv4();
  (await cookieStore).set('oauth_state', state, { path: '/', httpOnly: true, secure: process.env.NODE_ENV === 'production' });

  const redirectUri = `${process.env.NEXT_PUBLIC_SITE_URL}/api/oauth/callback/microsoft`;
  const microsoftParams = new URLSearchParams({
    client_id: process.env.AZURE_CLIENT_ID!,
    response_type: 'code',
    redirect_uri: redirectUri,
    scope: 'openid email offline_access User.Read Mail.Read Mail.Send',
    state: state,
  });

  const authUrl = `https://login.microsoftonline.com/common/oauth2/v2.0/authorize?${microsoftParams.toString()}`;
  redirect(authUrl);
}

// Acció per iniciar OAuth amb LinkedIn
export async function connectLinkedInAction() {
  const cookieStore = cookies();
  const supabase = createClient(cookies())
;

  const { data: { user } } = await supabase.auth.getUser();
  if (!user) return redirect('/login');

  const state = uuidv4();
  (await cookieStore).set('oauth_state', state, { path: '/', httpOnly: true, secure: process.env.NODE_ENV === 'production' });

  const redirectUri = `${process.env.NEXT_PUBLIC_SITE_URL}/api/oauth/callback/linkedin`;
  const linkedinParams = new URLSearchParams({
    response_type: 'code',
    client_id: process.env.LINKEDIN_CLIENT_ID!,
    redirect_uri: redirectUri,
    state: state,
    scope: 'openid profile email w_member_social',
    prompt: 'consent', // ajuda a forçar el consentiment de nou si escau
  });

  const authUrl = `https://www.linkedin.com/oauth/v2/authorization?${linkedinParams.toString()}`;
  redirect(authUrl);
}
// ✅ CORRECCIÓ: La funció de Facebook ara segueix el mateix patró que les altres.
export async function connectFacebookAction() {
  const cookieStore = cookies();
  const supabase = createClient(cookies())
;

  const { data: { user } } = await supabase.auth.getUser();
  if (!user) return redirect('/login');

  const state = uuidv4();
  (await cookieStore).set('oauth_state', state, { path: '/', httpOnly: true, secure: process.env.NODE_ENV === 'production' });

  const redirectUri = `${process.env.NEXT_PUBLIC_SITE_URL}/api/oauth/callback/facebook`;
  
  // ✅ CORRECCIÓ DEFINITIVA: Demanem tots els permisos necessaris des del principi.
  const scopes = [
    'pages_show_list',
    'pages_manage_posts',
    'business_management', // Aquest és el permís clau que ens faltava
    'instagram_basic',
    'instagram_content_publish'
  ].join(',');

  const facebookParams = new URLSearchParams({
    client_id: process.env.FACEBOOK_CLIENT_ID!,
    redirect_uri: redirectUri,
    response_type: 'code',
    scope: scopes,
    state: state,
  });

  const authUrl = `https://www.facebook.com/v19.0/dialog/oauth?${facebookParams.toString()}`;
  redirect(authUrl);
}
// --- FUNCIONS DE DESCONNEXIÓ ---

// --- ACCIONS DE DESCONNEXIÓ (ACTUALITZADES) ---

async function handleDisconnect(provider: string) {
  const supabase = createClient(cookies());
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) return { success: false, message: "Usuari no trobat." };

  try {
      // Definim quines integracions són d'equip i quines són personals
      const isTeamIntegration = ['linkedin', 'facebook', 'instagram'].includes(provider);
      
      let query;

      if (isTeamIntegration) {
          const activeTeamId = user.app_metadata?.active_team_id;
          if (!activeTeamId) return { success: false, message: "No hi ha cap equip actiu seleccionat." };
          
          // Si és d'equip, esborrem de 'team_credentials'
          query = supabase.from('team_credentials').delete().match({ team_id: activeTeamId, provider: provider });
      } else {
          // Si és personal, esborrem de 'user_credentials'
          query = supabase.from('user_credentials').delete().match({ user_id: user.id, provider: provider });
      }

      const { error } = await query;
      if (error) throw error;

      // Opcional: Crida a una Edge Function per a revocar el token a la plataforma externa
      // try {
      //     await supabase.functions.invoke(`${provider}-revoke-token`);
      // } catch (e) {
      //     console.warn(`No s'ha pogut revocar el token per a ${provider}.`);
      // }

      revalidatePath('/settings/integrations');
      return { success: true, message: `Integració desconnectada correctament.` };

  } catch (error) {
      const errorMessage = error instanceof Error ? error.message : "Error desconegut";
      return { success: false, message: `No s'ha pogut desconnectar: ${errorMessage}` };
  }
}

export async function disconnectGoogleAction() { return await handleDisconnect('google'); }
export async function disconnectMicrosoftAction() { return await handleDisconnect('microsoft'); }
export async function disconnectLinkedInAction() { return await handleDisconnect('linkedin'); }
export async function disconnectFacebookAction() { return await handleDisconnect('facebook'); }

// =================== FILE: src/app/[locale]/(app)/settings/integrations/page.tsx ===================

import { Suspense } from 'react';
import type { Metadata } from 'next';
import { getTranslations } from 'next-intl/server';
import { IntegrationsData } from './_components/IntegrationsData';
import { IntegrationsSkeleton } from './_components/IntegrationsSkeleton';

export async function generateMetadata(): Promise<Metadata> {
    const t = await getTranslations('SettingsPage.integrations');
    return { title: t('pageTitle') };
}

export default function IntegrationsPage() {
    return (
        <Suspense fallback={<IntegrationsSkeleton />}>
            <IntegrationsData />
        </Suspense>
    );
}

// =================== FILE: src/app/[locale]/(app)/settings/integrations/_components/IntegrationsClient.tsx ===================

"use client";

import React, { useState, useTransition, useEffect } from 'react';
import { useRouter, useSearchParams, usePathname } from 'next/navigation';
import { motion } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { toast } from 'sonner';
import { CheckCircle, Loader2, XCircle } from 'lucide-react';
import { 
    connectGoogleAction, disconnectGoogleAction, 
    connectMicrosoftAction, disconnectMicrosoftAction,
    connectLinkedInAction, disconnectLinkedInAction,
    connectFacebookAction, disconnectFacebookAction
} from '../actions';
import Image from 'next/image';
import { useTranslations } from 'next-intl';

// Importem les teves imatges locals
import instagram from '@/../public/instagram.jpeg';
import facebook from '@/../public/facebook.jpeg';
import linkedin from '@/../public/linkedin.png';

interface IntegrationsClientProps {
    initialConnectionStatuses: {
        google: boolean;
        microsoft: boolean;
        linkedin: boolean;
        facebook: boolean;
        instagram: boolean;
    };
}

// Definim el tipus per als proveïdors per a més seguretat
type Provider = 'google' | 'microsoft' | 'linkedin' | 'facebook';

export function IntegrationsClient({ initialConnectionStatuses }: IntegrationsClientProps) {
    const t = useTranslations('SettingsPage.integrations');
    const router = useRouter();
    const pathname = usePathname();
    const searchParams = useSearchParams();

    // Utilitzem un estat local per a poder actualitzar la UI a l'instant
    const [connections, setConnections] = useState(initialConnectionStatuses);
    // Un únic estat de càrrega per a totes les accions
    const [isPending, startTransition] = useTransition();

    const width = 34;
    const height = 34;

    // Aquest efecte gestiona els missatges d'èxit/error després de la redirecció d'OAuth
    useEffect(() => {
        const error = searchParams.get('error');
        const success = searchParams.get('success');

        if (error) {
            toast.error(t('toast.error'), { description: t('toast.genericError') });
        }
        if (success === 'true') {
            toast.success(t('toast.success'), { description: t('toast.connectedSuccess') });
            router.refresh(); // Refresquem les dades del servidor
        }
        
        // Netegem la URL per a evitar que el missatge es mostri de nou si l'usuari refresca
        if (error || success) {
            router.replace(pathname, { scroll: false });
        }
    }, [searchParams, router, pathname, t]);

    const handleConnect = (provider: Provider) => {
        startTransition(() => {
            if (provider === 'google') connectGoogleAction();
            if (provider === 'microsoft') connectMicrosoftAction();
            if (provider === 'linkedin') connectLinkedInAction();
            if (provider === 'facebook') connectFacebookAction();
        });
    };

    const handleDisconnect = (provider: Provider) => {
        startTransition(async () => {
            const actionMap = {
                google: disconnectGoogleAction,
                microsoft: disconnectMicrosoftAction,
                linkedin: disconnectLinkedInAction,
                facebook: disconnectFacebookAction,
            };
            const result = await actionMap[provider]();
            
            if (result.success) {
                toast.success(result.message);
                // Actualitzem l'estat local a l'instant per a una millor UX
                if (provider === 'facebook') {
                    setConnections(prev => ({ ...prev, facebook: false, instagram: false }));
                } else {
                    setConnections(prev => ({ ...prev, [provider]: false }));
                }
                router.refresh(); // Sincronitzem amb el servidor
            } else {
                toast.error(result.message);
            }
        });
    };
    
    // Llista de les teves integracions per a renderitzar-les de manera dinàmica
    const integrationList = [
        { name: 'google', title: t('googleTitle'), description: t('googleDescription'), icon: "https://fonts.gstatic.com/s/i/productlogos/googleg/v6/24px.svg" },
        { name: 'microsoft', title: t('microsoftTitle'), description: t('microsoftDescription'), icon: "https://img.icons8.com/?size=100&id=117562&format=png&color=000000" },
        { name: 'linkedin', title: t('linkedinTitle'), description: t('linkedinDescription'), icon: linkedin },
    ] as const;

    return (
        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
            <div className="glass-card p-4 sm:p-6 md:p-8 space-y-4">
                <h2 className="text-xl font-semibold mb-2">{t('title')}</h2>

                {integrationList.map((item) => (
                    <div key={item.name} className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 p-4 bg-muted/50 rounded-lg">
                        <div className="flex items-center gap-4">
                            <Image src={item.icon} width={width} height={height} alt={`${item.name} logo`} className="flex-shrink-0" unoptimized />
                            <div>
                                <h3 className="font-semibold">{item.title}</h3>
                                <p className="text-sm text-muted-foreground">{item.description}</p>
                            </div>
                        </div>
                        <div className="w-full sm:w-auto flex-shrink-0">
                            {connections[item.name] ? (
                                <div className="flex items-center justify-between w-full sm:gap-4">
                                    <span className="flex items-center gap-2 text-green-500 text-sm"><CheckCircle className="w-5 h-5" /> {t('statusConnected')}</span>
                                    <Button variant="destructive" size="sm" onClick={() => handleDisconnect(item.name)} disabled={isPending}>
                                        {isPending && <Loader2 className="w-4 h-4 mr-2 animate-spin"/>} 
                                        <XCircle className="w-4 h-4 sm:mr-2" /> 
                                        <span className="hidden sm:inline">{t('disconnectButton')}</span>
                                    </Button>
                                </div>
                            ) : (
                                <form action={() => handleConnect(item.name)} className="w-full">
                                    <Button type="submit" disabled={isPending} className="w-full">
                                        {isPending && <Loader2 className="w-4 h-4 mr-2 animate-spin"/>}
                                        {t('connectButton')}
                                    </Button>
                                </form>
                            )}
                        </div>
                    </div>
                ))}
                
                <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 p-4 bg-muted/50 rounded-lg">
                    <div className="flex items-center gap-4">
                        <div className="flex -space-x-2 flex-shrink-0">
                            <Image src={facebook} width={width} height={height} alt="Facebook logo" className="rounded-full ring-2 ring-background"/>
                            <Image src={instagram} width={width} height={height} alt="Instagram logo" className="rounded-full ring-2 ring-background"/>
                        </div>
                        <div>
                            <h3 className="font-semibold">{t('metaTitle')}</h3>
                            <p className="text-sm text-muted-foreground">{t('metaDescription')}</p>
                        </div>
                    </div>
                    <div className="w-full sm:w-auto flex-shrink-0">
                        {connections.facebook ? (
                            <div className="flex items-center justify-between w-full sm:gap-4">
                                <span className="flex items-center gap-2 text-green-500 text-sm"><CheckCircle className="w-5 h-5" /> {t('statusConnected')}</span>
                                <Button variant="destructive" size="sm" onClick={() => handleDisconnect('facebook')} disabled={isPending}>
                                    {isPending && <Loader2 className="w-4 h-4 mr-2 animate-spin"/>} 
                                    <XCircle className="w-4 h-4 sm:mr-2" /> 
                                    <span className="hidden sm:inline">{t('disconnectButton')}</span>
                                </Button>
                            </div>
                        ) : (
                            <form action={() => handleConnect('facebook')} className="w-full">
                                <Button type="submit" disabled={isPending} className="w-full">
                                    {isPending && <Loader2 className="w-4 h-4 mr-2 animate-spin"/>} 
                                    {t('connectButton')}
                                </Button>
                            </form>
                        )}
                    </div>
                </div>
            </div>
        </motion.div>
    );
}

// =================== FILE: src/app/[locale]/(app)/settings/integrations/_components/IntegrationsData.tsx ===================

import { createClient } from "@/lib/supabase/server";
import { cookies } from "next/headers";
import { redirect } from "next/navigation";
import { IntegrationsClient } from "./IntegrationsClient";
import { getTranslations } from "next-intl/server";

export async function IntegrationsData() {
    const t = await getTranslations('SettingsPage.integrations');
    const supabase = createClient(cookies());

    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
        return redirect('/login');
    }

    const activeTeamId = user.app_metadata?.active_team_id;
    if (!activeTeamId) {
        return redirect('/settings/team');
    }
    
    // Busquem les credencials personals (lligades a user_id)
    // I les credencials de l'equip actiu (lligades a team_id) en paral·lel.
    const [userCredsRes, teamCredsRes] = await Promise.all([
        supabase.from('user_credentials').select('provider').eq('user_id', user.id),
        supabase.from('team_credentials').select('provider').eq('team_id', activeTeamId)
    ]);

    const userProviders = userCredsRes.data?.map(c => c.provider) || [];
    const teamProviders = teamCredsRes.data?.map(c => c.provider) || [];
    
    const allConnectedProviders = new Set([...userProviders, ...teamProviders]);

    const connectionStatuses = {
        google: allConnectedProviders.has('google'),
        microsoft: allConnectedProviders.has('microsoft'),
        linkedin: allConnectedProviders.has('linkedin'),
        facebook: allConnectedProviders.has('facebook'),
        instagram: allConnectedProviders.has('instagram'),
    };
    
    return (
        <div>
            <h1 className="text-3xl font-bold mb-8">{t('pageTitle')}</h1>
            <IntegrationsClient initialConnectionStatuses={connectionStatuses} />
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/settings/integrations/_components/IntegrationsSkeleton.tsx ===================

/**
 * @file IntegrationsSkeleton.tsx
 * @summary Mostra un esquelet de càrrega per a la pàgina d'Integracions.
 */
"use client";

import { Skeleton } from '@/components/ui/skeleton';

export function IntegrationsSkeleton() {
  return (
    <div>
      {/* Esquelet per a la capçalera */}
      <Skeleton className="h-9 w-1/2 mb-8" />
      
      {/* Esquelet per a la targeta d'integracions */}
      <div className="glass-card p-8 space-y-4 animate-pulse">
        <Skeleton className="h-7 w-1/3 mb-4" />
        {/* Esquelet per a la línia de Google */}
        <div className="flex items-center justify-between p-4 bg-muted/50 rounded-lg">
          <div className="flex items-center gap-4">
            <Skeleton className="h-6 w-6 rounded-full" />
            <div className="space-y-2">
              <Skeleton className="h-5 w-24" />
              <Skeleton className="h-4 w-40" />
            </div>
          </div>
          <Skeleton className="h-9 w-28 rounded-md" />
        </div>
        {/* Esquelet per a la línia de Microsoft */}
        <div className="flex items-center justify-between p-4 bg-muted/50 rounded-lg">
          <div className="flex items-center gap-4">
            <Skeleton className="h-6 w-6 rounded-full" />
            <div className="space-y-2">
              <Skeleton className="h-5 w-32" />
              <Skeleton className="h-4 w-48" />
            </div>
          </div>
          <Skeleton className="h-9 w-28 rounded-md" />
        </div>
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/settings/layout.tsx ===================

import { SettingsNav } from "./_components/settings-nav";

// Aquest component de layout envoltarà totes les pàgines de la secció de configuració.
export default function SettingsLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    // En pantalles grans (lg), creem una graella de dues columnes.
    // En pantalles més petites, els elements es col·loquen un a sobre de l'altre.
    <div className="lg:grid lg:grid-cols-[280px_1fr] lg:gap-12 space-y-8 lg:space-y-0">
      <aside className="lg:col-span-1">
        {/* El menú de navegació */}
        <SettingsNav />
      </aside>
      <main className="lg:col-span-1">
        {/* Aquí es renderitzarà el contingut de cada pàgina (perfil, facturació, etc.) */}
        {children}
      </main>
    </div>
  );
}


// =================== FILE: src/app/[locale]/(app)/settings/page.tsx ===================

// Aquest és un Server Component que gestiona la ruta arrel '/settings'.

import { redirect } from 'next/navigation';

/**
 * Aquesta pàgina no té contingut visual propi.
 * La seva única funció és redirigir l'usuari automàticament
 * a la primera secció de la configuració, que és el perfil.
 * Això millora l'experiència d'usuari, evitant que arribi a una pàgina '/settings' buida.
 */
export default function SettingsRootPage() {
  // 'redirect' és una funció de Next.js que envia l'usuari a una altra URL.
  redirect('/settings/profile');
}

// =================== FILE: src/app/[locale]/(app)/settings/permissions/actions.ts ===================

"use server";

import { createClient } from "@/lib/supabase/server";
import { revalidatePath } from "next/cache";
import { cookies } from "next/headers";

// El tipus de dades que rebrem del client
type Permission = {
    grantee_user_id: string; // Qui rep el permís
    target_user_id: string;  // De qui veurà els correus
};

/**
 * Actualitza tots els permisos d'inbox per a l'equip actiu.
 */
export async function updateInboxPermissionsAction(permissions: Permission[]) {
    const supabase = createClient(cookies());
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) return { success: false, message: "No autenticat." };

    const activeTeamId = user.app_metadata?.active_team_id;
    if (!activeTeamId) return { success: false, message: "No hi ha cap equip actiu seleccionat." };

    // Comprovació de rol: només owners/admins poden canviar permisos
    const { data: member } = await supabase.from('team_members').select('role').eq('user_id', user.id).eq('team_id', activeTeamId).single();
    if (!['owner', 'admin'].includes(member?.role || '')) {
        return { success: false, message: "No tens permisos per a gestionar els permisos de l'inbox." };
    }
    
    try {
        // Estratègia "esborrar i tornar a crear": és la més simple i robusta.
        // 1. Esborrem tots els permisos existents per a aquest equip.
        await supabase.from('inbox_permissions').delete().eq('team_id', activeTeamId);

        // 2. Si hi ha nous permisos per a desar, els inserim.
        if (permissions.length > 0) {
            const permissionsToInsert = permissions.map(p => ({ ...p, team_id: activeTeamId }));
            await supabase.from('inbox_permissions').insert(permissionsToInsert).throwOnError();
        }

        revalidatePath('/settings/permissions');
        return { success: true, message: "Permisos actualitzats correctament." };
    } catch (error) {
        const message = error instanceof Error ? error.message : "Error desconegut en desar els permisos.";
        return { success: false, message };
    }
}

// =================== FILE: src/app/[locale]/(app)/settings/permissions/page.tsx ===================

import { createClient } from "@/lib/supabase/server";
import { redirect } from "next/navigation";
import { PermissionsClient } from './_components/PermissionsClient';
import { Card, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { TriangleAlert } from "lucide-react";

// Definim aquí els tipus de dades per a aquesta pàgina
type Member = { id: string; full_name: string | null; email: string | null; };
type Permission = { grantee_user_id: string; target_user_id: string; };

export default async function PermissionsPage() {
    const supabase = createClient();
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) redirect('/login');
    
    const activeTeamId = user.app_metadata?.active_team_id;
    if (!activeTeamId) redirect('/settings/team');

    // ✅ PAS 1: Comprovació de permisos a nivell de pàgina
    // Verifiquem el rol de l'usuari actual dins de l'equip actiu.
    const { data: currentUserMember } = await supabase
        .from('team_members')
        .select('role')
        .eq('user_id', user.id)
        .eq('team_id', activeTeamId)
        .single();
    
    const canManagePermissions = ['owner', 'admin'].includes(currentUserMember?.role || '');

    // Si l'usuari no és owner o admin, li mostrem un missatge d'accés denegat.
    if (!canManagePermissions) {
        return (
            <Card className="max-w-lg mx-auto mt-10">
                <CardHeader className="text-center">
                    <div className="mx-auto bg-destructive/10 p-3 rounded-full w-fit">
                        <TriangleAlert className="w-8 h-8 text-destructive" />
                    </div>
                    <CardTitle className="mt-4">Accés Denegat</CardTitle>
                    <CardDescription>
                        Només els propietaris i administradors de l'equip poden gestionar els permisos de la bústia d'entrada.
                    </CardDescription>
                </CardHeader>
            </Card>
        );
    }
    
    // ✅ PAS 2: Carreguem les dades necessàries si l'usuari té permís
    const [membersRes, permissionsRes] = await Promise.all([
        supabase.from('team_members').select('profiles(id, full_name, email)').eq('team_id', activeTeamId),
        supabase.from('inbox_permissions').select('grantee_user_id, target_user_id').eq('team_id', activeTeamId)
    ]);

    const teamMembers: Member[] = membersRes.data?.map(m => m.profiles).filter(Boolean) as unknown as Member[] || [];
    const initialPermissions: Permission[] = permissionsRes.data || [];

    return (
        <div className="space-y-6">
            <div>
                <h1 className="text-3xl font-bold">Permisos de l'Inbox</h1>
                <p className="text-muted-foreground mt-2">
                    Selecciona les caselles per a permetre que un membre de l'equip pugui veure la bústia de correu d'un altre.
                </p>
            </div>
            <div className="mt-8">
                <PermissionsClient
                    teamMembers={teamMembers}
                    initialPermissions={initialPermissions}
                />
            </div>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/settings/permissions/_components/PermissionsClient.tsx ===================

"use client";

import { useState, useTransition } from 'react';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Card, CardContent, CardFooter } from '@/components/ui/card';
import { toast } from 'sonner';
import { updateInboxPermissionsAction } from '../actions';
import { Loader2 } from 'lucide-react';

type Member = { id: string; full_name: string | null; email: string | null; };
type Permission = { grantee_user_id: string; target_user_id: string; };

export function PermissionsClient({ teamMembers, initialPermissions }: {
    teamMembers: Member[];
    initialPermissions: Permission[];
}) {
    const [permissions, setPermissions] = useState<Permission[]>(initialPermissions);
    const [isPending, startTransition] = useTransition();

    const handlePermissionChange = (granteeId: string, targetId: string, isChecked: boolean) => {
        if (isChecked) {
            setPermissions(prev => [...prev, { grantee_user_id: granteeId, target_user_id: targetId }]);
        } else {
            setPermissions(prev => prev.filter(p => !(p.grantee_user_id === granteeId && p.target_user_id === targetId)));
        }
    };

    const handleSave = () => {
        startTransition(async () => {
            const result = await updateInboxPermissionsAction(permissions);
            if (result.success) {
                toast.success(result.message);
            } else {
                toast.error(result.message);
            }
        });
    };

    return (
        <Card>
            <CardContent className="p-0">
                <Table>
                    <TableHeader>
                        <TableRow>
                            <TableHead className="w-[250px]">Membre de l'equip</TableHead>
                            {teamMembers.map(targetUser => (
                                <TableHead key={targetUser.id} className="text-center">
                                    Pot veure la bústia de <br/>
                                    <span className="font-semibold">{targetUser.full_name || targetUser.email}</span>
                                </TableHead>
                            ))}
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        {teamMembers.map(granteeUser => (
                            <TableRow key={granteeUser.id}>
                                <TableCell className="font-semibold">{granteeUser.full_name || granteeUser.email}</TableCell>
                                {teamMembers.map(targetUser => {
                                    // Un usuari no es pot donar permís a si mateix, la casella està buida.
                                    if (granteeUser.id === targetUser.id) {
                                        return <TableCell key={targetUser.id} />;
                                    }
                                    const isChecked = permissions.some(p => p.grantee_user_id === granteeUser.id && p.target_user_id === targetUser.id);
                                    return (
                                        <TableCell key={targetUser.id} className="text-center">
                                            <Checkbox
                                                checked={isChecked}
                                                onCheckedChange={(checked) => handlePermissionChange(granteeUser.id, targetUser.id, !!checked)}
                                            />
                                        </TableCell>
                                    );
                                })}
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>
            </CardContent>
            <CardFooter className="flex justify-end p-4 border-t">
                <Button onClick={handleSave} disabled={isPending}>
                    {isPending && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                    Desar Permisos
                </Button>
            </CardFooter>
        </Card>
    );
}

// =================== FILE: src/app/[locale]/(app)/settings/profile/actions.ts ===================

"use server";

import { revalidatePath } from "next/cache";
import { z } from 'zod';
import { validateUserSession } from "@/lib/supabase/session";
import { hasPermission, PERMISSIONS } from "@/lib/permissions";

/**
 * Actualitza les dades PERSONALS de l'usuari.
 */
export async function updateUserProfileAction(formData: FormData) {
  // ✅ MILLORA: Validació de sessió centralitzada.
  const session = await validateUserSession();
  if ('error' in session) return { success: false, message: session.error.message };
  const { supabase, user } = session;

  const profileData = {
    full_name: formData.get('full_name') as string,
    phone: formData.get('phone') as string,
    job_title: formData.get('job_title') as string,
  };

  const { error } = await supabase.from('profiles').update(profileData).eq('id', user.id);

  if (error) return { success: false, message: `Error en actualitzar el perfil: ${error.message}` };

  revalidatePath('/settings/profile');
  return { success: true, message: "Perfil personal actualitzat." };
}


// ✅ MILLORA: Esquema de Zod per a la validació de dades.
const TeamSchema = z.object({
  name: z.string().min(1, "El nom de l'empresa és obligatori."),
  tax_id: z.string().optional(),
  address: z.string().optional(),
  company_phone: z.string().optional(),
  company_email: z.string().email("L'email de l'empresa no és vàlid.").optional().or(z.literal('')),
  website: z.string().url("L'URL de la web no és vàlida.").optional().or(z.literal('')),
  summary: z.string().optional(),
  sector: z.string().optional(),
  logo_url: z.string().optional(),
});

/**
 * Actualitza les dades DE L'EMPRESA de l'equip actiu.
 */
export async function updateTeamAction(formData: FormData) {
  const session = await validateUserSession();
  if ('error' in session) return { success: false, message: session.error.message };
  const { supabase, user, activeTeamId } = session;

  // ✅ MILLORA: Permisos centralitzats amb el helper.
  const { data: member } = await supabase.from('team_members').select('role').eq('user_id', user.id).eq('team_id', activeTeamId).single();
  if (!hasPermission(member?.role, PERMISSIONS.MANAGE_TEAM_PROFILE)) {
    return { success: false, message: "No tens permisos per a editar aquest equip." };
  }

  // ✅ MILLORA: Validació de dades amb Zod.
  const rawData = Object.fromEntries(formData.entries());
  const validation = TeamSchema.safeParse(rawData);

  if (!validation.success) {
    // Podríem retornar els errors específics de Zod per mostrar-los al formulari.
    return { success: false, message: "Hi ha errors en les dades del formulari." };
  }
  
  // Treballem amb les dades validades i netejades per Zod.
  const { company_email, company_phone, ...teamData } = validation.data;
  const finalTeamData = {
    ...teamData,
    email: company_email,
    phone: company_phone
  };

  const { error } = await supabase.from('teams').update(finalTeamData).eq('id', activeTeamId);

  if (error) return { success: false, message: `Error en actualitzar l'empresa: ${error.message}` };

  revalidatePath('/settings/profile');
  return { success: true, message: "Dades de l'empresa actualitzades." };
}

// =================== FILE: src/app/[locale]/(app)/settings/profile/page.tsx ===================

import { getTranslations } from "next-intl/server";
import { ProfileData } from "./_components/ProfileData";
import { Suspense } from "react";

// Aquest és un exemple de com hauria de ser una pàgina de contingut
// dins de la secció de configuració.
export default async function ProfilePage() {
  const t = await getTranslations('SettingsPage.nav');

  return (
    <div className="space-y-8">
      {/* ✅ NOU: Afegim el títol aquí, però només el mostrem en pantalles petites (lg:hidden)
          perquè en escriptori ja apareix al menú lateral. */}
      <h1 className="text-3xl font-bold lg:hidden">{t('title')}</h1>
      
      {/* El teu contingut, com el formulari de perfil, va aquí */}
      <Suspense fallback={<div>Carregant perfil...</div>}>
        <ProfileData />
      </Suspense>
    </div>
  );
}


// =================== FILE: src/app/[locale]/(app)/settings/profile/_components/ProfileData.tsx ===================

import { validatePageSession } from '@/lib/supabase/session';
import { ProfileForm } from "./ProfileForm";
import type { Profile, Team } from "@/types/settings";

export async function ProfileData() {
  // ✅ MILLORA: Usem el helper per validar la sessió i obtenir les dades en una sola línia.
  const { supabase, user } = await validatePageSession();

  // Obtenim el perfil de l'usuari i les dades del seu equip/rol alhora.
  const [profileRes, memberRes] = await Promise.all([
    supabase.from('profiles').select('*').eq('id', user.id).single(),
    supabase.from('team_members').select('role, teams(*)').eq('user_id', user.id).eq('team_id', user.app_metadata.active_team_id).single()
  ]);
  
  const profile = profileRes.data;
  const team = memberRes.data?.teams as Team | null;
  const role = memberRes.data?.role as 'owner' | 'admin' | 'member' | null;

  if (user.app_metadata.active_team_id && !memberRes.data) {
    console.warn(`[SERVER] AVÍS: Inconsistència de dades. L'usuari té un active_team_id però no és membre.`);
  }

  return (
    <ProfileForm 
      email={user.email || ''}
      profile={profile as Profile} 
      team={team}
      role={role}
    />
  );
}

// =================== FILE: src/app/[locale]/(app)/settings/profile/_components/ProfileForm.tsx ===================

"use client";

import React, { useState, useTransition } from 'react';
import { motion } from 'framer-motion';
import Image from 'next/image';
import { toast } from 'sonner';
import { Loader2, Upload } from "lucide-react";

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';

import { createClient } from '@/lib/supabase/client';
import { updateUserProfileAction, updateTeamAction } from '../actions';
import type { Profile, Team } from '@/types/settings';

// ✅ CORRECCIÓ: Importacions que faltaven per a la gestió de permisos.
import { hasPermission, PERMISSIONS } from '@/lib/permissions.config'; 

interface ProfileFormProps {
    email: string;
    profile: Profile;
    team: Team | null;
    role: 'owner' | 'admin' | 'member' | null;
}

export function ProfileForm({ email, profile, team, role }: ProfileFormProps) {
    const [isProfilePending, startProfileTransition] = useTransition();
    const [isTeamPending, startTeamTransition] = useTransition();
    const [isUploading, setIsUploading] = useState(false);
    const [logoUrl, setLogoUrl] = useState(team?.logo_url || null);

    // Ara 'hasPermission' i 'PERMISSIONS' estan definits i funcionaran correctament.
    const canManageTeam = hasPermission(role, PERMISSIONS.MANAGE_TEAM_PROFILE);

    const handleLogoUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (!file || !team) return;

        setIsUploading(true);
        const filePath = `${team.id}/logo-${Date.now()}`;
        const { error } = await createClient().storage.from('logos').upload(filePath, file, { upsert: true });

        if (error) {
            toast.error("Error al pujar el logo", { description: error.message });
        } else {
            const { data } = createClient().storage.from('logos').getPublicUrl(filePath);
            setLogoUrl(data.publicUrl);
            toast.success("Logo pujat correctament");
        }
        setIsUploading(false);
    };

    const handleUpdateProfile = (formData: FormData) => {
        startProfileTransition(async () => {
            const result = await updateUserProfileAction(formData);
            if (result.success) toast.success(result.message);
            else toast.error(result.message);
        });
    };

    const handleUpdateTeam = (formData: FormData) => {
        startTeamTransition(async () => {
            formData.set('logo_url', logoUrl || '');
            const result = await updateTeamAction(formData);
            if (result.success) toast.success(result.message);
            else toast.error(result.message);
        });
    };

    return (
        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="space-y-8">
            {/* --- Formulari de Perfil Personal (VISIBLE PER A TOTS) --- */}
            <form action={handleUpdateProfile}>
                <Card>
                    <CardHeader>
                        <CardTitle>El Meu Perfil</CardTitle>
                        <CardDescription>Aquestes són les teves dades personals.</CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                        <div><Label>Email</Label><Input type="email" value={email} disabled className="mt-1" /></div>
                        <div><Label htmlFor="full_name">Nom i Cognoms</Label><Input id="full_name" name="full_name" defaultValue={profile?.full_name || ''} className="mt-1" /></div>
                        <div><Label htmlFor="phone">Telèfon Personal</Label><Input id="phone" name="phone" defaultValue={profile?.phone || ''} className="mt-1" /></div>
                        <div><Label htmlFor="job_title">Càrrec</Label><Input id="job_title" name="job_title" defaultValue={profile?.job_title || ''} placeholder="Ex: Director Comercial" className="mt-1" /></div>
                    </CardContent>
                    <CardFooter>
                        <Button type="submit" disabled={isProfilePending}>{isProfilePending ? "Desant..." : "Desar Perfil"}</Button>
                    </CardFooter>
                </Card>
            </form>

            {/* --- Formulari de l'Empresa (basat en 'canManageTeam') --- */}
            {canManageTeam && team && (
                <form action={handleUpdateTeam}>
                    <Card>
                        <CardHeader>
                            <CardTitle>Dades de l'Empresa</CardTitle>
                            <CardDescription>Aquesta informació s'utilitzarà a les teves factures i pressupostos.</CardDescription>
                        </CardHeader>
                        <CardContent className="space-y-6">
                            {/* Dades Bàsiques */}
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div><Label htmlFor="name">Nom de l'empresa</Label><Input id="name" name="name" defaultValue={team.name || ''} className="mt-1" /></div>
                                <div><Label htmlFor="tax_id">NIF/CIF</Label><Input id="tax_id" name="tax_id" defaultValue={team.tax_id || ''} className="mt-1" /></div>
                            </div>
                            {/* Dades de Contacte */}
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                {/* ✅ CANVI: Usem 'email' directament */}
                                <div><Label htmlFor="email">Email de l'empresa</Label><Input id="email" name="email" type="email" defaultValue={team.email || ''} className="mt-1" /></div>

                                {/* ✅ CANVI: Usem 'phone' directament */}
                                <div><Label htmlFor="phone">Telèfon de l'empresa</Label><Input id="phone" name="phone" defaultValue={team.phone || ''} className="mt-1" /></div>
                            </div>
                            {/* Adreça */}
                            <div><Label htmlFor="address">Adreça Fiscal</Label><Input id="address" name="address" defaultValue={team.address || ''} placeholder="Carrer, Número, Ciutat, CP, País" className="mt-1" /></div>
                            {/* Dades Web i Descriptives */}
                            <div><Label htmlFor="website">Pàgina web</Label><Input id="website" name="website" type="url" defaultValue={team.website || ''} placeholder="https://elteudomini.com" className="mt-1" /></div>
                            <div><Label htmlFor="summary">Descripció curta</Label><Textarea id="summary" name="summary" defaultValue={team.summary || ''} placeholder="Una breu descripció del que fa la teva empresa." className="mt-1" /></div>
                            <div><Label htmlFor="sector">Sector</Label><Input id="sector" name="sector" defaultValue={team.sector || ''} placeholder="Ex: Tecnologia, Construcció, etc." className="mt-1" /></div>
                            {/* Logo */}
                            <div>
                                <Label>Logo</Label>
                                <div className="mt-1 flex items-center gap-4">
                                    {logoUrl ? <Image src={logoUrl} alt="Logo" width={64} height={64} className="object-contain rounded-lg" /> : <div className="h-16 w-16 bg-muted rounded-lg flex items-center justify-center text-muted-foreground">Logo</div>}
                                    <Button asChild variant="outline">
                                        <label htmlFor="logo-upload" className="cursor-pointer">
                                            {isUploading ? <Loader2 className="animate-spin" /> : <Upload className="w-4 h-4 mr-2" />} Cambiar Logo
                                        </label>
                                    </Button>
                                    <input id="logo-upload" type="file" accept="image/*" className="hidden" onChange={handleLogoUpload} disabled={isUploading} />
                                </div>
                            </div>
                        </CardContent>
                        <CardFooter>
                            <Button type="submit" disabled={isTeamPending}>{isTeamPending ? "Desant..." : "Desar Dades de l'Empresa"}</Button>
                        </CardFooter>
                    </Card>
                </form>
            )}
        </motion.div>
    );
}

// =================== FILE: src/app/[locale]/(app)/settings/profile/_components/ProfileSkeleton.tsx ===================

"use client";

const SkeletonCard = ({ lines }: { lines: number }) => (
  <div className="border bg-card text-card-foreground shadow-sm rounded-lg animate-pulse">
    <div className="p-6 space-y-2">
      <div className="h-6 w-1/3 bg-gray-700/50 rounded-md"></div>
      <div className="h-4 w-2/3 bg-gray-700/50 rounded-md"></div>
    </div>
    <div className="p-6 pt-0 space-y-6">
      {[...Array(lines)].map((_, i) => (
        <div key={i} className="space-y-2">
          <div className="h-4 w-1/4 bg-gray-700/50 rounded-md"></div>
          <div className="h-10 w-full bg-gray-700/50 rounded-md"></div>
        </div>
      ))}
    </div>
  </div>
);

/**
 * @summary Mostra un esquelet de càrrega per a la pàgina d'edició del perfil.
 */
export function ProfileSkeleton() {
  return (
    <div className="space-y-8">
      <SkeletonCard lines={3} />
      <SkeletonCard lines={2} />
      <div className="flex justify-end pt-4">
        <div className="h-10 w-32 bg-gray-700/50 rounded-md"></div>
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/settings/team/actions.ts ===================

"use server";

import { createClient, createAdminClient } from "@/lib/supabase/server";
import { redirect } from "next/navigation";
import { revalidatePath } from "next/cache";
import { Resend } from 'resend';
import { validateUserSession } from "@/lib/supabase/session"; // ✅ Utilitzem el teu helper!
import { PERMISSIONS, validateSessionAndPermission, Role } from '@/lib/permissions';

/**
 * Crea un nou equip i les seves dependències de manera transaccional
 * cridant una funció RPC a la base de dades.
 */
export async function createTeamAction(formData: FormData) {
    // 1. Validació d'entrades (això es queda igual)
    const teamName = formData.get('teamName') as string;
    if (!teamName || teamName.trim().length < 2) {
        return { success: false, message: "El nom de l'equip és obligatori." };
    }

    // 2. Validació de sessió (ara amb el teu helper)
    // Necessitem assegurar que hi ha un usuari per a que 'auth.uid()' funcioni a la funció SQL.
    const session = await validateUserSession();
    if ('error' in session) {
        return { success: false, message: session.error.message };
    }
    const { supabase } = session;

    try {
        // 3. Execució de la transacció
        // Cridem la nostra funció de la base de dades amb un sol 'await'.
        const { error } = await supabase.rpc('create_team_with_defaults', {
            team_name: teamName
        });

        if (error) throw error; // Si hi ha un error, el 'catch' el gestionarà.

    } catch (error: unknown) {
        console.error("Error en la transacció de crear equip:", error);

        let errorMessage = "No s'ha pogut crear l'equip.";
        if (error instanceof Error) {
            errorMessage = `No s'ha pogut crear l'equip: ${error.message}`;
        }
        return { success: false, message: errorMessage };
    }

    // 4. Revalidació i redirecció
    revalidatePath('/settings/team');
    return redirect('/settings/team'); // És bona pràctica retornar el redirect
}
/**
 * Convida un usuari a l'equip ACTIU.
 * Implementa una lògica híbrida:
 * - Si l'usuari ja existeix, crea una invitació interna i envia un email de cortesia.
 * - Si l'usuari no existeix, crea una invitació amb token i envia un email de registre.
 */
export async function inviteUserAction(formData: FormData) {
    // 1. VALIDACIÓ DE PERMISOS
    const validation = await validateSessionAndPermission(PERMISSIONS.MANAGE_TEAM_MEMBERS);
    if ('error' in validation) {
        return { success: false, message: validation.error.message };
    }
    const { user: inviter, activeTeamId, supabase } = validation;

    // 2. VALIDACIÓ D'ENTRADES
    const email = formData.get('email') as string;
    const role = formData.get('role') as Role;
    if (!email || !role) {
        return { success: false, message: "Falten l'email o el rol." };
    }

    try {
        // 3. COMPROVACIÓ DE SEGURETAT: Ja existeix una invitació pendent per a aquest email?
        const { data: existingInvite } = await supabase.from('invitations').select('id').match({ email, team_id: activeTeamId, status: 'pending' }).maybeSingle();
        if (existingInvite) {
            return { success: false, message: "Ja s'ha enviat una invitació a aquest usuari per a aquest equip." };
        }

        // 4. CERCA EFICIENT D'USUARI
        const { data: existingUserId } = await supabase.rpc('get_user_id_by_email', { email_to_check: email });

        // 5. OBTENCIÓ DE DADES COMUNES
        const [teamRes, inviterProfileRes] = await Promise.all([
            supabase.from('teams').select('name').eq('id', activeTeamId).single(),
            supabase.from('profiles').select('full_name').eq('id', inviter.id).single()
        ]);

        if (teamRes.error) throw new Error("L'equip actiu no s'ha trobat.");
        const teamName = teamRes.data.name;
        const inviterName = inviterProfileRes.data?.full_name || inviter.email!;

        // 6. CREACIÓ DE LA INVITACIÓ: La creem sempre i obtenim el token.
        const { data: invitation, error: inviteError } = await supabase
            .from('invitations')
            .insert({
                team_id: activeTeamId,
                email,
                role,
                inviter_name: inviterName,
                team_name: teamName,
                user_id: existingUserId // Si no existeix, serà null, la qual cosa és correcte.
            })
            .select('id, token') // Demanem el token!
            .single();

        if (inviteError) throw inviteError;
        if (!invitation) throw new Error("No s'ha pogut crear la invitació.");

        // 7. LÒGICA D'ENVIAMENT D'EMAIL
        const resend = new Resend(process.env.RESEND_API_KEY);

        if (existingUserId) {
            // --- Cas A: L'usuari JA EXISTEIX ---
            await resend.emails.send({
                from: `Notificació de "${teamName}" <notificacions@elteudomini.com>`,
                to: email,
                subject: `Has estat convidat a unir-te a l'equip ${teamName}`,
                html: `<p>Hola de nou, <strong>${inviterName}</strong> t'ha convidat a l'equip <strong>${teamName}</strong>. Com que ja tens un compte, pots acceptar-la des del teu panell d'equips.</p><div style="text-align: center; margin: 25px 0;"><a href="${process.env.NEXT_PUBLIC_SITE_URL}/settings/team" target="_blank" style="background-color: #007bff; color: #ffffff; padding: 15px 25px; text-decoration: none; border-radius: 5px; font-weight: bold;">Anar al meu panell</a></div>`
            });
        } else {
            // --- Cas B: L'usuari ÉS NOU ---
            // Ara tenim 'invitation.token' disponible.
            await resend.emails.send({
                from: `Invitació de "${teamName}" <invitacions@ribotflow.com>`,
                to: email,
                subject: `Has estat convidat a unir-te a l'equip ${teamName}`,
                html: `
                <!DOCTYPE html>
                <html>
                <body style="font-family: Arial, sans-serif; background-color: #f4f4f4; padding: 20px;">
                    <table align="center" width="100%" style="max-width: 600px; background-color: #ffffff; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
                        <tr>
                            <td style="padding: 40px 30px;">
                                <h1 style="font-size: 24px;">Has estat convidat!</h1>
                                <p style="font-size: 16px; line-height: 1.6;">Hola,</p>
                                <p style="font-size: 16px; line-height: 1.6;">
                                    <strong>${inviterName}</strong> t'ha convidat a unir-te al seu equip <strong>${teamName}</strong>.
                                </p>
                                <div style="text-align: center; margin: 25px 0;">
                                    <a href="${process.env.NEXT_PUBLIC_SITE_URL}/invitation/accept?token=${invitation.token}" target="_blank" style="background-color: #007bff; color: #ffffff; padding: 15px 25px; text-decoration: none; border-radius: 5px; font-weight: bold;">
                                        Uneix-te a l'equip
                                    </a>
                                </div>
                            </td>
                        </tr>
                    </table>
                </body>
                </html>`
            });
        }

        revalidatePath('/settings/team');
        return { success: true, message: `Invitació enviada a ${email}.` };

    } catch (error: unknown) {
        console.error("Error en el procés d'invitació:", error);
        let errorMessage = "No s'ha pogut enviar la invitació.";
        if (error instanceof Error) {
            errorMessage = error.message;
        }
        return { success: false, message: errorMessage };
    }
}
/**
/**
 * Punt d'entrada per a un enllaç d'invitació.
 * Valida el token i redirigeix l'usuari a 'login' o a 'signup'
 * depenent de si ja té un compte.
 */
export async function resolveInvitationAction(token: string) {
    // 1. Validació del token (això ja estava perfecte)
    if (!token) {
        return redirect('/login?message=El token d\'invitació no és vàlid.');
    }

    const supabaseAdmin = createAdminClient();

    const { data: invitation } = await supabaseAdmin
        .from('invitations')
        .select('email')
        .match({ token, status: 'pending' }) // Afegim la comprovació de 'status' per seguretat
        .single();

    if (!invitation) {
        return redirect('/login?message=La teva invitació no és vàlida o ja ha estat utilitzada.');
    }

    const invitedEmail = invitation.email;

    // 2. Comprovació d'usuari (la part refactoritzada)
    // ✅ Substituïm el 'listUsers' per la nostra crida RPC eficient.
    const { data: existingUserId, error: rpcError } = await supabaseAdmin.rpc('get_user_id_by_email', {
        email_to_check: invitedEmail
    });

    if (rpcError) {
        console.error("Error a l'RPC get_user_id_by_email:", rpcError);
        return redirect('/login?message=Hi ha hagut un error al servidor.');
    }

    // 3. Redirecció basada en el resultat
    if (existingUserId) {
        // L'usuari JA EXISTEIX. L'enviem a iniciar sessió.
        console.log(`[resolveInvitation] L'usuari ${invitedEmail} ja existeix. Redirigint a login.`);
        redirect(`/login?invite_token=${token}&email=${encodeURIComponent(invitedEmail)}`);
    } else {
        // L'usuari NO EXISTEIX. L'enviem a la pàgina de registre per a convidats.
        console.log(`[resolveInvitation] L'usuari ${invitedEmail} és nou. Redirigint a la pàgina de registre.`);
        redirect(`/invitation/accept?token=${token}&email=${encodeURIComponent(invitedEmail)}`);
    }
}
/**
 * Processa l'acceptació d'una invitació de manera transaccional.
 * Afegeix l'usuari a l'equip, actualitza el seu token de sessió i neteja la invitació.
 */
export async function acceptInviteAction(token: string) {
    // 1. Validació bàsica de l'usuari
    const supabase = createClient();
    const { data: { user } } = await supabase.auth.getUser();
    const locale = user?.user_metadata?.locale || 'ca';

    if (!user) {
        return redirect(`/login?invite_token=${token}&message=Has d'iniciar sessió per acceptar.`);
    }

    try {
        // 2. Execució de la transacció
        // Cridem la nostra funció de la base de dades, que ho fa tot.
        const { error } = await supabase.rpc('accept_invitation_and_set_active_team', {
            invite_token: token
        });

        if (error) throw error;

        // 3. Forcem el refresc del token al costat del client
        // Aquesta és una bona pràctica per assegurar que la UI s'actualitza a l'instant.
        await supabase.auth.refreshSession();

    } catch (error: unknown) {
        let errorMessage = "Error en processar la invitació.";
        if (error instanceof Error) {
            // La funció SQL retorna missatges d'error clars que podem mostrar a l'usuari.
            if (error.message.includes('INVITATION_NOT_FOUND')) {
                errorMessage = "La teva invitació no és vàlida o ja ha estat utilitzada.";
            } else if (error.message.includes('INVITATION_FOR_DIFFERENT_USER')) {
                errorMessage = "Aquesta invitació està destinada a un altre compte de correu.";
            } else {
                errorMessage = error.message;
            }
        }
        console.error("Error a acceptInviteAction:", errorMessage);
        return redirect(`/dashboard?error=${encodeURIComponent(errorMessage)}`);
    }

    // 4. Redirecció final
    // L'usuari ha acceptat la invitació i el seu token ja apunta al nou equip.
    // El redirigim directament al dashboard (o on consideris).
    return redirect(`/${locale}/dashboard?success=Benvingut a l'equip!`);
}
/**
 * Revoca una invitació pendent de l'equip actiu.
 * L'acció només la poden realitzar usuaris amb els permisos adequats.
 */
export async function revokeInvitationAction(invitationId: string) {
    // 1. VALIDACIÓ CENTRALITZADA: Substituïm tot el boilerplate per una sola crida.
    const validation = await validateSessionAndPermission(PERMISSIONS.MANAGE_TEAM_MEMBERS);
    if ('error' in validation) {
        return { success: false, message: validation.error.message };
    }
    // Obtenim el context ja validat.
    const { activeTeamId, supabase } = validation;

    try {
        // 2. EXECUCIÓ DE L'ACCIÓ: La lògica principal no canvia, però ara dins d'un try/catch.
        // La comprovació 'eq('team_id', activeTeamId)' és una capa de seguretat excel·lent.
        const { error } = await supabase
            .from('invitations')
            .delete()
            .match({ id: invitationId, team_id: activeTeamId });

        if (error) throw error;

    } catch (error: unknown) {
        console.error("Error en revocar la invitació:", error);
        let errorMessage = "No s'ha pogut revocar la invitació.";
        if (error instanceof Error) {
            errorMessage = error.message;
        }
        return { success: false, message: errorMessage };
    }

    // 3. REVALIDACIÓ I RESPOSTA
    revalidatePath('/settings/team');
    return { success: true, message: "Invitació revocada." };
}
/**
 * Canvia l'equip actiu de l'usuari, actualitzant les metadades del seu token
 * per reflectir el nou context (ID de l'equip i pla de subscripció).
 */
export async function switchActiveTeamAction(teamId: string) {
    // 1. Validació d'usuari: N'hi ha prou amb saber que l'usuari està logat.
    // Usem createClient directament perquè 'validateUserSession' requereix un equip actiu.
    const supabase = createClient();
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
        return { success: false, message: "Usuari no autenticat." };
    }

    try {
        // 2. Comprovació de seguretat: L'usuari pertany a l'equip de destí?
        const { data: member } = await supabase
            .from('team_members')
            .select('team_id')
            .match({ user_id: user.id, team_id: teamId })
            .maybeSingle();

        if (!member) {
            return { success: false, message: "No tens accés a aquest equip." };
        }

        // 3. MILLORA CLAU: Obtenim el pla de subscripció del nou equip.
        const { data: subscription } = await supabase
            .from('subscriptions')
            .select('plan_id, status')
            .eq('team_id', teamId)
            .maybeSingle();

        const newTeamPlan = (subscription?.status === 'active') ? subscription.plan_id : 'free';

        // 4. Actualització del token de l'usuari amb TOT el nou context.
        const supabaseAdmin = createAdminClient();
        const { error: updateError } = await supabaseAdmin.auth.admin.updateUserById(
            user.id,
            {
                app_metadata: {
                    ...user.app_metadata,
                    active_team_id: teamId,
                    active_team_plan: newTeamPlan // ✅ Afegim el pla
                }
            }
        );

        if (updateError) throw updateError;

    } catch (error: unknown) {
        console.error("Error en canviar d'equip actiu:", error);
        let errorMessage = "No s'ha pogut canviar d'equip.";
        if (error instanceof Error) {
            errorMessage = error.message;
        }
        return { success: false, message: errorMessage };
    }

    // 5. Revalidació i èxit
    // Revalidem tot el layout perquè components com la barra de navegació o el menú
    // puguin reaccionar al canvi d'equip.
    revalidatePath('/', 'layout');
    return { success: true };
}
/**
 * Activa o desactiva el permís de l'usuari actual per a veure la bústia d'un altre membre.
 */
export async function toggleInboxPermissionAction(targetUserId: string) { // ✅ NOMÉS UN PARÀMETRE
    // 1. VALIDACIÓ CENTRALITZADA: Comprovem que l'usuari té permisos per a gestionar rols/permisos.
    const validation = await validateSessionAndPermission(PERMISSIONS.MANAGE_TEAM_ROLES);
    if ('error' in validation) {
        return { success: false, message: validation.error.message };
    }
    const { user: granteeUser, activeTeamId, supabase } = validation;

    // L'usuari que fa l'acció no pot donar-se permisos a si mateix per veure la seva pròpia bústia.
    if (granteeUser.id === targetUserId) {
        return { success: false, message: "No pots assignar-te permisos a tu mateix." };
    }

    try {
        // 2. LÒGICA PRINCIPAL: Comprovem si el permís ja existeix.
        const { data: existingPermission } = await supabase
            .from('inbox_permissions')
            .select('id')
            .match({
                team_id: activeTeamId,
                grantee_user_id: granteeUser.id,
                target_user_id: targetUserId
            })
            .maybeSingle();

        if (existingPermission) {
            // Si existeix, l'esborrem.
            const { error } = await supabase.from('inbox_permissions').delete().eq('id', existingPermission.id);
            if (error) throw error;
            revalidatePath('/settings/team');
            return { success: true, message: "Permís revocat." };
        } else {
            // Si no existeix, el creem.
            const { error } = await supabase.from('inbox_permissions').insert({
                team_id: activeTeamId,
                grantee_user_id: granteeUser.id,
                target_user_id: targetUserId
            });
            if (error) throw error;
            revalidatePath('/settings/team');
            return { success: true, message: "Permís concedit." };
        }
    } catch (error: unknown) {
        console.error("Error en canviar el permís de la bústia:", error);
        let errorMessage = "No s'ha pogut actualitzar el permís.";
        if (error instanceof Error) {
            errorMessage = error.message;
        }
        return { success: false, message: errorMessage };
    }
}
/**
 * ✅ NOU: Neteja l'equip actiu, per a tornar al "vestíbul".
 */

export async function clearActiveTeamAction() {
    // 1. Validació de sessió amb el teu helper.
    const session = await validateUserSession();
    if ('error' in session) {
        // En aquest cas, si no hi ha usuari, no hi ha res a netejar.
        // Podem retornar èxit o l'error, depenent de la semàntica que prefereixis.
        return { success: false, message: session.error.message };
    }
    const { user } = session;

    try {
        // 2. Execució de l'acció
        const supabaseAdmin = createAdminClient();
        const { error } = await supabaseAdmin.auth.admin.updateUserById(
            user.id,
            {
                app_metadata: {
                    ...user.app_metadata,
                    active_team_id: null,
                    active_team_plan: null // ✅ Important netejar també el pla.
                }
            }
        );

        if (error) throw error;

    } catch (error: unknown) {
        console.error("Error en netejar l'equip actiu:", error);
        let errorMessage = "No s'ha pogut sortir de l'equip.";
        if (error instanceof Error) {
            errorMessage = error.message;
        }
        return { success: false, message: errorMessage };
    }

    // 3. Revalidació i resposta
    revalidatePath('/settings/team', 'page');
    return { success: true };
}
// A /app/[locale]/(app)/settings/team/actions.ts

/**
 * Permet a un usuari autenticat acceptar una invitació personal des del "lobby".
 * No requereix un equip actiu previ. Tota la lògica s'executa com una transacció.
 */
export async function acceptPersonalInviteAction(invitationId: string) {
    // PAS 1: Validació senzilla. Només necessitem saber qui és l'usuari.
    const supabase = createClient();
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
        return { success: false, message: "Has d'iniciar sessió per a acceptar una invitació." };
    }

    try {
        // PAS 2: Execució de la transacció a la base de dades.
        // Cridem la funció RPC que fa tota la feina: valida la invitació,
        // t'afegeix al 'team_members', actualitza el teu 'active_team_id' i esborra la invitació.
        const { error } = await supabase.rpc('accept_personal_invitation', {
            invitation_id: invitationId
        });
        if (error) throw error;

        // PAS 3: Refresquem la sessió per a assegurar-nos que el navegador rep el nou token actualitzat.
        await supabase.auth.refreshSession();

    } catch (error: unknown) {
        console.error("Error en acceptar la invitació personal:", error);
        let errorMessage = "No s'ha pogut acceptar la invitació.";
        if (error instanceof Error && error.message.includes('INVALID_INVITATION')) {
            errorMessage = "Aquesta invitació no és vàlida o ja no està disponible.";
        }
        return { success: false, message: errorMessage };
    }

    // PAS 4: Revalidem la pàgina i retornem l'èxit.
    revalidatePath('/settings/team');
    return { success: true };
}

export async function declinePersonalInviteAction(invitationId: string) {
    // 1. Validació de sessió amb el teu helper.
    const session = await validateUserSession();
    if ('error' in session) {
        return { success: false, message: session.error.message };
    }
    const { user, supabase } = session;

    try {
        // 2. Execució de l'acció. La teva lògica ja era segura i correcta.
        const { error } = await supabase
            .from('invitations')
            .update({ status: 'declined' })
            .match({ id: invitationId, user_id: user.id }); // Assegura que l'usuari només pot rebutjar les seves pròpies invitacions.

        if (error) throw error;

    } catch (error: unknown) {
        console.error("Error en rebutjar la invitació:", error);
        return { success: false, message: "No s'ha pogut rebutjar la invitació." };
    }

    // 3. Revalidació i resposta
    revalidatePath('/settings/team');
    return { success: true };
}

export async function removeMemberAction(userIdToRemove: string) {
    // 1. VALIDACIÓ DE PERMISOS: Tot el boilerplate desapareix.
    const validation = await validateSessionAndPermission(PERMISSIONS.MANAGE_TEAM_MEMBERS);
    if ('error' in validation) {
        return { success: false, message: validation.error.message };
    }
    const { user: actionUser, activeTeamId, supabase } = validation;

    // 2. VALIDACIONS DE NEGOCI: Aquestes comprovacions són específiques d'aquesta acció.
    if (actionUser.id === userIdToRemove) {
        return { success: false, message: "No et pots eliminar a tu mateix." };
    }

    const { data: team } = await supabase.from('teams').select('owner_id').eq('id', activeTeamId).single();
    if (team?.owner_id === userIdToRemove) {
        return { success: false, message: "No es pot eliminar el propietari de l'equip." };
    }

    // 3. EXECUCIÓ DE L'ACCIÓ
    try {
        const supabaseAdmin = createAdminClient();

        // Eliminem el membre
        const { error: deleteError } = await supabaseAdmin
            .from('team_members')
            .delete()
            .match({ user_id: userIdToRemove, team_id: activeTeamId });

        if (deleteError) throw deleteError;

        // Netegem el token de l'usuari eliminat (aquesta és una pràctica excel·lent!)
        const { data: { user: removedUser } } = await supabaseAdmin.auth.admin.getUserById(userIdToRemove);
        if (removedUser?.app_metadata?.active_team_id === activeTeamId) {
            await supabaseAdmin.auth.admin.updateUserById(userIdToRemove, {
                app_metadata: { ...removedUser.app_metadata, active_team_id: null, active_team_plan: null }
            });
        }
    } catch (error: unknown) {
        console.error("Error en eliminar el membre:", error);
        let errorMessage = "No s'ha pogut eliminar el membre.";
        if (error instanceof Error) {
            errorMessage = error.message;
        }
        return { success: false, message: errorMessage };
    }

    // 4. REVALIDACIÓ I RESPOSTA
    revalidatePath('/settings/team');
    return { success: true, message: "Membre eliminat correctament." };
}

// Afegeix aquesta nova acció al teu fitxer actions.ts
export async function updateMemberRoleAction(memberUserId: string, newRole: Role) {
    // 1. VALIDACIÓ DE PERMISOS
    const validation = await validateSessionAndPermission(PERMISSIONS.MANAGE_TEAM_ROLES);
    if ('error' in validation) {
        return { success: false, message: validation.error.message };
    }
    const { activeTeamId, supabase } = validation;

    // 2. VALIDACIONS DE NEGOCI
    if (newRole === 'owner') {
        return { success: false, message: "La propietat de l'equip no es pot assignar, s'ha de transferir mitjançant una altra acció." };
    }

    try {
        const { data: team } = await supabase.from('teams').select('owner_id').eq('id', activeTeamId).single();
        if (team?.owner_id === memberUserId) {
            return { success: false, message: "No es pot canviar el rol del propietari de l'equip." };
        }

        // 3. EXECUCIÓ DE L'ACCIÓ
        const { error } = await supabase
            .from('team_members')
            .update({ role: newRole })
            .match({ user_id: memberUserId, team_id: activeTeamId });

        if (error) throw error;

    } catch (error: unknown) {
        console.error("Error en actualitzar el rol del membre:", error);
        let errorMessage = "No s'ha pogut actualitzar el rol.";
        if (error instanceof Error) {
            errorMessage = error.message;
        }
        return { success: false, message: errorMessage };
    }

    // 4. REVALIDACIÓ I RESPOSTA
    revalidatePath('/settings/team');
    return { success: true, message: "Rol actualitzat correctament." };
}

// =================== FILE: src/app/[locale]/(app)/settings/team/page.tsx ===================

// /src/app/[locale]/(app)/settings/team/page.tsx

import { validatePageSession } from '@/lib/supabase/session';
import { TeamSelectorData } from './_components/TeamSelectorData';
import { ActiveTeamManagerData } from './_components/ActiveTeamManagerData';

// Mantenim l'ordre a Next.js per assegurar el renderitzat dinàmic
export const dynamic = 'force-dynamic';

// Podem mantenir els tipus aquí o moure'ls a un fitxer types.ts si prefereixes
export type Team = { id: string; name: string; };
export type Invitation = { id: string; email: string; role: string; };
export type UserTeam = { role: string; teams: Team | null; };
export type PersonalInvitation = { id: string; team_name: string; inviter_name: string };
export type ProfileInfo = { id: string; full_name: string | null; email: string | null; avatar_url: string | null; };
export type TeamMember = { role: string; profiles: ProfileInfo | null; };
export type ActiveTeamData = {
    team: Team;
    teamMembers: TeamMember[];
    pendingInvitations: Invitation[];
    currentUserRole: string;
    inboxPermissions: { grantee_user_id: string; target_user_id: string; }[];
};

export default async function TeamSettingsPage({ searchParams }: { searchParams: { view?: string } }) {
    const { user, activeTeamId } = await validatePageSession();

    // ✅ Desestructurem searchParams amb await
    const { view } = await searchParams;

    if (view === 'select' || !activeTeamId) {
        return <TeamSelectorData userId={user.id} />;
    }

    return <ActiveTeamManagerData user={user} activeTeamId={activeTeamId} />;
}


// =================== FILE: src/app/[locale]/(app)/settings/team/_components/ActiveTeamManagerData.tsx ===================

// /src/app/[locale]/(app)/settings/team/_components/ActiveTeamManagerData.tsx

import { createClient } from "@/lib/supabase/server";
import { TeamData } from "./TeamData"; // Component que ara carrega les dades
import { TeamStateCorrector } from "./TeamStateCorrector";
import type { User } from '@supabase/supabase-js';
// Ja no necessitem importar els altres tipus aquí

interface ActiveTeamManagerDataProps {
  user: User;
  activeTeamId: string;
}

export async function ActiveTeamManagerData({ user, activeTeamId }: ActiveTeamManagerDataProps) {
    const supabase = createClient();

    // 1. L'única feina d'aquest component és verificar si l'usuari és membre.
    const { data: member, error: memberError } = await supabase
        .from('team_members')
        .select('role')
        .match({ user_id: user.id, team_id: activeTeamId })
        .single();

    if (!member || memberError) {
        return <TeamStateCorrector />;
    }

    // 2. ✅ CORRECCIÓ CLAU: Ara només passem les props que 'TeamData' realment espera.
    // Deleguem tota la càrrega de dades a 'TeamData'.
    return (
        <TeamData
            user={user}
            member={member}
            activeTeamId={activeTeamId}
        />
    );
}

// =================== FILE: src/app/[locale]/(app)/settings/team/_components/TeamClient.tsx ===================

"use client";


import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { useRouter } from 'next/navigation';
import { Loader2, UserPlus, Trash2, Plus, ArrowRight, LogOut, Eye, EyeOff } from 'lucide-react';
import { toast } from 'sonner';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { useTransition, useRef, useEffect } from 'react';

// ✅ PAS 1: IMPORTA EL CLIENT CORRECTE I LES ACCIONS
import { createClient } from '@/lib/supabase/client';
import {
    removeMemberAction,
    switchActiveTeamAction,
    clearActiveTeamAction,
    createTeamAction,
    inviteUserAction,
    revokeInvitationAction,
    toggleInboxPermissionAction,
    acceptPersonalInviteAction,
    declinePersonalInviteAction,
    updateMemberRoleAction
} from '../actions';
import type { User } from '@supabase/supabase-js';
import type { UserTeam, ActiveTeamData } from '../page';

type ActionResult = { success: boolean; message?: string; } | void;

// ✅ Añadimos la nueva prop opcional 'invalidTeamState'.
interface TeamClientProps {
    user: User;
    userTeams: UserTeam[];
    activeTeamData: ActiveTeamData | null;
    invalidTeamState?: boolean;
    personalInvitations: { id: string; team_name: string; inviter_name: string }[]; // ✅ Nova prop

}
/**
 * Component de client intel·ligent que renderitza o el HUB o el DASHBOARD de l'equip.
 */
export function TeamClient({ user, userTeams, activeTeamData, invalidTeamState, personalInvitations }: TeamClientProps) {
    const router = useRouter();
    const [isPending, startTransition] = useTransition();
    const supabase = createClient();
    const formRef = useRef<HTMLFormElement>(null);


    // ✅ Este efecto corrige automáticamente un estado de equipo inválido.
    useEffect(() => {
        if (invalidTeamState) {
            console.log("[CLIENT] Estado inválido detectado. Ejecutando limpieza de equipo activo...");
            handleClearTeam();
        }
    }, [invalidTeamState]);

    // ✅ Noves funcions per gestionar les invitacions personals
    const handleAccept = (invitationId: string) => {
        startTransition(() => executeActionAndReload(() => acceptPersonalInviteAction(invitationId)));
    };
    // Dins del component TeamClient, al costat dels altres handlers
    const handleRemoveMember = (userId: string) => {
        // Afegim una confirmació per seguretat
        if (!confirm("Estàs segur que vols eliminar aquest membre de l'equip? Aquesta acció no es pot desfer.")) {
            return;
        }
        startTransition(async () => {
            const result = await removeMemberAction(userId);
            if (result.success) {
                toast.success(result.message);
                router.refresh(); // Refresquem per veure la llista de membres actualitzada
            } else {
                toast.error(result.message);
            }
        });
    };
    const executeActionAndReload = async (action: () => Promise<ActionResult>) => {
        const result = await action();
        if (result && result.success === false) {
            toast.error("Error", { description: result.message });
            return;
        }
        await supabase.auth.refreshSession();
        // Forzamos una recarga completa para garantizar la sincronización.
        window.location.reload();
    };
    // ✅ La funció handler ara només necessita el targetUserId
    const handleTogglePermission = (targetUserId: string) => {
        startTransition(async () => {
            // Passem només un paràmetre a la nova acció
            const result = await toggleInboxPermissionAction(targetUserId);
            if (result.success) {
                toast.success(result.message);
                router.refresh();
            } else {
                toast.error(result.message);
            }
        });
    };


    const handleCreateTeam = (formData: FormData) => {
        startTransition(async () => {
            const result = await createTeamAction(formData);
            if (result?.success === false) {
                toast.error(result.message);
            }
        });
    };

    const handleInvite = (formData: FormData) => {
        startTransition(async () => {
            const result = await inviteUserAction(formData);
            if (result.success) {
                toast.success(result.message);
                formRef.current?.reset();
                router.refresh();
            } else {
                toast.error(result.message);
            }
        });
    };
    // ✅ NOU HANDLER: Crida l'acció per a canviar el rol
    const handleRoleChange = (memberUserId: string, newRole: 'admin' | 'member') => {
        startTransition(async () => {
            const result = await updateMemberRoleAction(memberUserId, newRole);
            if (result.success) {
                toast.success(result.message);
                router.refresh();
            } else {
                toast.error(result.message);
            }
        });
    };
    const handleDecline = (invitationId: string) => {
        startTransition(async () => {
            await declinePersonalInviteAction(invitationId);
            toast.info("Invitació rebutjada.");
            router.refresh();
        });
    };
    const handleRevoke = (invitationId: string) => {
        startTransition(async () => {
            await revokeInvitationAction(invitationId);
            toast.success("Invitació revocada");
            router.refresh();
        });
    };

    const getInitials = (name: string | null | undefined) => {
        if (!name) return '??';
        return name.split(' ').map(n => n[0]).slice(0, 2).join('').toUpperCase();
    };

    const handleSwitchTeam = (teamId: string) => {
        startTransition(() => executeActionAndReload(() => switchActiveTeamAction(teamId)));
    };

    const handleClearTeam = () => {
        startTransition(() => executeActionAndReload(() => clearActiveTeamAction()));
    };

    // Si el estado es inválido, mostramos un mensaje de carga mientras se corrige.
    if (invalidTeamState) {
        return <div className="flex justify-center items-center h-64">Corrigiendo estado del equipo...</div>;
    }
    // --- VISTA 1: El "vestíbul" o HUB d'equips ---
    if (!activeTeamData) {
        return (
            <div className="max-w-4xl mx-auto space-y-8 p-4">
                {/* ✅ NOU BLOC DE NOTIFICACIÓ D'INVITACIONS */}
                {personalInvitations && personalInvitations.length > 0 && (
                    <Card className="bg-primary/5 border-primary/20">
                        <CardHeader>
                            <CardTitle>Tens invitacions pendents!</CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-4">
                            {personalInvitations.map(invite => (
                                <div key={invite.id} className="flex items-center justify-between p-3 bg-background rounded-lg">
                                    <div>
                                        <p className="font-medium">
                                            <strong>{invite.inviter_name}</strong> t'ha convidat a <strong>{invite.team_name}</strong>.
                                        </p>
                                    </div>
                                    <div className="flex gap-2">
                                        <Button size="sm" onClick={() => handleAccept(invite.id)} disabled={isPending}>
                                            {isPending ? <Loader2 className="animate-spin w-4 h-4" /> : "Acceptar"}
                                        </Button>
                                        <Button size="sm" variant="ghost" onClick={() => handleDecline(invite.id)} disabled={isPending}>Rebutjar</Button>
                                    </div>
                                </div>
                            ))}
                        </CardContent>
                    </Card>
                )}
                <div>
                    <h1 className="text-3xl font-bold">Els Teus Equips</h1>
                    <p className="text-muted-foreground">Selecciona un equip per a començar a treballar o crea'n un de nou.</p>
                </div>
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
                    {userTeams.map(({ teams, role }) => teams && (
                        <Card key={teams.id} className="flex flex-col">
                            <CardHeader>
                                <CardTitle>{teams.name}</CardTitle>
                                <CardDescription>El teu rol: <span className="font-semibold capitalize">{role}</span></CardDescription>
                            </CardHeader>
                            <CardContent className="flex-grow flex items-end">
                                <Button onClick={() => handleSwitchTeam(teams.id)} disabled={isPending} className="w-full">
                                    {isPending ? <Loader2 className="animate-spin w-4 h-4" /> : "Entrar"}
                                    {!isPending && <ArrowRight className="w-4 h-4 ml-2" />}
                                </Button>
                            </CardContent>
                        </Card>
                    ))}
                    <Card className="border-dashed">
                        <CardHeader><CardTitle>Crear un nou equip</CardTitle></CardHeader>
                        <CardContent>
                            <form action={handleCreateTeam} className="space-y-4">
                                <Input name="teamName" placeholder="Nom del nou equip" required disabled={isPending} />
                                <Button type="submit" disabled={isPending} className="w-full">
                                    {isPending ? <Loader2 className="animate-spin w-4 h-4" /> : <Plus className="w-4 h-4 mr-2" />} Crear Equip
                                </Button>
                            </form>
                        </CardContent>
                    </Card>
                </div>
            </div>
        );
    }

    // --- VISTA 2: El panell de control de l'equip actiu ---
    const { team, teamMembers, pendingInvitations, currentUserRole, inboxPermissions } = activeTeamData;
    const canManage = currentUserRole === 'owner' || currentUserRole === 'admin';

    return (
        <div className="space-y-8 max-w-4xl mx-auto">
            <div className="flex justify-between items-center">
                <h1 className="text-3xl font-bold">{team.name}</h1>
                <Button variant="outline" onClick={handleClearTeam} disabled={isPending}>
                    <LogOut className="w-4 h-4 mr-2" /> Canviar d'equip
                </Button>
            </div>

            {canManage && (
                <Card>
                    <CardHeader><CardTitle>Convida nous membres</CardTitle></CardHeader>
                    <CardContent>
                        <form ref={formRef} action={handleInvite} className="flex flex-col sm:flex-row gap-2">
                            <Input name="email" type="email" placeholder="correu@exemple.com" required disabled={isPending} className="flex-grow" />
                            <Select name="role" defaultValue="member" required>
                                <SelectTrigger className="w-full sm:w-[150px]"><SelectValue /></SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="member">Membre</SelectItem>
                                    <SelectItem value="admin">Admin</SelectItem>
                                </SelectContent>
                            </Select>
                            <Button type="submit" disabled={isPending} className="sm:w-auto">
                                {isPending ? <Loader2 className="animate-spin w-4 h-4" /> : <UserPlus className="w-4 h-4" />}
                            </Button>
                        </form>
                    </CardContent>
                </Card>
            )}

            {canManage && pendingInvitations.length > 0 && (
                <Card>
                    <CardHeader><CardTitle>Invitacions Pendents</CardTitle></CardHeader>
                    <CardContent className="divide-y">
                        {pendingInvitations.map(invite => (
                            <div key={invite.id} className="flex items-center justify-between py-3 first:pt-0 last:pb-0">
                                <div>
                                    <p className="font-medium">{invite.email}</p>
                                    <p className="text-sm text-muted-foreground capitalize">{invite.role}</p>
                                </div>
                                <form action={() => handleRevoke(invite.id)}>
                                    <Button type="submit" variant="ghost" size="sm" disabled={isPending}><Trash2 className="w-4 h-4 text-destructive" /></Button>
                                </form>
                            </div>
                        ))}
                    </CardContent>
                </Card>
            )}

            <Card>
                <CardHeader><CardTitle>Membres de l'equip ({teamMembers.length})</CardTitle></CardHeader>
                <CardContent className="divide-y">
                    {teamMembers.map(member => {
                         if (!member.profiles) return null;
                         const isOwner = member.role === 'owner';
                         const isSelf = user.id === member.profiles.id;
                        if (!member.profiles) return null;

                        // Comprovem si l'usuari actual té permís per a veure la bústia d'aquest membre
                        const hasPermission = Array.isArray(inboxPermissions) && inboxPermissions.some(
                            p => p.grantee_user_id === user.id && p.target_user_id === member.profiles!.id
                        );
                        return (
                            <div key={member.profiles.id} className="flex items-center justify-between py-4 first:pt-0 last:pb-0">
                                <div className="flex items-center gap-4">
                                    <Avatar>
                                        <AvatarImage src={member.profiles.avatar_url ?? undefined} />
                                        <AvatarFallback>{getInitials(member.profiles.full_name)}</AvatarFallback>
                                    </Avatar>
                                    <div>
                                        <p className="font-semibold">{member.profiles.full_name || 'Usuari sense nom'}</p>
                                        <p className="text-sm text-muted-foreground">{member.profiles.email}</p>
                                    </div>
                                </div>
                                <div className="flex items-center gap-2 sm:gap-4">
                                     {/* ✅ LÒGICA DELS ROLS */}
                                     {isOwner ? (
                                        <Badge variant="default" className="capitalize">{member.role}</Badge>
                                        ) : (
                                        <Select
                                            value={member.role}
                                            onValueChange={(newRole) => handleRoleChange(member.profiles!.id, newRole as 'admin' | 'member')}
                                            // El propietari pot canviar rols, l'admin també (excepte altres admins si no vols),
                                            // i ningú pot canviar el seu propi rol.
                                            disabled={!canManage || isSelf || isPending}
                                        >
                                            <SelectTrigger className="w-[120px]">
                                                <SelectValue />
                                            </SelectTrigger>
                                            <SelectContent>
                                                <SelectItem value="admin">Admin</SelectItem>
                                                <SelectItem value="member">Membre</SelectItem>
                                            </SelectContent>
                                        </Select>
                                    )}
                                    {/* ✅ NOVA ICONA DE PERMISOS */}
                                    {/* Només el propietari la veu, i no per a si mateix */}
                                    {currentUserRole === 'owner' && user.id !== member.profiles.id && (
                                        <TooltipProvider>
                                            <Tooltip>
                                                <TooltipTrigger asChild>
                                                    <Button
                                                        variant="ghost"
                                                        size="icon"
                                                        onClick={() => handleTogglePermission(member.profiles!.id)}
                                                        disabled={isPending}
                                                    >
                                                        {hasPermission ? <Eye className="w-4 h-4 text-primary" /> : <EyeOff className="w-4 h-4 text-muted-foreground" />}
                                                    </Button>
                                                </TooltipTrigger>
                                                <TooltipContent>
                                                    <p>{hasPermission ? `Clica per a deixar de veure la bústia de ${member.profiles.full_name}` : `Clica per a veure la bústia de ${member.profiles.full_name}`}</p>
                                                </TooltipContent>
                                            </Tooltip>
                                        </TooltipProvider>
                                    )}
                                    {canManage && member.role !== 'owner' && user.id !== member.profiles.id && (
                                        // 👇 AQUEST BOTÓ ÉS EL QUE CANVIEM
                                        <TooltipProvider>
                                            <Tooltip>
                                                <TooltipTrigger asChild>
                                                    <Button
                                                        variant="ghost"
                                                        size="icon"
                                                        disabled={isPending}
                                                        onClick={() => handleRemoveMember(member.profiles!.id)} // ✅ AFEGIM L'ACCIÓ
                                                    >
                                                        <Trash2 className="w-4 h-4 text-destructive" />
                                                    </Button>
                                                </TooltipTrigger>
                                                <TooltipContent>
                                                    <p>Eliminar {member.profiles.full_name}</p>
                                                </TooltipContent>
                                            </Tooltip>
                                        </TooltipProvider>
                                    )}
                                </div>
                            </div>
                        );
                    })}
                </CardContent>
            </Card>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/settings/team/_components/TeamDashboard.tsx ===================

// /app/[locale]/settings/team/_components/TeamDashboard.tsx
"use client";

import type { User } from '@supabase/supabase-js';
import type { ActiveTeamData } from '../page';
import { useTeamManagement } from '../_hooks/useTeamManagement';

// Imports de UI (de shadcn/ui o el teu sistema de components)
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Card, CardContent,CardHeader, CardTitle } from '@/components/ui/card';
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { Loader2, UserPlus, Trash2, LogOut, Eye, EyeOff } from 'lucide-react';

interface TeamDashboardProps {
    user: User;
    activeTeamData: ActiveTeamData;
}

export function TeamDashboard({ user, activeTeamData }: TeamDashboardProps) {
    // 1. Tota la lògica complexa s'obté amb una sola línia!
    const {
        isPending,
        inviteFormRef,
        handleClearTeam,
        handleInvite,
        handleRemoveMember,
        handleRoleChange,
        handleRevokeInvite,
        handleTogglePermission,
    } = useTeamManagement();

    // 2. Les dades i variables per a la vista es preparen aquí
    const { team, teamMembers, pendingInvitations, currentUserRole, inboxPermissions } = activeTeamData;
    const canManage = currentUserRole === 'owner' || currentUserRole === 'admin';

    const getInitials = (name: string | null | undefined) => {
        if (!name) return '??';
        return name.split(' ').map(n => n[0]).slice(0, 2).join('').toUpperCase();
    };

    // 3. El return és gairebé 100% JSX. Molt fàcil de llegir.
    return (
        <div className="space-y-8 max-w-4xl mx-auto">
            <div className="flex justify-between items-center">
                <h1 className="text-3xl font-bold">{team.name}</h1>
                <Button variant="outline" onClick={handleClearTeam} disabled={isPending}>
                    <LogOut className="w-4 h-4 mr-2" /> Canviar d'equip
                </Button>
            </div>

            {canManage && (
                <Card>
                    <CardHeader><CardTitle>Convida nous membres</CardTitle></CardHeader>
                    <CardContent>
                        <form ref={inviteFormRef} action={handleInvite} className="flex flex-col sm:flex-row gap-2">
                            <Input name="email" type="email" placeholder="correu@exemple.com" required disabled={isPending} className="flex-grow" />
                            <Select name="role" defaultValue="member" required>
                                <SelectTrigger className="w-full sm:w-[150px]"><SelectValue /></SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="member">Membre</SelectItem>
                                    <SelectItem value="admin">Admin</SelectItem>
                                </SelectContent>
                            </Select>
                            <Button type="submit" disabled={isPending} className="sm:w-auto">
                                {isPending ? <Loader2 className="animate-spin w-4 h-4" /> : <UserPlus className="w-4 h-4" />}
                            </Button>
                        </form>
                    </CardContent>
                </Card>
            )}

            {canManage && pendingInvitations.length > 0 && (
                <Card>
                    <CardHeader><CardTitle>Invitacions Pendents</CardTitle></CardHeader>
                    <CardContent className="divide-y">
                        {pendingInvitations.map(invite => (
                            <div key={invite.id} className="flex items-center justify-between py-3 first:pt-0 last:pb-0">
                                <div>
                                    <p className="font-medium">{invite.email}</p>
                                    <p className="text-sm text-muted-foreground capitalize">{invite.role}</p>
                                </div>
                                <Button type="button" variant="ghost" size="sm" disabled={isPending} onClick={() => handleRevokeInvite(invite.id)}>
                                    <Trash2 className="w-4 h-4 text-destructive" />
                                </Button>
                            </div>
                        ))}
                    </CardContent>
                </Card>
            )}

            <Card>
                <CardHeader><CardTitle>Membres de l'equip ({teamMembers.length})</CardTitle></CardHeader>
                <CardContent className="divide-y">
                    {teamMembers.map(member => {
                         if (!member.profiles) return null;
                         const isOwner = member.role === 'owner';
                         const isSelf = user.id === member.profiles.id;
                         const hasPermission = Array.isArray(inboxPermissions) && inboxPermissions.some(
                             p => p.grantee_user_id === user.id && p.target_user_id === member.profiles!.id
                         );

                        return (
                            <div key={member.profiles.id} className="flex items-center justify-between py-4 first:pt-0 last:pb-0">
                                <div className="flex items-center gap-4">
                                    <Avatar>
                                        <AvatarImage src={member.profiles.avatar_url ?? undefined} />
                                        <AvatarFallback>{getInitials(member.profiles.full_name)}</AvatarFallback>
                                    </Avatar>
                                    <div>
                                        <p className="font-semibold">{member.profiles.full_name || 'Usuari sense nom'}</p>
                                        <p className="text-sm text-muted-foreground">{member.profiles.email}</p>
                                    </div>
                                </div>
                                <div className="flex items-center gap-2 sm:gap-4">
                                     {isOwner ? (
                                        <Badge variant="default" className="capitalize">{member.role}</Badge>
                                     ) : (
                                        <Select
                                            value={member.role}
                                            onValueChange={(newRole) => handleRoleChange(member.profiles!.id, newRole as 'admin' | 'member')}
                                            disabled={!canManage || isSelf || isPending}
                                        >
                                            <SelectTrigger className="w-[120px]"><SelectValue /></SelectTrigger>
                                            <SelectContent>
                                                <SelectItem value="admin">Admin</SelectItem>
                                                <SelectItem value="member">Membre</SelectItem>
                                            </SelectContent>
                                        </Select>
                                     )}
                                     {currentUserRole === 'owner' && !isSelf && (
                                         <TooltipProvider>
                                             <Tooltip>
                                                 <TooltipTrigger asChild>
                                                     <Button variant="ghost" size="icon" onClick={() => handleTogglePermission(member.profiles!.id)} disabled={isPending}>
                                                         {hasPermission ? <Eye className="w-4 h-4 text-primary" /> : <EyeOff className="w-4 h-4 text-muted-foreground" />}
                                                     </Button>
                                                 </TooltipTrigger>
                                                 <TooltipContent>
                                                     <p>{hasPermission ? `Deixar de veure la bústia` : `Veure la bústia`}</p>
                                                 </TooltipContent>
                                             </Tooltip>
                                         </TooltipProvider>
                                     )}
                                     {canManage && !isOwner && !isSelf && (
                                         <TooltipProvider>
                                             <Tooltip>
                                                 <TooltipTrigger asChild>
                                                     <Button variant="ghost" size="icon" disabled={isPending} onClick={() => handleRemoveMember(member.profiles!.id)}>
                                                         <Trash2 className="w-4 h-4 text-destructive" />
                                                     </Button>
                                                 </TooltipTrigger>
                                                 <TooltipContent><p>Eliminar membre</p></TooltipContent>
                                             </Tooltip>
                                         </TooltipProvider>
                                     )}
                                </div>
                            </div>
                        );
                    })}
                </CardContent>
            </Card>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/settings/team/_components/TeamData.tsx ===================

// /src/app/[locale]/(app)/settings/team/_components/TeamData.tsx (VERSIÓ AMB VISTA)

import { createClient } from "@/lib/supabase/server";
import { TeamDashboard } from "./TeamDashboard";
import type { User } from "@supabase/supabase-js";
import type { ActiveTeamData, Team, Invitation, TeamMember } from "../page";

interface TeamDataProps {
    user: User;
    member: { role: string };
    activeTeamId: string;
}

export async function TeamData({ user, member, activeTeamId }: TeamDataProps) {
    const supabase = createClient();

    // La consulta dels membres ara és molt més senzilla i directa.
    const [teamRes, invitesRes, permissionsRes, membersRes] = await Promise.all([
        supabase.from('teams').select('id, name').eq('id', activeTeamId).single(),
        supabase.from('invitations').select('id, email, role').eq('team_id', activeTeamId).eq('status', 'pending'),
        supabase.from('inbox_permissions').select('grantee_user_id, target_user_id').eq('team_id', activeTeamId),
        // ✅ CANVI CLAU: Consultem directament a la VISTA!
        supabase.from('team_members_with_profiles').select('*').eq('team_id', activeTeamId)
    ]);

    // La transformació de dades també es simplifica, ja que la vista retorna un format pla.
    const finalTeamMembers: TeamMember[] = (membersRes.data || []).map(m => ({
        role: m.role,
        profiles: m.user_id ? { // Només creem el perfil si hi ha dades
            id: m.user_id,
            full_name: m.full_name,
            email: m.email,
            avatar_url: m.avatar_url,
        } : null,
    }));

    const activeTeamData: ActiveTeamData = {
        team: teamRes.data as Team,
        teamMembers: finalTeamMembers,
        pendingInvitations: (invitesRes.data as Invitation[]) || [],
        currentUserRole: member.role,
        inboxPermissions: permissionsRes.data || []
    };

    // DEPURACIÓ: Aquest log ara hauria de mostrar les dades correctes.
    console.log("===================================");
    console.log("DADES FINALS (des de la VISTA):");
    console.log(JSON.stringify(activeTeamData.teamMembers, null, 2));
    console.log("===================================");

    return <TeamDashboard user={user} activeTeamData={activeTeamData} />;
}

// =================== FILE: src/app/[locale]/(app)/settings/team/_components/TeamHub.tsx ===================

// /app/[locale]/settings/team/_components/TeamHub.tsx
"use client";

import type { UserTeam, PersonalInvitation } from '../page';
import { useTeamHub } from '../_hooks/useTeamHub';

// Imports de UI
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Loader2, Plus, ArrowRight } from 'lucide-react';

interface TeamHubProps {
    userTeams: UserTeam[];
    personalInvitations: PersonalInvitation[];
}

export function TeamHub({ userTeams, personalInvitations }: TeamHubProps) {
    // Obtenim tota la lògica del nostre hook
    const {
        isPending,
        handleCreateTeam,
        handleSwitchTeam,
        handleAcceptInvite,
        handleDeclineInvite,
    } = useTeamHub();

    return (
        <div className="max-w-4xl mx-auto space-y-8 p-4">
            {/* Secció d'invitacions pendents */}
            {personalInvitations && personalInvitations.length > 0 && (
                <Card className="bg-primary/5 border-primary/20">
                    <CardHeader>
                        <CardTitle>Tens invitacions pendents!</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                        {personalInvitations.map(invite => (
                            <div key={invite.id} className="flex items-center justify-between p-3 bg-background rounded-lg">
                                <div>
                                    <p className="font-medium">
                                        <strong>{invite.inviter_name}</strong> t'ha convidat a <strong>{invite.team_name}</strong>.
                                    </p>
                                </div>
                                <div className="flex gap-2">
                                    <Button size="sm" onClick={() => handleAcceptInvite(invite.id)} disabled={isPending}>
                                        {isPending ? <Loader2 className="animate-spin w-4 h-4" /> : "Acceptar"}
                                    </Button>
                                    <Button size="sm" variant="ghost" onClick={() => handleDeclineInvite(invite.id)} disabled={isPending}>
                                        Rebutjar
                                    </Button>
                                </div>
                            </div>
                        ))}
                    </CardContent>
                </Card>
            )}

            {/* Secció principal de selecció i creació d'equips */}
            <div>
                <h1 className="text-3xl font-bold">Els Teus Equips</h1>
                <p className="text-muted-foreground">Selecciona un equip per a començar a treballar o crea'n un de nou.</p>
            </div>
            
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
                {/* Llista dels equips de l'usuari */}
                {userTeams.map(({ teams, role }) => teams && (
                    <Card key={teams.id} className="flex flex-col">
                        <CardHeader>
                            <CardTitle>{teams.name}</CardTitle>
                            <CardDescription>El teu rol: <span className="font-semibold capitalize">{role}</span></CardDescription>
                        </CardHeader>
                        <CardContent className="flex-grow flex items-end">
                            <Button onClick={() => handleSwitchTeam(teams.id)} disabled={isPending} className="w-full">
                                {isPending ? <Loader2 className="animate-spin w-4 h-4" /> : "Entrar"}
                                {!isPending && <ArrowRight className="w-4 h-4 ml-2" />}
                            </Button>
                        </CardContent>
                    </Card>
                ))}
                
                {/* Targeta per crear un nou equip */}
                <Card className="border-dashed">
                    <CardHeader><CardTitle>Crear un nou equip</CardTitle></CardHeader>
                    <CardContent>
                        <form action={handleCreateTeam} className="space-y-4">
                            <Input name="teamName" placeholder="Nom del nou equip" required disabled={isPending} />
                            <Button type="submit" disabled={isPending} className="w-full">
                                {isPending ? <Loader2 className="animate-spin w-4 h-4" /> : <Plus className="w-4 h-4 mr-2" />} Crear Equip
                            </Button>
                        </form>
                    </CardContent>
                </Card>
            </div>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/settings/team/_components/TeamSelectorData.tsx ===================

import { createClient } from "@/lib/supabase/server";
import { TeamHub } from "./TeamHub";
import type { UserTeam } from '../page'; // Importem els tipus de la pàgina

interface TeamSelectorDataProps {
  userId: string;
}

export async function TeamSelectorData({ userId }: TeamSelectorDataProps) {
    const supabase = createClient();

    // Movem aquí la lògica de càrrega de dades per a la selecció
    const [userTeamsRes, invitationsRes] = await Promise.all([
        supabase.from('team_members').select('role, teams!inner(id, name)').eq('user_id', userId),
        supabase.from('invitations').select('id, team_name, inviter_name').eq('user_id', userId).eq('status', 'pending')
    ]);

    if (userTeamsRes.error || invitationsRes.error) {
        // Aquí podríem mostrar un missatge d'error més elegant
        console.error("Error loading team selection data:", { teamError: userTeamsRes.error, invError: invitationsRes.error });
        return <div>Error en carregar les dades de l'equip.</div>;
    }

    const userTeams: UserTeam[] = (userTeamsRes.data || []).filter(Boolean).map(m => ({
        role: m.role,
        teams: Array.isArray(m.teams) ? m.teams[0] : m.teams
    }));

    return (
        <TeamHub 
            userTeams={userTeams} 
            personalInvitations={invitationsRes.data || []} 
        />
    );
}

// =================== FILE: src/app/[locale]/(app)/settings/team/_components/TeamSkeleton.tsx ===================

"use client";

/**
 * @summary Esquelet de càrrega per a la pàgina de Gestió d'Equip.
 */
export function TeamSkeleton() {
  return (
    <div className="space-y-8 animate-pulse">
      {/* Esquelet del formulari d'invitació */}
      <div className="glass-card p-6">
        <div className="h-6 w-1/3 bg-gray-700/50 rounded-md mb-2"></div>
        <div className="h-4 w-2/3 bg-gray-700/50 rounded-md mb-4"></div>
        <div className="flex gap-2">
          <div className="h-10 flex-1 bg-gray-800/50 rounded-md"></div>
          <div className="h-10 w-24 bg-gray-800/50 rounded-md"></div>
          <div className="h-10 w-28 bg-gray-800/50 rounded-md"></div>
        </div>
      </div>
      
      {/* Esquelet de la llista de membres */}
      <div className="glass-card p-6">
        <div className="h-6 w-1/4 bg-gray-700/50 rounded-md mb-4"></div>
        <div className="space-y-3">
          {[...Array(3)].map((_, i) => (
            <div key={i} className="flex items-center justify-between p-2 h-12 bg-muted rounded-lg">
              <div className="h-6 w-1/2 bg-gray-800/50 rounded-md"></div>
              <div className="h-6 w-1/4 bg-gray-800/50 rounded-md"></div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/settings/team/_components/TeamStateCorrector.tsx ===================

"use client";

import { useEffect, useState } from 'react'; // Importem useState
import { useTransition } from 'react';
import { toast } from 'sonner';
import { clearActiveTeamAction } from '../actions';
import { Button } from '@/components/ui/button'; // Importem el botó per a reintentar

export function TeamStateCorrector() {
    const [, startTransition] = useTransition();
    // Afegim un estat per guardar el missatge d'error
    const [errorMessage, setErrorMessage] = useState<string | null>(null);

    const runCorrection = () => {
        setErrorMessage(null); // Resetejem l'error abans de començar
        startTransition(async () => {
            console.log("[CLIENT] Estat invàlid detectat. Executant neteja...");
            const result = await clearActiveTeamAction();
            if (result?.success === false) {
                const message = result.message || "Hi ha hagut un error inesperat.";
                toast.error("Error en corregir l'estat de l'equip.", { description: message });
                setErrorMessage(message); // Guardem l'error a l'estat
            } else {
                window.location.reload();
            }
        });
    };

    // Executem la correcció només un cop quan el component es munta
    useEffect(() => {
        runCorrection();
    }, []); 

    // Renderitzem condicionalment segons si hi ha error o no
    return (
        <div className="flex flex-col justify-center items-center h-64 gap-4">
            {errorMessage ? (
                <>
                    <p className="text-destructive">No s'ha pogut corregir l'estat de l'equip.</p>
                    <p className="text-sm text-muted-foreground">{errorMessage}</p>
                    <Button onClick={runCorrection}>Reintentar</Button>
                </>
            ) : (
                <p>Corregint estat de l'equip...</p>
            )}
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/settings/team/_hooks/useTeamHub.ts ===================

// /app/[locale]/settings/team/_hooks/useTeamHub.ts
"use client";

import { useTransition } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import {
    createTeamAction,
    switchActiveTeamAction,
    acceptPersonalInviteAction,
    declinePersonalInviteAction
} from '../actions';

export function useTeamHub() {
    const [isPending, startTransition] = useTransition();
    const router = useRouter();

    // Funció genèrica per a accions que requereixen una recàrrega completa
    // (canviar d'equip o acceptar una invitació canvien el token d'usuari)
    type ActionResult = { success: boolean; message?: string };
    
    const executeActionAndReload = (action: () => Promise<ActionResult>) => {
        startTransition(async () => {
            const result = await action();
            if (result && result.success === false) {
                toast.error(result.message || "Hi ha hagut un error.");
            } else {
                // ✅ Redirigeix a la vista principal de l’equip
                router.replace("/settings/team");
                router.refresh();
            }
        });
    };

    // Handlers que utilitzen la funció genèrica
    const handleCreateTeam = (formData: FormData) => {
        executeActionAndReload(() => createTeamAction(formData));
    };

    const handleSwitchTeam = (teamId: string) => {
        executeActionAndReload(() => switchActiveTeamAction(teamId));
    };

    const handleAcceptInvite = (invitationId: string) => {
        executeActionAndReload(() => acceptPersonalInviteAction(invitationId));
    };

    // Handler per rebutjar, que només necessita un refresc de dades
    const handleDeclineInvite = (invitationId: string) => {
        startTransition(async () => {
            await declinePersonalInviteAction(invitationId);
            toast.info("Invitació rebutjada.");
            router.refresh(); // No cal recarregar tota la pàgina, només les dades del servidor.
        });
    };

    // Retornem la nostra caixa d'eines 🧰
    return {
        isPending,
        handleCreateTeam,
        handleSwitchTeam,
        handleAcceptInvite,
        handleDeclineInvite,
    };
}

// =================== FILE: src/app/[locale]/(app)/settings/team/_hooks/useTeamManagement.ts ===================

// /src/app/[locale]/(app)/settings/team/_hooks/useTeamManagement.ts (VERSIÓ FINAL)
"use client";

import { useTransition, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import {
    inviteUserAction, removeMemberAction,
    revokeInvitationAction, toggleInboxPermissionAction, updateMemberRoleAction
} from '../actions';
import type { Role } from '@/lib/permissions.config';

export function useTeamManagement() {
    const [isPending, startTransition] = useTransition();
    const router = useRouter();
    const inviteFormRef = useRef<HTMLFormElement>(null);

    // Define a type for the expected result structure
    type ActionResult = { success: boolean; message?: string };

    // Funció genèrica per a accions que refresquen les dades
    const executeActionAndRefresh = (action: () => Promise<ActionResult>, successMessage?: string) => {
        startTransition(async () => {
            const result = await action();
            if (result?.success === false) {
                toast.error(result.message || "Hi ha hagut un error.");
            } else {
                if (successMessage) toast.success(successMessage);
                router.refresh();
            }
        });
    };

    const handleClearTeam = () => {
        // Simplement naveguem a la pàgina d'equips. Res més.
        // Com que ja som a la pàgina, un 'refresh' és suficient
        // per a que el 'page.tsx' es torni a executar i ens mostri el lobby.
        router.push('/settings/team?view=select');
    };

    const handleInvite = (formData: FormData) => {
        executeActionAndRefresh(() => inviteUserAction(formData));
        inviteFormRef.current?.reset();
    };

    const handleRemoveMember = (userId: string) => {
        if (!confirm("Estàs segur que vols eliminar aquest membre? Aquesta acció no es pot desfer.")) return;
        executeActionAndRefresh(() => removeMemberAction(userId));
    };

    const handleRoleChange = (userId: string, newRole: Role) => {
        executeActionAndRefresh(() => updateMemberRoleAction(userId, newRole));
    };

    const handleRevokeInvite = (invitationId: string) => {
        executeActionAndRefresh(() => revokeInvitationAction(invitationId));
    };

    const handleTogglePermission = (targetUserId: string) => {
        executeActionAndRefresh(() => toggleInboxPermissionAction(targetUserId));
    };

    const getInitials = (name: string | null | undefined) => {
        if (!name) return '??';
        return name.split(' ').map(n => n[0]).slice(0, 2).join('').toUpperCase();
    };

    return {
        isPending, inviteFormRef, handleClearTeam, handleInvite,
        handleRemoveMember, handleRoleChange, handleRevokeInvite,
        handleTogglePermission, getInitials,
    };
}

// =================== FILE: src/app/[locale]/(app)/settings/_components/settings-nav.tsx ===================

/**
 * @file SettingsNav.tsx
 * @summary Component de navegació per a la secció de Configuració,
 * ara adaptable per a escriptori i mòbil.
 */
"use client";

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { useLocale, useTranslations } from 'next-intl';
import { User, CreditCard, Users, Puzzle, Wrench, ShieldOff ,KeyRound} from 'lucide-react';
import { cn, getCleanPathname } from '@/lib/utils/utils';

const settingsNavItems = [
  { id: 'profile', labelKey: 'profile', icon: User, path: '/settings/profile' },
  { id: 'billing', labelKey: 'billing', icon: CreditCard, path: '/settings/billing' },
  { id: 'team', labelKey: 'team', icon: Users, path: '/settings/team' },
  { id: 'integrations', labelKey: 'integrations', icon: Puzzle, path: '/settings/integrations' },
  { id: 'blacklist', labelKey: 'blacklist', icon: ShieldOff, path: '/settings/blacklist' },
  { id: 'customization', labelKey: 'customization', icon: Wrench, path: '/settings/customization' },
  { id: 'permissions', labelKey: 'permissions', icon: KeyRound, path: '/settings/permissions' },
];

export function SettingsNav() {
  const t = useTranslations('SettingsPage.nav');
  const fullPathname = usePathname();
  const locale = useLocale();
  const cleanPathname = getCleanPathname(fullPathname, locale);

  return (
    // Aquest <nav> és ara un contenidor flexible.
    <nav className="flex flex-col gap-4">
      {/* El títol principal només es mostra en pantalles grans */}
      <h1 className="text-3xl font-bold mb-4 hidden lg:block">{t('title')}</h1>
      
      {/* ✅ DISSENY ADAPTABLE:
        - En mòbil ('flex-row'), és una fila.
        - En escriptori ('lg:flex-col'), és una columna.
        - 'overflow-x-auto' permet fer scroll horitzontal en mòbil si no hi caben tots els elements.
      */}
      <ul className="flex flex-row lg:flex-col space-x-2 lg:space-x-0 lg:space-y-1 overflow-x-auto pb-2 -mb-2">
        {settingsNavItems.map(item => {
          // Comprovem si l'enllaç està actiu
          const isActive = cleanPathname === item.path;
          return (
            <li key={item.id} className="flex-shrink-0">
              <Link
                href={`/${locale}${item.path}`}
                className={cn(
                  'flex items-center gap-3 px-4 py-2.5 rounded-lg transition-all duration-200 hover:bg-accent text-sm lg:text-base',
                  isActive
                    ? 'bg-primary text-primary-foreground font-semibold shadow-sm'
                    : 'text-muted-foreground hover:text-foreground'
                )}
              >
                <item.icon className="w-5 h-5" />
                <span>{t(item.labelKey as string)}</span>
              </Link>
            </li>
          );
        })}
      </ul>
    </nav>
  );
}


// =================== FILE: src/app/[locale]/(app)/settings/_components/SettingsSkeleton.tsx ===================

/**
 * @file SettingsSkeleton.tsx
 * @summary Esquelet de càrrega per a l'estructura general de la secció de Configuració.
 */
"use client";

import { Skeleton } from '@/components/ui/skeleton';

export function SettingsSkeleton() {
  return (
    <div className="flex flex-col lg:flex-row gap-8 h-full animate-pulse">
      {/* Esquelet per a la navegació lateral */}
      <aside className="flex-shrink-0 lg:w-64">
        <Skeleton className="h-9 w-1/2 mb-8" />
        <div className="space-y-2">
          <Skeleton className="h-12 w-full" />
          <Skeleton className="h-12 w-full" />
          <Skeleton className="h-12 w-full" />
          <Skeleton className="h-12 w-full" />
        </div>
      </aside>
      {/* Esquelet per a l'àrea de contingut */}
      <main className="flex-1">
        <div className="space-y-4">
          <Skeleton className="h-9 w-1/3" />
          <Skeleton className="h-5 w-2/3" />
          <Skeleton className="h-64 w-full mt-8" />
        </div>
      </main>
    </div>
  );
}

// =================== FILE: src/app/[locale]/(app)/_components/AppClientLayout.tsx ===================

// Ubicació: /app/(app)/components/AppClientLayout.tsx

"use client";

import React, { useState, ReactNode } from 'react';
import Image from 'next/image';
import { motion } from 'framer-motion';
import { useTranslations } from 'next-intl';
import { toast } from 'sonner';

// Hooks i Stores
import { useAppNavigation } from '@/hooks/useAppNavigation';
import { useNavigationStore } from '@/stores/navigationStore';

// Components
import { MainSidebar } from './main-sidebar';
import { ModuleSidebar } from './module-sidebar';
import { MobileMenu } from './MobileMenu';
import { Chatbot } from '@/components/chatbot/Chatbot';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";

// Accions
import { logoutAction } from '@/app/[locale]/(auth)/auth/actions';

// Imatges i tipus
import logoRibot from '@/../public/icon1.png';


export function AppClientLayout({ children }: { children: ReactNode, locale: string }) {
    const t = useTranslations('Navigation');
    const { isChatbotOpen } = useNavigationStore();
    const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);

    // ✅ Tota la lògica complexa ve del nostre hook personalitzat!
    const {
        activeModule,
        isModuleSidebarOpen,
        setIsModuleSidebarOpen,
        handleNavigation,
        handleMainMenuClick,
    } = useAppNavigation();

    const handleSignOut = () => {
        logoutAction();
    };

    const handleNotImplementedClick = (e: React.MouseEvent) => {
        e.preventDefault();
        toast.info(t('comingSoon'), { description: t('featureUnavailable') });
    };

    return (
        <div className="h-screen w-screen flex flex-col lg:flex-row bg-background text-foreground overflow-hidden">
            <MainSidebar
                onModuleSelect={handleMainMenuClick}
                onOpenSignOutDialog={() => setIsSignOutDialogOpen(true)}
                onNotImplemented={handleNotImplementedClick}
            />

            <motion.div
                className="hidden lg:block overflow-hidden flex-shrink-0"
                initial={false}
                animate={{ width: isModuleSidebarOpen && activeModule ? '16rem' : '0rem' }}
                transition={{ type: 'spring', stiffness: 400, damping: 40 }}
            >
                {activeModule && (
                    <ModuleSidebar
                        module={activeModule}
                        onClose={() => setIsModuleSidebarOpen(false)}
                        handleNavigation={handleNavigation}
                    />
                )}
            </motion.div>

            <div className="flex-1 flex flex-col overflow-hidden">
                <header className="lg:hidden flex items-center justify-between p-4 border-b border-border flex-shrink-0">
                    <MobileMenu
                        onOpenSignOutDialog={() => setIsSignOutDialogOpen(true)}
                        onNotImplementedClick={handleNotImplementedClick}
                        handleNavigation={handleNavigation}
                    />
                    <span className="font-bold text-lg">Ribotflow</span>
                    <Image src={logoRibot} alt={t('logoAlt')} className="object-cover" priority height={40} />
                </header>
                <main className="flex-1 overflow-y-auto">
                    <div className="h-full p-4 sm:p-6 md:p-8">{children}</div>
                </main>
                {isChatbotOpen && <Chatbot />}
            </div>

            <AlertDialog open={isSignOutDialogOpen} onOpenChange={setIsSignOutDialogOpen}>
                <AlertDialogContent>
                    <AlertDialogHeader>
                        <AlertDialogTitle>{t('signOutConfirmTitle')}</AlertDialogTitle>
                        <AlertDialogDescription>{t('signOutConfirmDescription')}</AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                        <AlertDialogCancel>{t('cancel')}</AlertDialogCancel>
                        <AlertDialogAction onClick={handleSignOut} className="bg-destructive hover:bg-destructive/90">{t('confirmSignOut')}</AlertDialogAction>
                    </AlertDialogFooter>
                </AlertDialogContent>
            </AlertDialog>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(app)/_components/main-sidebar.tsx ===================

// Ubicació: /app/(app)/components/main-sidebar.tsx

"use client";

import React from 'react';
import Image from 'next/image';
import { useTranslations } from 'next-intl';
import { LogOut } from 'lucide-react';

import { useNavigationStore } from '@/stores/navigationStore';
import { navModules, bottomItems } from '@/config/navigation';
import type { NavItem as NavItemType } from '@/types/navigation';

import { NavItem } from './NavItem';
import logoRibot from '@/../public/icon1.png';

interface MainSidebarProps {
    onModuleSelect: (module: NavItemType) => void;
    onOpenSignOutDialog: () => void;
    onNotImplemented: (e: React.MouseEvent) => void;
}

export function MainSidebar({ onModuleSelect, onOpenSignOutDialog, onNotImplemented }: MainSidebarProps) {
    const t = useTranslations('Navigation');
    const { isNavigating } = useNavigationStore();
    const { toggleChatbot } = useNavigationStore();

    const handleItemClick = (e: React.MouseEvent<HTMLAnchorElement>, item: NavItemType) => {
        // ✅ CORRECCIÓ: Comprovem primer si l'ítem no està implementat.
        if (item.notImplemented) {
            e.preventDefault(); // Prevenim la navegació del Link
            onNotImplemented(e); // Cridem a la funció corresponent del pare
            return; // Aturem l'execució aquí
        }

        // Lògica especial per a certs botons (com el chatbot)
        if (item.id === 'ia') {
            e.preventDefault();
            toggleChatbot();
            return;
        }

        // Prevenim la navegació si no és un enllaç directe (és un mòdul que obre un submenú)
        if (!item.isSingle) {
            e.preventDefault();
        }

        // Finalment, notifiquem al component pare que s'ha fet un clic.
        onModuleSelect(item);
    };
    
    return (
        <aside className="hidden lg:flex w-24 h-full glass-effect border-r border-border p-4 flex-col items-center z-20">
            {/* Logo a la part superior */}
            <div className="flex items-center justify-center gap-3 mb-8">
                <div className="w-12 h-12 bg-gradient-to-r to-pink-500 rounded-lg flex items-center justify-center overflow-hidden">
                    {isNavigating ? (
                        <video
                            src="/videoLoading.webm"
                            autoPlay muted loop playsInline
                            className="w-full h-full object-cover"
                        />
                    ) : (
                        <Image
                            src={logoRibot}
                            alt={t('logoAlt')}
                            className="object-cover"
                            priority
                        />
                    )}
                </div>
            </div>

            {/* Navegació principal */}
            <nav className="flex-1 flex flex-col items-center gap-4 z-20">
                {navModules.map(item => (
                    <NavItem key={item.id} item={item} onClick={handleItemClick} t={t} />
                ))}
            </nav>

            {/* Elements de la part inferior */}
            <div className="flex flex-col items-center gap-4 border-t border-border pt-4 mt-4">
                {bottomItems.map(item => (
                    <NavItem key={item.id} item={item} onClick={handleItemClick} t={t} />
                ))}

                {/* Botó de tancar sessió */}
                <div 
                    onClick={onOpenSignOutDialog} 
                    className="flex items-center justify-center h-12 w-12 rounded-lg text-muted-foreground hover:bg-muted cursor-pointer group relative"
                    role="button"
                    aria-label={t('signOut')}
                >
                    <LogOut className="w-6 h-6" />
                    <span className="absolute left-16 p-2 px-3 text-sm font-medium bg-popover text-popover-foreground rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">{t('signOut')}</span>
                </div>
            </div>
        </aside>
    );
}

// =================== FILE: src/app/[locale]/(app)/_components/MobileMenu.tsx ===================

"use client";

import React, { useState } from 'react';
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from "@/components/ui/sheet";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Button } from '@/components/ui/button';
import { Menu, LogOut } from 'lucide-react';
import { useTranslations } from 'next-intl';
import { navModules, bottomItems } from '@/config/navigation';
import type { NavItem } from '@/types/navigation';

export function MobileMenu({ onOpenSignOutDialog, onNotImplementedClick, handleNavigation }: {
    onOpenSignOutDialog: () => void;
    onNotImplementedClick: (e: React.MouseEvent) => void;
    handleNavigation: (item: NavItem) => void;
}) {
    const [isOpen, setIsOpen] = useState(false);
    const t = useTranslations('Navigation');

    // Funció que crida a handleNavigation i tanca el menú
    const createClickHandler = (item: NavItem) => () => {
        handleNavigation(item);
        // Tanquem el menú si és un enllaç simple o si és un sub-ítem
        if (item.isSingle !== false) { // isSingle pot ser true o undefined
            setIsOpen(false);
        }
    };

    return (
        <Sheet open={isOpen} onOpenChange={setIsOpen}>
            <SheetTrigger asChild>
                <Button variant="ghost" size="icon" className="lg:hidden"><Menu className="h-6 w-6" /></Button>
            </SheetTrigger>
            <SheetContent side="left" className="w-full sm:w-[320px] p-0 flex flex-col">
                <SheetHeader className="p-4 border-b"><SheetTitle>{t('menuTitle')}</SheetTitle></SheetHeader>
                <nav className="flex-1 overflow-y-auto p-4 space-y-1">
                    {navModules.map(module => (
                        module.isSingle ? (
                            <Button key={module.id} variant="ghost" className="w-full justify-start gap-3 px-4 py-3 text-base font-medium" onClick={createClickHandler(module)}>
                                <module.icon className="w-5 h-5" /> {t(module.labelKey)}
                            </Button>
                        ) : (
                            <Accordion key={module.id} type="single" collapsible className="w-full">
                                <AccordionItem value={module.id} className="border-b-0">
                                    <AccordionTrigger className="px-4 py-3 text-base font-medium hover:no-underline hover:bg-muted rounded-lg">
                                        <div className="flex items-center gap-3"><module.icon className="w-5 h-5" />{t(module.labelKey)}</div>
                                    </AccordionTrigger>
                                    <AccordionContent className="pl-8 pt-2 pb-1">
                                        <div className="flex flex-col gap-1">
                                            {module.children?.map(item => (
                                                <Button key={item.id} variant="ghost" className="w-full justify-start gap-3 px-4 py-2 text-muted-foreground hover:text-foreground" onClick={createClickHandler(item)}>
                                                    <item.icon className="w-4 h-4" />{t(item.labelKey)}
                                                </Button>
                                            ))}
                                        </div>
                                    </AccordionContent>
                                </AccordionItem>
                            </Accordion>
                        )
                    ))}
                </nav>
                <div className="p-4 border-t mt-auto space-y-1">
                    {bottomItems.map(item => 
                        item.notImplemented ? (
                            <Button key={item.id} variant="ghost" className="w-full justify-start ..." onClick={onNotImplementedClick}>{/* ... */}</Button>
                        ) : (
                            <Button key={item.id} variant="ghost" className="w-full justify-start ..." onClick={createClickHandler(item)}>{/* ... */}</Button>
                        )
                    )}
                    <Button variant="ghost" className="w-full justify-start ... text-red-500" onClick={onOpenSignOutDialog}>
                        <LogOut className="w-5 h-5" /> {t('signOut')}
                    </Button>
                </div>
            </SheetContent>
        </Sheet>
    );
}

// =================== FILE: src/app/[locale]/(app)/_components/module-sidebar.tsx ===================

"use client";

import { usePathname } from 'next/navigation';
import { useLocale, useTranslations } from 'next-intl';
import { ChevronLeft } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { cn, getCleanPathname } from '@/lib/utils/utils';
import type { NavItem } from '@/types/navigation';

/**
 * @summary Barra lateral para un módulo específico (submenú).
 * AHORA GESTIONA LA NAVEGACIÓN A TRAVÉS DE UNA FUNCIÓN PARA COMPROBAR PERMISOS.
 */
export function ModuleSidebar({ module, onClose, handleNavigation }: {
    module: NavItem;
    onClose: () => void;
    handleNavigation: (item: NavItem) => void; // ✅ Acceptem la funció de navegació
}) {
    const locale = useLocale();
    const t = useTranslations('Navigation');
    const fullPathname = usePathname();
    const cleanPathname = getCleanPathname(fullPathname, locale);

    if (!module || !module.children) return null;

    return (
        <div className="hidden lg:flex w-64 h-full glass-effect border-r border-border flex-col p-4 flex-shrink-0">
            <div className="flex items-center justify-between mb-6">
                <h2 className="text-lg font-bold pl-2">{t(module.labelKey)}</h2>
                <Button variant="ghost" size="icon" onClick={onClose}>
                    <ChevronLeft className="h-5 w-5" />
                </Button>
            </div>
            <nav className="flex flex-col gap-2">
                {module.children.map(item => {
                    const isActive = cleanPathname === item.path;
                    return (
                        // ✅ CORRECCIÓ: Hem canviat <Link> per <Button> per a controlar el clic
                        <Button
                            key={item.id}
                            variant="ghost" // Usem 'ghost' per a que sembli un enllaç
                            onClick={() => handleNavigation(item)} // Cridem a la funció que comprova els permisos
                            className={cn(
                                'flex items-center justify-start gap-3 px-4 py-2.5 rounded-lg text-sm transition-colors w-full h-auto text-left', // 'text-left' per a alinear
                                isActive
                                    ? 'bg-primary text-primary-foreground font-semibold shadow-sm'
                                    : 'text-muted-foreground hover:bg-muted/50 hover:text-foreground'
                            )}
                        >
                            <item.icon className="w-5 h-5" />
                            <span>{t(item.labelKey)}</span>
                        </Button>
                    );
                })}
            </nav>
        </div>
    );
};

// =================== FILE: src/app/[locale]/(app)/_components/NavItem.tsx ===================

// Ubicació: /components/layout/NavItem.tsx (o on guardis els teus components)

"use client";

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { useLocale } from 'next-intl';

import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { cn, getCleanPathname } from '@/lib/utils/utils';
import type { NavItem as NavItemType } from '@/types/navigation';

// Definim les propietats que rebrà el nostre component
interface NavItemProps {
    item: NavItemType;
    onClick: (e: React.MouseEvent<HTMLAnchorElement>, item: NavItemType) => void;
    t: (key: string) => string; // Passem la funció de traducció per mantenir el component pur
}

export function NavItem({ item, onClick, t }: NavItemProps) {
    const fullPathname = usePathname();
    const locale = useLocale();
    
    // La lògica per determinar si l'ítem està actiu
    const activeCheckPath = item.basePath || item.path;
    const isActive = getCleanPathname(fullPathname, locale).startsWith(activeCheckPath);

    return (
        <TooltipProvider delayDuration={100}>
            <Tooltip>
                <TooltipTrigger asChild>
                    <Link
                        href={`/${locale}${item.path}`}
                        onClick={(e) => onClick(e, item)} // Cridem a la funció del pare
                        className={cn(
                            'flex items-center justify-center h-12 w-12 rounded-lg transition-colors relative',
                            isActive 
                                ? 'bg-primary text-primary-foreground' 
                                : 'text-muted-foreground hover:bg-muted'
                        )}
                        aria-label={t(item.labelKey)}
                    >
                        <item.icon className="w-6 h-6" />
                    </Link>
                </TooltipTrigger>
                <TooltipContent side="right" className="ml-2">
                    <p>{t(item.labelKey)}</p>
                </TooltipContent>
            </Tooltip>
        </TooltipProvider>
    );
}

// =================== FILE: src/app/[locale]/(app)/_components/ui/redirect-animation.tsx ===================

// src/app/_components/ui/redirect-animation.tsx
"use client"; // ✅ Indica a Next.js que aquest component s'executa al client (necessari per animacions i estat).

import { motion } from 'framer-motion'; // ✅ Importem Framer Motion per gestionar animacions.
import { Rocket } from 'lucide-react'; // ✅ Icona de coet de la llibreria Lucide.
import { useTranslations } from 'next-intl'; // ✅ Import

export default function RedirectAnimation() {
  const t = useTranslations('RedirectAnimation'); // ✅ Hook

  // ✅ Component que mostra una animació mentre es prepara l'espai de treball.
  return (
    <div className="flex flex-col items-center justify-center gap-6 text-center">
      {/* ✅ Animació principal del coet */}
      <motion.div
        // Estat inicial del coet: posició vertical y=0, opacitat completa i lleuger gir.
        initial={{ y: 0, opacity: 1, rotate: -45 }}
        // Animació: el coet es mou cap amunt i desapareix (opacitat 0).
        animate={{ y: -150, opacity: 0 }}
        // Configuració de la transició: durada, suavitzat, repetició infinita amb retard.
        transition={{
          duration: 2,
          ease: "easeInOut",
          repeat: Infinity,
          repeatType: "loop",
          repeatDelay: 1,
        }}
      >
        {/* ✅ Icona del coet estilitzada */}
        <Rocket className="w-24 h-24 text-primary" />
      </motion.div>

      {/* ✅ Text que apareix suaument després d’un retard */}
      <motion.p
        initial={{ opacity: 0 }} // El text comença invisible.
        animate={{ opacity: 1 }} // Es fa visible.
        transition={{ delay: 0.5, duration: 1 }} // Apareix després de 0.5s, dura 1s.
        className="text-2xl font-semibold text-muted-foreground"
      >
        {t('loadingWorkspace')} {/* ✅ Text traduït */}
        </motion.p>
    </div>
  );
}


// =================== FILE: src/app/[locale]/(auth)/auth/actions.ts ===================

// /app/[locale]/auth/actions.ts

"use server";

import { z } from 'zod';
import { createClient, createAdminClient } from "@/lib/supabase/server";
import { headers } from "next/headers";
import { redirect } from "next/navigation";

// ✅ PRINCIPI DRY: Un helper per a inicialitzar el context de l'acció
async function createActionContext() {
    const supabase = createClient();
    const headersList = await headers();
    const locale = headersList.get('x-next-intl-locale') || 'ca';
    const origin = headersList.get('origin');
    return { supabase, locale, origin };
}

// --- Esquemes de Validació amb Zod ---
const LoginSchema = z.object({
    email: z.string().email("L'adreça d'email no és vàlida."),
    password: z.string().min(1, "La contrasenya és obligatòria."),
});

const SignupSchema = z.object({
    email: z.string().email("L'adreça d'email no és vàlida."),
    password: z.string().min(8, "La contrasenya ha de tenir almenys 8 caràcters."),
    invite_token: z.string().optional(),
});

const ForgotPasswordSchema = z.object({
    email: z.string().email("Si us plau, introdueix una adreça d'email vàlida."),
});

const UpdatePasswordSchema = z.object({
    password: z.string().min(8, "La nova contrasenya ha de tenir almenys 8 caràcters."),
    code: z.string().min(1, "Falta el token de restabliment."),
});


// --- Accions Refactoritzades ---

export async function loginAction(formData: FormData) {
    const { supabase, locale } = await createActionContext();
    const result = LoginSchema.safeParse(Object.fromEntries(formData));

    if (!result.success) {
        return redirect(`/${locale}/login?message=${encodeURIComponent(result.error.issues[0].message)}`);
    }
    
    const { error } = await supabase.auth.signInWithPassword(result.data);
    if (error) {
        return redirect(`/${locale}/login?message=${encodeURIComponent("Credencials incorrectes.")}`);
    }
    
    redirect(`/${locale}/dashboard`);
}

export async function signupAction(formData: FormData) {
    const { supabase, locale, origin } = await createActionContext();
    const supabaseAdmin = createAdminClient();
    const result = SignupSchema.safeParse(Object.fromEntries(formData));

    if (!result.success) {
        return redirect(`/${locale}/signup?message=${encodeURIComponent(result.error.issues[0].message)}`);
    }
    
    const { email, password, invite_token } = result.data;
    
    // La teva lògica per comprovar si l'usuari existeix és bona, la mantenim
    const { data: existingUser } = await supabaseAdmin.from('users').select('id').eq('email', email).single();
    if (existingUser) {
        return redirect(`/${locale}/login?message=${encodeURIComponent("Ja existeix un compte amb aquest correu.")}`);
    }

    const nextUrl = invite_token ? `/dashboard?token=${invite_token}` : `/onboarding`;
    const { error: signUpError } = await supabase.auth.signUp({
        email,
        password,
        options: {
            emailRedirectTo: `${origin}/auth/callback?next=${encodeURIComponent(nextUrl)}`,
        },
    });

    if (signUpError) {
        return redirect(`/${locale}/signup?message=${encodeURIComponent(signUpError.message)}`);
    }

    return redirect(`/auth/check-email?email=${encodeURIComponent(email)}`);
}

export async function logoutAction() {
    const { supabase, locale } = await createActionContext();
    await supabase.auth.signOut();
    redirect(`/${locale}/login`);
}

export async function googleAuthAction(inviteToken?: string | null) {
    const { supabase, origin } = await createActionContext();
    if (inviteToken) {
        await supabase.auth.signOut();
    }
    let redirectTo = `${origin}/auth/callback`;
    if (inviteToken) {
        redirectTo += `?next=/dashboard?token=${inviteToken}`;
    }
    const { data, error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: { redirectTo },
    });

    if (error) {
        return redirect(`/login?message=${encodeURIComponent("No s'ha pogut iniciar sessió amb Google.")}`);
    }
    return redirect(data.url);
}

export async function forgotPasswordAction(formData: FormData): Promise<{ success: boolean; message: string }> {
    const { supabase, origin, locale } = await createActionContext();
    const result = ForgotPasswordSchema.safeParse(Object.fromEntries(formData));

    if (!result.success) {
        return { success: false, message: result.error.issues[0].message };
    }
    
    const { error } = await supabase.auth.resetPasswordForEmail(result.data.email, {
        redirectTo: `${origin}/${locale}/auth/reset-password`,
    });

    if (error) {
        console.error("Error en restablir la contrasenya:", error);
        return { success: false, message: "No s'ha pogut iniciar el procés de restabliment." };
    }

    return { success: true, message: "Si l'email existeix, rebràs un enllaç per a restablir la teva contrasenya." };
}

// ✅ Aquesta és la nova acció que hem mogut des del component de pàgina
export async function updatePasswordAction(formData: FormData) {
    const { supabase, locale } = await createActionContext();
    const result = UpdatePasswordSchema.safeParse(Object.fromEntries(formData));

    if (!result.success) {
        return redirect(`/${locale}/auth/reset-password?message=${encodeURIComponent(result.error.issues[0].message)}`);
    }
    
    const { code, password } = result.data;

    const { error: exchangeError } = await supabase.auth.exchangeCodeForSession(code);
    if (exchangeError) {
        return redirect(`/${locale}/auth/reset-password?message=L'enllaç de restabliment és invàlid o ha caducat.`);
    }

    const { error: updateError } = await supabase.auth.updateUser({ password });
    if (updateError) {
        return redirect(`/${locale}/auth/reset-password?message=${encodeURIComponent(updateError.message)}`);
    }
    
    return redirect(`/${locale}/login?message=La teva contrasenya s'ha actualitzat correctament.`);
}

// =================== FILE: src/app/[locale]/(auth)/auth/callback/route.ts ===================

import { createClient, createAdminClient } from "@/lib/supabase/server";
import { headers } from "next/headers";
import { NextResponse, type NextRequest } from 'next/server';

export async function GET(request: NextRequest) {
    const { searchParams, origin } = new URL(request.url);
    const code = searchParams.get('code');
    const next = searchParams.get('next') ?? '/dashboard'; // Per defecte, anem al dashboard
    const locale = (await headers()).get('x-next-intl-locale') || 'ca';

    if (code) {

        const supabase = createClient();
        const { error, data: { user } } = await supabase.auth.exchangeCodeForSession(code);

        if (!error && user) {
            const inviteToken = new URL(`${origin}${next}`).searchParams.get('token');

            // CAS 1: L'usuari ve amb una invitació
            if (inviteToken) {
                const supabaseAdmin = createAdminClient();
                const { data: invitation } = await supabaseAdmin.from('invitations').select('*').eq('token', inviteToken).single();

                if (invitation) {
                    await supabaseAdmin.from('team_members').insert({ team_id: invitation.team_id, user_id: user.id, role: invitation.role });
                    const { data: subscription } = await supabaseAdmin.from('subscriptions').select('plan_id, status').eq('team_id', invitation.team_id).single();
                    const teamPlan = (subscription?.status === 'active') ? subscription.plan_id : 'free';

                    await supabaseAdmin.auth.admin.updateUserById(user.id, { app_metadata: { active_team_id: invitation.team_id, active_team_plan: teamPlan } });
                    await supabaseAdmin.from('profiles').update({ onboarding_completed: true }).eq('id', user.id);
                    await supabaseAdmin.from('invitations').delete().eq('id', invitation.id);
                    // ✅ PAS CRUCIAL: Forcem el refresc de la sessió per a actualitzar la cookie

                    await supabase.auth.refreshSession();
                    // Després de gestionar la invitació, el portem directament al dashboard
                    return NextResponse.redirect(`${origin}/${locale}/dashboard`);
                }
            }

            // CAS 2: Usuari normal (sense invitació)
            const { data: profile } = await supabase.from('profiles').select('onboarding_completed').eq('id', user.id).single();
            if (profile && !profile.onboarding_completed) {
                return NextResponse.redirect(`${origin}/${locale}/onboarding`);
            }

            // Per a la resta de casos, el portem a la seva destinació (normalment, el dashboard)
            return NextResponse.redirect(`${origin}/${locale}${next.split('?')[0]}`);
        }
    }

    return NextResponse.redirect(`${origin}/${locale}/login?error=auth_failed`);
}

// =================== FILE: src/app/[locale]/(auth)/auth/check-email/page.tsx ===================

"use client";

import { Suspense } from 'react';
import { useSearchParams } from 'next/navigation';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { MailCheck } from 'lucide-react';

function CheckEmailMessage() {
    const searchParams = useSearchParams();
    const email = searchParams.get('email');

    if (!email) {
        return (
            <Card className="w-full max-w-md">
                <CardHeader>
                    <CardTitle>Error</CardTitle>
                </CardHeader>
                <CardContent>
                    <p>No s'ha proporcionat cap correu electrònic.</p>
                </CardContent>
            </Card>
        );
    }


    // AQUEST COMPONENT ARA NOMÉS MOSTRA EL MISSATGE. NO TÉ useEffect NI LÒGICA DE REDIRECCIÓ.
    return (
        <Card className="w-full max-w-md text-center">
            <CardHeader>
                <div className="mx-auto bg-primary/10 text-primary p-3 rounded-full w-fit">
                    <MailCheck className="w-8 h-8" />
                </div>
                <CardTitle className="mt-4 text-2xl">Només un pas més!</CardTitle>
                <CardDescription>
                    T'hem enviat un enllaç de confirmació a <br/>
                    <strong className="text-foreground">{email}</strong>
                </CardDescription>
            </CardHeader>
            <CardContent>
                <p className="text-sm text-muted-foreground">
                    Si us plau, fes clic a l'enllaç per activar el teu compte. Si no el veus, revisa la teva carpeta de correu brossa (spam).
                </p>
                <p className="text-xs text-muted-foreground mt-6">
                    Pots tancar aquesta pestanya un cop hagis confirmat el correu a l'altra.
                </p>
            </CardContent>
        </Card>
    );
}

export default function CheckEmailPage() {
    return (
        <div className="flex items-center justify-center min-h-screen bg-muted/40 p-4">
            <Suspense>
                <CheckEmailMessage />
            </Suspense>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(auth)/auth/reset-password/page.tsx ===================

// /app/[locale]/auth/reset-password/page.tsx

import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
// ✅ 1. Importem l'acció des del seu fitxer centralitzat
import { updatePasswordAction } from '../actions';

interface ResetPasswordPageProps {
  searchParams: { message?: string; code?: string; };
}

// ✅ Hem tret l' 'await' de les props per a simplificar
export default function ResetPasswordPage({ searchParams }: ResetPasswordPageProps) {
    return (
        <div className="flex items-center justify-center min-h-screen">
            <div className="w-full max-w-sm space-y-6">
                <h1 className="text-2xl font-bold">Crea una nova contrasenya</h1>
                {/* ✅ 2. Cridem l'acció importada */}
                <form action={updatePasswordAction} className="space-y-4">
                    <input type="hidden" name="code" value={searchParams.code} />
                    <div className="space-y-2">
                        <Label htmlFor="password">Nova Contrasenya</Label>
                        <Input id="password" name="password" type="password" required minLength={8} />
                    </div>
                    <Button type="submit" className="w-full">Actualitzar Contrasenya</Button>
                    {searchParams?.message && (
                        <p className="text-sm text-center text-destructive p-2 bg-destructive/10 rounded-md">
                            {searchParams.message}
                        </p>
                    )}
                </form>
            </div>
        </div>
    );
}

// =================== FILE: src/app/[locale]/(auth)/login/page.tsx ===================

// /app/[locale]/login/page.tsx

import LoginForm from './_components/LoginClient';
import { Suspense } from 'react';

// This Server Component is now very simple.
export default function LoginPage() {
  return (
    // Suspense is still needed because the child component uses a hook to read params.
    <Suspense>
      <LoginForm />
    </Suspense>
  );
}

// =================== FILE: src/app/[locale]/(auth)/login/_components/ForgotPasswordDialog.tsx ===================

"use client";

import { useState, useTransition } from 'react';
import { toast } from 'sonner';
import { useTranslations } from 'next-intl';
import { forgotPasswordAction } from '@/app/[locale]/(auth)/auth/actions';

// UI Components
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogTrigger } from '@/components/ui/dialog';
import { Loader2, MailCheck } from 'lucide-react';

export function ForgotPasswordDialog() {
    // ✅ CORRECCIÓ: Agafem l'espai de noms principal 'LoginPage'.
    const t = useTranslations('LoginPage');
    const [isOpen, setIsOpen] = useState(false);
    const [isPending, startTransition] = useTransition();
    const [emailSent, setEmailSent] = useState(false);
    const [userEmail, setUserEmail] = useState("");

    const handleSubmit = (formData: FormData) => {
        const email = formData.get('email') as string;
        setUserEmail(email);

        startTransition(async () => {
            const result = await forgotPasswordAction(formData);
            if (result.success) {
                setEmailSent(true);
            } else {
                toast.error(t('forgotPassword.errorTitle'), { description: result.message });
            }
        });
    };

    const handleOpenChange = (open: boolean) => {
        setIsOpen(open);
        if (!open) {
            // Reseteja l'estat quan el diàleg es tanca
            setTimeout(() => {
                setEmailSent(false);
                setUserEmail("");
            }, 300);
        }
    };

    return (
        <Dialog open={isOpen} onOpenChange={handleOpenChange}>
            <DialogTrigger asChild>
                <button type="button" className="text-sm font-medium text-primary hover:underline">
                    {/* ✅ CORRECCIÓ: Usem la clau completa i correcta. */}
                    {t('forgotPasswordLink')}
                </button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-md">
                {emailSent ? (
                    <div className="text-center p-8">
                        <MailCheck className="w-16 h-16 text-green-500 mx-auto mb-4" />
                        <h3 className="text-xl font-bold">{t('forgotPassword.successTitle')}</h3>
                        <p className="text-muted-foreground mt-2">
                            {t('forgotPassword.successDescription')} <br />
                            <strong className="text-foreground">{userEmail}</strong>
                        </p>
                        <p className="text-xs text-muted-foreground mt-4">{t('forgotPassword.spamWarning')}</p>
                        <Button onClick={() => setIsOpen(false)} className="mt-6 w-full">{t('forgotPassword.closeButton')}</Button>
                    </div>
                ) : (
                    <>
                        <DialogHeader>
                            <DialogTitle>{t('forgotPassword.title')}</DialogTitle>
                            <DialogDescription>{t('forgotPassword.description')}</DialogDescription>
                        </DialogHeader>
                        <form action={handleSubmit}>
                            <div className="grid gap-4 py-4">
                                {/* ✅ CORRECCIÓ: Usem la clau del nivell superior. */}
                                <Label htmlFor="email-forgot">{t('emailLabel')}</Label>
                                <Input id="email-forgot" name="email" type="email" placeholder={t('emailPlaceholder')} required disabled={isPending} />
                            </div>
                            <DialogFooter>
                                <Button type="submit" disabled={isPending} className="w-full">
                                    {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                                    {t('forgotPassword.submitButton')}
                                </Button>
                            </DialogFooter>
                        </form>
                    </>
                )}
            </DialogContent>
        </Dialog>
    );
}



// =================== FILE: src/app/[locale]/(auth)/login/_components/LoginClient.tsx ===================

"use client";

import Image from 'next/image';
import Link from 'next/link';
import dynamic from 'next/dynamic';
import { useTranslations } from 'next-intl';

// UI Components
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Separator } from '@/components/ui/separator';
import { Mail, Lock, Loader2, Check, AlertTriangle } from 'lucide-react';

// Lògica i components refactoritzats
import { useLoginForm } from '../_hooks/useLoginForm';
import { ForgotPasswordDialog } from './ForgotPasswordDialog';

// Carrega dinàmica per a components pesats només de client
const ParticleBackground = dynamic(() => import('@/app/[locale]/_components/ParticleBackground').then(mod => mod.ParticleBackground), { ssr: false });

// Component de presentació per a la secció de branding
const BrandingSection = () => {
    const t = useTranslations('LoginPage');
    return (
        <div className="hidden lg:flex flex-col items-center justify-center p-12 relative z-10">
            <div className="text-center max-w-md">
                <Image src="/android-chrome-192x192.png" alt="Logo de Ribotflow" width={80} height={80} className="mx-auto mb-6" />
                <h1 className="text-4xl font-bold mb-4">{t('welcomeTitle')}</h1>
                <p className="text-lg text-muted-foreground mb-8">{t('welcomeSubtitle')}</p>
                <ul className="space-y-4 text-lg text-left">
                    <li className="flex items-start"><Check className="w-6 h-6 text-primary mr-3 mt-1 shrink-0" /><span>{t('feature1')}</span></li>
                    <li className="flex items-start"><Check className="w-6 h-6 text-primary mr-3 mt-1 shrink-0" /><span>{t('feature2')}</span></li>
                    <li className="flex items-start"><Check className="w-6 h-6 text-primary mr-3 mt-1 shrink-0" /><span>{t('feature3')}</span></li>
                </ul>
            </div>
        </div>
    );
};

export default function LoginClient() {
    const t = useTranslations('LoginPage');
    // ✅ Tota la lògica complexa ara ve d'aquest hook. El component només es preocupa de renderitzar.
    const { isPending, isGoogleLoading, errorMessage, handleEmailLogin, handleGoogleLogin } = useLoginForm();

    return (
        <div className="w-full min-h-screen lg:grid lg:grid-cols-2 relative">
            <ParticleBackground />
            <BrandingSection />

            <div className="flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8 bg-background relative z-10">
                <div className="w-full max-w-md space-y-8">
                    <div className="text-center lg:text-left">
                        <h2 className="text-3xl font-bold tracking-tight">{t('title')}</h2>
                        <p className="mt-2 text-muted-foreground">
                            {t('subtitle')}{" "}
                            <Link href="/signup" className="font-medium text-primary hover:underline">{t('signupLink')}</Link>
                        </p>
                    </div>

                    <div className="space-y-6">
                        <Button variant="outline" className="w-full text-lg py-6 flex items-center justify-center" onClick={handleGoogleLogin} disabled={isGoogleLoading || isPending}>
                            {isGoogleLoading ? <Loader2 className="mr-2 h-5 w-5 animate-spin" /> : <Image className="w-5 h-5 mr-3" alt="Google logo" src="https://fonts.gstatic.com/s/i/productlogos/googleg/v6/24px.svg" width={20} height={20} />}
                            <span>{t('googleButton')}</span>
                        </Button>

                        <div className="relative">
                            <div className="absolute inset-0 flex items-center"><Separator /></div>
                            <div className="relative flex justify-center text-xs uppercase"><span className="bg-background px-2 text-muted-foreground">{t('separator')}</span></div>
                        </div>

                        <form action={handleEmailLogin} className="space-y-6">
                            {errorMessage && (
                                <div className="bg-destructive/10 text-destructive border border-destructive/30 p-3 rounded-md flex items-center gap-3 text-sm">
                                    <AlertTriangle className="w-5 h-5 flex-shrink-0" />
                                    <p>{errorMessage}</p>
                                </div>
                            )}
                            <div className="space-y-2">
                                <Label htmlFor="email">{t('emailLabel')}</Label>
                                <div className="relative">
                                    <Mail className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
                                    <Input id="email" name="email" type="email" placeholder={t('emailPlaceholder')} required className="pl-10" />
                                </div>
                            </div>
                            <div className="space-y-2">
                                <div className="flex items-center justify-between">
                                    <Label htmlFor="password">{t('passwordLabel')}</Label>
                                    {/* ✅ El diàleg ara és un component independent i auto-gestionat. */}
                                    <ForgotPasswordDialog />
                                </div>
                                <div className="relative">
                                    <Lock className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
                                    <Input id="password" name="password" type="password" required minLength={6} className="pl-10" />
                                </div>
                            </div>
                            <Button type="submit" className="w-full text-lg py-6" disabled={isPending || isGoogleLoading}>
                                {isPending && <Loader2 className="mr-2 h-5 w-5 animate-spin" />}
                                {t('submitButton')}
                            </Button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    );
}


// =================== FILE: src/app/[locale]/(auth)/login/_hooks/useLoginForm.ts ===================

"use client";

import { useTransition, useMemo } from 'react';
import { useSearchParams } from 'next/navigation';
import { useTranslations } from 'next-intl';
import { loginAction, googleAuthAction } from '@/app/[locale]/(auth)/auth/actions';

/**
 * Custom hook que encapsula tota la lògica d'estat i accions per al formulari de login.
 */
export function useLoginForm() {
    const t = useTranslations('LoginPage');
    const searchParams = useSearchParams();
    const [isPending, startTransition] = useTransition();
    const [isGoogleLoading, startGoogleTransition] = useTransition();

    const handleEmailLogin = (formData: FormData) => {
        startTransition(() => {
            loginAction(formData);
        });
    };

    const handleGoogleLogin = () => {
        startGoogleTransition(() => {
            googleAuthAction();
        });
    };

    // useMemo assegura que el missatge d'error només es calculi quan canviïn els paràmetres de la URL.
    const errorMessage = useMemo(() => {
        const message = searchParams.get('message');
        const error = searchParams.get('error');

        if (error === 'invalid_credentials') return t('errors.invalidCredentials');
        if (error === 'auth_failed') return t('errors.authFailed');
        if (error === 'invite_failed') return message || t('errors.inviteFailed');
        if (message) return message;
        
        return null;
    }, [searchParams, t]);

    return {
        isPending,
        isGoogleLoading,
        errorMessage,
        handleEmailLogin,
        handleGoogleLogin,
    };
}


// =================== FILE: src/app/[locale]/(auth)/signup/page.tsx ===================

import { Suspense } from 'react';
import { SignupClient } from './_components/SignupClient';

interface SignupPageProps {
  searchParams: {
    errorKey?: string;
    message?: string;
    email?: string;
    invite_token?: string;
  };
}

export default async function SignupPage({ searchParams }: SignupPageProps) {
  // Les dades es preparen aquí al servidor i es passen al component de client.
  const inviteToken = searchParams.invite_token;
  const invitedEmail = searchParams.email;

  return (
    // Suspense és necessari perquè el nostre hook 'useSignupForm' utilitza 'useSearchParams'.
    <Suspense>
      <SignupClient
        inviteToken={inviteToken}
        invitedEmail={invitedEmail}
      />
    </Suspense>
  );
}


// =================== FILE: src/app/[locale]/(auth)/signup/_components/SignupClient.tsx ===================

"use client";

import Image from 'next/image';
import Link from 'next/link';
import dynamic from 'next/dynamic';
import { useTranslations } from 'next-intl';

// UI Components
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Separator } from '@/components/ui/separator';
import { Mail, Lock, Loader2, Check, AlertTriangle } from 'lucide-react';

// Lògica i components refactoritzats
import { useSignupForm } from '../_hooks/useSignupForm';

const ParticleBackground = dynamic(() => import('@/app/[locale]/_components/ParticleBackground').then(mod => mod.ParticleBackground), { ssr: false });

// Component de presentació per a la secció de branding
const BrandingSection = () => {
    const t = useTranslations('SignupPage');
    return (
        <div className="hidden lg:flex flex-col items-center justify-center p-12 relative z-10">
            <div className="text-center max-w-md">
                <Image src="/android-chrome-192x192.png" alt="Logo de Ribotflow" width={60} height={60} className="mx-auto mb-8" />
                <h1 className="text-4xl font-bold mb-6">{t('welcomeTitle')}</h1>
                <p className="text-lg text-muted-foreground mb-8">{t('welcomeSubtitle')}</p>
                <ul className="space-y-4 text-lg text-left">
                    <li className="flex items-start"><Check className="w-6 h-6 text-primary mr-3 mt-1 shrink-0" /><span>{t('feature1')}</span></li>
                    <li className="flex items-start"><Check className="w-6 h-6 text-primary mr-3 mt-1 shrink-0" /><span>{t('feature2')}</span></li>
                    <li className="flex items-start"><Check className="w-6 h-6 text-primary mr-3 mt-1 shrink-0" /><span>{t('feature3')}</span></li>
                </ul>
            </div>
        </div>
    );
};

// ✅ JA NO REP PROPS
export function SignupClient() {
    const t = useTranslations('SignupPage');
    // ✅ OBTENIM TOT DEL HOOK I JA NO PASSEM EL TOKEN COM A ARGUMENT
    const { 
        isPending, 
        isGoogleLoading, 
        errorMessage, 
        handleEmailSignup, 
        handleGoogleSignup,
        invitedEmail // <-- Obtingut del hook
    } = useSignupForm();

    return (
        <div className="w-full min-h-screen lg:grid lg:grid-cols-2 relative">
            <ParticleBackground />
            <BrandingSection />

            <div className="flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8 bg-background relative z-10">
                <div className="w-full max-w-md space-y-8">
                    <div className="text-center lg:text-left">
                        <h2 className="text-3xl font-bold tracking-tight">{t('title')}</h2>
                        <p className="mt-2 text-muted-foreground">
                            {t('subtitle')}{" "}
                            <Link href="/login" className="font-medium text-primary hover:underline">{t('loginLink')}</Link>
                        </p>
                    </div>

                    <div className="space-y-6">
                        <Button variant="outline" className="w-full text-lg py-6" onClick={handleGoogleSignup} disabled={isGoogleLoading || isPending}>
                            {isGoogleLoading ? <Loader2 className="mr-2 h-5 w-5 animate-spin" /> : <Image className="w-5 h-5 mr-3" alt="Google logo" src="https://fonts.gstatic.com/s/i/productlogos/googleg/v6/24px.svg" width={20} height={20} />}
                            <span>{t('googleButton')}</span>
                        </Button>

                        <div className="relative">
                            <div className="absolute inset-0 flex items-center"><Separator /></div>
                            <div className="relative flex justify-center text-xs uppercase"><span className="bg-background px-2 text-muted-foreground">{t('separator')}</span></div>
                        </div>

                        <form action={handleEmailSignup} className="space-y-6">
                            {errorMessage && (
                                <div className="bg-destructive/10 text-destructive border border-destructive/30 p-3 rounded-md flex items-center gap-3 text-sm">
                                    <AlertTriangle className="w-5 h-5 flex-shrink-0" />
                                    <p>{errorMessage}</p>
                                </div>
                            )}
                            <div className="space-y-2">
                                <Label htmlFor="email">{t('emailLabel')}</Label>
                                <div className="relative">
                                    <Mail className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
                                    <Input id="email" name="email" type="email" placeholder={t('emailPlaceholder')} required className="pl-10" defaultValue={invitedEmail ?? undefined} readOnly={!!invitedEmail} />
                                </div>
                                {invitedEmail && <p className="text-xs text-muted-foreground">Aquesta invitació és exclusiva per a aquest correu electrònic.</p>}
                            </div>
                            <div className="space-y-2">
                                <Label htmlFor="password">{t('passwordLabel')}</Label>
                                <div className="relative">
                                    <Lock className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
                                    <Input id="password" name="password" type="password" required minLength={6} placeholder={t('passwordPlaceholder')} className="pl-10" />
                                </div>
                            </div>
                            <Button type="submit" className="w-full text-lg py-6" disabled={isPending || isGoogleLoading}>
                                {isPending && <Loader2 className="mr-2 h-5 w-5 animate-spin" />}
                                {t('submitButton')}
                            </Button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    );
}


// =================== FILE: src/app/[locale]/(auth)/signup/_hooks/useSignupForm.ts ===================

// /app/[locale]/signup/_hooks/useSignupForm.ts

"use client";

import { useTransition, useMemo } from 'react';
import { useSearchParams } from 'next/navigation';
import { useTranslations } from 'next-intl';
import { signupAction, googleAuthAction } from '@/app/[locale]/(auth)/auth/actions';

/**
 * Hook que encapsula tota la lògica d'estat i accions per al formulari de registre.
 */
// ✅ JA NO NECESSITA REBRE EL TOKEN COM A ARGUMENT
export function useSignupForm() {
    const t = useTranslations('SignupPage');
    const searchParams = useSearchParams();
    const [isPending, startTransition] = useTransition();
    const [isGoogleLoading, startGoogleTransition] = useTransition();

    // ✅ LLEGIM EL TOKEN I L'EMAIL DIRECTAMENT AQUÍ
    const inviteToken = useMemo(() => searchParams.get('invite_token'), [searchParams]);
    const invitedEmail = useMemo(() => searchParams.get('email'), [searchParams]);

    const handleEmailSignup = (formData: FormData) => {
        if (inviteToken) {
            formData.append('invite_token', inviteToken);
        }
        startTransition(() => {
            signupAction(formData);
        });
    };

    const handleGoogleSignup = () => {
        startGoogleTransition(() => {
            googleAuthAction(inviteToken);
        });
    };

    const errorMessage = useMemo(() => {
        const errorKey = searchParams.get('errorKey');
        const message = searchParams.get('message');

        if (errorKey) {
            // Intenta obtenir la traducció. Si no existeix, mostra la clau com a fallback.
            return t(`errors.${errorKey}`) || errorKey;
        }
        if (message) {
            return message;
        }
        return null;
    }, [searchParams, t]);


    return {
        isPending,
        isGoogleLoading,
        errorMessage,
        handleEmailSignup,
        handleGoogleSignup,
        inviteToken,    // ✅ RETORNEM ELS VALORS LLEGITS
        invitedEmail,   // ✅ RETORNEM ELS VALORS LLEGITS
    };
}

// =================== FILE: src/app/[locale]/accept-invite/route.ts ===================

import { type NextRequest, NextResponse } from 'next/server';
import { headers } from 'next/headers';

// ✅ CORRECCIÓ: Importem l'acció des de la seva nova ubicació centralitzada.
import { resolveInvitationAction } from '@/app/actions/invitationActions';

export const dynamic = 'force-dynamic';

/**
 * Aquest Route Handler és el primer que s'executa quan un usuari
 * fa clic a l'enllaç de la invitació del correu.
 * La seva única feina és actuar com un "director de trànsit".
 */
export async function GET(request: NextRequest) {
  const token = request.nextUrl.searchParams.get('token');
  // Obtenim el locale a partir de les capçaleres que injecta el middleware
  const locale = (await headers()).get('x-next-intl-locale') || 'ca';

  if (!token) {
    // Si per alguna raó no hi ha token, el portem al login amb un error.
    const url = request.nextUrl.clone();
    url.pathname = `/${locale}/login`;
    url.searchParams.set('message', 'Token d\'invitació invàlid o inexistent.');
    return NextResponse.redirect(url);
  }

  // Cridem a l'acció que conté la lògica per decidir si l'usuari
  // ha d'anar a la pàgina de login o a la de registre per a convidats.
  // Aquesta acció ja retorna una NextResponse.redirect(), per la qual cosa
  // simplement retornem el seu resultat.
  return await resolveInvitationAction(token);
}


// =================== FILE: src/app/[locale]/invitation/accept/page.tsx ===================

// /app/[locale]/invitation/accept/page.tsx (VERSIÓ FINAL)

import { InvitedSignupForm } from './_components/InvitedSignupForm';
import { createClient } from '@/lib/supabase/server';

// Assegura que la pàgina sempre es renderitza dinàmicament per a llegir els searchParams.
export const dynamic = 'force-dynamic';

type InvitedSignupPageProps = {
    searchParams: { 
        // ✅ CORRECCIÓ: El paràmetre es diu 'token', no 'invite_token'.
        token?: string; 
        email?: string;
    };
};

export default async function InvitedSignupPage({ searchParams }: InvitedSignupPageProps) {
    // ✅ MILLORA: Ja no necessitem 'await searchParams' aquí.
    const { token, email } = searchParams;
    let teamName: string | null = null; // Ho inicialitzem a null per a més claredat.

    if (token) {
        const supabase = createClient();
        const { data: invitationData } = await supabase
            .from('invitations')
            .select('team_name')
            .eq('token', token)
            .single();
        
        if (invitationData?.team_name) {
            teamName = invitationData.team_name;
        }
    }

    return (
        <div className="flex flex-col items-center justify-center min-h-screen bg-muted/40 p-4">
            {/* ✅ MILLORA: Suspense no és necessari aquí. */}
            <InvitedSignupForm 
                inviteToken={token}
                invitedEmail={email}
                teamName={teamName}
            />
        </div>
    );
}

// =================== FILE: src/app/[locale]/invitation/accept/_components/InvitedSignupForm.tsx ===================

"use client";

import { useTransition } from 'react';
import { signupAction } from '@/app/[locale]/(auth)/auth/actions';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Loader2, Mail, Lock, User as UserIcon } from 'lucide-react';

type InvitedSignupFormProps = {
    inviteToken?: string;
    invitedEmail?: string;
    teamName?: string | null;
};

export function InvitedSignupForm({ inviteToken, invitedEmail, teamName }: InvitedSignupFormProps) {
    const [isPending, startTransition] = useTransition();
    console.log("Props rebudes al formulari:", { inviteToken, invitedEmail, teamName });

    const handleSubmit = (formData: FormData) => {
        startTransition(() => {
            signupAction(formData);
        });
    };
    console.log({ invitedEmail });  
    return (
        <Card className="w-full max-w-md shadow-lg">
            <CardHeader className="text-center">
                <CardTitle className="text-2xl">Benvingut/da a Bord!</CardTitle>
                <CardDescription>
                    Estàs a punt d'unir-te a <strong>{teamName || "l'equip"}</strong>. Només has de completar el teu perfil.
                </CardDescription>
            </CardHeader>
            <CardContent>
                <form action={handleSubmit} className="space-y-4">
                    
                    {/* Aquest input ocult és per al token, està perfecte. */}
                    <input type="hidden" name="invite_token" value={inviteToken} />
                    
                    {/* El camp de l'email ja està configurat per a enviar-se amb el formulari
                        gràcies al 'name="email"'. És visible però no editable. Perfecte! */}
                    <div className="space-y-2">
                        <Label htmlFor="email">El teu correu electrònic</Label>
                        <div className="relative">
                            <Mail className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
                            <Input
                                id="email"
                                name="email" // Aquesta línia l'envia amb el formulari
                                type="email"
                                required
                                defaultValue={invitedEmail || ''}
                                readOnly={true} // Aquesta línia evita que es pugui editar
                                className="pl-10 bg-muted/60 cursor-not-allowed focus-visible:ring-transparent"
                            />
                        </div>
                    </div>
                    
                    {/* La resta del formulari es queda igual */}
                    <div className="space-y-2">
                        <Label htmlFor="fullName">Nom i cognoms</Label>
                        <div className="relative">
                            <UserIcon className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
                            <Input
                                id="fullName"
                                name="fullName"
                                placeholder="El teu nom complet"
                                required
                                className="pl-10"
                                disabled={isPending}
                            />
                        </div>
                    </div>
                    <div className="space-y-2">
                        <Label htmlFor="password">Crea una contrasenya</Label>
                        <div className="relative">
                            <Lock className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
                            <Input
                                id="password"
                                name="password"
                                type="password"
                                placeholder="Mínim 6 caràcters"
                                required
                                minLength={6}
                                className="pl-10"
                                disabled={isPending}
                            />
                        </div>
                    </div>
                    
                    <Button type="submit" disabled={isPending} className="w-full">
                        {isPending ? (
                            <>
                                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                Creant compte...
                            </>
                        ) : (
                            `Unir-se a ${teamName || "l'equip"}`
                        )}
                    </Button>
                </form>
            </CardContent>
        </Card>
    );
}

// =================== FILE: src/app/[locale]/layout.tsx ===================

import '../globals.css';
import 'prismjs/themes/prism-tomorrow.css';
import { Inter } from 'next/font/google';
import type { Metadata } from 'next';
import { ReactNode } from 'react';
import { Toaster } from 'sonner';
import { ThemeProvider } from '@/components/theme-provider';
import { NextIntlClientProvider } from 'next-intl';
import { getMessages, getTranslations } from 'next-intl/server';

const inter = Inter({ subsets: ['latin'] });

interface LocaleLayoutProps {
  children: ReactNode;
  params: Promise<{ locale: string }>;
}

export async function generateMetadata(props: { params: Promise<{ locale: string }> }): Promise<Metadata> {
  const { locale } = await props.params;
  const t = await getTranslations({ locale, namespace: 'Metadata' });
  const siteUrl = process.env.NEXT_PUBLIC_SITE_URL || 'https://ribotflow.com';

  return {
    title: { template: `%s | ${t('siteName')}`, default: t('defaultTitle') },
    description: t('description'),
    metadataBase: new URL(siteUrl),
    
    // ✅ NOU: Afegim la configuració per a les icones i el manifest.
    // Next.js buscarà automàticament aquests fitxers a la carpeta /app.
    icons: {
      icon: '/favicon.ico',
      apple: '/apple-icon.png',
    },
    manifest: '/site.webmanifest',
  };
}

export default async function LocaleLayout(props: LocaleLayoutProps) {
  const { locale } = await props.params;
  const { children } = props;

  const messages = await getMessages({ locale });

  return (
    <html lang={locale} suppressHydrationWarning>
      <body className={inter.className}>
        <NextIntlClientProvider locale={locale} messages={messages}>
          <ThemeProvider
            attribute="class"
            defaultTheme="dark"
            enableSystem
            disableTransitionOnChange
          >
            {children}
          </ThemeProvider>
          <Toaster position="bottom-right" richColors closeButton />
        </NextIntlClientProvider>
      </body>
    </html>
  );
}


// =================== FILE: src/app/[locale]/onboarding/actions.ts ===================

"use server";

import { z } from 'zod';
// ✅ CORRECCIÓ: Importem les teves funcions de client
import { createClient, createAdminClient } from "@/lib/supabase/server";
import { headers } from "next/headers";
import { redirect } from "next/navigation";

// L'esquema de Zod i el tipus es queden igual
const OnboardingSchema = z.object({
    full_name: z.string().min(3, "El nom complet és obligatori."),
    company_name: z.string().min(2, "El nom de l'empresa és obligatori."),
    tax_id: z.string().optional(),
    website: z.string().url("Introdueix una URL vàlida.").optional().or(z.literal('')),
    summary: z.string().optional(),
    sector: z.string().optional(),
    services: z.array(z.string()).min(1, "Has de seleccionar almenys un servei."),
    phone: z.string().optional(),
    street: z.string().min(1, "El carrer és obligatori."),
    city: z.string().min(1, "La ciutat és obligatòria."),
    postal_code: z.string().min(1, "El codi postal és obligatori."),
    region: z.string().min(1, "La regió és obligatòria."),
    country: z.string().min(1, "El país és obligatori."),
    latitude: z.number().optional(),
    longitude: z.number().optional(),
});

type OnboardingFormData = z.infer<typeof OnboardingSchema>;


export async function submitOnboardingAction(formData: OnboardingFormData) {
    // --- PAS 1: INICIALITZACIÓ I AUTENTICACIÓ ---
    // ✅ CORRECCIÓ: Cridem les teves funcions sense arguments
    const supabase = createClient();
    const supabaseAdmin = createAdminClient();
    
    const { data: { user } } = await supabase.auth.getUser();

    if (!user) {
        return { success: false, message: "Usuari no autenticat." };
    }

    // --- PAS 2: VALIDACIÓ DE DADES AMB ZOD ---
    const validationResult = OnboardingSchema.safeParse(formData);

    if (!validationResult.success) {
        return { success: false, message: validationResult.error.issues[0].message };
    }
    
    const validData = validationResult.data;
    
    try {
        // --- 1. PREPAREM LES DADES PER A LA INSERCIÓ ---
        const profileUpdateData = {
            full_name: formData.full_name,
            phone: formData.phone || null,
            onboarding_completed: true,
        };

        const teamInsertData = {
            name: formData.company_name,
            owner_id: user.id,
            tax_id: formData.tax_id,
            website: formData.website,
            summary: formData.summary,
            sector: formData.sector,
            services: formData.services,
            phone: formData.phone,
            email: user.email,
            address: [formData.street, formData.city, formData.postal_code, formData.country].filter(Boolean).join(', '),
            street: formData.street,
            city: formData.city,
            postal_code: formData.postal_code,
            region: formData.region,
            country: formData.country,
            latitude: formData.latitude,
            longitude: formData.longitude,
        };

        // --- 2. EXECUTEM LES OPERACIONS A LA BASE DE DADES ---

        // Actualitzem el perfil personal de l'usuari
        await supabase.from('profiles').update(profileUpdateData).eq('id', user.id).throwOnError();
        
        const { data: newTeam } = await supabase.from('teams').insert(teamInsertData).select('id').single().throwOnError();
        
        await supabase.from('team_members').insert({ team_id: newTeam.id, user_id: user.id, role: 'owner' }).throwOnError();
        
        await supabaseAdmin.from('subscriptions').insert({
            team_id: newTeam.id,
            plan_id: 'free',
            status: 'active'
        }).throwOnError();

        await supabaseAdmin.auth.admin.updateUserById(
            user.id,
            {
                app_metadata: {
                    ...user.app_metadata,
                    active_team_id: newTeam.id,
                    active_team_plan: 'free'
                },
                user_metadata: {
                    ...user.user_metadata,
                    full_name: validData.full_name
                }
            }
        );
        
    } catch (error) {
        const message = error instanceof Error ? error.message : "Hi ha hagut un error desconegut.";
        console.error("Error durant l'acció d'Onboarding:", message);
        return { success: false, message: "No s'ha pogut completar el registre. Intenta-ho de nou." };
    }

    // --- PAS 4: REDIRECCIÓ SI TOT HA ANAT BÉ ---
    await supabase.auth.refreshSession();

    const locale = (await headers()).get('x-next-intl-locale') || 'ca';
    redirect(`/${locale}/dashboard`);
}

// =================== FILE: src/app/[locale]/onboarding/page.tsx ===================

import { Suspense } from 'react';
import type { Metadata } from 'next';
import { OnboardingData } from './_components/OnboardingData';
import { OnboardingSkeleton } from './_components/OnboardingSkeleton';

export const metadata: Metadata = {
  title: 'Benvingut a Ribotflow',
  description: 'Completa el teu perfil per començar.',
};

export default function OnboardingPage() {
  return (
    <Suspense fallback={<OnboardingSkeleton />}>
      <OnboardingData />
    </Suspense>
  );
}

// =================== FILE: src/app/[locale]/onboarding/_components/OnboardingClient.tsx ===================

// /app/[locale]/onboarding/_components/OnboardingClient.tsx
"use client";

import React from 'react';
import { AnimatePresence } from 'framer-motion';
import { OnboardingProvider, useOnboarding } from './OnboardingContext';
import { OnboardingLayout } from './OnboardingLayout'; // Nou component per l'estructura
import { Step1, Step2, Step3 } from './steps'; // Components per a cada pas

interface OnboardingClientProps {
    initialFullName: string;
    availableServices: { id: number; name: string }[];
}

// Component intern que renderitza el pas actual
function OnboardingSteps({ availableServices }: { availableServices: { id: number; name: string }[] }) {
    const { step } = useOnboarding(); // Obtenim l'estat del context
    
    return (
        <AnimatePresence mode="wait">
            {step === 1 && <Step1 key="step1" />}
            {step === 2 && <Step2 key="step2" />}
            {step === 3 && <Step3 key="step3" availableServices={availableServices} />}
        </AnimatePresence>
    );
}

// El component principal ara és molt més net
export function OnboardingClient({ initialFullName, availableServices }: OnboardingClientProps) {
    return (
        <OnboardingProvider initialFullName={initialFullName}>
            <OnboardingLayout>
                <OnboardingSteps availableServices={availableServices} />
            </OnboardingLayout>
        </OnboardingProvider>
    );
}

// =================== FILE: src/app/[locale]/onboarding/_components/OnboardingContext.tsx ===================

// /app/[locale]/onboarding/_context/OnboardingContext.tsx
"use client";

import { createContext, useContext, ReactNode } from 'react';
import { useOnboardingForm } from '../_hooks/useOnboardingForm';

// El 'ReturnType' ens estalvia haver de reescriure tots els tipus del hook
type OnboardingContextType = ReturnType<typeof useOnboardingForm> | null;

const OnboardingContext = createContext<OnboardingContextType>(null);

export function useOnboarding() {
    const context = useContext(OnboardingContext);
    if (!context) {
        throw new Error("useOnboarding ha de ser utilitzat dins d'un OnboardingProvider");
    }
    return context;
}

export function OnboardingProvider({ children, initialFullName }: { children: ReactNode, initialFullName: string }) {
    const value = useOnboardingForm(initialFullName);
    return (
        <OnboardingContext.Provider value={value}>
            {children}
        </OnboardingContext.Provider>
    );
}

// =================== FILE: src/app/[locale]/onboarding/_components/OnboardingData.tsx ===================

// /app/[locale]/onboarding/_components/OnboardingData.tsx

import { createClient } from '@/lib/supabase/server';
import { redirect } from 'next/navigation';
import { OnboardingClient } from './OnboardingClient';

export async function OnboardingData() {
    const supabase = createClient(); // La teva funció ja gestiona les cookies

    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
        return redirect('/login');
    }
    
    // ✅ Executem les dues consultes alhora per més rapidesa
    const [profileRes, servicesRes] = await Promise.all([
        supabase.from('profiles').select('onboarding_completed').eq('id', user.id).single(),
        supabase.from('services').select('id, name').order('name')
    ]);

    // Comprovem el resultat del perfil
    if (profileRes.data?.onboarding_completed) {
        return redirect('/dashboard');
    }

    // Comprovem si hi ha hagut un error en carregar els serveis
    if (servicesRes.error) {
        console.error("Error al carregar els serveis:", servicesRes.error);
    }
    
    const initialFullName = user.user_metadata?.full_name || '';
    const availableServices = servicesRes.data || [];

    return (
        <OnboardingClient 
            initialFullName={initialFullName} 
            availableServices={availableServices}
        />
    );
}

// =================== FILE: src/app/[locale]/onboarding/_components/OnboardingLayout.tsx ===================

"use client";

import { useOnboarding } from './OnboardingContext';
import { useTranslations } from 'next-intl';
import { motion, AnimatePresence } from 'framer-motion';
import { Progress } from '@/components/ui/progress';
import { Button } from '@/components/ui/button';
import { ArrowLeft, ArrowRight, Loader2 } from 'lucide-react';

export function OnboardingLayout({ children }: { children: React.ReactNode }) {
    const { step, goToNextStep, goToPrevStep, handleSubmit, isPending } = useOnboarding();
    const t = useTranslations('OnboardingPage');
    const totalSteps = 3;
    const progress = (step / totalSteps) * 100;

    return (
        <div className="flex items-center justify-center min-h-screen p-4 bg-background">
            <div className="w-full max-w-2xl glass-card p-8 md:p-12 shadow-2xl space-y-6">
                <Progress value={progress} className="w-full" />
                <div className="text-center">
                    <p className="font-semibold text-primary mb-2">{t('step', { current: step, total: totalSteps })}</p>
                    <AnimatePresence mode="wait">
                        <motion.h1 key={step} initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -10 }} className="text-3xl font-bold">
                            {step === 1 && t('step1.title')}
                            {step === 2 && t('step2.title')}
                            {step === 3 && t('step3.title')}
                        </motion.h1>
                    </AnimatePresence>
                </div>

                <div className="min-h-[250px] flex flex-col justify-center">
                    {children}
                </div>

                <div className="flex justify-between items-center pt-6 border-t">
                    <Button variant="ghost" onClick={goToPrevStep} disabled={step === 1 || isPending}>
                        <ArrowLeft className="mr-2 h-4 w-4" /> Enrere
                    </Button>
                    {step < totalSteps ? (
                        <Button onClick={goToNextStep} disabled={isPending}>
                            Següent <ArrowRight className="ml-2 h-4 w-4" />
                        </Button>
                    ) : (
                        <Button onClick={handleSubmit} disabled={isPending}>
                            {isPending ? <Loader2 className="animate-spin" /> : "Finalitzar"}
                        </Button>
                    )}
                </div>
            </div>
        </div>
    );
}

// =================== FILE: src/app/[locale]/onboarding/_components/OnboardingSkeleton.tsx ===================

"use client";

/**
 * @summary Esquelet de càrrega per a la pàgina d'Onboarding.
 */
export function OnboardingSkeleton() {
  return (
    <div className="flex items-center justify-center min-h-screen p-4 bg-background animate-pulse">
      <div className="w-full max-w-2xl glass-card p-8 shadow-2xl">
        <div className="space-y-4">
          <div className="h-8 w-1/3 bg-gray-700/50 rounded-md"></div>
          <div className="h-5 w-2/3 bg-gray-700/50 rounded-md"></div>
          <div className="h-3 w-full bg-gray-700/50 rounded-md mt-4"></div>
        </div>
        <div className="mt-8 space-y-6">
          <div className="h-12 w-full bg-gray-700/50 rounded-md"></div>
          <div className="h-12 w-full bg-gray-700/50 rounded-md"></div>
        </div>
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/onboarding/_components/ServiceSelectionModal.tsx ===================

"use client";

import React, { useState, useMemo, FC } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input'; // Importem l'Input per al cercador
import { Check, Search } from 'lucide-react'; // Importem la icona de cerca

// --- Component per a la targeta de servei individual (sense canvis) ---
const ServiceCard: FC<{ serviceName: string; isSelected: boolean; onClick: () => void; }> = ({ serviceName, isSelected, onClick }) => (
    <motion.button
        type="button"
        onClick={onClick}
        className={`relative w-full h-24 p-4 rounded-lg border-2 flex items-center justify-center text-center font-semibold transition-all duration-200 ease-in-out ${
            isSelected ? 'bg-primary/10 border-primary text-primary' : 'bg-muted/50 border-transparent hover:border-primary/50'
        }`}
        whileTap={{ scale: 0.95 }}
    >
        {isSelected && (
            <div className="absolute top-2 right-2 bg-primary text-primary-foreground rounded-full p-1">
                <Check className="w-3 h-3" />
            </div>
        )}
        {serviceName}
    </motion.button>
);


// --- Component per al diàleg modal (AMB LES MILLORES) ---
interface ServiceSelectionModalProps {
    isOpen: boolean;
    onClose: () => void;
    availableServices: { id: number; name: string }[];
    selectedServices: string[];
    onToggleService: (serviceName: string) => void;
}

export const ServiceSelectionModal: FC<ServiceSelectionModalProps> = ({ isOpen, onClose, availableServices, selectedServices, onToggleService }) => {
    // ✅ PAS 1: Afegim un estat per al terme de cerca
    const [searchTerm, setSearchTerm] = useState('');

    // ✅ PAS 2: Filtrem els serveis basant-nos en el terme de cerca
    const filteredServices = useMemo(() => {
        if (!searchTerm) {
            return availableServices;
        }
        return availableServices.filter(service =>
            service.name.toLowerCase().includes(searchTerm.toLowerCase())
        );
    }, [searchTerm, availableServices]);

    return (
        <AnimatePresence>
            {isOpen && (
                <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    className="fixed inset-0 bg-black/60 z-50 flex items-center justify-center p-4"
                    onClick={onClose}
                >
                    <motion.div
                        initial={{ scale: 0.9, opacity: 0, y: 20 }}
                        animate={{ scale: 1, opacity: 1, y: 0 }}
                        exit={{ scale: 0.9, opacity: 0, y: 20 }}
                        transition={{ type: 'spring', stiffness: 300, damping: 30 }}
                        className="bg-background rounded-xl shadow-2xl w-full max-w-3xl max-h-[80vh] flex flex-col"
                        onClick={(e) => e.stopPropagation()}
                    >
                        <div className="p-6 border-b">
                            <h2 className="text-2xl font-bold">Selecciona els teus serveis</h2>
                            {/* ✅ PAS 3: Augmentem la mida de la lletra de la descripció */}
                            <p className="text-muted-foreground mt-1 text-sm">Tria les categories que millor descriuen la teva activitat.</p>
                            
                            {/* ✅ PAS 4: Afegim el camp de cerca */}
                            <div className="relative mt-4">
                                <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
                                <Input
                                    type="text"
                                    placeholder="Cerca serveis..."
                                    className="pl-10"
                                    value={searchTerm}
                                    onChange={(e) => setSearchTerm(e.target.value)}
                                />
                            </div>
                        </div>
                        
                        {/* ✅ PAS 5: Renderitzem la llista filtrada */}
                        <div className="p-6 overflow-y-auto grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                            {filteredServices.length > 0 ? (
                                filteredServices.map(service => (
                                    <ServiceCard
                                        key={service.id}
                                        serviceName={service.name}
                                        isSelected={selectedServices.includes(service.name)}
                                        onClick={() => onToggleService(service.name)}
                                    />
                                ))
                            ) : (
                                <p className="text-muted-foreground col-span-full text-center py-8">No s'han trobat serveis.</p>
                            )}
                        </div>
                        
                        <div className="p-6 border-t mt-auto flex justify-end">
                            <Button onClick={onClose} size="lg">Fet</Button>
                        </div>
                    </motion.div>
                </motion.div>
            )}
        </AnimatePresence>
    );
};

// =================== FILE: src/app/[locale]/onboarding/_components/steps/index.ts ===================

export * from './Step1';
export * from './Step2';
export * from './Step3';

// =================== FILE: src/app/[locale]/onboarding/_components/steps/Step1.tsx ===================

"use client";

import { FC, ElementType } from 'react';
import { motion } from 'framer-motion';
import { useOnboarding } from '../OnboardingContext';
import { Input, type InputProps } from '@/components/ui/input';
import { User, Building, FileText } from 'lucide-react';

const InputWithIcon: FC<InputProps & { icon: ElementType }> = ({ icon: Icon, ...props }) => (
    <div className="relative">
        <Icon className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
        <Input className="pl-10" {...props} />
    </div>
);

export const Step1 = () => {
    const { formData, handleInputChange } = useOnboarding();

    return (
        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} className="space-y-6">
            <InputWithIcon icon={User} name="full_name" placeholder="El teu nom i cognoms" value={formData.full_name} onChange={handleInputChange} required />
            <InputWithIcon icon={Building} name="company_name" placeholder="Nom de la teva empresa o marca" value={formData.company_name} onChange={handleInputChange} required />
            <InputWithIcon icon={FileText} name="tax_id" placeholder="NIF/CIF (opcional)" value={formData.tax_id} onChange={handleInputChange} />
        </motion.div>
    );
};

// =================== FILE: src/app/[locale]/onboarding/_components/steps/Step2.tsx ===================

"use client";

import { motion } from 'framer-motion';
import { useOnboarding } from '../OnboardingContext';
import { AddressSearch } from '@/app/[locale]/_components/AddressSearch';
import { useTranslations } from 'next-intl';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';

// ✅ 1. IMPORTEM DE NOU ELS ICONES
import { Home, MapPin, Mailbox, Landmark } from 'lucide-react';

export const Step2 = () => {
    const { formData, handleAddressSelect, handleAddressChange } = useOnboarding();
    const t = useTranslations('OnboardingPage');

    return (
        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} className="space-y-6">
            <AddressSearch onAddressSelect={handleAddressSelect} />
            
            {formData.address && (
                <div className="pt-6 border-t grid grid-cols-1 sm:grid-cols-2 gap-4">
                    
                    {/* Camp del Carrer */}
                    <div className="space-y-2">
                        <Label htmlFor="street">{t('step2.streetLabel')}</Label>
                        {/* ✅ 2. AFEGIM EL CONTENIDOR I L'ICONE */}
                        <div className="relative flex items-center">
                            <Home className="absolute left-3 w-4 h-4 text-muted-foreground" />
                            <Input
                                id="street"
                                value={formData.address.street ?? ''}
                                onChange={(e) => handleAddressChange('street', e.target.value)}
                                placeholder={t('step2.addressPlaceholder')}
                                className="pl-10" // <-- Donem espai a l'esquerra per a l'icone
                            />
                        </div>
                    </div>

                    {/* Camp de la Ciutat */}
                    <div className="space-y-2">
                        <Label htmlFor="city">{t('step2.cityLabel')}</Label>
                        <div className="relative flex items-center">
                            <MapPin className="absolute left-3 w-4 h-4 text-muted-foreground" />
                            <Input
                                id="city"
                                value={formData.address.city ?? ''}
                                onChange={(e) => handleAddressChange('city', e.target.value)}
                                placeholder={t('step2.cityPlaceholder')}
                                className="pl-10"
                            />
                        </div>
                    </div>

                    {/* Camp del Codi Postal */}
                    <div className="space-y-2">
                        <Label htmlFor="postcode">{t('step2.postcodeLabel')}</Label>
                        <div className="relative flex items-center">
                            <Mailbox className="absolute left-3 w-4 h-4 text-muted-foreground" />
                            <Input
                                id="postcode"
                                value={formData.address.postcode ?? ''}
                                onChange={(e) => handleAddressChange('postcode', e.target.value)}
                                placeholder={t('step2.postcodePlaceholder')}
                                className="pl-10"
                            />
                        </div>
                    </div>

                    {/* Camp de la Regió/Província */}
                    <div className="space-y-2">
                        <Label htmlFor="region">{t('step2.regionLabel')}</Label>
                        <div className="relative flex items-center">
                            <Landmark className="absolute left-3 w-4 h-4 text-muted-foreground" />
                            <Input
                                id="region"
                                value={formData.address.region ?? ''}
                                onChange={(e) => handleAddressChange('region', e.target.value)}
                                placeholder={t('step2.regionLabel')}
                                className="pl-10"
                            />
                        </div>
                    </div>
                </div>
            )}
        </motion.div>
    );
};

// =================== FILE: src/app/[locale]/onboarding/_components/steps/Step3.tsx ===================

"use client";

import { useState, FC, ElementType } from 'react';
import { motion } from 'framer-motion';
import { useOnboarding } from '../OnboardingContext';
import { ServiceSelectionModal } from '../ServiceSelectionModal';
import { Input, type InputProps } from '@/components/ui/input';
import { Phone, Globe, Briefcase } from 'lucide-react';

const InputWithIcon: FC<InputProps & { icon: ElementType }> = ({ icon: Icon, ...props }) => (
    <div className="relative">
        <Icon className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
        <Input className="pl-10" {...props} />
    </div>
);

export const Step3 = ({ availableServices }: { availableServices: { id: number; name: string }[] }) => {
    const { formData, handleInputChange, handleToggleService } = useOnboarding();
    const [isServicesModalOpen, setIsServicesModalOpen] = useState(false);

    return (
        <>
            <ServiceSelectionModal
                isOpen={isServicesModalOpen}
                onClose={() => setIsServicesModalOpen(false)}
                availableServices={availableServices}
                selectedServices={formData.services}
                onToggleService={handleToggleService}
            />
            <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} className="space-y-6">
                <InputWithIcon icon={Phone} name="phone" type="tel" placeholder="Telèfon de contacte" value={formData.phone} onChange={handleInputChange} />
                <InputWithIcon icon={Globe} name="website" placeholder="Pàgina web (opcional) Ex: https://digitaistudios.com/ " value={formData.website} onChange={handleInputChange} />
                <div>
                    <label className="text-sm font-medium text-muted-foreground mb-2 block">Serveis principals</label>
                    <button type="button" onClick={() => setIsServicesModalOpen(true)} className="w-full min-h-[40px] flex items-center gap-2 rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background text-left">
                        <Briefcase className="w-5 h-5 text-muted-foreground shrink-0" />
                        {formData.services.length > 0 ? (
                            <div className="flex flex-wrap gap-1">
                                {formData.services.map(service => (
                                    <span key={service} className="bg-muted text-muted-foreground px-2 py-0.5 rounded-md text-xs">{service}</span>
                                ))}
                            </div>
                        ) : (
                            <span className="text-muted-foreground">Fes clic per a seleccionar serveis</span>
                        )}
                    </button>
                    <p className="text-xs text-muted-foreground mt-1">Selecciona les categories que millor et defineixen.</p>
                </div>
            </motion.div>
        </>
    );
};

// =================== FILE: src/app/[locale]/onboarding/_hooks/useOnboardingForm.ts ===================

"use client";

import { useState, useTransition } from 'react';
import { toast } from 'sonner';
import type { DetailedAddress } from '@/types/shared/address';
import { submitOnboardingAction } from '../actions';

const initialFormData = {
    full_name: '',
    company_name: '',
    tax_id: '',
    website: '',
    phone: '',
    services: [] as string[],
    address: null as DetailedAddress | null,
    summary: '',
    sector: '',
};

export function useOnboardingForm(initialFullName: string) {
    const [formData, setFormData] = useState({ ...initialFormData, full_name: initialFullName });
    const [step, setStep] = useState(1);
    const [isPending, startTransition] = useTransition();

    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        setFormData(prev => ({ ...prev, [e.target.name]: e.target.value }));
    };

    const handleAddressSelect = (address: DetailedAddress) => {
        setFormData(prev => ({ ...prev, address }));
    };

    const handleToggleService = (serviceName: string) => {
        setFormData(prev => ({
            ...prev,
            services: prev.services.includes(serviceName)
                ? prev.services.filter(s => s !== serviceName)
                : [...prev.services, serviceName]
        }));
    };

    const validateStep = (currentStep: number): boolean => {
        switch (currentStep) {
            case 1: return !!formData.full_name && !!formData.company_name;
            case 2: return !!formData.address;
            case 3: return formData.services.length > 0;
            default: return true;
        }
    };

    const goToNextStep = () => {
        if (validateStep(step)) setStep(s => Math.min(3, s + 1));
        else toast.error("Si us plau, completa els camps obligatoris.");
    };

    const goToPrevStep = () => setStep(s => Math.max(1, s - 1));

    const handleSubmit = () => {
        // 1. Validació dels passos (això ja ho tenies)
        if (!validateStep(1) || !validateStep(2) || !validateStep(3)) {
            toast.error("Falten camps per completar en alguns dels passos.");
            return;
        }

        // 2. ✅ AFEGIM LA COMPROVACIÓ DE SEGURETAT (LA GUARDA)
        // Aquesta línia és la clau. Si l'adreça és nul·la, mostrem un error i parem l'execució.
        if (!formData.address) {
            toast.error("L'adreça és obligatòria. Si us plau, selecciona'n una.");
            return;
        }

        startTransition(async () => {
            // 3. Ara TypeScript ja sap que 'formData.address' no pot ser 'null' aquí.
            const finalDataForAction = {
                full_name: formData.full_name,
                company_name: formData.company_name,
                tax_id: formData.tax_id,
                website: formData.website,
                summary: formData.summary,
                sector: formData.sector,
                services: formData.services,
                phone: formData.phone,
                street: formData.address!.street, // <-- Ara és segur accedir aquí
                city: formData.address!.city,
                postal_code: formData.address!.postcode,
                region: formData.address!.region,
                country: formData.address!.country,
                latitude: formData.address!.latitude ?? undefined,
                longitude: formData.address!.longitude ?? undefined,
            };

            const result = await submitOnboardingAction(finalDataForAction);

            if (result?.success === false) {
                toast.error(result.message || "Hi ha hagut un error desconegut.");
            }
        });
    };
    // ✅ NOU GESTOR PER A L'EDICIÓ MANUAL DELS CAMPS DE L'ADREÇA
    const handleAddressChange = (field: keyof DetailedAddress, value: string) => {
        setFormData(prev => ({
            ...prev,
            address: {
                // Si l'adreça no existeix, creem un objecte base per evitar errors
                ...(prev.address || { street: '', city: '', postcode: '', region: '', country: '', latitude: null, longitude: null }),
                [field]: value
            }
        }));
    };

    // ✅ Assegura't que l'objecte que retornes inclou TOTES aquestes funcions
    return {
        step,
        formData,
        isPending,
        handleInputChange,
        handleAddressSelect,
        handleAddressChange, // ✅ EXPORTEM LA NOVA FUNCIÓ
        handleToggleService,
        goToNextStep,
        goToPrevStep,
        handleSubmit, // <-- La funció que faltava!
    };
}

// =================== FILE: src/app/[locale]/page.tsx ===================

/**
 * @file src/app/[locale]/page.tsx
 * @summary Aquesta és la pàgina d'inici (Landing Page).
 * No fa cap redirecció. El middleware s'encarrega de tot.
 */
import { LandingClient } from './_components/LandingClient';
import type { Metadata } from 'next';

export const metadata: Metadata = {
  title: 'Ribotflow - El Futur de la Gestió Empresarial',
  description: 'Unifica el teu CRM, vendes i comunicacions.',
};

export default function LandingPage() {
  return <LandingClient />;
}

// =================== FILE: src/app/[locale]/quote/[secureId]/actions.ts ===================

"use server";

import { createAdminClient } from "@/lib/supabase/server";
import { revalidatePath } from "next/cache";
import type { QuoteItem } from '@/types/crm';
import { z } from 'zod';

// Esquema de validació per a l'acceptació
const AcceptQuoteSchema = z.string().uuid("L'identificador del pressupost és invàlid.");

// Esquema de validació per al rebuig
const RejectQuoteSchema = z.object({
    secureId: z.string().uuid("L'identificador del pressupost és invàlid."),
    reason: z.string().min(10, "El motiu del rebuig ha de tenir almenys 10 caràcters.").max(500, "El motiu és massa llarg."),
});

/**
 * Gestiona l'acceptació d'un pressupost, actualitza l'oportunitat associada
 * i crea un esborrany de factura amb tots els seus conceptes.
 */
export async function acceptQuoteAction(secureId: string) {
    const validation = AcceptQuoteSchema.safeParse(secureId);
    if (!validation.success) {
        return { success: false, message: validation.error.issues[0].message };
    }

    const supabaseAdmin = createAdminClient();

    try {
        // PAS 1: Actualitzem el pressupost a 'Accepted' i recuperem totes les seves dades,
        // incloent els conceptes ('items') en una sola consulta.
        const { data: quote, error: quoteError } = await supabaseAdmin
            .from('quotes')
            .update({ status: 'Accepted' })
            .eq('secure_id', secureId)
            .select('*, items:quote_items(*)')
            .single();

        if (quoteError) throw new Error(`Error en actualitzar el pressupost: ${quoteError.message}`);
        if (!quote) throw new Error("No s'ha trobat el pressupost després d'actualitzar.");

        // PAS 2: Actualitzem l'oportunitat associada a 'Guanyat'.
        if (quote.opportunity_id) {
            await supabaseAdmin
                .from('opportunities')
                .update({ stage_name: 'Guanyat' })
                .eq('id', quote.opportunity_id);
        }

        // PAS 3: Creem un nou esborrany de factura amb les dades del pressupost.
        const { data: newInvoice, error: invoiceError } = await supabaseAdmin
            .from('invoices')
            .insert({
                user_id: quote.user_id,
                team_id: quote.team_id,
                contact_id: quote.contact_id,
                quote_id: quote.id,
                status: 'Draft',
                total_amount: quote.total,
                subtotal: quote.subtotal,
                tax_amount: quote.tax,
                discount_amount: quote.discount,
                issue_date: new Date().toISOString().slice(0, 10),
                due_date: new Date(new Date().setDate(new Date().getDate() + 30)).toISOString().slice(0, 10),
            })
            .select('id')
            .single();

        if (invoiceError) throw new Error(`Error en crear la factura: ${invoiceError.message}`);

        // PAS 4: Copiem els conceptes del pressupost a la nova factura.
        if (quote.items && quote.items.length > 0) {
            const newInvoiceItems = quote.items.map((item: QuoteItem) => {
                // Calculem el total de la línia al servidor per a més seguretat.
                const lineTotal = (item.quantity || 0) * (item.unit_price || 0);

                return {
                    invoice_id: newInvoice.id,
                    product_id: item.product_id || null,
                    description: item.description,
                    quantity: item.quantity,
                    unit_price: item.unit_price,
                    tax_rate: item.tax_rate,
                    total: lineTotal,
                    user_id: quote.user_id,
                    team_id: quote.team_id,
                };
            });

            await supabaseAdmin.from('invoice_items').insert(newInvoiceItems).throwOnError();
        }

        // Revalidem les rutes afectades per a que la UI es refresqui.
        revalidatePath('/crm/quotes');
        revalidatePath('/finances/facturacio');
        return { success: true, message: "Pressupost acceptat i esborrany de factura creat correctament." };

    } catch (error: unknown) {
        const message = error instanceof Error ? error.message : "Error desconegut en processar l'acceptació.";
        console.error("[acceptQuoteAction] Error:", message);
        return { success: false, message };
    }
}
/**
 * Gestiona el rebuig d'un pressupost de manera segura al servidor.
 */
export async function rejectQuoteAction(secureId: string, reason: string) {
    const validation = RejectQuoteSchema.safeParse({ secureId, reason });
    if (!validation.success) {
        return { success: false, message: validation.error.issues[0].message };
    }

    const supabaseAdmin = createAdminClient();

    try {
        const { data: quote } = await supabaseAdmin
            .from('quotes')
            .select('id, user_id, team_id, contact_id, opportunity_id')
            .eq('secure_id', secureId)
            .single()
            .throwOnError();

        await supabaseAdmin.from('quotes').update({ status: 'Declined', rejection_reason: reason }).eq('id', quote.id);

        if (quote.opportunity_id) {
            await supabaseAdmin.from('opportunities').update({ stage_name: 'Negociació' }).eq('id', quote.opportunity_id);
        }

        await supabaseAdmin.from('activities').insert({
            user_id: quote.user_id,
            team_id: quote.team_id,
            contact_id: quote.contact_id,
            quote_id: quote.id,
            opportunity_id: quote.opportunity_id,
            type: 'Rebuig de Pressupost',
            content: reason,
            is_read: false
        });

        revalidatePath('/crm/quotes');
        return { success: true, message: "El rebuig s'ha processat correctament." };
    } catch (error: unknown) {
        const message = error instanceof Error ? error.message : "Error desconegut";
        return { success: false, message };
    }
}

// =================== FILE: src/app/[locale]/quote/[secureId]/page.tsx ===================

import { cookies } from 'next/headers';
import { createClient } from '@/lib/supabase/server'; 
import { notFound } from "next/navigation";
import { PublicQuoteClient } from "./_components/PublicQuoteClient";
import type { Quote, Contact, QuoteItem } from "@/types/crm";
import type { Team as CompanyProfile} from "@/types/settings/team"; // ✅ Importem el tipus correcte

// Definim el tipus de dades que la nostra pàgina generarà
export type QuoteDataFromServer = Quote & {
    contacts: Contact | null;
    team: CompanyProfile | null; // ✅ Canviat de 'profiles' a 'team'
    quote_items: QuoteItem[];
    secure_id: string;
};

interface PublicQuotePageProps {
    params: { secureId: string };
}

export default async function PublicQuotePage({ params }: PublicQuotePageProps) {
    const supabase = createClient(cookies());
    const { secureId } = params;

    // ✅ CONSULTA ACTUALITZADA: Fem JOIN amb 'contacts' i 'teams'
    const { data: quoteData, error } = await supabase
        .from("quotes")
        .select(`
            *, 
            contacts (*), 
            team:teams (*), 
            quote_items (*)
        `)
        .eq("secure_id", secureId)
        .single();

    if (error || !quoteData) {
        console.error("Error carregant les dades del pressupost:", error?.message || "Dades no trobades");
        notFound();
    }
    
    return <PublicQuoteClient initialQuoteData={quoteData as QuoteDataFromServer} />;
}

// =================== FILE: src/app/[locale]/quote/[secureId]/_components/PublicQuoteClient.tsx ===================

"use client";

import { usePublicQuote } from "../_hooks/usePublicQuote";
import { RejectionDialog } from "./RejectionDialog";
import { QuoteStatusScreen } from "./QuoteStatusScreeen";
import { PublicQuoteView } from "./PublicQuoteView";
import type { QuoteDataFromServer } from '../page';

export function PublicQuoteClient({ initialQuoteData }: { initialQuoteData: QuoteDataFromServer; }) {
    // Tota la lògica complexa ara prové d'aquest hook.
    const {
        quote,
        isPending,
        finalStatus,
        isRejecting,
        setIsRejecting,
        handleAccept,
        handleReject
    } = usePublicQuote(initialQuoteData);

    // Si el pressupost ja té un estat final (acceptat o rebutjat), mostrem la pantalla corresponent.
    if (finalStatus) {
        return <QuoteStatusScreen status={finalStatus} quote={quote} />;
    }

    // Si no, mostrem la vista principal del pressupost i el diàleg de rebuig (que està ocult per defecte).
    return (
        <>
            <PublicQuoteView
                quoteData={quote}
                onAccept={handleAccept}
                onReject={() => setIsRejecting(true)} // Aquest botó només obre el diàleg
                isPending={isPending}
            />
            <RejectionDialog
                isOpen={isRejecting}
                onOpenChange={setIsRejecting}
                onSubmit={handleReject} // La lògica de rebuig real s'executa aquí
                isPending={isPending}
            />
        </>
    );
}


// =================== FILE: src/app/[locale]/quote/[secureId]/_components/PublicQuoteView.tsx ===================

"use client";

import { Button } from "@/components/ui/button";
import { Loader2, CheckCircle, XCircle } from "lucide-react";
import { QuotePreview } from "@/app/[locale]/(app)/crm/quotes/[id]/_components/QuotePreview";import type { Quote } from "@/types/crm";
import type { QuoteDataFromServer } from '../page';

interface PublicQuoteViewProps {
    quoteData: QuoteDataFromServer;
    onAccept: () => void;
    onReject: () => void;
    isPending: boolean;
}

export function PublicQuoteView({ quoteData, onAccept, onReject, isPending }: PublicQuoteViewProps) {
    const quoteForPreview: Quote = { ...quoteData, items: quoteData.quote_items };

    return (
        <div className="bg-gray-100 min-h-screen p-4 sm:p-8">
            <div className="max-w-4xl mx-auto">
                <div className="text-center mb-6">
                    <h1 className="text-3xl text-black font-bold">Revisió del Pressupost</h1>
                    <p className="text-gray-600">Hola {quoteData.contacts?.nom || "estimat client"}, revisa els detalls i confirma la teva decisió.</p>
                </div>
                <div className="bg-white rounded-lg shadow-lg">
                    <QuotePreview
                        quote={quoteForPreview}
                        contacts={quoteData.contacts ? [quoteData.contacts] : []}
                        companyProfile={quoteData.team}
                        subtotal={quoteData.subtotal}
                        discountAmount={(quoteData.subtotal || 0) * (quoteData.discount || 0) / 100}
                        tax={quoteData.tax}
                        total={quoteData.total}
                    />
                </div>
                <div className="mt-8 p-6 bg-white rounded-lg shadow-lg flex flex-col sm:flex-row justify-around items-center gap-4">
                    <p className="text-lg text-black font-semibold">Estàs d'acord amb aquest pressupost?</p>
                    <div className="flex gap-4">
                        <Button variant="destructive" size="lg" disabled={isPending} onClick={onReject}>
                            <XCircle className="w-5 h-5 mr-2" /> Rebutjar
                        </Button>
                        <Button className="bg-green-600 hover:bg-green-700" size="lg" onClick={onAccept} disabled={isPending}>
                            {isPending ? <Loader2 className="w-5 h-5 mr-2 animate-spin" /> : <CheckCircle className="w-5 h-5 mr-2" />}
                            Acceptar Pressupost
                        </Button>
                    </div>
                </div>
            </div>
        </div>
    );
}


// =================== FILE: src/app/[locale]/quote/[secureId]/_components/QuoteStatusScreeen.tsx ===================

"use client";

import { CheckCircle, XCircle } from "lucide-react";
import type { QuoteDataFromServer } from '../page';

interface QuoteStatusScreenProps {
    status: 'accepted' | 'declined';
    quote: QuoteDataFromServer;
}

export function QuoteStatusScreen({ status, quote }: QuoteStatusScreenProps) {
    if (status === 'accepted') {
        return (
            <div className="flex flex-col h-screen w-full justify-center items-center bg-gray-100 text-center p-4">
                <CheckCircle className="w-24 h-24 text-green-500 mb-4" />
                <h1 className="text-3xl text-black font-bold mb-2">Pressupost Acceptat!</h1>
                <p className="text-lg text-black">Gràcies per la teva confiança, {quote.contacts?.nom}.</p>
                <p className="text-lg text-black">Hem notificat a {quote.team?.name || 'l\'empresa'} i es posaran en contacte amb tu aviat.</p>
            </div>
        );
    }

    return (
        <div className="flex flex-col h-screen w-full justify-center items-center bg-gray-100 text-center p-4">
            <XCircle className="w-24 h-24 text-red-500 mb-4" />
            <h1 className="text-3xl text-black font-bold mb-2">Feedback rebut</h1>
            <p className="text-lg text-black">Gràcies pels teus comentaris.</p>
        </div>
    );
}


// =================== FILE: src/app/[locale]/quote/[secureId]/_components/RejectionDialog.tsx ===================

"use client";

import { useState } from 'react';
import { toast } from 'sonner';

// UI Components
import { Button } from "@/components/ui/button";
import { AlertDialog, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Loader2, Send } from "lucide-react";

interface RejectionDialogProps {
    isOpen: boolean;
    onOpenChange: (open: boolean) => void;
    onSubmit: (reason: string) => void;
    isPending: boolean;
}

export function RejectionDialog({ isOpen, onOpenChange, onSubmit, isPending }: RejectionDialogProps) {
    const [reason, setReason] = useState("");

    const handleSubmit = () => {
        if (reason.trim() === "") {
            toast.error("Motiu requerit", { description: "Si us plau, explica breument per què rebutges el pressupost." });
            return;
        }
        onSubmit(reason);
    };

    return (
        <AlertDialog open={isOpen} onOpenChange={onOpenChange}>
            <AlertDialogContent>
                <AlertDialogHeader>
                    <AlertDialogTitle>Rebutjar el Pressupost</AlertDialogTitle>
                    <AlertDialogDescription>Per ajudar-nos a millorar, si us plau, explica'ns breument els motius de la teva decisió.</AlertDialogDescription>
                </AlertDialogHeader>
                <div className="py-4">
                    <Label htmlFor="rejectionReason" className="text-left">Motius del rebuig</Label>
                    <Textarea id="rejectionReason" placeholder="Ex: El preu és massa alt, falten funcionalitats..." className="mt-2" value={reason} onChange={(e) => setReason(e.target.value)} />
                </div>
                <AlertDialogFooter>
                    <AlertDialogCancel disabled={isPending}>Cancel·lar</AlertDialogCancel>
                    <Button onClick={handleSubmit} disabled={isPending}>
                        {isPending ? <Loader2 className="w-4 h-4 mr-2 animate-spin" /> : <Send className="w-4 h-4 mr-2" />}
                        Enviar i Rebutjar
                    </Button>
                </AlertDialogFooter>
            </AlertDialogContent>
        </AlertDialog>
    );
}


// =================== FILE: src/app/[locale]/quote/[secureId]/_hooks/usePublicQuote.ts ===================

"use client";

import { useState, useTransition } from 'react';
import { toast } from 'sonner';
import { acceptQuoteAction, rejectQuoteAction } from '../actions';
import type { QuoteDataFromServer } from '../page';

/**
 * Hook que encapsula tota la lògica per a la pàgina pública d'un pressupost.
 */
export function usePublicQuote(initialQuote: QuoteDataFromServer) {
    const [quote] = useState(initialQuote);
    const [isPending, startTransition] = useTransition();

    // L'estat final del pressupost (acceptat o rebutjat)
    const [finalStatus, setFinalStatus] = useState<'accepted' | 'declined' | null>(() => {
        if (quote.status === "Accepted") return "accepted";
        if (quote.status === "Declined") return "declined";
        return null;
    });

    // Estat per a controlar la visibilitat del diàleg de rebuig
    const [isRejecting, setIsRejecting] = useState(false);

    const handleAccept = () => {
        startTransition(async () => {
            const result = await acceptQuoteAction(quote.secure_id);
            if (result.success) {
                setFinalStatus("accepted");
            } else {
                toast.error("Error en acceptar", { description: result.message });
            }
        });
    };

    const handleReject = (reason: string) => {
        startTransition(async () => {
            const result = await rejectQuoteAction(quote.secure_id, reason);
            if (result.success) {
                setFinalStatus("declined");
                setIsRejecting(false);
            } else {
                toast.error("Error en rebutjar", { description: result.message });
            }
        });
    };

    return {
        quote,
        isPending,
        finalStatus,
        isRejecting,
        setIsRejecting,
        handleAccept,
        handleReject
    };
}


// =================== FILE: src/app/[locale]/_components/AddressSearch.tsx ===================

"use client";

import React, { useState, useCallback, useEffect } from 'react';
import { useTranslations } from 'next-intl';
import { useDebounce } from 'use-debounce';
import { Input } from '@/components/ui/input';
import { Loader2, MapPin } from 'lucide-react';
import type { DetailedAddress } from '@/types/DetailedAddress';

interface AddressSearchProps {
  onAddressSelect: (address: DetailedAddress) => void;
}

// ✅ 1. DEFINIM UN TIPUS SEGUR PER ALS SUGGERIMENTS DE MAPBOX
interface MapboxSuggestion {
  name: string;
  mapbox_id: string;
  full_address: string;
}

export function AddressSearch({ onAddressSelect }: AddressSearchProps) {
  const t = useTranslations('OnboardingPage.step2');
  const [query, setQuery] = useState('');
  // ✅ 2. APLIQUEM EL NOU TIPUS A L'ESTAT DELS SUGGERIMENTS
  const [suggestions, setSuggestions] = useState<MapboxSuggestion[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [debouncedQuery] = useDebounce(query, 500);

  const fetchSuggestions = useCallback(async (searchTerm: string) => {
    if (searchTerm.length < 3) {
      setSuggestions([]);
      return;
    }
    setIsLoading(true);
    const accessToken = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN;
    const endpoint = `https://api.mapbox.com/search/searchbox/v1/suggest?q=${encodeURIComponent(searchTerm)}&language=ca,es&session_token=08a700a8-1423-4c99-800a-471238634710&access_token=${accessToken}`;
    
    try {
      const response = await fetch(endpoint);
      const data = await response.json();
      setSuggestions(data.suggestions || []);
    } catch (error) {
      console.error('Error fetching Mapbox suggestions:', error);
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchSuggestions(debouncedQuery);
  }, [debouncedQuery, fetchSuggestions]);

  // ✅ 3. APLIQUEM EL NOU TIPUS AL PARÀMETRE DE LA FUNCIÓ
  const handleSelectSuggestion = async (suggestion: MapboxSuggestion) => {
    setIsLoading(true);
    setQuery(''); 
    setSuggestions([]);

    const accessToken = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN;
    const endpoint = `https://api.mapbox.com/search/searchbox/v1/retrieve/${suggestion.mapbox_id}?session_token=08a700a8-1423-4c99-800a-471238634710&access_token=${accessToken}`;
    
    try {
        const response = await fetch(endpoint);
        const data = await response.json();
        const feature = data.features[0];
        if (!feature) return;

        const context = feature.properties.context;
        
        onAddressSelect({
            street: feature.properties.address || '',
            city: context?.place?.name || '',
            postcode: context?.postcode?.name || '',
            region: context?.region?.name || '',
            country: context?.country?.name || '',
            latitude: feature.geometry.coordinates[1],
            longitude: feature.geometry.coordinates[0],
        });
    } catch (error) {
        console.error('Error retrieving Mapbox address:', error);
    } finally {
        setIsLoading(false);
    }
  };

  return (
    <div className="relative">
      <div className="relative">
        <MapPin className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
        <Input
          placeholder={t('addressPlaceholder')}
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          className="pl-10"
        />
        {isLoading && <Loader2 className="absolute right-3 top-1/2 -translate-y-1/2 w-5 h-5 animate-spin" />}
      </div>

      {suggestions.length > 0 && (
        <ul className="absolute z-10 w-full mt-2 bg-card border rounded-md shadow-lg max-h-60 overflow-y-auto">
          {suggestions.map((s) => (
            <li 
              key={s.mapbox_id}
              onClick={() => handleSelectSuggestion(s)}
              className="px-4 py-2 hover:bg-muted cursor-pointer"
            >
              <p className="font-semibold">{s.name}</p>
              <p className="text-sm text-muted-foreground">{s.full_address}</p>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}

// =================== FILE: src/app/[locale]/_components/CountdownView.tsx ===================

"use client";

import { useEffect, useState, useRef } from 'react';
import { useTranslations } from 'next-intl';
import Image from 'next/image';
import Link from 'next/link';
import dynamic from 'next/dynamic';

// Importem els nous components de la UI
import { ThemeSwitcher } from '@/components/ThemeSwitcher';
import { LanguageSwitcher } from '@/components/LanguageSwitcher';
import { Button } from '@/components/ui/button';

// Carreguem el fons de partícules de manera dinàmica per a un millor rendiment.
const ParticleBackground = dynamic(
  () => import('./ParticleBackground').then(mod => mod.ParticleBackground),
  { ssr: false }
);

// Sub-components interns per a una millor organització del codi.
const CountdownBlock = ({ value, label }: { value: string; label: string }) => (
  <div className="min-w-[80px] md:min-w-[120px] text-center">
    <span className="text-[clamp(3rem,8vw,5rem)] font-bold leading-none block">{value}</span>
    <span className="text-xs md:text-sm font-light text-gray-400 tracking-widest uppercase">{label}</span>
  </div>
);
const FeatureBlock = ({ title, color, dataTitle, children }: { title: string; color: string; dataTitle: string; children: React.ReactNode }) => (
  <div className="feature-block py-16 mb-32 opacity-20 transition-opacity duration-500" data-title={dataTitle}>
    <h3 className={`text-3xl font-medium mb-4 ${color}`}>{title}</h3>
    {/* ✅ CORRECCIÓ: Canviem 'text-gray-300' per 'text-muted-foreground' */}
    <p className="text-xl leading-relaxed text-muted-foreground max-w-prose">
      {children}
    </p>
  </div>
);

/**
 * @summary El component principal i interactiu de la Landing Page.
 */
export function CountdownView() {
  const t = useTranslations('LandingPage');
  const [timeLeft, setTimeLeft] = useState({ days: '00', hours: '00', minutes: '00', seconds: '00' });
  const [isClient, setIsClient] = useState(false);
  const featureContentRef = useRef<HTMLDivElement>(null);
  const stickyTitleRef = useRef<HTMLHeadingElement>(null);

  useEffect(() => { setIsClient(true); }, []);

  // Lògica del compte enrere (sense canvis).
  useEffect(() => {
    if (!isClient) return;
    const countDownDate = new Date("Oct 1, 2025 00:00:00").getTime();
    const interval = setInterval(() => {
      const now = new Date().getTime();
      const distance = countDownDate - now;
      if (distance < 0) {
        clearInterval(interval);
        setTimeLeft({ days: '00', hours: '00', minutes: '00', seconds: '00' });
        return;
      }
      setTimeLeft({
        days: String(Math.floor(distance / (1000 * 60 * 60 * 24))).padStart(2, '0'),
        hours: String(Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))).padStart(2, '0'),
        minutes: String(Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60))).padStart(2, '0'),
        seconds: String(Math.floor((distance % (1000 * 60)) / 1000)).padStart(2, '0'),
      });
    }, 1000);
    return () => clearInterval(interval);
  }, [isClient]);

  // ✅ CORRECCIÓ: Efecte per a l'animació de l'scroll.
  useEffect(() => {
    if (!isClient || !featureContentRef.current || !stickyTitleRef.current) return;

    const featureBlocks = Array.from(featureContentRef.current.querySelectorAll<HTMLDivElement>('.feature-block'));
    const stickyTitle = stickyTitleRef.current;

    const updateActiveFeature = (target: Element) => {
      const title = target.getAttribute('data-title');
      if (title) stickyTitle.innerHTML = title;
      featureBlocks.forEach(b => b.classList.remove('opacity-100'));
      target.classList.add('opacity-100');
    };

    const observer = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          updateActiveFeature(entry.target);
        }
      });
    }, { rootMargin: '-50% 0px -50% 0px', threshold: 0 });

    featureBlocks.forEach(block => observer.observe(block));

    // Activem el primer bloc manualment a la càrrega inicial per solucionar l'error.
    if (featureBlocks.length > 0) {
      updateActiveFeature(featureBlocks[0]);
    }

    return () => featureBlocks.forEach(block => observer.unobserve(block));
  }, [isClient]);

  return (
    <div className="relative z-10 bg-background text-foreground">
      {/* El fons de partícules es renderitza només al client i per sota de tot. */}
      {isClient && <ParticleBackground />}

      <div className="relative z-10">
        {/* ✅ NOU: Barra de navegació superior amb nou disseny */}

        <nav className="fixed top-0 left-0 right-0 z-50 p-4 flex justify-between items-center bg-background/50 backdrop-blur-md border-b border-white/10">
          <Link href="/" className="flex items-center gap-2">
            <Image src="/android-chrome-192x192.png" alt="Logo de Ribotflow" width={32} height={32} />
            <span className="font-bold text-lg hidden sm:block">Ribotflow</span>
          </Link>
          <div className="flex items-center gap-2">
            <LanguageSwitcher />
            <ThemeSwitcher />
            <Button asChild className="bg-gradient-to-r from-green-400 to-cyan-400 text-black font-bold hover:opacity-90 transition-opacity">
              <Link href="/login">Accedir</Link>
            </Button>
          </div>
        </nav>

        <header className="flex flex-col justify-center items-center h-screen text-center p-4">
          <h1 className="text-[clamp(3.5rem,10vw,7rem)] font-black tracking-tighter leading-none mb-6 bg-gradient-to-r from-green-400 via-cyan-400 to-pink-500 bg-clip-text text-transparent animate-gradient-shift">
            {t('mainTitle')}
          </h1>
          <p className="text-[clamp(1.1rem,2.5vw,1.5rem)] font-light text-muted-foreground max-w-3xl leading-relaxed mb-14">
            {t('subtitle')}
          </p>
          <div className="flex gap-4 md:gap-8">
            <CountdownBlock value={timeLeft.days} label={t('days')} />
            <CountdownBlock value={timeLeft.hours} label={t('hours')} />
            <CountdownBlock value={timeLeft.minutes} label={t('minutes')} />
            <CountdownBlock value={timeLeft.seconds} label={t('seconds')} />
          </div>
        </header>

        {/* Títol d'introducció a les funcionalitats */}
        <h2 className="text-[clamp(2rem,4vw,3rem)] text-center my-32 font-extrabold bg-gradient-to-r from-green-400 via-cyan-400 to-pink-500 bg-clip-text text-transparent animate-gradient-slow">
          {t('featuresIntro')}
        </h2>

        {/* Secció de les funcionalitats amb efecte d'scroll */}
        <section className="grid grid-cols-1 md:grid-cols-[1fr_1.5fr] gap-8 max-w-6xl mx-auto px-8">
          <div className="sticky top-0 h-screen hidden md:flex items-center">
            <h2 ref={stickyTitleRef} className="text-[clamp(2rem,5vw,3.5rem)] font-bold leading-tight transition-opacity duration-500"></h2>
          </div>
          <div ref={featureContentRef}>
            <FeatureBlock title={t('feature1Title')} color="text-green-400" dataTitle={t('feature1DataTitle')}>{t('feature1Text')}</FeatureBlock>
            <FeatureBlock title={t('feature2Title')} color="text-cyan-400" dataTitle={t('feature2DataTitle')}>{t('feature2Text')}</FeatureBlock>
            <FeatureBlock title={t('feature3Title')} color="text-pink-400" dataTitle={t('feature3DataTitle')}>{t('feature3Text')}</FeatureBlock>
            <FeatureBlock title={t('feature4Title')} color="text-green-400" dataTitle={t('feature4DataTitle')}>{t('feature4Text')}</FeatureBlock>
            <FeatureBlock title={t('feature5Title')} color="text-cyan-400" dataTitle={t('feature5DataTitle')}>{t('feature5Text')}</FeatureBlock>
            <FeatureBlock title={t('feature6Title')} color="text-pink-400" dataTitle={t('feature6DataTitle')}>{t('feature6Text')}</FeatureBlock>
          </div>
        </section>

        {/* Peu de pàgina */}
        <footer className="text-center py-16 text-gray-500">
          {/* ✅ NOU: Afegim el selector de tema al peu de pàgina */}
          <div className="mb-8 flex justify-center">
            <ThemeSwitcher />
          </div>
          <p>&copy; {new Date().getFullYear()} Ribotflow. {t('developedBy')} <Link href="..." className="...">DigitAI Studios</Link>.</p>
        </footer>
      </div>
    </div>
  );
}

// =================== FILE: src/app/[locale]/_components/FeaturesPanel.tsx ===================

"use client";

import { Briefcase, Landmark, Headphones, Users, Workflow, ArrowRight} from 'lucide-react';
import { useTranslations } from 'next-intl';
import { motion } from 'framer-motion';
import type { ElementType } from 'react'; // ✅ Importem ElementType des de React

// Sub-component per a cada element del panell
const FeatureItem = ({ icon: Icon, title, description, href, colorClass }: { 
  icon: ElementType, 
  title: string, 
  description: string, 
  href: string,
  colorClass: string
}) => (
  <motion.a 
    href={href}
    whileHover={{ scale: 1.02 }} // Una animació més subtil
    className="flex items-center gap-5 group p-4 hover:bg-muted/50 rounded-lg transition-colors"
  >
    {/* ✅ MILLORA: Fons més sòlid per a la icona que s'adapta al tema */ }
    <div className="p-3 bg-background/50 dark:bg-muted rounded-lg mt-1 group-hover:bg-primary/10 transition-colors ring-1 ring-border">
      {/* ✅ MILLORA: Icona més gran */}
      <Icon className={`w-6 h-6 transition-colors ${colorClass}`} />
    </div>
    <div className="flex-1">
      {/* ✅ MILLORA: Text més gran */}
      <h3 className="font-bold text-lg group-hover:text-foreground transition-colors">{title}</h3>
      <p className="text-base text-muted-foreground">{description}</p>
    </div>
    <ArrowRight className="w-5 h-5 text-muted-foreground opacity-0 group-hover:opacity-100 transition-opacity" />
  </motion.a>
);

/**
 * @summary Component que renderitza el panell lateral amb les funcionalitats destacades.
 */
export function FeaturesPanel() {
  const t = useTranslations('MainLandingView.featuresPanel');
  
  const features = [
    { icon: Briefcase, title: t('crm.title'), description: t('crm.desc'), href: "#crm", colorClass: 'text-brand-green' },
    { icon: Landmark, title: t('finances.title'), description: t('finances.desc'), href: "#finances", colorClass: 'text-brand-cyan' },
    { icon: Headphones, title: t('comunicacio.title'), description: t('comunicacio.desc'), href: "#comunicacio", colorClass: 'text-brand-pink' },
    { icon: Users, title: t('network.title'), description: t('network.desc'), href: "#network", colorClass: 'text-brand-green' },
    { icon: Workflow, title: t('projectStrocture.title'), description: t('projectStrocture.desc'), href: "#projectes", colorClass: 'text-brand-cyan' },
  ];

  return (
    <motion.div 
      initial={{ opacity: 0, x: 50 }}
      animate={{ opacity: 1, x: 0 }}
      transition={{ duration: 0.5, delay: 0.2, ease: 'easeOut' }}
      className="glass-card p-6 rounded-2xl space-y-2"
    >
      <h2 className="text-sm font-semibold uppercase tracking-wider text-muted-foreground px-4 mb-2">{t('title')}</h2>
      {features.map((feature, index) => (
        <motion.div
          key={feature.title}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.4 + index * 0.1 }}
        >
          <FeatureItem {...feature} />
        </motion.div>
      ))}
    </motion.div>
  );
}

// =================== FILE: src/app/[locale]/_components/LandingClient.tsx ===================

"use client";

import { useEffect, useState } from 'react';

// Importem les dues vistes que podem mostrar
import { CountdownView } from './CountdownView'; // Aquest serà el teu component de compte enrere
import { MainLandingView } from './MainLandingView'; // Aquest és el nou component professional

// Definim la data de llançament
const LAUNCH_DATE = new Date("Jan 1, 2024 00:00:00");

export function LandingClient() {
  const [isLaunchTime, setIsLaunchTime] = useState(false);
  
  // Aquest efecte comprova la data només al client
  useEffect(() => {
    if (new Date() > LAUNCH_DATE) {
      setIsLaunchTime(true);
    }
  }, []);

  // Renderitzem una vista o l'altra segons si ha arribat la data de llançament
  if (isLaunchTime) {
    return <MainLandingView />;
  } else {
    // Has de moure el teu codi antic del compte enrere a un nou component 'CountdownView.tsx'
    return <CountdownView />;
  }
}

// =================== FILE: src/app/[locale]/_components/LandingNav.tsx ===================

"use client";

import Link from 'next/link';
import Image from 'next/image';
import { Button } from '@/components/ui/button';
import { LanguageSwitcher } from '@/components/LanguageSwitcher';
import { ThemeSwitcher } from '@/components/ThemeSwitcher';
import { useTranslations } from 'next-intl';
import { motion } from 'framer-motion';

export function LandingNav() {
  const t = useTranslations('LandingNav');

  return (
    <motion.nav 
      initial={{ y: -100 }}
      animate={{ y: 0 }}
      transition={{ duration: 0.5, ease: 'easeOut' }}
      className="fixed top-0 left-0 right-0 z-50 p-4 flex justify-between items-center bg-background/50 backdrop-blur-lg border-b border-white/10"
    >
      <Link href="/" className="flex items-center gap-2">
        <Image src="/android-chrome-192x192.png" alt="Logo de Ribotflow" width={32} height={32} />
        <span className="font-bold text-lg hidden sm:block text-foreground">Ribotflow</span>
      </Link>
      <div className="flex items-center gap-2">
        <LanguageSwitcher />
        <ThemeSwitcher />
        <Button asChild variant="ghost">
          <Link href="/login">{t('login')}</Link>
        </Button>
        <Button asChild className="hidden sm:inline-flex bg-gradient-to-r from-green-400 to-cyan-400 text-black font-bold hover:scale-105 transition-transform">
          <Link href="/signup">{t('signup')}</Link>
        </Button>
      </div>
    </motion.nav>
  );
}

// =================== FILE: src/app/[locale]/_components/MainLandingView.tsx ===================

"use client";

import { LandingNav } from './LandingNav';
import { FeaturesPanel } from './FeaturesPanel';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import { useTranslations } from 'next-intl';
import { motion } from 'framer-motion';

export function MainLandingView() {
    const t = useTranslations('MainLandingView');

    return (
        <div className="bg-background text-foreground min-h-screen overflow-x-hidden">
            <LandingNav />
            
            <main className="container mx-auto px-4 pt-40 pb-20">
                <div className="grid lg:grid-cols-2 gap-20 items-center">
                    {/* Columna Esquerra: Text i CTA */}
                    <motion.div
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.6, ease: 'easeOut' }}
                    >
                        <h1 className="text-4xl md:text-6xl font-black tracking-tighter !leading-[1.1] mb-6">
                            {t('title')}
                        </h1>
                        <p className="text-lg md:text-xl text-muted-foreground max-w-xl mb-10">
                            {t('subtitle')}
                        </p>
                        <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                            <Button asChild size="lg" className="bg-gradient-to-r from-green-400 to-cyan-400 text-black font-bold text-lg py-7 px-10 hover:opacity-90 transition-opacity rounded-full">
                                <Link href="/signup">{t('ctaButton')}</Link>
                            </Button>
                        </motion.div>
                    </motion.div>
                    
                    {/* Columna Dreta: Panell de Funcions */}
                    <div className="hidden lg:block">
                        <FeaturesPanel />
                    </div>
                </div>
            </main>
        </div>
    );
}

// =================== FILE: src/app/[locale]/_components/ParticleBackground.tsx ===================

"use client";

import { useEffect, useRef } from 'react';

export function ParticleBackground() {
  const canvasRef = useRef<HTMLCanvasElement>(null);

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    let animationFrameId: number;
    let particlesArray: Particle[] = [];

    class Particle {
      x: number;
      y: number;
      directionX: number;
      directionY: number;
      size: number;
      color: string;

      constructor(x: number, y: number, dX: number, dY: number, size: number, color: string) {
        this.x = x;
        this.y = y;
        this.directionX = dX;
        this.directionY = dY;
        this.size = size;
        this.color = color;
      }

      draw(context: CanvasRenderingContext2D) {
        context.beginPath();
        context.arc(this.x, this.y, this.size, 0, Math.PI * 2, false);
        context.fillStyle = '#1a1a1a';
        context.fill();
      }

      update(canvasEl: HTMLCanvasElement, context: CanvasRenderingContext2D) {
        if (this.x > canvasEl.width || this.x < 0) this.directionX = -this.directionX;
        if (this.y > canvasEl.height || this.y < 0) this.directionY = -this.directionY;
        this.x += this.directionX;
        this.y += this.directionY;
        this.draw(context);
      }
    }

    const init = (canvasEl: HTMLCanvasElement) => {
      particlesArray = [];
      const numberOfParticles = (canvasEl.height * canvasEl.width) / 9000;
      for (let i = 0; i < numberOfParticles * 0.5; i++) {
        const size = (Math.random() * 2) + 1;
        const x = Math.random() * (canvasEl.width - size * 2) + size * 2;
        const y = Math.random() * (canvasEl.height - size * 2) + size * 2;
        const dX = (Math.random() * 0.4) - 0.2;
        const dY = (Math.random() * 0.4) - 0.2;
        particlesArray.push(new Particle(x, y, dX, dY, size, '#1a1a1a'));
      }
    };

    const connect = (canvasEl: HTMLCanvasElement, context: CanvasRenderingContext2D) => {
      for (let a = 0; a < particlesArray.length; a++) {
        for (let b = a; b < particlesArray.length; b++) {
          const distance = ((particlesArray[a].x - particlesArray[b].x) ** 2) + ((particlesArray[a].y - particlesArray[b].y) ** 2);
          if (distance < (canvasEl.width / 8) * (canvasEl.height / 8)) {
            const opacityValue = 1 - (distance / 20000);
            context.strokeStyle = `rgba(102, 102, 102, ${opacityValue})`;
            context.lineWidth = 1;
            context.beginPath();
            context.moveTo(particlesArray[a].x, particlesArray[a].y);
            context.lineTo(particlesArray[b].x, particlesArray[b].y);
            context.stroke();
          }
        }
      }
    };

    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      particlesArray.forEach(p => p.update(canvas, ctx));
      connect(canvas, ctx);
      animationFrameId = requestAnimationFrame(animate);
    };

    const resizeCanvas = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      init(canvas);
    };

    window.addEventListener('resize', resizeCanvas);
    resizeCanvas();
    animate();

    return () => {
      window.removeEventListener('resize', resizeCanvas);
      cancelAnimationFrame(animationFrameId);
    };
  }, []);

  return <canvas ref={canvasRef} className="fixed top-0 left-0 w-full h-full z-0 opacity-25" />;
}


// =================== FILE: src/components/chatbot/Chatbot.tsx ===================

"use client";

import { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Bot, Send, User, Loader2, X } from 'lucide-react';
import { useNavigationStore } from '@/stores/navigationStore';

export function Chatbot() {
    const [messages, setMessages] = useState<{ id: string; role: 'user' | 'assistant'; content: string }[]>([]);
    const [input, setInput] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const chatContainerRef = useRef<HTMLDivElement>(null);
    const { toggleChatbot } = useNavigationStore();

    useEffect(() => {
        if (chatContainerRef.current) {
            chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
        }
    }, [messages]);

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        if (!input.trim()) return;

        const userMessage = { id: crypto.randomUUID(), role: 'user' as const, content: input };
        setMessages(prev => [
            ...prev,
            userMessage,
            { id: crypto.randomUUID(), role: 'assistant', content: '' }
        ]);
        setIsLoading(true);
        const question = input;
        setInput('');

        try {
            const response = await fetch('/api/chatbot', {
                method: 'POST',
                body: JSON.stringify({ question }),
            });

            if (!response.ok || !response.body) throw new Error("Error en la resposta del servidor.");

            const reader = response.body.getReader();
            const decoder = new TextDecoder();

            while (true) {
                const { done, value } = await reader.read();
                if (done) break;

                const chunk = decoder.decode(value);
                setMessages(prev => {
                    const newMessages = [...prev];
                    newMessages[newMessages.length - 1].content += chunk;
                    return newMessages;
                });
            }
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        } catch (error) {
            setMessages(prev => {
                const newMessages = [...prev];
                newMessages[newMessages.length - 1].content = "Hi ha hagut un error. Si us plau, intenta-ho de nou.";
                return newMessages;
            });
        } finally {
            setIsLoading(false);
        }
    };

    function handleInputChange(event: React.ChangeEvent<HTMLInputElement>): void {
        setInput(event.target.value);
    }

    return (
        <div className="fixed bottom-4 right-4 w-96 h-[600px] bg-card border rounded-lg shadow-lg flex flex-col">
            <div className="p-4 border-b flex items-center justify-between">
                <div className="flex items-center gap-3">
                    <Bot className="w-6 h-6 text-primary" />
                    <h2 className="font-semibold">Assistent d'IA</h2>
                </div>
                <Button variant="ghost" size="icon" onClick={toggleChatbot} className="h-8 w-8">
                    <X className="w-4 h-4" />
                </Button>
            </div>
            <div ref={chatContainerRef} className="flex-1 p-4 overflow-y-auto space-y-4">
                {messages.map((msg) => (
                    <div key={msg.id} className={`flex gap-3 ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                        {msg.role === 'assistant' && <Bot className="w-6 h-6 flex-shrink-0" />}
                        <div className={`p-3 rounded-lg max-w-xs whitespace-pre-wrap ${msg.role === 'user' ? 'bg-primary text-primary-foreground' : 'bg-muted'}`}>
                            {msg.content}
                        </div>
                        {msg.role === 'user' && <User className="w-6 h-6 flex-shrink-0" />}
                    </div>
                ))}
                {isLoading && (
                    <div className="flex justify-start gap-3">
                        <Bot className="w-6 h-6 flex-shrink-0" />
                        <div className="p-3 rounded-lg bg-muted flex items-center justify-center">
                            <Loader2 className="w-5 h-5 animate-spin" />
                        </div>
                    </div>
                )}
            </div>
            <form onSubmit={handleSubmit} className="p-4 border-t flex gap-2">
                <Input
                    value={input}
                    onChange={handleInputChange}
                    placeholder="Fes una pregunta..."
                    disabled={isLoading}
                />
                <Button type="submit" disabled={isLoading || !input.trim()}>
                    <Send className="w-4 h-4" />
                </Button>
            </form>
        </div>
    );
}

// =================== FILE: src/components/features/contactes/ContactSelector.tsx ===================

import { FC, useState } from 'react';
import { useTranslations } from 'next-intl';
import { Button } from '@/components/ui/button';
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from "@/components/ui/command";
import { Check, ChevronsUpDown } from 'lucide-react';
import { cn } from "@/lib/utils/utils";
import type { Contact } from '../page';

interface Props {
    contacts: Contact[];
    selectedId: string;
    onSelect: (contactId: string) => void;
}

export const ContactSelector: FC<Props> = ({ contacts, selectedId, onSelect }) => {
    const t = useTranslations('OpportunityDialog');
    const [open, setOpen] = useState(false);

    const selectedContact = contacts.find(c => c.id === selectedId);

    return (
        <Popover open={open} onOpenChange={setOpen}>
            <PopoverTrigger asChild>
                <Button variant="outline" role="combobox" className="w-full justify-between">
                    {selectedContact ? selectedContact.nom : t('selectContactPlaceholder')}
                    <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                </Button>
            </PopoverTrigger>
            <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
                <Command>
                    <CommandInput placeholder={t('searchContactPlaceholder')} />
                    <CommandList>
                        <CommandEmpty>{t('noContactFound')}</CommandEmpty>
                        <CommandGroup>
                            {contacts.map(contact => (
                                <CommandItem key={contact.id} value={contact.nom} onSelect={() => {
                                    onSelect(contact.id);
                                    setOpen(false);
                                }}>
                                    <Check className={cn("mr-2 h-4 w-4", selectedId === contact.id ? "opacity-100" : "opacity-0")} />
                                    {contact.nom}
                                </CommandItem>
                            ))}
                        </CommandGroup>
                    </CommandList>
                </Command>
            </PopoverContent>
        </Popover>
    );
};

// =================== FILE: src/components/LanguageSwitcher.tsx ===================

"use client";

import { useLocale, useTranslations } from 'next-intl';
import { usePathname, useRouter } from 'next/navigation';
import { useTransition } from 'react';
import { Button } from '@/components/ui/button';

import { cn } from '@/lib/utils/utils'; // Importem 'cn' per combinar classes

export function LanguageSwitcher() {
  const t = useTranslations('LanguageSwitcher');
  const [isPending, startTransition] = useTransition();
  const locale = useLocale();
  const router = useRouter();
  const pathname = usePathname();
  
  const handleLanguageChange = (nextLocale: string) => {
    if (locale === nextLocale || isPending) return;
    
    startTransition(() => {
      const newPath = pathname.replace(`/${locale}`, `/${nextLocale}`);
      router.replace(newPath);
    });
  };

  const languages = [
    { code: 'ca', label: t('catalan') },
    { code: 'es', label: t('spanish') },
    { code: 'en', label: t('english') },
  ];

  return (
    // ✅ NOU: Agrupem els botons i els donem un fons i vores per a un millor disseny
    <div className="flex space-x-1 p-1 bg-muted rounded-lg">
      {languages.map((lang) => (
        <Button 
          key={lang.code}
          // ✅ CORRECCIÓ: Eliminem 'variant' i gestionem l'estil amb 'className'
          onClick={() => handleLanguageChange(lang.code)} 
          disabled={isPending}
          // ✅ La clau és aquí: utilitzem 'cn' per aplicar les classes condicionalment
          className={cn(
            "text-xs px-2 py-1 h-auto transition-all duration-300",
            locale === lang.code 
              ? 'bg-gradient-to-r from-green-400 to-cyan-400 text-black font-semibold shadow-md' // Estil actiu (com el botó Accedir)
              : 'bg-transparent text-muted-foreground hover:bg-background/50' // Estil inactiu
          )}
        >
          {/* Mostrem el loader només al botó que s'està activant */}
          {isPending && locale !== lang.code }
          {lang.label}
        </Button>
      ))}
    </div>
  );
}

// =================== FILE: src/components/shared/AccessDenied.tsx ===================

// src/components/shared/AccessDenied.tsx

import { ShieldAlert } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import Link from 'next/link';

export function AccessDenied() {
  return (
    <div className="flex items-center justify-center h-full min-h-[calc(100vh-200px)]">
      <Card className="w-full max-w-md text-center">
        <CardHeader>
          <div className="mx-auto bg-destructive/10 p-4 rounded-full w-fit">
            <ShieldAlert className="h-12 w-12 text-destructive" />
          </div>
          <CardTitle className="mt-4 text-2xl">Accés Denegat</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground">
            Sembla que no tens els permisos necessaris per a veure aquesta pàgina. 
            Si creus que és un error, contacta amb l'administrador del teu equip.
          </p>
        </CardContent>
        <CardFooter className="flex justify-center">
          <Button asChild>
            <Link href="/dashboard">Torna al Dashboard</Link>
          </Button>
        </CardFooter>
      </Card>
    </div>
  );
}

// =================== FILE: src/components/shared/ActivityItem.tsx ===================

/**
 * @file ActivityItem.tsx
 * @summary Component presentacional per a un únic ítem al feed d'activitats.
 */
"use client";

import Link from 'next/link';
import { FC, ElementType } from 'react';

interface ActivityItemProps {
  icon: ElementType;
  tone: { bg: string; text: string };
  title: string;
  meta: string;
  href: string;
}

export const ActivityItem: FC<ActivityItemProps> = ({ icon: Icon, tone, title, meta, href }) => (
  <Link href={href} className="block">
    <div className="flex items-start gap-3">
      <div className={`mt-0.5 rounded-full p-2 ${tone.bg} ${tone.text}`}>
        <Icon className="w-4 h-4" />
      </div>
      <div className="flex-1">
        <p className="text-sm">{title}</p>
        <p className="text-xs text-muted-foreground">{meta}</p>
      </div>
    </div>
  </Link>
);

// =================== FILE: src/components/shared/EmptyState.tsx ===================

import { FC } from 'react';

export const EmptyState: FC<{ message: string }> = ({ message }) => (
    <p className="text-center text-muted-foreground py-8">{message}</p>
);

// =================== FILE: src/components/shared/StatCard.tsx ===================

"use client";
import Link from 'next/link';
import { FC, ElementType } from 'react';
import { ArrowRight } from 'lucide-react';

interface StatCardProps {
  href: string;
  icon: ElementType;
  title: string;
  value: string;
  color: string;
  openText: string;
}

export const StatCard: FC<StatCardProps> = ({ href, icon: Icon, title, value, color, openText }) => (
  <Link href={href} className="group block">
    {/* ✅ CORRECCIÓN: Eliminamos 'text-white'. El color de fondo ya define
        que el texto debe ser 'primary-foreground' (blanco) según tus variables CSS. */}
    <div className={`rounded-2xl p-5 shadow-xl transition-all ring-1 ring-black/10 dark:ring-white/10 hover:-translate-y-0.5 hover:shadow-2xl ${color}`}>
      <div className="flex items-start justify-between">
        <div className="text-sm/5 opacity-90">{title}</div>
        <Icon className="w-6 h-6 opacity-90" />
      </div>
      <div className="mt-2 text-3xl font-extrabold tracking-tight">{value}</div>
      <div className="mt-2 inline-flex items-center text-xs opacity-85 group-hover:opacity-100">
        {openText} <ArrowRight className="w-3.5 h-3.5 ml-1" />
      </div>
    </div>
  </Link>
);

// =================== FILE: src/components/shared/StatusBadge.tsx ===================

/**
 * @file StatusBadge.tsx
 * @summary Muestra una etiqueta de estado coloreada y traducida. Reutilizable para presupuestos, oportunidades, etc.
 */
"use client";

import { FC } from 'react';
import { useTranslations } from 'next-intl';

export const StatusBadge: FC<{ status?: string | null }> = ({ status }) => {
    const t = useTranslations('ContactDetailPage.status');
    
    // 1. Establecemos valores por defecto para el texto y el color.
    let colorClass = 'bg-muted text-muted-foreground';
    let text = status || t('notAvailable');

    // 2. Usamos el 'switch' para asignar el texto traducido y el color a la vez,
    //    basándonos en el valor que viene de la base de datos.
    switch (status?.toLowerCase()) {
        case 'draft':
            text = t('draft');
            colorClass = 'bg-yellow-500/10 text-yellow-500';
            break;
        case 'sent':
            text = t('sent');
            colorClass = 'bg-blue-500/10 text-blue-500';
            break;
        case 'accepted':
        case 'guanyat': // Mantenemos alias si vienen de la BD
        case 'paid':
            text = t('wonPaid');
            colorClass = 'bg-green-500/10 text-green-500';
            break;
        case 'declined':
        case 'perdut':
            text = t('rejected');
            colorClass = 'bg-red-500/10 text-red-500';
            break;
        case 'negociació':
            text = t('negotiation');
            colorClass = 'bg-purple-500/10 text-purple-500';
            break;
        case 'overdue':
            text = t('overdue');
            colorClass = 'bg-orange-500/10 text-orange-500';
            break;
    }

    // 3. Renderizamos el resultado final.
    return <span className={`px-2.5 py-1 text-xs font-bold rounded-full ${colorClass}`}>{text}</span>;
};

// =================== FILE: src/components/theme-provider.tsx ===================

/**
 * @file theme-provider.tsx
 * @summary Aquest fitxer defineix un component embolcall (wrapper) per al proveïdor de temes de 'next-themes'.
 * La seva funció és configurar i proporcionar el context del tema (clar/fosc) a tota l'aplicació.
 * Crear aquest component separat és una bona pràctica recomanada per 'next-themes' per assegurar
 * que només el proveïdor sigui un component de client, permetent que la resta del layout pugui ser un component de servidor.
 */

"use client";

import * as React from "react";
import { ThemeProvider as NextThemesProvider } from "next-themes";

// En lloc de definir els tipus de les propietats manualment, els inferim directament del component
// 'NextThemesProvider'. Això és una pràctica robusta que assegura que els nostres tipus
// sempre estaran sincronitzats amb els de la llibreria.
type ThemeProviderProps = React.ComponentProps<typeof NextThemesProvider>;

/**
 * @function ThemeProvider
 * @summary El component que embolcalla l'aplicació per proporcionar el context del tema.
 * @param {React.ReactNode} children - Els components fills que tindran accés al context del tema.
 * @param {ThemeProviderProps} props - La resta de propietats que es passaran al proveïdor de 'next-themes'.
 */
export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}


// =================== FILE: src/components/ThemeSwitcher.tsx ===================

"use client";

import { useState, useEffect } from "react";
import { useTheme } from "next-themes";
import { Button } from "@/components/ui/button";
import { Sun, Moon } from "lucide-react";

/**
 * @summary Component que renderitza un botó d'icona per canviar entre tema clar i fosc.
 * Està dissenyat per a ser utilitzat en barres de navegació.
 */
export function ThemeSwitcher() {
  const [mounted, setMounted] = useState(false);
  const { theme, setTheme } = useTheme();

  // Aquest efecte assegura que el component només es renderitza al client
  // per evitar errors d'hidratació (hydration mismatch).
  useEffect(() => {
    setMounted(true);
  }, []);

  // Mentre el component no estigui muntat al client, mostrem un espai reservat
  // de la mateixa mida que el botó final per evitar que la interfície "salti".
  if (!mounted) {
    return <div className="h-9 w-9" />;
  }

  return (
    <Button
      variant="ghost"
      size="icon"
      aria-label="Canviar tema"
      onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
    >
      {/* Mostrem el Sol si el tema és fosc, i la Lluna si el tema és clar */}
      <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
      <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
    </Button>
  );
}

// =================== FILE: src/components/ui/accordion.tsx ===================

"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { cn } from "@/lib/utils/utils"
import { ChevronDownIcon } from "@radix-ui/react-icons"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDownIcon className="h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))
AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }


// =================== FILE: src/components/ui/alert-dialog.tsx ===================

"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}


// =================== FILE: src/components/ui/avatar.tsx ===================

"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }


// =================== FILE: src/components/ui/badge.jsx ===================

import * as React from 'react';
import { cva } from 'class-variance-authority';
import { cn } from '@/lib/utils/utils'; // Assegura't que tens aquest arxiu d'ajuda de shadcn

const badgeVariants = cva(
  'inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',
  {
    variants: {
      variant: {
        default: 'border-transparent bg-primary text-primary-foreground hover:bg-primary/80',
        secondary: 'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80',
        destructive: 'border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80',
        outline: 'text-foreground',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
);

function Badge({ className, variant, ...props }) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  );
}

export { Badge, badgeVariants };

// =================== FILE: src/components/ui/button.tsx ===================

"use client";

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        
        // ✅ LÍNIA AFEGIDA PER A LA NOVA VARIANT
        "destructive-outline":
          "border border-destructive bg-transparent text-destructive hover:bg-destructive/10",
        
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants, VariantProps };

// =================== FILE: src/components/ui/calendar.tsx ===================

import * as React from "react"
import {
  ChevronDownIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
} from "lucide-react"
// ✅ 1. IMPORTEM 'CalendarDay' I CANVIEM 'DayModifiers' PER 'Modifiers'
import { DayPicker, getDefaultClassNames, Modifiers, CalendarDay } from "react-day-picker";

import { cn } from "@/lib/utils/utils"
import { Button, buttonVariants, type VariantProps } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker> & {
  buttonVariant?: VariantProps<typeof buttonVariants>["variant"];
};

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  captionLayout = "label",
  buttonVariant = "ghost",
  formatters,
  components,
  ...props
}: CalendarProps) {
  const defaultClassNames = getDefaultClassNames()

  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn(
        "bg-background group/calendar p-3 [--cell-size:2rem] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent",
        String.raw`rtl:**:[.rdp-button\_next>svg]:rotate-180`,
        String.raw`rtl:**:[.rdp-button\_previous>svg]:rotate-180`,
        className
      )}
      captionLayout={captionLayout}
      formatters={{
        formatMonthDropdown: (date) =>
          date.toLocaleString("default", { month: "short" }),
        ...formatters,
      }}
      classNames={{
        root: cn("w-fit", defaultClassNames.root),
        months: cn("relative flex flex-col gap-4 md:flex-row", defaultClassNames.months),
        month: cn("flex w-full flex-col gap-4", defaultClassNames.month),
        nav: cn(
          "absolute inset-x-0 top-0 flex w-full items-center justify-between gap-1",
          defaultClassNames.nav
        ),
        button_previous: cn(
          buttonVariants({ variant: buttonVariant }),
          "h-[--cell-size] w-[--cell-size] select-none p-0 aria-disabled:opacity-50",
          defaultClassNames.button_previous
        ),
        button_next: cn(
          buttonVariants({ variant: buttonVariant }),
          "h-[--cell-size] w-[--cell-size] select-none p-0 aria-disabled:opacity-50",
          defaultClassNames.button_next
        ),
        month_caption: cn(
          "flex h-[--cell-size] w-full items-center justify-center px-[--cell-size]",
          defaultClassNames.month_caption
        ),
        dropdowns: cn(
          "flex h-[--cell-size] w-full items-center justify-center gap-1.5 text-sm font-medium",
          defaultClassNames.dropdowns
        ),
        dropdown_root: cn(
          "has-focus:border-ring border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] relative rounded-md border",
          defaultClassNames.dropdown_root
        ),
        dropdown: cn("bg-popover absolute inset-0 opacity-0", defaultClassNames.dropdown),
        caption_label: cn("select-none font-medium", captionLayout === "label"
          ? "text-sm"
          : "[&>svg]:text-muted-foreground flex h-8 items-center gap-1 rounded-md pl-2 pr-1 text-sm [&>svg]:size-3.5", defaultClassNames.caption_label),
        table: "w-full border-collapse",
        weekdays: cn("flex", defaultClassNames.weekdays),
        weekday: cn(
          "text-muted-foreground flex-1 select-none rounded-md text-[0.8rem] font-normal",
          defaultClassNames.weekday
        ),
        week: cn("mt-2 flex w-full", defaultClassNames.week),
        week_number_header: cn("w-[--cell-size] select-none", defaultClassNames.week_number_header),
        week_number: cn(
          "text-muted-foreground select-none text-[0.8rem]",
          defaultClassNames.week_number
        ),
        day: cn(
          "group/day relative aspect-square h-full w-full select-none p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md",
          defaultClassNames.day
        ),
        range_start: cn("bg-accent rounded-l-md", defaultClassNames.range_start),
        range_middle: cn("rounded-none", defaultClassNames.range_middle),
        range_end: cn("bg-accent rounded-r-md", defaultClassNames.range_end),
        today: cn(
          "bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none",
          defaultClassNames.today
        ),
        outside: cn(
          "text-muted-foreground aria-selected:text-muted-foreground",
          defaultClassNames.outside
        ),
        disabled: cn("text-muted-foreground opacity-50", defaultClassNames.disabled),
        hidden: cn("invisible", defaultClassNames.hidden),
        ...classNames,
      }}
      components={{
        // Dins de calendar.tsx
        Root: ({ className, ...props }) => {
          // 1. Separem 'rootRef' de la resta de props.
          const { rootRef, ...rest } = props as { rootRef?: React.Ref<HTMLDivElement> };
          
          // 2. Usem 'rootRef' a la prop 'ref' i passem la resta de props.
          return (<div ref={rootRef} data-slot="calendar" className={cn(className)} {...rest} />);
        },
        // ✅ 2. AFEGIM "up" A LES ORIENTACIONS PERMESES
        Chevron: ({ className, orientation }: { className?: string; orientation?: "left" | "right" | "down" | "up" }) => {
          if (orientation === "left") {
            return (<ChevronLeftIcon className={cn("size-4", className)} />);
          }
          if (orientation === "right") {
            return (<ChevronRightIcon className={cn("size-4", className)} />);
          }
          if (orientation === "up") {
             // Pots canviar aquesta icona si vols una fletxa cap amunt
            return (<ChevronDownIcon className={cn("size-4 rotate-180", className)} />);
          }
          return (<ChevronDownIcon className={cn("size-4", className)} />);
        },
        DayButton: CalendarDayButton,
        WeekNumber: ({ children, ...props }: { children?: React.ReactNode }) => {
          return (
            <td {...props}>
              <div
                className="flex size-[--cell-size] items-center justify-center text-center">
                {children}
              </div>
            </td>
          );
        },
        ...components,
      }}
      {...props} />
  );
}
Calendar.displayName = "Calendar";


interface CalendarDayButtonProps extends React.HTMLAttributes<HTMLButtonElement> {
  // ✅ 3. CANVIEM 'Date' PER 'CalendarDay'
  day: CalendarDay;
  modifiers: Modifiers;
}

function CalendarDayButton({
  className,
  day,
  modifiers,
  ...props
}: CalendarDayButtonProps) {
  const defaultClassNames = getDefaultClassNames()
  const ref = React.useRef<HTMLButtonElement>(null);

  React.useEffect(() => {
    if (modifiers.focused && ref.current) {
      ref.current.focus();
    }
  }, [modifiers.focused]);

  return (
    <Button
      ref={ref}
      variant="ghost"
      size="icon"
      // ✅ 4. ACCEDIM A LA DATA REAL A TRAVÉS DE 'day.date'
      data-day={day.date.toLocaleDateString()}
      data-selected-single={
        modifiers.selected &&
        !modifiers.range_start &&
        !modifiers.range_end &&
        !modifiers.range_middle
      }
      data-range-start={modifiers.range_start}
      data-range-end={modifiers.range_end}
      data-range-middle={modifiers.range_middle}
      className={cn(
        "data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 flex aspect-square h-auto w-full min-w-[--cell-size] flex-col gap-1 font-normal leading-none data-[range-end=true]:rounded-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] [&>span]:text-xs [&>span]:opacity-70",
        defaultClassNames.day,
        className
      )}
      {...props} />
  );
}
CalendarDayButton.displayName = "CalendarDayButton";

export { Calendar, CalendarDayButton }

// =================== FILE: src/components/ui/card.tsx ===================

import * as React from "react"

import { cn } from "@/lib/utils/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


// =================== FILE: src/components/ui/checkbox.tsx ===================

"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { CheckIcon } from "lucide-react"

import { cn } from "@/lib/utils/utils"

function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {
  return (
    <CheckboxPrimitive.Root
      data-slot="checkbox"
      className={cn(
        "peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <CheckboxPrimitive.Indicator
        data-slot="checkbox-indicator"
        className="flex items-center justify-center text-current transition-none"
      >
        <CheckIcon className="size-3.5" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  )
}

export { Checkbox }


// =================== FILE: src/components/ui/command.tsx ===================

"use client"

import * as React from "react"
import { Command as CommandPrimitive } from "cmdk"
import { Search as SearchIcon } from "lucide-react"

import { cn } from "@/lib/utils/utils"
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({
  children,
  title = "Command Palette",
  description,
  ...props
}: React.ComponentProps<typeof Dialog> & { title?: string, description?: string }) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        {(title || description) && (
          <DialogHeader className="px-4 pt-4">
            {title && <DialogTitle>{title}</DialogTitle>}
            {description && <DialogDescription>{description}</DialogDescription>}
          </DialogHeader>
        )}
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <SearchIcon className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))
CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))
CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))
CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))
CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled='true']:pointer-events-none data-[disabled='true']:opacity-50",
      className
    )}
    {...props}
  />
))
CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}



// =================== FILE: src/components/ui/dialog.tsx ===================

// Ruta del fitxer: src/components/ui/dialog.tsx
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X as XIcon } from "lucide-react"

import { cn } from "@/lib/utils/utils"

const Dialog = DialogPrimitive.Root
const DialogTrigger = DialogPrimitive.Trigger
const DialogPortal = DialogPrimitive.Portal
const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        // ✅ CORRECCIÓ: Restaurem l'amplada màxima per defecte (max-w-lg)
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <XIcon className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
  DialogClose,
  DialogPortal,
  DialogOverlay
}



// =================== FILE: src/components/ui/drawer.tsx ===================

"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}


// =================== FILE: src/components/ui/dropdown-menu.tsx ===================

"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { cn } from "@/lib/utils/utils"
import { CheckIcon, ChevronRightIcon, DotFilledIcon } from "@radix-ui/react-icons"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRightIcon className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <DotFilledIcon className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


// =================== FILE: src/components/ui/input.tsx ===================

import * as React from "react"
import { cn } from "@/lib/utils/utils"

// Canviem la interfície buida per un 'type' directe.
// Això soluciona l'error '@typescript-eslint/no-empty-object-type'.
export type InputProps = React.InputHTMLAttributes<HTMLInputElement>

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)

Input.displayName = "Input"

export { Input }

// =================== FILE: src/components/ui/label.tsx ===================

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }


// =================== FILE: src/components/ui/popover.tsx ===================

"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils/utils"

function Popover({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Root>) {
  return <PopoverPrimitive.Root data-slot="popover" {...props} />
}

function PopoverTrigger({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {
  return <PopoverPrimitive.Trigger data-slot="popover-trigger" {...props} />
}

function PopoverContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Content>) {
  return (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        data-slot="popover-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden",
          className
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  )
}

function PopoverAnchor({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {
  return <PopoverPrimitive.Anchor data-slot="popover-anchor" {...props} />
}

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }


// =================== FILE: src/components/ui/progress.tsx ===================

"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-primary/20",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }


// =================== FILE: src/components/ui/select.tsx ===================

"use client";

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown } from "lucide-react"
import { cn } from "@/lib/utils/utils"

const Select = SelectPrimitive.Root
const SelectGroup = SelectPrimitive.Group
const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
}

// =================== FILE: src/components/ui/separator.tsx ===================

"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }


// =================== FILE: src/components/ui/sheet.tsx ===================

"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils/utils"
import { Cross2Icon } from "@radix-ui/react-icons"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <Cross2Icon className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
      {children}
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}


// =================== FILE: src/components/ui/skeleton.tsx ===================

// Ruta: src/components/ui/skeleton.tsx
import { cn } from "@/lib/utils/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

// =================== FILE: src/components/ui/sonner.tsx ===================

"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }


// =================== FILE: src/components/ui/switch.tsx ===================

"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }


// =================== FILE: src/components/ui/table.tsx ===================

// src/components/ui/table.tsx
"use client"

import * as React from "react"
import { cn } from "@/lib/utils/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

// =================== FILE: src/components/ui/tabs.tsx ===================

"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils/utils"

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props}
    />
  )
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}

export { Tabs, TabsList, TabsTrigger, TabsContent }


// =================== FILE: src/components/ui/textarea.tsx ===================

import * as React from "react"
import { cn } from "@/lib/utils/utils"

// 1. Canviem la interfície buida per un 'type'.
// 2. Renombrem a 'TextareaProps' i heretem de les propietats correctes: React.TextareaHTMLAttributes.
export type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }

// =================== FILE: src/components/ui/toast.tsx ===================

import { toast } from "sonner";

export { toast };

// =================== FILE: src/components/ui/toaster.tsx ===================

"use client"

import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  return (
    <Sonner
      theme="light"
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }

// =================== FILE: src/components/ui/toggle-group.tsx ===================

"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }


// =================== FILE: src/components/ui/toggle.tsx ===================

"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-9 px-2 min-w-9",
        sm: "h-8 px-1.5 min-w-8",
        lg: "h-10 px-2.5 min-w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }


// =================== FILE: src/components/ui/tooltip.tsx ===================

"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Portal>
    <TooltipPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]",
        className
      )}
      {...props}
    />
  </TooltipPrimitive.Portal>
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }


// =================== FILE: src/config/billing.ts ===================

import type { PlanConfig } from '@/types/settings';

/**
 * Configuració centralitzada dels plans de subscripció.
 * El camp 'name' s'utilitzarà com a clau per a les traduccions (en minúscules).
 */
export const plansStructure: PlanConfig[] = [
  {
    id: 'free',
    name: 'Free', // Aquesta serà la clau 'free' per a les traduccions
    iconName: 'Gift',
    priceMonthly: 0,
    priceYearly: 0,
    colors: { border: "border-muted", text: "text-muted-foreground", bg: "bg-muted", hoverBg: "hover:bg-muted/80" }
  },
  {
    id: process.env.PLAN_PLUS_ID || 'plus',
    name: 'Plus', // Aquesta serà la clau 'plus' per a les traduccions
    iconName: 'Star',
    priceMonthly: 29,
    priceYearly: 290,
    isPopular: true,
    colors: { border: "border-primary", text: "text-primary", bg: "bg-primary", hoverBg: "hover:bg-primary/90" }
  },
  {
    id: process.env.PLAN_PREMIUM_ID || 'premium',
    name: 'Premium', // Aquesta serà la clau 'premium' per a les traduccions
    iconName: 'Gem',
    priceMonthly: 79,
    priceYearly: 790,
    colors: { border: "border-teal-500", text: "text-teal-500", bg: "bg-teal-500", hoverBg: "hover:bg-teal-500/90" }
  },
  {
    id: 'custom',
    name: 'Custom', // Aquesta serà la clau 'custom' per a les traduccions
    iconName: 'Settings',
    priceMonthly: null,
    priceYearly: null,
    colors: { border: "border-foreground", text: "text-foreground", bg: "bg-foreground", hoverBg: "hover:bg-foreground/90" }
  },
];



// =================== FILE: src/config/navigation.ts ===================

import {
  LayoutDashboard,
  Briefcase,
  Landmark,
  Headphones,
  LayoutTemplate,
  Mail,
  Contact,
  FileText,
  Columns,
  Receipt,
  Bot,
  BookPlus,
  Settings,
  Users,
  Workflow,
  Activity,
  CalendarDays, // ✅ Importem la nova icona

} from 'lucide-react';


// ✅ PAS 1: Importem la interfície des del nostre nou fitxer de tipus.
import type { NavItem } from '@/types/navigation';

export const navModules: NavItem[] = [
  { 
    id: 'dashboard', 
    labelKey: 'dashboard', // ✅ Canviat
    icon: LayoutDashboard, 
    path: '/dashboard', 
    isSingle: true 
  },
  { 
    id: 'crm',
    labelKey: 'crm', // ✅ Canviat
    icon: Briefcase,
    basePath: '/crm',
    path: '/crm/general',
    isSingle: false,
    children: [
      { id: 'general_crm', labelKey: 'crmGeneral', icon: Briefcase, path: '/crm/general', isSingle: true },
      { id: 'contactes', labelKey: 'contacts', icon: Contact, path: '/crm/contactes', isSingle: true },
      { id: 'pipeline', labelKey: 'pipeline', icon: Columns, path: '/crm/pipeline', isSingle: true },
      { id: 'pressupostos', labelKey: 'quotes', icon: FileText, path: '/crm/quotes', isSingle: true },
      { id: 'conceptes', labelKey: 'concepts', icon: BookPlus, path: '/crm/products', isSingle: true },
      { id: 'activitats', labelKey: 'activities', icon: Activity, path: '/crm/activitats', isSingle: true }
    ]
  },
  { 
    id: 'finances',
    labelKey: 'finances', // ✅ Canviat
    icon: Landmark,
    basePath: '/finances',
    path: '/finances/facturacio',
    isSingle: false,
    children: [
      { id: 'facturacio', labelKey: 'invoicing', icon: Receipt, path: '/finances/facturacio', isSingle: true },
      { id: 'despeses', labelKey: 'expenses', icon: Landmark, path: '/finances/despeses', isSingle: true }, 
    ]
  },
  { 
    id: 'comunicacio',
    labelKey: 'communication', // ✅ Canviat
    icon: Headphones,
    basePath: '/comunicacio',
    path: '/comunicacio/inbox',
    isSingle: false,
    children: [
      { id: 'inbox', labelKey: 'inbox', icon: Headphones, path: '/comunicacio/inbox', isSingle: true },
      { id: 'templates', labelKey: 'templates', icon: LayoutTemplate, path: '/comunicacio/templates', isSingle: true },
      { id: 'marketing', labelKey: 'marketing', icon: Mail, path: '/comunicacio/marketing', isSingle: true },
      {
        id: 'planificador',
        labelKey: 'planner',
        icon: CalendarDays,
        path: '/comunicacio/planificador',
        // ✅ AQUÍ ESTÀ LA MÀGIA: Especifiquem els plans que tenen accés
        requiredPlan: ['plus', 'premium'],
        isSingle: false
      },
    ]
  },
  {
    id: 'network',
    labelKey: 'network', // ✅ Canviat
    icon: Users,
    path: '/network',
    isSingle: true
  },

  {
    id: 'projectStrocture',
    labelKey: 'architecture', // ✅ Canviat
    icon: Workflow,
    path: '/projectStrocture',
    isSingle: true
  },
];

export const bottomItems: NavItem[] = [
  { id: 'ai', labelKey: 'ai', icon: Bot, path: '#', isSingle: true, notImplemented: true },
  { id: 'settings', labelKey: 'settings', icon: Settings, path: '/settings/profile', isSingle: true }, 
];

// =================== FILE: src/hooks/useAppNavigation.ts ===================

// Ubicació: /hooks/useAppNavigation.ts

import { useState, useEffect, useCallback } from 'react';
import { usePathname, useRouter } from 'next/navigation';
import { useLocale, useTranslations } from 'next-intl';
import { toast } from 'sonner';
import { useUser } from '@/hooks/useUser';
import { useNavigationStore } from '@/stores/navigationStore';
import { navModules } from '@/config/navigation';
import type { NavItem } from '@/types/navigation';

export function useAppNavigation() {
    const pathname = usePathname();
    const router = useRouter();
    const locale = useLocale();
    const t = useTranslations('Navigation');
    const { user, teamRole } = useUser();
    const { setIsNavigating } = useNavigationStore();

    const [activeModule, setActiveModule] = useState<NavItem | null>(null);
    const [isModuleSidebarOpen, setIsModuleSidebarOpen] = useState(false);

    useEffect(() => {
        setIsNavigating(false);
        const prefix = `/${locale}`;
        const pathnameWithoutLocale = pathname.startsWith(prefix) ? pathname.slice(prefix.length) || '/' : pathname;
        
        const currentModule = navModules.find(
            module => !module.isSingle && module.basePath && pathnameWithoutLocale.startsWith(module.basePath)
        );
        
        setActiveModule(currentModule || null);
        if (!currentModule) {
            setIsModuleSidebarOpen(false);
        }
    }, [pathname, locale, setIsNavigating]);
    
    
    // ✅ CORRECCIÓ 1: La funció 't' no canvia durant el cicle de vida del component,
    // per la qual cosa no cal incloure-la a l'array de dependències de 'useCallback'.
    const checkPlanPermission = useCallback((item: NavItem) => {
        const plan = user?.app_metadata?.active_team_plan as string | undefined;
        
        if (item.requiredPlan && item.requiredPlan.length > 0) {
            if (!plan || !item.requiredPlan.includes(plan.toLowerCase())) {
                // ✅ CORRECCIÓ: Obtenim la traducció fora del 'toast'
                const translatedLabel = t(item.labelKey);
                
                toast.info("Funcionalitat Premium", {
                    description: `El mòdul '${translatedLabel}' només està disponible als plans ${item.requiredPlan.join(' o ')}.`,
                    action: {
                        label: "Veure Plans",
                        onClick: () => router.push(`/${locale}/settings/billing`),
                    },
                });
                return false;
            }
        }
        return true;
    }, [user, locale, router, t]); // ✅ Tornem a afegir 't' a les dependències

    // ✅ CORRECCIÓ 2: Simplifiquem aquesta funció.
    // La comprovació de permisos ja es fa a 'handleMainMenuClick' o al 'SocialPlannerPage'.
    // Aquesta funció només s'ha d'encarregar de navegar.
    const handleNavigation = useCallback((item: NavItem) => {
        if (item.allowedRoles && (!teamRole || !item.allowedRoles.includes(teamRole))) {
            toast.error("Accés restringit", { description: "No tens els permisos necessaris per a accedir a aquesta secció." });
            return;
        }

        const targetPath = `/${locale}${item.path}`;
        if (pathname !== targetPath) {
            setIsNavigating(true);
            router.push(targetPath);
        }

        if (activeModule?.children?.some(child => child.id === item.id)) {
            setIsModuleSidebarOpen(false);
        }
    }, [teamRole, pathname, locale, router, setIsNavigating, activeModule]);

    const handleMainMenuClick = useCallback((item: NavItem) => {
        // ✅ CORRECCIÓ CLAU: Aquesta és la lògica que faltava.
        // Si l'ítem és un mòdul (isSingle: false), no fem la comprovació de pla aquí,
        // sinó que simplement obrim el submenú. La comprovació es farà quan es faci
        // clic a l'ítem del submenú (p. ex., 'Planificador') o a la pàgina de destí.
        
        if (item.isSingle) {
            // Si és un enllaç directe (com el Dashboard), comprovem el permís i naveguem.
            if (checkPlanPermission(item)) {
                handleNavigation(item);
            }
        } else {
            // Si és un mòdul amb fills (com Comunicació), només gestionem el submenú.
            if (activeModule?.id === item.id) {
                setIsModuleSidebarOpen(prev => !prev);
            } else {
                setActiveModule(item);
                setIsModuleSidebarOpen(true);
            }
        }
    }, [activeModule, handleNavigation, checkPlanPermission]);

    return {
        activeModule,
        isModuleSidebarOpen,
        setIsModuleSidebarOpen,
        handleNavigation,
        handleMainMenuClick,
    };
}

// =================== FILE: src/hooks/useMediaQuery.ts ===================

/**
 * @file useMediaQuery.ts
 * @summary Aquest fitxer defineix un hook de React personalitzat (`useMediaQuery`) per a la
 * detecció de media queries de CSS al costat del client. És una eina molt útil per
 * crear components que s'adapten o canvien el seu comportament segons la mida de la pantalla
 * (ex: mostrar una vista per a mòbils i una altra per a escriptori).
 */

"use client";

import { useState, useEffect } from 'react';

/**
 * @function useMediaQuery
 * @summary Un hook que retorna 'true' si la 'media query' proporcionada coincideix, i 'false' si no.
 * @param {string} query - La 'media query' de CSS a avaluar (ex: '(max-width: 768px)').
 * @returns {boolean} L'estat de coincidència de la 'media query'.
 */
export function useMediaQuery(query: string) {
  // Inicialitzem l'estat a 'false'. Això és important perquè aquest codi s'executa primer
  // al servidor durant el Server-Side Rendering (SSR), on l'objecte 'window' no existeix.
  // Si l'inicialitzéssim basant-nos en 'window.matchMedia', tindríem un error d'hidratació.
  const [matches, setMatches] = useState(false);

  useEffect(() => {
    // Aquest codi dins de 'useEffect' només s'executa al client (al navegador),
    // on l'objecte 'window' sí que està disponible.
    const media = window.matchMedia(query);

    // Comprovem si l'estat actual de la 'media query' és diferent del nostre estat de React
    // i, si és així, el sincronitzem.
    if (media.matches !== matches) {
      setMatches(media.matches);
    }

    // Creem un oient d'esdeveniments que s'activarà cada vegada que l'estat
    // de la 'media query' canviï (ex: quan l'usuari redimensiona la finestra).
    const listener = () => {
      setMatches(media.matches);
    };

    media.addEventListener('change', listener);
    
    // Funció de neteja: Quan el component que utilitza aquest hook es desmunta,
    // eliminem l'oient d'esdeveniments per evitar fuites de memòria.
    return () => media.removeEventListener('change', listener);
  }, [matches, query]);

  return matches;
}


// =================== FILE: src/hooks/useUser.ts ===================

import { createClient } from '@/lib/supabase/client';
import { type User } from '@supabase/supabase-js';
import { useState, useEffect, useMemo } from 'react';

export function useUser() {
    const [user, setUser] = useState<User | null>(null);
    const [teamRole, setTeamRole] = useState<string | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    
    const supabase = useMemo(() => createClient(), []);

    useEffect(() => {
        const { data: authListener } = supabase.auth.onAuthStateChange(
            (event, session) => {
                const currentUser = session?.user || null;
                // Actualitzem l'usuari immediatament. Això causa una primera re-renderització.
                setUser(currentUser);

                // Imprimim els logs per depurar
                console.log("\n--- onAuthStateChange EVENT (Non-blocking) ---");
                console.log("Event:", event);

                if (currentUser) {
                    const activeTeamId = currentUser.app_metadata?.active_team_id;
                    if (activeTeamId) {
                        // Llança la consulta a la BD, però no l'esperis amb 'await'.
                        // Utilitza .then() per processar el resultat quan arribi.
                        supabase
                            .from('team_members')
                            .select('role')
                            .eq('user_id', currentUser.id)
                            .eq('team_id', activeTeamId)
                            .single()
                            .then(({ data: member }) => {
                                // Quan la consulta acabi, actualitza l'estat del rol.
                                // Això causarà una segona re-renderització, però ja de forma segura.
                                setTeamRole(member?.role || null);
                                setIsLoading(false); // Marquem com a carregat quan tenim tota la info.
                                console.log("Rol obtingut:", member?.role || null);
                                console.log("-----------------------------\n");
                            });
                    } else {
                        // Si no hi ha equip actiu, netegem el rol i finalitzem la càrrega.
                        setTeamRole(null);
                        setIsLoading(false);
                        console.log("No hi ha equip actiu.");
                        console.log("-----------------------------\n");
                    }
                } else {
                    // Si no hi ha usuari, netegem tot i finalitzem la càrrega.
                    setTeamRole(null);
                    setIsLoading(false);
                    console.log("Usuari desconnectat.");
                    console.log("-----------------------------\n");
                }
            }
        );

        return () => {
            authListener?.subscription.unsubscribe();
        };
    }, [supabase]);

    return { user, teamRole, isLoading };
}

// =================== FILE: src/i18n.ts ===================

/**
 * @file src/i18n.ts
 * @summary Configuració central per a la internacionalització (i18n).
 */
import { getRequestConfig } from 'next-intl/server';
import { notFound } from 'next/navigation';

export const locales = ['ca', 'es', 'en'] as const;
export const defaultLocale = 'ca';

// Definim un tipus per als nostres idiomes
type Locale = typeof locales[number];

export default getRequestConfig(async ({ locale }) => {
  // Si `locale` és undefined, utilitzem l'idioma per defecte
  const safeLocale = locale || defaultLocale;

  
  // ✅ CORRECCIÓ: Validació segura de tipus sense 'as any'
  if (!locales.includes(safeLocale as Locale)) {
    notFound();
  }

  return {
    locale: safeLocale, // 👈 Ara és sempre string
    messages: (await import(`../language/${safeLocale}.json`)).default,
  };
});

// =================== FILE: src/lib/actions.ts ===================

import { createClient } from "./supabase/server";
import { revalidatePath } from "next/cache";
import { cookies } from "next/headers";

export interface ServerActionResult<T = unknown> {
    success: boolean;
    message?: string;
    data?: T;
    newId?: string;
}

export async function withUser<T>(
    action: (
        supabase: ReturnType<typeof createClient>,
        userId: string
    ) => Promise<ServerActionResult<T>>,
    pathsToRevalidate?: string[]
): Promise<ServerActionResult<T>> {
    // Obtenim les cookies resolent la promesa
   
    // Creem el client passant les cookies ja resoltes
    const supabase = createClient(cookies())
;
    
    const { data: { user } } = await supabase.auth.getUser();

    if (!user) return { success: false, message: "Usuari no autenticat." };

    try {
        const result = await action(supabase, user.id);
        if (result.success && pathsToRevalidate) {
            pathsToRevalidate.forEach((p) => revalidatePath(p));
        }
        return result;
    } catch (err: unknown) {
        const message = err instanceof Error ? err.message : "Error desconegut";
        return { success: false, message };
    }
}

// =================== FILE: src/lib/permissions.config.ts ===================

// /src/lib/permissions.config.ts  (AQUEST ÉS EL FITXER UNIVERSAL I SEGUR)

// Definim explícitament els rols per a més seguretat de tipus.
export const ROLES_LIST = ['owner', 'admin', 'member'] as const;
export type Role = typeof ROLES_LIST[number];

// Definim els permisos de manera granular i clara.
export const PERMISSIONS = {
    MANAGE_TEAM_MEMBERS: 'manage_team_members',
    MANAGE_TEAM_ROLES: 'manage_team_roles',
    MANAGE_TEAM_PROFILE: 'manage_team_profile',
    VIEW_BILLING: 'view_billing',
    MANAGE_BILLING: 'manage_billing',
    VIEW_BLACKLIST: 'view_blacklist',
    MANAGE_BLACKLIST: 'manage_blacklist',
    VIEW_TEAM_STATS: 'view_team_stats',
    MANAGE_INTEGRATIONS: 'manage_integrations',
} as const;

export type Permission = typeof PERMISSIONS[keyof typeof PERMISSIONS];

// El nostre mapa de rols a permisos, 100% tipat.
export const ROLES: Record<Role, Permission[]> = {
    owner: [
        PERMISSIONS.MANAGE_TEAM_MEMBERS,
        PERMISSIONS.MANAGE_TEAM_ROLES,
        PERMISSIONS.MANAGE_TEAM_PROFILE,
        PERMISSIONS.VIEW_BILLING,
        PERMISSIONS.MANAGE_BILLING,
        PERMISSIONS.VIEW_BLACKLIST,
        PERMISSIONS.MANAGE_BLACKLIST,
        PERMISSIONS.VIEW_TEAM_STATS,
        PERMISSIONS.MANAGE_INTEGRATIONS,
    ],
    admin: [
        PERMISSIONS.MANAGE_TEAM_MEMBERS,
        PERMISSIONS.MANAGE_TEAM_ROLES,
        PERMISSIONS.MANAGE_TEAM_PROFILE,
        PERMISSIONS.VIEW_BILLING,
        PERMISSIONS.MANAGE_BILLING,
        PERMISSIONS.VIEW_BLACKLIST,
        PERMISSIONS.MANAGE_BLACKLIST,
        PERMISSIONS.VIEW_TEAM_STATS,
        PERMISSIONS.MANAGE_INTEGRATIONS,
    ],
    member: [
        PERMISSIONS.VIEW_BLACKLIST,
    ],
};

/**
 * Funció "pura" que comprova si un rol té un permís.
 * És segura per a ser executada a client i servidor.
 */
export const hasPermission = (role: Role | undefined | null, permission: Permission): boolean => {
    if (!role) return false;
    return ROLES[role]?.includes(permission) || false;
};

// =================== FILE: src/lib/permissions.ts ===================

// /src/lib/permissions.ts (AQUEST FITXER ÉS NOMÉS PER AL SERVIDOR)

import type { SupabaseClient } from "@supabase/supabase-js";
import { validateUserSession, type ValidatedSession, type SessionError } from './supabase/session';

// ✅ Importem les definicions i helpers universals des del nou fitxer de configuració.
import { 
    hasPermission, 
    type Role, 
    type Permission 
} from './permissions.config'; 
export * from './permissions.config'; // Re-exportem tot per a facilitar les importacions

/**
 * Obté el rol d'un usuari en un equip. Aquesta funció necessita la BD,
 * per tant, es considera una funció de servidor.
 */
export async function getUserRoleInTeam(
    supabase: SupabaseClient,
    userId: string,
    teamId: string
): Promise<Role | null> {
    const { data: member } = await supabase
        .from('team_members')
        .select('role')
        .match({ user_id: userId, team_id: teamId })
        .single();
    
    return member?.role as Role | null;
}

// El nostre "guardià de seguretat" per a Server Actions, que depèn del servidor.
type ValidatedSessionWithRole = ValidatedSession & { userRole: Role };

export async function validateSessionAndPermission(
    requiredPermission: Permission
): Promise<ValidatedSessionWithRole | SessionError> {
    const sessionValidation = await validateUserSession();
    if ('error' in sessionValidation) return sessionValidation;
    
    const { supabase, user, activeTeamId } = sessionValidation;
    const userRole = await getUserRoleInTeam(supabase, user.id, activeTeamId);

    if (!hasPermission(userRole, requiredPermission)) {
        return { error: { message: "No tens permisos per a realitzar aquesta acció." } };
    }

    return { supabase, user, activeTeamId, userRole: userRole! };
}

// =================== FILE: src/lib/supabase/admin.ts ===================

// A /lib/supabase/admin.ts
import { createClient } from '@supabase/supabase-js';

// NOTA: Aquest client NOMÉS s'ha d'utilitzar en entorns de servidor (Server Actions, Route Handlers).
// Mai l'exposis al client!
export const createAdminClient = () => {
  if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
    throw new Error('Supabase URL or service role key is missing.');
  }

  return createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY,
    {
      auth: {
        autoRefreshToken: false,
        persistSession: false,
      },
    }
  );
};

// =================== FILE: src/lib/supabase/client.ts ===================

// Aquest arxiu crea un client de Supabase dissenyat per a ser utilitzat de forma segura
// als "Client Components" (arxius amb la directiva "use client").

import { createBrowserClient } from '@supabase/ssr';

/**
 * Funció per crear una instància del client de Supabase per al navegador.
 * Aquesta instància és un "singleton", el que significa que només es crea una vegada
 * i es reutilitza a tota l'aplicació del costat del client.
 */
export function createClient() {
  // 'createBrowserClient' és la funció recomanada de la llibreria '@supabase/ssr'
  // per a la interacció des del navegador. No necessita gestionar les cookies manualment.
  return createBrowserClient(
    // Aquestes són variables d'entorn públiques. El prefix 'NEXT_PUBLIC_'
    // les fa accessibles al codi del navegador. MAI s'han de posar claus
    // secretes amb aquest prefix.
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  );
}


// =================== FILE: src/lib/supabase/server.ts ===================

import { createServerClient} from '@supabase/ssr'
import { cookies } from 'next/headers'
import { createClient as createStandardClient } from "@supabase/supabase-js";

export const createClient = () => {
    const cookieStore = cookies()

    return createServerClient(
        process.env.NEXT_PUBLIC_SUPABASE_URL!,
        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
        {
            cookies: {
                // ✅ NOVA IMPLEMENTACIÓ AMB getAll i setAll
                async getAll() {
                    return (await cookieStore).getAll()
                },
                async setAll(cookiesToSet) {
                    try {
                        // Utilitzem un bucle 'for...of' per a gestionar correctament les promeses
                        // si en el futur 'set' fos asíncron.
                        for (const { name, value, options } of cookiesToSet) {
                            (await cookieStore).set(name, value, options)
                        }
                    } catch (error) {
                        // ✅ Ara passem l'objecte 'error' al console.error
                        console.error("Hi ha hagut un error:", error);
                        // Opcionalment, pots mostrar un missatge més específic a l'usuari
                        // toast.error("Error", { description: error.message });
                    }
                },
            },
        }
    )
}

// La funció per a crear el client d'administrador no canvia.
export const createAdminClient = () => {
    return createStandardClient(
        process.env.NEXT_PUBLIC_SUPABASE_URL!,
        process.env.SUPABASE_SERVICE_ROLE_KEY!,
        { auth: { autoRefreshToken: false, persistSession: false } }
    );
};

// =================== FILE: src/lib/supabase/session.ts ===================

import { createClient } from "@/lib/supabase/server";
import { redirect } from "next/navigation";
import type { User, SupabaseClient } from "@supabase/supabase-js";

// Aquest tipus representa una sessió completament validada.
export type ValidatedSession = {
    supabase: SupabaseClient;
    user: User;
    activeTeamId: string;
};

// Aquest tipus representa una resposta d'error estandarditzada.
export type SessionError = {
    error: { message: string };
};

// A /lib/session.ts (o on tinguis aquest codi)

// Funció base que conté la lògica comuna
async function getSessionCore() {
    const supabase = createClient();
    const { data: { user } } = await supabase.auth.getUser();

    if (!user) {
        return { user: null, supabase: null, activeTeamId: null };
    }

    const activeTeamId = user.app_metadata?.active_team_id as string | null;
    return { user, supabase, activeTeamId };
}

// Nova versió per a Server Actions
export async function validateUserSession(): Promise<ValidatedSession | SessionError> {
    const { user, supabase, activeTeamId } = await getSessionCore();

    if (!user || !supabase) {
        return { error: { message: "Usuari no autenticat." } };
    }
    if (!activeTeamId) {
        return { error: { message: "No s'ha pogut determinar l'equip actiu." } };
    }

    // El tipat ens assegura que user i supabase no són nulls aquí
    return { supabase, user, activeTeamId };
}

// Nova versió per a Pàgines
export async function validatePageSession() {
    const { user, supabase, activeTeamId } = await getSessionCore();

    if (!user) {
        redirect('/login');
    }
    if (!activeTeamId) {
        // Redirigim a un lloc on pugui crear o seleccionar un equip
        redirect('/settings/team');
    }

    // El redirect atura l'execució, així que sabem que aquí tot és vàlid
    return { supabase: supabase!, user, activeTeamId };
}

// =================== FILE: src/lib/supabase/teams.ts ===================

import type { SupabaseClient } from "@supabase/supabase-js";

// Definim el tipus de retorn esperat per a tenir un codi ben tipat
export type TeamMemberWithProfile = {
    role: string;
    profiles: {
        id: string;
        full_name: string | null;
        email: string | null;
        avatar_url: string | null;
    } | null;
};

/**
 * Funció reutilitzable que obté tots els membres d'un equip juntament amb
 * les dades dels seus perfils. Encapsula la lògica del "join manual".
 * @param supabase - La instància del client de Supabase.
 * @param teamId - L'ID de l'equip del qual volem obtenir els membres.
 * @returns Una promesa que resol a una llista de membres amb els seus perfils.
 */
// Aquesta funció es torna molt més simple i ràpida
export async function getTeamMembersWithProfiles(
    supabase: SupabaseClient,
    teamId: string
) {
    // La funció només ha de fer la consulta i retornar la resposta.
    // Aquesta resposta SEMPRE serà un objecte amb format { data, error }.
    const response = await supabase
        .from('team_members_with_profiles') 
        .select('role, user_id, full_name, email, avatar_url')
        .eq('team_id', teamId);
    
    // Si hi ha un error, 'response.error' tindrà valor.
    // Si no, 'response.data' tindrà valor. Però el format és el mateix.
    return response;
}

// =================== FILE: src/lib/utils/formatters.ts ===================

import { ca, es, enUS } from "date-fns/locale";
import { format } from "date-fns";

/**
 * Obté l'objecte de 'locale' de date-fns basat en l'string del locale actual (ex: 'ca', 'es').
 */
export const getDateLocale = (locale: string) => {
    switch (locale) {
        case 'es': return es;
        case 'en': return enUS;
        default: return ca;
    }
};

/**
 * Formata una data en una cadena de text localitzada.
 * @param date La data a formatar (pot ser string, Date, o null).
 * @param formatString El format desitjat (ex: "PPP", "dd MMM, yyyy").
 * @param currentLocale El locale actual ('ca', 'es', 'en').
 * @returns La data formatada o un guió si la data és nul·la.
 */
export function formatLocalizedDate(
    date: string | Date | null | undefined,
    formatString: string,
    currentLocale: string
): string {
    if (!date) return '-';
    const locale = getDateLocale(currentLocale);
    return format(new Date(date), formatString, { locale });
}

/**
 * Formata un número com a moneda en Euros.
 * @param amount El número a formatar.
 * @returns La quantitat formatada (ex: "1.234,56 €").
 */
export function formatCurrency(amount: number | null | undefined): string {
    const num = amount || 0;
    return new Intl.NumberFormat('es-ES', {
        style: 'currency',
        currency: 'EUR',
    }).format(num);
}

// =================== FILE: src/lib/utils/media.ts ===================

// Ubicació: /lib/utils/media.ts (fitxer nou)

/**
 * Genera una miniatura (thumbnail) a partir del primer fotograma d'un fitxer de vídeo.
 * @param file El fitxer de vídeo.
 * @returns Una promesa que resol a un Data URL (string) de la imatge generada.
 */
export const generateVideoThumbnail = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
        const video = document.createElement('video');
        const canvas = document.createElement('canvas');
        const context = canvas.getContext('2d');

        if (!context) {
            return reject(new Error('No es pot obtenir el context del canvas.'));
        }

        // Carreguem el vídeo en memòria
        video.src = URL.createObjectURL(file);
        video.muted = true;

        // Quan el vídeo ha carregat les seves metadades (dimensions, durada)...
        video.onloadedmetadata = () => {
            video.currentTime = 1; // Anem al segon 1 per evitar fotogrames negres
        };

        // Quan el fotograma actual ja es pot renderitzar...
        video.onseeked = () => {
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            context.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);
            
            // Netegem l'objecte URL per alliberar memòria
            URL.revokeObjectURL(video.src);
            
            // Retornem la imatge del canvas com a Data URL
            resolve(canvas.toDataURL('image/jpeg', 0.8));
        };

        video.onerror = (e) => {
            reject(new Error('Error en carregar el vídeo.'));
        };
    });
};

// =================== FILE: src/lib/utils/templates.ts ===================

// Ubicació: /lib/utils/templates.ts

/**
 * Funció utilitària pura per substituir les variables (ex: {{nom_contacte}}) en un text
 * pels seus valors corresponents.
 * @param templateString El text de la plantilla amb variables.
 * @param values Un objecte amb els valors per a cada variable.
 * @returns El text amb les variables substituïdes.
 */
export const renderTemplate = (templateString: string, values: { [key: string]: string }): string => {
    if (!templateString) return '';
    
    // Utilitza una expressió regular per buscar totes les ocurrències de {{...}}
    return templateString.replace(/\{\{([^}]+)\}\}/g, (_match, varName) => {
        const key = varName.trim();
        // Retorna el valor si existeix, o la variable original si no.
        return values[key] || `{{${key}}}`;
    });
};

// =================== FILE: src/lib/utils/utils.ts ===================

import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

/**
 * Funció d'utilitat per fusionar classes de Tailwind CSS de forma intel·ligent.
 */
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

// ✅ AFEGEIX AQUESTA FUNCIÓ AQUÍ SOTA
/**
 * Elimina el prefix de l'idioma d'una ruta.
 * @param pathname - La ruta completa (ex: /ca/dashboard).
 * @param locale - L'idioma actual (ex: ca).
 * @returns La ruta neta (ex: /dashboard).
 */
export const getCleanPathname = (pathname: string, locale: string): string => {
    const prefix = `/${locale}`;
    // Si la ruta comença amb el prefix, l'elimina. Si el resultat és un string buit, retorna '/'.
    return pathname.startsWith(prefix) ? pathname.slice(prefix.length) || '/' : pathname;
};

// =================== FILE: src/middleware.ts ===================

import { createServerClient} from '@supabase/ssr';
import { NextResponse, type NextRequest } from 'next/server';
import createIntlMiddleware from 'next-intl/middleware';
import { locales, defaultLocale } from './i18n';

export async function middleware(request: NextRequest) {
    const handleI18nRouting = createIntlMiddleware({ locales, defaultLocale });
    const response = handleI18nRouting(request);

    const pathname = request.nextUrl.pathname.replace(new RegExp(`^/(${locales.join('|')})`), '') || '/';
    const localePrefix = request.nextUrl.pathname.split('/')[1] || defaultLocale;
    
    const supabase = createServerClient(
        process.env.NEXT_PUBLIC_SUPABASE_URL!,
        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
        {
            cookies: {
                getAll() { return request.cookies.getAll(); },
                setAll(cookiesToSet) {
                    cookiesToSet.forEach(({ name, value, options }) => response.cookies.set(name, value, options));
                },
            },
        }
    );
    const { data: { user } } = await supabase.auth.getUser();

    // ✅ CORRECCIÓ DEFINITIVA:
    // Separem els prefixos de la pàgina principal per a una comprovació més precisa.
    const publicPrefixes = ['/login', '/signup', '/auth', '/accept-invite', '/quote', '/invitation/accept'];
    
    // Una ruta és pública si és EXACTAMENT la pàgina principal ('/') o si comença amb un dels altres prefixos.
    const isPublicPath = pathname === '/' || publicPrefixes.some(p => pathname.startsWith(p));
    const isAppPath = !isPublicPath;

    // --- REGLA 1: Usuari NO autenticat ---
    if (!user && isAppPath) {
        return NextResponse.redirect(new URL(`/${localePrefix}/login`, request.url));
    }

    // --- REGLA 2: Usuari SÍ ESTÀ AUTENTICAT ---
    if (user && isPublicPath) {
        return NextResponse.redirect(new URL(`/${localePrefix}/dashboard`, request.url));
    }
    
    return response;
}

export const config = {
    matcher: ['/((?!api|_next/static|_next/image|.*\\..*).*)'],
};

// =================== FILE: src/stores/navigationStore.ts ===================

import { create } from 'zustand';

interface NavigationState {
  isNavigating: boolean;
  setIsNavigating: (isNavigating: boolean) => void;
  isChatbotOpen: boolean; // ✅ Nou estat
  toggleChatbot: () => void; // ✅ Nova acció
}

export const useNavigationStore = create<NavigationState>((set) => ({
  isNavigating: false,
  setIsNavigating: (isNavigating) => set({ isNavigating }),
  isChatbotOpen: false, // Per defecte, està tancat
  toggleChatbot: () => set((state) => ({ isChatbotOpen: !state.isChatbotOpen })),
}));

// =================== FILE: src/types/app/navigation.ts ===================

// src/types/navigation.ts
import type { LucideIcon } from 'lucide-react';

/**
 * @summary Aquesta constant defineix TOTES les claus de traducció possibles per a la navegació.
 * És la nostra font única de la veritat. Si afegeixes un nou element al menú,
 * has d'afegir la seva 'labelKey' aquí primer.
 */
export const NAVIGATION_KEYS = [
  'dashboard', 'crm', 'finances', 'communication', 'network', 'architecture',
  'crmGeneral', 'contacts', 'pipeline', 'quotes', 'concepts', 'activities', // ✅ 'concepts' i 'activities' afegits
  'invoicing', 'expenses', 'inbox', 'templates', 'marketing', 'profile', 'customization',
  'ai', 'settings', 'planner'
] as const;

/**
 * @summary Aquest tipus es genera automàticament a partir de la constant de dalt.
 * Crea una unió de tots els possibles valors: 'dashboard' | 'crm' | 'finances' | ...
 */
export type NavigationKey = typeof NAVIGATION_KEYS[number];

/**
 * @summary Aquesta és la interfície per a cada element de navegació.
 * Ara utilitza 'NavigationKey' per assegurar que 'labelKey' sempre sigui un valor vàlid.
 */
export interface NavItem {
  id: string;
  labelKey: NavigationKey; // ✅ Ara és totalment segur i tipat.
  descKey?: NavigationKey; // ✅ NOU: Clau per a la descripció (opcional).
  icon: LucideIcon;
  path: string;
  isSingle: boolean;
  basePath?: string;
  children?: NavItem[];
  notImplemented?: boolean;
  // ✅ AQUÍ AFEGIM LA NOVA PROPIETAT
  // És opcional ('?') perquè no tots els enllaços requeriran un pla específic.
  // Serà un array de strings, ex: ['plus', 'premium'].
  requiredPlan?: string[];
  allowedRoles?: string[]; // Rols que poden accedir (ex: ['owner', 'admin'])


}

// =================== FILE: src/types/comunicacio/inbox.ts ===================

/**
 * @file src/types/crm/inbox.ts
 * @summary Defineix els tipus de dades per a l'Inbox (Tiquets, Plantilles) i Activitats.
 */

import { z } from 'zod';
import type { Contact } from '../crm/index';

// --- MAPA I TIPUS D'ESTAT DE TIQUET ---


export const TICKET_STATUS_MAP = [
  // ✅ CANVI: D'"Obert" a "NoLlegit"
  { dbValue: 'NoLlegit', key: 'unread' }, 
  { dbValue: 'Llegit', key: 'read' },
  { dbValue: 'Respost', key: 'replied' },
] as const;
export type TicketStatus = typeof TICKET_STATUS_MAP[number]['dbValue'];

// --- TIPUS PRINCIPALS (AMB ZOD PER A MÉS SEGURETAT) ---
export type TicketFilter = 'tots' | 'rebuts' | 'enviats' | 'noLlegits';

// Esquema de validació per a un Tiquet
export const ticketSchema = z.object({
  id: z.number(),
  user_id: z.string().uuid(),
  contact_id: z.string().uuid().nullable(),
  
  sender_name: z.string().nullable(),
  sender_email: z.string().email(), // L'email ha de ser un string vàlid
  subject: z.string().nullable(),
  preview: z.string().nullable(),
  
  sent_at: z.string().datetime(),
  status: z.custom<TicketStatus>(), // Ha de ser 'Obert', 'Llegit', o 'Respost'
  type: z.enum(['rebut', 'enviat']), // Ha de ser 'rebut' o 'enviat'
  body: z.string().optional().nullable(),
  contacts: z.custom<Contact>().nullable(),
});

export type Ticket = z.infer<typeof ticketSchema>;

// Tipus que representa les dades en brut que arriben de la funció RPC
export type TicketFromRpc = {
  id: number;
  user_id: string;
  subject: string | null;
  body: string | null;
  status: string | null;
  provider_message_id: string | null;
  type: string | null;
  preview: string | null;
  sent_at: string | null;
  sender_name: string | null;
  sender_email: string | null;
  created_at: string;
  contact_id: string | null;
  provider: string | null;
  attachments: unknown;
  // ✅ CORRECCIÓ: AFEGIT el camp 'empresa' per coincidir amb la funció SQL
  contacts: { id: string; nom: string; email: string; empresa: string | null; } | null;
  assignment: { deal_id: string | null } | null;
};


/**
 * ✅ NOU: Funció transformadora que converteix de manera segura un objecte RPC a un tipus Ticket.
 * Aquesta funció és la clau per resoldre tots els errors de tipus.
 */
export function transformRpcToTicket(t: TicketFromRpc): Ticket {
  // Llista de valors permesos per a 'status'
  const validStatusValues = TICKET_STATUS_MAP.map(s => s.dbValue);

  return {
    ...t,
    // --- Normalització de camps que no poden ser nuls a Zod ---
    sender_email: t.sender_email ?? 'desconegut@email.com',
    sent_at: t.sent_at ?? new Date().toISOString(),

    // --- Normalització de camps amb valors restringits (enums) ---
    status: (validStatusValues.includes(t.status as TicketStatus) ? t.status : 'Obert') as TicketStatus,
    type: (t.type === 'enviat' ? 'enviat' : 'rebut'), // Si no és 'enviat', per defecte és 'rebut'
    
    // --- Assegurem que els camps que poden ser nuls es mantinguin ---
    sender_name: t.sender_name,
    subject: t.subject,
    preview: t.preview,
    contact_id: t.contact_id,
    body: t.body,
    contacts: t.contacts,
  };
}

// ... (la resta de tipus com templateSchema, activitySchema, etc. es mantenen iguals)
export const templateSchema = z.object({
  id: z.number(),
  name: z.string(),
  subject: z.string(),
  body: z.string(),
  variables: z.array(z.string()).nullable(),
});
export type Template = z.infer<typeof templateSchema>;

export const activitySchema = z.object({
    id: z.string(),
    created_at: z.string(),
    type: z.string(),
    content: z.string(),
    is_read: z.boolean(),
    contact_id: z.string().nullable(),
    contact_name: z.string().nullable(),
    contact_email: z.string().nullable(),
    contacts: z.object({ nom: z.string().nullable() }).nullable(),
});
export type Activity = z.infer<typeof activitySchema>;

// =================== FILE: src/types/comunicacio/SocialPost.ts ===================

// ✅ NOU: Tipus per a una publicació social, tal com la guardem a la base de dades.
export interface SocialPost {
  id: number;
  user_id: string;
  provider: string[];
  content: string | null;
  media_url: string | null;
  media_type: string | null;
  // ✅ NOU: Afegim 'partial_success' als estats possibles.
  status: 'draft' | 'scheduled' | 'published' | 'failed' | 'partial_success';
  scheduled_at: string | null;
  created_at: string;
}

// =================== FILE: src/types/crm/contacts.ts ===================

/**
 * @file src/types/crm/contacts.ts
 * @summary Defineix els tipus de dades per als Contactes i el Dashboard General del CRM.
 */

// Importem tipus d'altres mòduls a través del fitxer 'index.ts' per evitar errors de dependència circular.
import type { Activity, Quote, Opportunity, Invoice, Task , Notification } from './index';

// --- MAPA I TIPUS D'ESTAT DE CONTACTE ---

export const CONTACT_STATUS_MAP = [
  { code: 'L', key: 'Lead' },
  { code: 'P', key: 'Proveidor' },
  { code: 'C', key: 'Client' },
] as const;

type ContactStatusCode = typeof CONTACT_STATUS_MAP[number]['code'];

// --- TIPUS PRINCIPALS ---

export type Contact = {
  id: string;
  nom: string;
  empresa: string | null;
  created_at?: string;
  email?: string | null;
  telefon?: string | null;
  estat?: ContactStatusCode;
  valor?: number | null;
  user_id?: string;
  job_title?: string | null;
  industry?: string | null;
  lead_source?: string | null;
  birthday?: string | null;
  notes?: string | null;
  children_count?: number | null;
  partner_name?: string | null;
  hobbies?: string[] | null;
  address?: { city: string | null } | null;
  social_media?: { linkedin: string | null } | null;
  ubicacio?: string | null;
  last_interaction_at?: string | null;
  

};

// Tipus Mestre per a les dades relacionades d'un contacte
export type ContactRelatedData = {
    quotes: Quote[];
    opportunities: Opportunity[];
    invoices: Invoice[];
    activities: Activity[];
}

// Tipus mestre per a les dades del Dashboard General
export type CrmData = {
  stats: {
    totalContacts: number;
    newContactsThisMonth: number;
    opportunities: number;
    pipelineValue: number;
    avgRevenuePerClient: number;
    avgConversionTimeDays: number;
  };
  funnel: {
    leads: number;
    quoted: number;
    clients: number;
  };
  topClients: {
    id: string;
    nom: string;
    total_invoiced: number;
  }[];
  coldContacts: {
    id: string;
    nom: string;
    last_interaction_at: string;
  }[];
  bestMonths: {
    month: string;
    total: number;
  }[];
  unreadActivities: Activity[];
};

// Interfície per a les estadístiques principals del Dashboard
export interface DashboardStats {
  totalContacts: number;
  activeClients: number;
  opportunities: number;
  invoiced: number;
  pending: number;
  expenses: number;
  invoicedChange: string;
  expensesChange: string;
  invoicedIsPositive: boolean;
  expensesIsPositive: boolean;
}

// Interfície per al conjunt de dades inicials que el Dashboard rep
export interface DashboardInitialData {
  stats: DashboardStats;
  tasks: Task[]; // Assegura't que Task s'importi des de './index'
  contacts: Contact[];
  overdueInvoices: Invoice[];
  attentionContacts: Contact[];
  notifications: Notification[]; // ✅ Afegim el nou camp de notificacions
}

// =================== FILE: src/types/crm/general.ts ===================


// ✅ NOU: Tipus per a les dades inicials del diàleg de composició de correu
export type ComposeEmailData = {
  contactId: string;
  to: string;
  subject: string;
  body: string;
};
export type CompanyProfileObject = {
  id: string;
  user_id: string;
  company_name?: string | null;
  company_tax_id?: string | null;
  company_address?: string | null;
  company_email?: string | null;
  company_phone?: string | null;
  logo_url?: string | null;
};
// ✅ NOU: Definim i exportem el tipus per a una Tasca (Task)
export type Task = {
  id: string; // O number, depenent de la teva BD
  created_at: string;
  title: string;
  is_completed: boolean;
  contact_id: string | null;
  user_id: string;
  is_completed: boolean;
  contacts: { id: string; nom: string; } | null;

  // ✅ NOU CAMP: Pot ser un objecte Contact o null si no hi ha cap contacte associat.
  contacts: {
    id: string;
    nom: string;
  } | null;

  // ✅ NOUS CAMPS AFEGITS
  description: string | null;
  due_date: string | null; // El tipus 'date' de SQL es representa com a string (YYYY-MM-DD)
  priority: 'Baixa' | 'Mitjana' | 'Alta' | null;
};
export type CompanyProfile = CompanyProfileObject | null;

// =================== FILE: src/types/crm/index.ts ===================

/**
 * @file src/types/crm/index.ts
 * @summary Aquest és un "fitxer barril" que re-exporta tots els tipus del domini CRM.
 * Això permet que la resta de l'aplicació importi qualsevol tipus del CRM des d'un sol lloc,
 * mantenint l'organització interna en mòduls.
 * * @example
 * import type { Contact, Quote, Ticket } from '@/types/crm';
 */

export * from './contacts';
export * from './quotes';
export * from '../comunicacio/inbox';
export * from './general';
export * from './products';


// =================== FILE: src/types/crm/products.ts ===================

// Ja no necessitem definir el tipus 'Product' aquí, ja que ve del fitxer central.
// ✅ AFEGEIX L'EXPORTACIÓ DELS TIPUS AQUÍ
export type Product = {
  id: number;
  name: string;
  price: number;
  description: string | null;
  category: string | null;
  unit: string | null;
  iva: number | null;
  discount: number | null; // És una bona idea incloure tots els camps possibles
  is_active: boolean;
};

// =================== FILE: src/types/crm/quotes.ts ===================

/**
 * @file src/types/crm/quotes.ts
 * @summary Defineix els tipus de dades per a Pressupostos, Oportunitats, Factures i Pipeline.
 */



// --- MAPES I TIPUS D'ESTATS ---

export const PIPELINE_STAGES_MAP = [
  { name: 'Prospecte', key: 'prospect' },
  { name: 'Contactat', key: 'contacted' },
  { name: 'Proposta Enviada', key: 'proposalSent' },
  { name: 'Negociació', key: 'negotiation' },
  { name: 'Guanyat', key: 'won' },
  { name: 'Perdut', key: 'lost' },
] as const;
type PipelineStageName = typeof PIPELINE_STAGES_MAP[number]['name'];

export const QUOTE_STATUS_MAP = [
  { dbValue: 'Draft',    key: 'draft',    colorClass: 'bg-yellow-900/50 text-yellow-300' },
  { dbValue: 'Sent',     key: 'sent',     colorClass: 'bg-blue-900/50 text-blue-300' },
  { dbValue: 'Accepted', key: 'accepted', colorClass: 'bg-green-900/50 text-green-300' },
  { dbValue: 'Declined', key: 'declined', colorClass: 'bg-red-900/50 text-red-300' },
] as const;
type QuoteStatus = typeof QUOTE_STATUS_MAP[number]['dbValue'];

export const INVOICE_STATUS_MAP = [
  { dbValue: 'Draft',     key: 'draft' },
  { dbValue: 'Sent',      key: 'sent' },
  { dbValue: 'Paid',      key: 'paid' },
  { dbValue: 'Overdue',   key: 'overdue' },
  { dbValue: 'Cancelled', key: 'cancelled' },
] as const;
type InvoiceStatus = typeof INVOICE_STATUS_MAP[number]['dbValue'];

// --- TIPUS PRINCIPALS ---

export type QuoteItem = {
  id?: number;
  product_id: number | null;
  description: string;
  quantity: number;
  unit_price: number;
  user_id: string; // Added user_id property
  tax_rate: number;
  total: number;
};

export type Quote = {
  id: string | 'new';
  contact_id: string | null;
  opportunity_id?: number | null;
  quote_number: string;
  sequence_number: number; // ✅ Nova propietat per al número seqüencial
  issue_date: string;
  expiry_date?: string | null;
  status: QuoteStatus;
  notes: string | null;
  discount: number;
  subtotal: number;
  tax: number;
  tax_percent: number; // ✅ Afegeix la nova propietat
  total: number;
  sent_at?: string | null;
  items: QuoteItem[];
  user_id?: string;
  contacts?: { nom: string | null; } | null;
  secure_id?: string;
  show_quantity?: boolean; // ✅ AFEGEIX AQUESTA LÍNIA

};

export type Opportunity = { 
  id: string; 
  name: string; 
  stage_name: PipelineStageName;
  value: number | null;
  close_date?: string | null;
  description?: string | null;
  contact_id: string;
  contacts?: { id: string; nom: string | null; } | null;
};

export type Invoice = { 
  id: string; 
  invoice_number: string; 
  status: InvoiceStatus;
  total: number;
  contact_id: string;
  contacts?: { nom: string | null; } | null;
  due_date: string; // ✅ Ha de ser obligatori

};



// =================== FILE: src/types/declarations/index.ts ===================

export * from './mapbox';
export * from './prism';


// =================== FILE: src/types/declarations/mapbox.d.ts ===================

// mapbox.d.ts

declare module '@mapbox/search-js-react' {
    import * as React from 'react';
    import type { Geometry } from 'geojson'; // Tipus oficial GeoJSON
  
    export type MapboxContext = {
      id: string;
      name: string;
    };
  
    export type MapboxFeature = {
      geometry: Geometry; // ✅ Substituïm 'any' per GeoJSON.Geometry
      properties: {
        address: string;
        context?: MapboxContext[];
      };
    };
  
    export type MapboxRetrieveResponse = {
      features: MapboxFeature[];
    };
  
    export interface AddressAutofillProps {
      accessToken: string;
      onRetrieve?: (res: MapboxRetrieveResponse) => void;
      children?: React.ReactNode;
    }
  
    export const AddressAutofill: React.FC<AddressAutofillProps>;
  }
  

// =================== FILE: src/types/declarations/prism.d.ts ===================

// src/types/prism.d.ts

declare module 'prismjs/components/prism-core';
declare module 'prismjs/components/prism-clike';
declare module 'prismjs/components/prism-javascript';
declare module 'prismjs/components/prism-markup';

// =================== FILE: src/types/finances/despeses.ts ===================

/**
 * @file types.ts (Facturació)
 * @summary Fichero centralizado para las definiciones de tipos del módulo de facturación.
 */

// Mapa de datos para los estados de las facturas (base de datos -> UI)
export const INVOICE_STATUS_MAP = [
    { dbValue: 'Draft',   key: 'draft',   colorClass: 'bg-gray-500/10 text-gray-400 border border-gray-400/30' },
    { dbValue: 'Issued',  key: 'issued',  colorClass: 'bg-purple-500/10 text-purple-400 border border-purple-400/30' },
    { dbValue: 'Paid',    key: 'paid',    colorClass: 'bg-green-500/10 text-green-400 border border-green-400/30' },
    { dbValue: 'Overdue', key: 'overdue', colorClass: 'bg-red-500/10 text-red-400 border border-red-400/30' },
  ] as const;
  
  // Tipo seguro para los valores de estado en la base de datos
  type InvoiceStatus = typeof INVOICE_STATUS_MAP[number]['dbValue'];
  
  export type Contact = {
    id: string;
    nom: string;
  };
  
  export type InvoiceItem = {
    id?: string;
    description: string;
    quantity: number;
    unit_price: number;
    tax_rate?: number | null; // ✅ CANVIA AIXÒ
    product_id?: number; // ✅ AFEGEIX AQUESTA LÍNIA

  };
  
  export type Invoice = {
    id: string;
    user_id: string;
    contact_id: string;
    invoice_number: string | null;
    issue_date: string;
    due_date: string | null;
    status: InvoiceStatus;
    subtotal: number | null;
    tax_amount: number | null;
    total_amount: number | null;
    notes: string | null;
    created_at: string;
    company_name: string | null;
    client_name: string | null;
    contacts: Contact | null;
    invoice_items: InvoiceItem[];
  };

// =================== FILE: src/types/finances/factures.ts ===================

/**
 * @file types.ts (Despeses)
 * @summary Fichero centralizado para las definiciones de tipos del módulo de gastos.
 */

export type Supplier = { 
    id: string; 
    nom: string; 
  };
  
  export type ExpenseItem = { 
    description: string; 
    quantity: number; 
    unit_price: number; 
  };
  
  export type ExpenseAttachment = { 
    id: string; 
    file_path: string; 
    filename: string; 
    mime_type: string; 
  };
  
  export type Expense = {
    id: string;
    created_at: string;
    user_id: string;
    supplier_id: string | null;
    invoice_number: string | null;
    expense_date: string;
    category: string | null; // Podríamos aplicar el patrón de MAPA aquí en el futuro
    description: string;
    subtotal: number;
    total_amount: number;
    suppliers: Pick<Supplier, 'nom'> | null; // Solo necesitamos el nombre para la lista inicial
    expense_items: ExpenseItem[];
    expense_attachments: ExpenseAttachment[]; 
    notes?: string | null;
    discount_amount?: number | null;
    tax_rate?: number | null;
    tax_amount?: number | null;
  };

// =================== FILE: src/types/finances/index.ts ===================

export * from './despeses';
export * from './factures';
export * from './scheams';

// =================== FILE: src/types/finances/scheams.ts ===================

import { z } from 'zod';

// Definim aquí els esquemes, que seran la nostra font de veritat

export const expenseItemSchema = z.object({
  description: z.string().min(1, "La descripció de l'ítem és necessària."),
  quantity: z.number().min(0),
  unit_price: z.number().min(0),
  total: z.number().min(0),
});

export const expenseSchema = z.object({
  description: z.string().min(3, "La descripció ha de tenir almenys 3 caràcters."),
  total_amount: z.number().positive("L'import total ha de ser un número positiu."),
  expense_date: z.string().regex(/^\d{4}-\d{2}-\d{2}$/, "El format de la data ha de ser AAAA-MM-DD."),
  supplier_id: z.string().uuid("L'ID del proveïdor no és vàlid.").optional().nullable(),
  category: z.string().optional().nullable(),
  invoice_number: z.string().optional().nullable(),
  tax_amount: z.number().min(0).optional().nullable(),
  subtotal: z.number().min(0).optional().nullable(),
  discount_amount: z.number().min(0).optional().nullable(),
  notes: z.string().optional().nullable(),
  tax_rate: z.number().min(0).optional().nullable(),
  extra_data: z.any().optional().nullable(),
  expense_items: z.array(expenseItemSchema).optional(),
});

// Definim el tipus de TypeScript a partir de l'esquema per poder-lo reutilitzar
export type ExpenseFormData = z.infer<typeof expenseSchema>;

// =================== FILE: src/types/network/network.ts ===================

// types/network.ts
export interface PublicProfile {
  id: string;
  full_name: string | null; // ✅ AFEGIT: Camp que faltava
  company_name: string;
  logo_url: string | null;
  summary: string | null;
  services: string[] | null;
  website_url: string | null;
  latitude: number;
  longitude: number;
}

// =================== FILE: src/types/settings/blackListRule.ts ===================

/**
 * Defineix l'estructura d'una regla de la llista negra (blacklist)
 * tal com es guarda a la base de dades i s'utilitza a l'aplicació.
 */
export type BlacklistRule = {
  id: string;
  value: string;
  rule_type: 'email' | 'domain';
  created_at: string;
  user_id: string; // ID de l'usuari que va crear la regla
  team_id: string; // ID de l'equip al qual pertany la regla
};


// =================== FILE: src/types/settings/index.ts ===================


export * from './profiles';
export * from './team';
export * from './subscription';

// =================== FILE: src/types/settings/profiles.ts ===================

// Definim un tipus de dades estricte per a l'entrada de la funció
export type ProfileData = {
    full_name: string;
    company_name: string;
    summary: string;
    company_phone: string;
    services: string[];
    street: string;
    city: string;
    postal_code: string;
    region: string;
    country: string;
    latitude?: number;
    longitude?: number;
};

export type Profile = {
    id: string; // Coincideix amb auth.users.id
    full_name: string | null;
    phone: string | null;
    avatar_url: string | null;
    job_title: string | null;
    onboarding_completed: boolean;
};

// =================== FILE: src/types/settings/subscription.ts ===================

// /src/types/crm.ts (o on tinguis els teus tipus centrals)

/**
 * Representa les propietats VISUALS d'un pla de preus.
 * Aquesta és la informació que es mostra a la interfície.
 */
export type Plan = {
    id: string; // Ex: 'free', 'plus', 'premium'
    name: string;
    iconName: string;
    priceMonthly: number | null;
    priceYearly: number | null;
    description: string;
    features: string[];
    isPopular?: boolean;
    isCurrent?: boolean; // Aquesta propietat s'afegeix dinàmicament
    colors: { border: string; text: string; bg: string; hoverBg: string; }
};

/**
 * Representa la subscripció d'un EQUIP guardada a la base de dades.
 */
export type Subscription = {
    id: string;
    team_id: string;
    plan_id: string;
    status: 'active' | 'trialing' | 'canceled';
    current_period_end: string; // Data en format ISO string
    // ... altres camps de Stripe si els tens
};

// ... la resta dels teus tipus com Contact, Invoice, etc.

// =================== FILE: src/types/settings/team.ts ===================

import { Profile } from "./profiles";

/**
 * Representa les dades d'una EMPRESA o EQUIP.
 * Aquesta informació es mostra a factures, pressupostos, etc.
 */
export type Team = {
    id: string; // UUID de l'equip
    name: string; // Nom de l'empresa
    owner_id: string; // Qui és el propietari
    
    // Dades de contacte i fiscals
    tax_id: string | null;
    address: string | null;
    phone: string | null;
    email: string | null;
    website: string | null;
    logo_url: string | null;

    // Dades descriptives
    summary: string | null;
    sector: string | null;
    services: string[] | null; // Guardat com a JSONB a la base de dades

    // Dades d'adreça estructurada (si les tens separades)
    street?: string | null;
    city?: string | null;
    postal_code?: string | null;
    region?: string | null;
    country?: string | null;
    
    // Geolocalització
    latitude: number | null;
    longitude: number | null;
};

/**
 * Representa la relació entre un usuari i un equip.
 * Aquest tipus s'utilitza quan carreguem la llista de membres.
 */
export type TeamMember = {
    role: 'owner' | 'admin' | 'member';
    // Quan fem una consulta, podem incloure el perfil complet de l'usuari
    profiles: Pick<Profile, 'id' | 'full_name'> & { email: string | null };
};

/**
 * Representa una invitació pendent.
 */
export type Invitation = {
    id: string;
    email: string;
    role: string;
};

// Aquest tipus representa les dades tal com venen de la taula 'teams' de Supabase
export type TeamData = {
    id: string;
    name: string | null;
    tax_id: string | null;
    address: string | null;
    phone: string | null;
    email: string | null;
    logo_url: string | null;
    // afegeix altres camps de la taula 'teams' que necessitis
};

// Aquest tipus representa les dades tal com les esperen els components de React.
// És el format que volem obtenir DESPRÉS de mapejar les dades de 'teams'.
export type CompanyProfile = {
    id: string;
    user_id?: string; // El fem opcional per si no sempre hi és
    company_name: string | null;
    company_tax_id: string | null;
    company_address: string | null;
    company_email: string | null;
    company_phone: string | null;
    logo_url: string | null;
};

// =================== FILE: src/types/shared/actionResult.ts ===================

// En un fitxer de tipus compartit, com src/types/shared/index.ts

export type ActionResult<T = unknown> = {
    success: boolean;
    message: string;
    data?: T; // <-- Aquí està la clau. 'T' serà el tipus de les dades que retornem.
};

// =================== FILE: src/types/shared/address.ts ===================

export interface DetailedAddress {
  street: string;
  city: string;
  postcode: string;
  region: string;
  country: string;
  latitude: number | null;
  longitude: number | null;
}


// =================== FILE: src/types/shared/index.ts ===================

export * from './address';
export * from './notification';
export * from './actionResult';



// =================== FILE: src/types/shared/notification.ts ===================

export interface Notification {
    id: number;
    user_id: string;
    message: string;
    type?: string;
    is_read: boolean;
    created_at: string;
  }