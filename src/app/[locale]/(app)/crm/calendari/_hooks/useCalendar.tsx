// src/app/[locale]/(app)/crm/calendari/_hooks/useCalendar.tsx
'use client'; 
// üîπ Indiquem que √©s un component/client hook (necessari per React en entorns Next.js 13+)

// -----------------------------------------------------------------------------
// üì¶ IMPORTACIONS
// -----------------------------------------------------------------------------
import { useCallback } from 'react';       // Per memoritzar funcions i evitar re-renderitzats innecessaris
import { toast } from 'sonner';            // Llibreria per mostrar notificacions d‚Äôusuari
import { updateTaskDate } from '../actions'; // Acci√≥ del servidor per actualitzar la data d‚Äôuna tasca
import { CalendarEvent } from '@/types/crm'; // Tipus gen√®ric d‚Äôesdeveniment del calendari
import { EnrichedTaskForCalendar } from '../_components/CalendarData'; // Tipus espec√≠fic per a tasques

// -----------------------------------------------------------------------------
// üß† DESCRIPCI√ì GENERAL
// -----------------------------------------------------------------------------
// Aquest hook encapsula la l√≤gica de "Drag & Drop" per moure esdeveniments
// (ara mateix nom√©s tasques) dins el calendari.
// Quan una tasca es mou de dia, actualitza el seu due_date tant al frontend
// com al backend, gestionant errors i notificacions d‚Äôusuari.
// -----------------------------------------------------------------------------

export default function useCalendar(
  tasks: EnrichedTaskForCalendar[],                      // üî∏ Llista actual de tasques mostrades al calendari
  onTaskMove: (taskId: number, newDueDate: string) => void // üî∏ Callback per actualitzar el frontend de manera optimista
) {

  // ---------------------------------------------------------------------------
  // üéØ handleMoveEvent
  // ---------------------------------------------------------------------------
  // Aquesta funci√≥ es crida quan l‚Äôusuari arrossega una tasca a una nova data.
  // Actualitza la data tant al frontend (optimista) com al backend (definitiu).
  // ---------------------------------------------------------------------------

  const handleMoveEvent = useCallback(async ({ event, start }: { event: CalendarEvent, start: string | Date }) => {
    // üß† Nom√©s tractem esdeveniments de tipus "tasca"
    if (event.eventType !== 'task') return;
    
    // üîç Extraiem l‚ÄôID de la tasca: pot venir amb prefix (‚Äútask-‚Äù), aix√≠ que el netegem
    const taskId = Number(String(event.id).replace('task-', ''));

    // üïì Convertim la nova data d‚Äôinici a format ISO per coher√®ncia amb el backend
    const newDueDate = new Date(start).toISOString();

    // üîé Busquem la tasca original (per poder fer un revert si falla)
    const originalTask = tasks.find(t => t.id === taskId);
    if (!originalTask) return; // Si no la trobem, parem aqu√≠

    // -------------------------------------------------------------------------
    // üß© ACTUALITZACI√ì OPTIMISTA
    // -------------------------------------------------------------------------
    // Actualitzem el frontend immediatament per donar sensaci√≥ de flu√Ødesa.
    // Si despr√©s hi ha error de servidor, revertirem la data.
    onTaskMove(taskId, newDueDate);

    // -------------------------------------------------------------------------
    // ‚öôÔ∏è ACTUALITZACI√ì REAL AL BACKEND
    // -------------------------------------------------------------------------
    const result = await updateTaskDate(taskId, newDueDate);

    // -------------------------------------------------------------------------
    // üßØ GESTI√ì D'ERRORS I FEEDBACK A L‚ÄôUSUARI
    // -------------------------------------------------------------------------
    if (result.error) {
        // ‚ùå Si el servidor respon amb error, mostrem toast i revertim la data
        toast.error("Error en actualitzar la data.", { description: result.error.db });
        onTaskMove(taskId, originalTask.due_date!);
    } else {
        // ‚úÖ Si tot va b√©, mostrem confirmaci√≥ d‚Äô√®xit
        toast.success("Tasca actualitzada correctament.");
    }

  // üß© Depend√®ncies: nom√©s canvia si canvien les tasques o la funci√≥ de moviment
  }, [tasks, onTaskMove]);

  // ---------------------------------------------------------------------------
  // üì§ RETORN DEL HOOK
  // ---------------------------------------------------------------------------
  // Exposem nom√©s la funci√≥ principal, ja que la resta √©s interna.
  // El component que utilitza el calendari (ex: CalendarClient) la rebr√†
  // i la passar√† al component de calendari com a handler d‚Äô‚ÄúonEventDrop‚Äù.
  // ---------------------------------------------------------------------------
  return { handleMoveEvent };
}
